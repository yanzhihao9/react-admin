// Generated from /Users/zhihaoyan/IdeaProjects/grammars-v4/sql/mysql/Positive-Technologies/MySqlParser.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols

import {
	ATN,
	ATNDeserializer, DecisionState, DFA, FailedPredicateException,
	RecognitionException, NoViableAltException, BailErrorStrategy,
	Parser, ParserATNSimulator,
	RuleContext, ParserRuleContext, PredictionMode, PredictionContextCache,
	TerminalNode, RuleNode,
	Token, TokenStream,
	Interval, IntervalSet
} from 'antlr4';
import MySqlParserListener from "./MySqlParserListener.js";
import MySqlParserVisitor from "./MySqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;

export default class MySqlParser extends Parser {
	public static readonly SPACE = 1;
	public static readonly SPEC_MYSQL_COMMENT = 2;
	public static readonly COMMENT_INPUT = 3;
	public static readonly LINE_COMMENT = 4;
	public static readonly ADD = 5;
	public static readonly ALL = 6;
	public static readonly ALTER = 7;
	public static readonly ALWAYS = 8;
	public static readonly ANALYZE = 9;
	public static readonly AND = 10;
	public static readonly ARRAY = 11;
	public static readonly AS = 12;
	public static readonly ASC = 13;
	public static readonly ATTRIBUTE = 14;
	public static readonly BEFORE = 15;
	public static readonly BETWEEN = 16;
	public static readonly BOTH = 17;
	public static readonly BUCKETS = 18;
	public static readonly BY = 19;
	public static readonly CALL = 20;
	public static readonly CASCADE = 21;
	public static readonly CASE = 22;
	public static readonly CAST = 23;
	public static readonly CHANGE = 24;
	public static readonly CHARACTER = 25;
	public static readonly CHECK = 26;
	public static readonly COLLATE = 27;
	public static readonly COLUMN = 28;
	public static readonly CONDITION = 29;
	public static readonly CONSTRAINT = 30;
	public static readonly CONTINUE = 31;
	public static readonly CONVERT = 32;
	public static readonly CREATE = 33;
	public static readonly CROSS = 34;
	public static readonly CURRENT = 35;
	public static readonly CURRENT_ROLE = 36;
	public static readonly CURRENT_USER = 37;
	public static readonly CURSOR = 38;
	public static readonly DATABASE = 39;
	public static readonly DATABASES = 40;
	public static readonly DECLARE = 41;
	public static readonly DEFAULT = 42;
	public static readonly DELAYED = 43;
	public static readonly DELETE = 44;
	public static readonly DESC = 45;
	public static readonly DESCRIBE = 46;
	public static readonly DETERMINISTIC = 47;
	public static readonly DIAGNOSTICS = 48;
	public static readonly DISTINCT = 49;
	public static readonly DISTINCTROW = 50;
	public static readonly DROP = 51;
	public static readonly EACH = 52;
	public static readonly ELSE = 53;
	public static readonly ELSEIF = 54;
	public static readonly EMPTY = 55;
	public static readonly ENCLOSED = 56;
	public static readonly ENFORCED = 57;
	public static readonly ESCAPED = 58;
	public static readonly EXCEPT = 59;
	public static readonly EXISTS = 60;
	public static readonly EXIT = 61;
	public static readonly EXPLAIN = 62;
	public static readonly FALSE = 63;
	public static readonly FETCH = 64;
	public static readonly FOR = 65;
	public static readonly FORCE = 66;
	public static readonly FOREIGN = 67;
	public static readonly FROM = 68;
	public static readonly FULLTEXT = 69;
	public static readonly GENERATED = 70;
	public static readonly GET = 71;
	public static readonly GRANT = 72;
	public static readonly GROUP = 73;
	public static readonly HAVING = 74;
	public static readonly HIGH_PRIORITY = 75;
	public static readonly HISTOGRAM = 76;
	public static readonly IF = 77;
	public static readonly IGNORE = 78;
	public static readonly IGNORED = 79;
	public static readonly IN = 80;
	public static readonly INDEX = 81;
	public static readonly INFILE = 82;
	public static readonly INNER = 83;
	public static readonly INOUT = 84;
	public static readonly INSERT = 85;
	public static readonly INTERVAL = 86;
	public static readonly INTO = 87;
	public static readonly IS = 88;
	public static readonly ITERATE = 89;
	public static readonly JOIN = 90;
	public static readonly KEY = 91;
	public static readonly KEYS = 92;
	public static readonly KILL = 93;
	public static readonly LATERAL = 94;
	public static readonly LEADING = 95;
	public static readonly LEAVE = 96;
	public static readonly LEFT = 97;
	public static readonly LIKE = 98;
	public static readonly LIMIT = 99;
	public static readonly LINEAR = 100;
	public static readonly LINES = 101;
	public static readonly LOAD = 102;
	public static readonly LOCK = 103;
	public static readonly LOCKED = 104;
	public static readonly LOOP = 105;
	public static readonly LOW_PRIORITY = 106;
	public static readonly MASTER_BIND = 107;
	public static readonly MASTER_SSL_VERIFY_SERVER_CERT = 108;
	public static readonly MATCH = 109;
	public static readonly MAXVALUE = 110;
	public static readonly MINVALUE = 111;
	public static readonly MODIFIES = 112;
	public static readonly NATURAL = 113;
	public static readonly NOT = 114;
	public static readonly NO_WRITE_TO_BINLOG = 115;
	public static readonly NULL_LITERAL = 116;
	public static readonly NUMBER = 117;
	public static readonly ON = 118;
	public static readonly OPTIMIZE = 119;
	public static readonly OPTION = 120;
	public static readonly OPTIONAL = 121;
	public static readonly OPTIONALLY = 122;
	public static readonly OR = 123;
	public static readonly ORDER = 124;
	public static readonly OUT = 125;
	public static readonly OUTER = 126;
	public static readonly OUTFILE = 127;
	public static readonly OVER = 128;
	public static readonly PARTITION = 129;
	public static readonly PRIMARY = 130;
	public static readonly PROCEDURE = 131;
	public static readonly PURGE = 132;
	public static readonly RANGE = 133;
	public static readonly READ = 134;
	public static readonly READS = 135;
	public static readonly REFERENCES = 136;
	public static readonly REGEXP = 137;
	public static readonly RELEASE = 138;
	public static readonly RENAME = 139;
	public static readonly REPEAT = 140;
	public static readonly REPLACE = 141;
	public static readonly REQUIRE = 142;
	public static readonly RESIGNAL = 143;
	public static readonly RESTRICT = 144;
	public static readonly RETAIN = 145;
	public static readonly RETURN = 146;
	public static readonly REVOKE = 147;
	public static readonly RIGHT = 148;
	public static readonly RLIKE = 149;
	public static readonly SCHEMA = 150;
	public static readonly SCHEMAS = 151;
	public static readonly SELECT = 152;
	public static readonly SET = 153;
	public static readonly SEPARATOR = 154;
	public static readonly SHOW = 155;
	public static readonly SIGNAL = 156;
	public static readonly SKIP_ = 157;
	public static readonly SKIP_QUERY_REWRITE = 158;
	public static readonly SPATIAL = 159;
	public static readonly SQL = 160;
	public static readonly SQLEXCEPTION = 161;
	public static readonly SQLSTATE = 162;
	public static readonly SQLWARNING = 163;
	public static readonly SQL_BIG_RESULT = 164;
	public static readonly SQL_CALC_FOUND_ROWS = 165;
	public static readonly SQL_SMALL_RESULT = 166;
	public static readonly SSL = 167;
	public static readonly STACKED = 168;
	public static readonly STARTING = 169;
	public static readonly STATEMENT = 170;
	public static readonly STRAIGHT_JOIN = 171;
	public static readonly TABLE = 172;
	public static readonly TERMINATED = 173;
	public static readonly THEN = 174;
	public static readonly TO = 175;
	public static readonly TRAILING = 176;
	public static readonly TRIGGER = 177;
	public static readonly TRUE = 178;
	public static readonly UNDO = 179;
	public static readonly UNION = 180;
	public static readonly UNIQUE = 181;
	public static readonly UNLOCK = 182;
	public static readonly UNSIGNED = 183;
	public static readonly UPDATE = 184;
	public static readonly USAGE = 185;
	public static readonly USE = 186;
	public static readonly USING = 187;
	public static readonly VALUES = 188;
	public static readonly WHEN = 189;
	public static readonly WHERE = 190;
	public static readonly WHILE = 191;
	public static readonly WITH = 192;
	public static readonly WRITE = 193;
	public static readonly XOR = 194;
	public static readonly ZEROFILL = 195;
	public static readonly TINYINT = 196;
	public static readonly SMALLINT = 197;
	public static readonly MEDIUMINT = 198;
	public static readonly MIDDLEINT = 199;
	public static readonly INT = 200;
	public static readonly INT1 = 201;
	public static readonly INT2 = 202;
	public static readonly INT3 = 203;
	public static readonly INT4 = 204;
	public static readonly INT8 = 205;
	public static readonly INTEGER = 206;
	public static readonly BIGINT = 207;
	public static readonly REAL = 208;
	public static readonly DOUBLE = 209;
	public static readonly PRECISION = 210;
	public static readonly FLOAT = 211;
	public static readonly FLOAT4 = 212;
	public static readonly FLOAT8 = 213;
	public static readonly DECIMAL = 214;
	public static readonly DEC = 215;
	public static readonly NUMERIC = 216;
	public static readonly DATE = 217;
	public static readonly TIME = 218;
	public static readonly TIMESTAMP = 219;
	public static readonly DATETIME = 220;
	public static readonly YEAR = 221;
	public static readonly CHAR = 222;
	public static readonly VARCHAR = 223;
	public static readonly NVARCHAR = 224;
	public static readonly NATIONAL = 225;
	public static readonly BINARY = 226;
	public static readonly VARBINARY = 227;
	public static readonly TINYBLOB = 228;
	public static readonly BLOB = 229;
	public static readonly MEDIUMBLOB = 230;
	public static readonly LONG = 231;
	public static readonly LONGBLOB = 232;
	public static readonly TINYTEXT = 233;
	public static readonly TEXT = 234;
	public static readonly MEDIUMTEXT = 235;
	public static readonly LONGTEXT = 236;
	public static readonly ENUM = 237;
	public static readonly VARYING = 238;
	public static readonly SERIAL = 239;
	public static readonly YEAR_MONTH = 240;
	public static readonly DAY_HOUR = 241;
	public static readonly DAY_MINUTE = 242;
	public static readonly DAY_SECOND = 243;
	public static readonly HOUR_MINUTE = 244;
	public static readonly HOUR_SECOND = 245;
	public static readonly MINUTE_SECOND = 246;
	public static readonly SECOND_MICROSECOND = 247;
	public static readonly MINUTE_MICROSECOND = 248;
	public static readonly HOUR_MICROSECOND = 249;
	public static readonly DAY_MICROSECOND = 250;
	public static readonly JSON_ARRAY = 251;
	public static readonly JSON_ARRAYAGG = 252;
	public static readonly JSON_ARRAY_APPEND = 253;
	public static readonly JSON_ARRAY_INSERT = 254;
	public static readonly JSON_CONTAINS = 255;
	public static readonly JSON_CONTAINS_PATH = 256;
	public static readonly JSON_DEPTH = 257;
	public static readonly JSON_EXTRACT = 258;
	public static readonly JSON_INSERT = 259;
	public static readonly JSON_KEYS = 260;
	public static readonly JSON_LENGTH = 261;
	public static readonly JSON_MERGE = 262;
	public static readonly JSON_MERGE_PATCH = 263;
	public static readonly JSON_MERGE_PRESERVE = 264;
	public static readonly JSON_OBJECT = 265;
	public static readonly JSON_OBJECTAGG = 266;
	public static readonly JSON_OVERLAPS = 267;
	public static readonly JSON_PRETTY = 268;
	public static readonly JSON_QUOTE = 269;
	public static readonly JSON_REMOVE = 270;
	public static readonly JSON_REPLACE = 271;
	public static readonly JSON_SCHEMA_VALID = 272;
	public static readonly JSON_SCHEMA_VALIDATION_REPORT = 273;
	public static readonly JSON_SEARCH = 274;
	public static readonly JSON_SET = 275;
	public static readonly JSON_STORAGE_FREE = 276;
	public static readonly JSON_STORAGE_SIZE = 277;
	public static readonly JSON_TABLE = 278;
	public static readonly JSON_TYPE = 279;
	public static readonly JSON_UNQUOTE = 280;
	public static readonly JSON_VALID = 281;
	public static readonly JSON_VALUE = 282;
	public static readonly NESTED = 283;
	public static readonly ORDINALITY = 284;
	public static readonly PATH = 285;
	public static readonly AVG = 286;
	public static readonly BIT_AND = 287;
	public static readonly BIT_OR = 288;
	public static readonly BIT_XOR = 289;
	public static readonly COUNT = 290;
	public static readonly CUME_DIST = 291;
	public static readonly DENSE_RANK = 292;
	public static readonly FIRST_VALUE = 293;
	public static readonly GROUP_CONCAT = 294;
	public static readonly LAG = 295;
	public static readonly LAST_VALUE = 296;
	public static readonly LEAD = 297;
	public static readonly MAX = 298;
	public static readonly MIN = 299;
	public static readonly NTILE = 300;
	public static readonly NTH_VALUE = 301;
	public static readonly PERCENT_RANK = 302;
	public static readonly RANK = 303;
	public static readonly ROW_NUMBER = 304;
	public static readonly STD = 305;
	public static readonly STDDEV = 306;
	public static readonly STDDEV_POP = 307;
	public static readonly STDDEV_SAMP = 308;
	public static readonly SUM = 309;
	public static readonly VAR_POP = 310;
	public static readonly VAR_SAMP = 311;
	public static readonly VARIANCE = 312;
	public static readonly CURRENT_DATE = 313;
	public static readonly CURRENT_TIME = 314;
	public static readonly CURRENT_TIMESTAMP = 315;
	public static readonly LOCALTIME = 316;
	public static readonly CURDATE = 317;
	public static readonly CURTIME = 318;
	public static readonly DATE_ADD = 319;
	public static readonly DATE_SUB = 320;
	public static readonly EXTRACT = 321;
	public static readonly LOCALTIMESTAMP = 322;
	public static readonly NOW = 323;
	public static readonly POSITION = 324;
	public static readonly SUBSTR = 325;
	public static readonly SUBSTRING = 326;
	public static readonly SYSDATE = 327;
	public static readonly TRIM = 328;
	public static readonly UTC_DATE = 329;
	public static readonly UTC_TIME = 330;
	public static readonly UTC_TIMESTAMP = 331;
	public static readonly ACCOUNT = 332;
	public static readonly ACTION = 333;
	public static readonly AFTER = 334;
	public static readonly AGGREGATE = 335;
	public static readonly ALGORITHM = 336;
	public static readonly ANY = 337;
	public static readonly AT = 338;
	public static readonly AUTHORS = 339;
	public static readonly AUTOCOMMIT = 340;
	public static readonly AUTOEXTEND_SIZE = 341;
	public static readonly AUTO_INCREMENT = 342;
	public static readonly AVG_ROW_LENGTH = 343;
	public static readonly BEGIN = 344;
	public static readonly BINLOG = 345;
	public static readonly BIT = 346;
	public static readonly BLOCK = 347;
	public static readonly BOOL = 348;
	public static readonly BOOLEAN = 349;
	public static readonly BTREE = 350;
	public static readonly CACHE = 351;
	public static readonly CASCADED = 352;
	public static readonly CHAIN = 353;
	public static readonly CHANGED = 354;
	public static readonly CHANNEL = 355;
	public static readonly CHECKSUM = 356;
	public static readonly PAGE_CHECKSUM = 357;
	public static readonly CIPHER = 358;
	public static readonly CLASS_ORIGIN = 359;
	public static readonly CLIENT = 360;
	public static readonly CLOSE = 361;
	public static readonly CLUSTERING = 362;
	public static readonly COALESCE = 363;
	public static readonly CODE = 364;
	public static readonly COLUMNS = 365;
	public static readonly COLUMN_FORMAT = 366;
	public static readonly COLUMN_NAME = 367;
	public static readonly COMMENT = 368;
	public static readonly COMMIT = 369;
	public static readonly COMPACT = 370;
	public static readonly COMPLETION = 371;
	public static readonly COMPRESSED = 372;
	public static readonly COMPRESSION = 373;
	public static readonly CONCURRENT = 374;
	public static readonly CONNECT = 375;
	public static readonly CONNECTION = 376;
	public static readonly CONSISTENT = 377;
	public static readonly CONSTRAINT_CATALOG = 378;
	public static readonly CONSTRAINT_SCHEMA = 379;
	public static readonly CONSTRAINT_NAME = 380;
	public static readonly CONTAINS = 381;
	public static readonly CONTEXT = 382;
	public static readonly CONTRIBUTORS = 383;
	public static readonly COPY = 384;
	public static readonly CPU = 385;
	public static readonly CYCLE = 386;
	public static readonly CURSOR_NAME = 387;
	public static readonly DATA = 388;
	public static readonly DATAFILE = 389;
	public static readonly DEALLOCATE = 390;
	public static readonly DEFAULT_AUTH = 391;
	public static readonly DEFINER = 392;
	public static readonly DELAY_KEY_WRITE = 393;
	public static readonly DES_KEY_FILE = 394;
	public static readonly DIRECTORY = 395;
	public static readonly DISABLE = 396;
	public static readonly DISCARD = 397;
	public static readonly DISK = 398;
	public static readonly DO = 399;
	public static readonly DUMPFILE = 400;
	public static readonly DUPLICATE = 401;
	public static readonly DYNAMIC = 402;
	public static readonly ENABLE = 403;
	public static readonly ENCRYPTED = 404;
	public static readonly ENCRYPTION = 405;
	public static readonly ENCRYPTION_KEY_ID = 406;
	public static readonly END = 407;
	public static readonly ENDS = 408;
	public static readonly ENGINE = 409;
	public static readonly ENGINES = 410;
	public static readonly ERROR = 411;
	public static readonly ERRORS = 412;
	public static readonly ESCAPE = 413;
	public static readonly EVEN = 414;
	public static readonly EVENT = 415;
	public static readonly EVENTS = 416;
	public static readonly EVERY = 417;
	public static readonly EXCHANGE = 418;
	public static readonly EXCLUSIVE = 419;
	public static readonly EXPIRE = 420;
	public static readonly EXPORT = 421;
	public static readonly EXTENDED = 422;
	public static readonly EXTENT_SIZE = 423;
	public static readonly FAILED_LOGIN_ATTEMPTS = 424;
	public static readonly FAST = 425;
	public static readonly FAULTS = 426;
	public static readonly FIELDS = 427;
	public static readonly FILE_BLOCK_SIZE = 428;
	public static readonly FILTER = 429;
	public static readonly FIRST = 430;
	public static readonly FIXED = 431;
	public static readonly FLUSH = 432;
	public static readonly FOLLOWING = 433;
	public static readonly FOLLOWS = 434;
	public static readonly FOUND = 435;
	public static readonly FULL = 436;
	public static readonly FUNCTION = 437;
	public static readonly GENERAL = 438;
	public static readonly GLOBAL = 439;
	public static readonly GRANTS = 440;
	public static readonly GROUP_REPLICATION = 441;
	public static readonly HANDLER = 442;
	public static readonly HASH = 443;
	public static readonly HELP = 444;
	public static readonly HISTORY = 445;
	public static readonly HOST = 446;
	public static readonly HOSTS = 447;
	public static readonly IDENTIFIED = 448;
	public static readonly IGNORE_SERVER_IDS = 449;
	public static readonly IMPORT = 450;
	public static readonly INCREMENT = 451;
	public static readonly INDEXES = 452;
	public static readonly INITIAL_SIZE = 453;
	public static readonly INPLACE = 454;
	public static readonly INSERT_METHOD = 455;
	public static readonly INSTALL = 456;
	public static readonly INSTANCE = 457;
	public static readonly INSTANT = 458;
	public static readonly INVISIBLE = 459;
	public static readonly INVOKER = 460;
	public static readonly IO = 461;
	public static readonly IO_THREAD = 462;
	public static readonly IPC = 463;
	public static readonly ISOLATION = 464;
	public static readonly ISSUER = 465;
	public static readonly JSON = 466;
	public static readonly KEY_BLOCK_SIZE = 467;
	public static readonly LANGUAGE = 468;
	public static readonly LAST = 469;
	public static readonly LEAVES = 470;
	public static readonly LESS = 471;
	public static readonly LEVEL = 472;
	public static readonly LIST = 473;
	public static readonly LOCAL = 474;
	public static readonly LOGFILE = 475;
	public static readonly LOGS = 476;
	public static readonly MASTER = 477;
	public static readonly MASTER_AUTO_POSITION = 478;
	public static readonly MASTER_CONNECT_RETRY = 479;
	public static readonly MASTER_DELAY = 480;
	public static readonly MASTER_HEARTBEAT_PERIOD = 481;
	public static readonly MASTER_HOST = 482;
	public static readonly MASTER_LOG_FILE = 483;
	public static readonly MASTER_LOG_POS = 484;
	public static readonly MASTER_PASSWORD = 485;
	public static readonly MASTER_PORT = 486;
	public static readonly MASTER_RETRY_COUNT = 487;
	public static readonly MASTER_SSL = 488;
	public static readonly MASTER_SSL_CA = 489;
	public static readonly MASTER_SSL_CAPATH = 490;
	public static readonly MASTER_SSL_CERT = 491;
	public static readonly MASTER_SSL_CIPHER = 492;
	public static readonly MASTER_SSL_CRL = 493;
	public static readonly MASTER_SSL_CRLPATH = 494;
	public static readonly MASTER_SSL_KEY = 495;
	public static readonly MASTER_TLS_VERSION = 496;
	public static readonly MASTER_USER = 497;
	public static readonly MAX_CONNECTIONS_PER_HOUR = 498;
	public static readonly MAX_QUERIES_PER_HOUR = 499;
	public static readonly MAX_ROWS = 500;
	public static readonly MAX_SIZE = 501;
	public static readonly MAX_UPDATES_PER_HOUR = 502;
	public static readonly MAX_USER_CONNECTIONS = 503;
	public static readonly MEDIUM = 504;
	public static readonly MEMBER = 505;
	public static readonly MERGE = 506;
	public static readonly MESSAGE_TEXT = 507;
	public static readonly MID = 508;
	public static readonly MIGRATE = 509;
	public static readonly MIN_ROWS = 510;
	public static readonly MODE = 511;
	public static readonly MODIFY = 512;
	public static readonly MUTEX = 513;
	public static readonly MYSQL = 514;
	public static readonly MYSQL_ERRNO = 515;
	public static readonly NAME = 516;
	public static readonly NAMES = 517;
	public static readonly NCHAR = 518;
	public static readonly NEVER = 519;
	public static readonly NEXT = 520;
	public static readonly NO = 521;
	public static readonly NOCACHE = 522;
	public static readonly NOCOPY = 523;
	public static readonly NOCYCLE = 524;
	public static readonly NOMAXVALUE = 525;
	public static readonly NOMINVALUE = 526;
	public static readonly NOWAIT = 527;
	public static readonly NODEGROUP = 528;
	public static readonly NONE = 529;
	public static readonly ODBC = 530;
	public static readonly OFFLINE = 531;
	public static readonly OFFSET = 532;
	public static readonly OF = 533;
	public static readonly OJ = 534;
	public static readonly OLD_PASSWORD = 535;
	public static readonly ONE = 536;
	public static readonly ONLINE = 537;
	public static readonly ONLY = 538;
	public static readonly OPEN = 539;
	public static readonly OPTIMIZER_COSTS = 540;
	public static readonly OPTIONS = 541;
	public static readonly OWNER = 542;
	public static readonly PACK_KEYS = 543;
	public static readonly PAGE = 544;
	public static readonly PAGE_COMPRESSED = 545;
	public static readonly PAGE_COMPRESSION_LEVEL = 546;
	public static readonly PARSER = 547;
	public static readonly PARTIAL = 548;
	public static readonly PARTITIONING = 549;
	public static readonly PARTITIONS = 550;
	public static readonly PASSWORD = 551;
	public static readonly PASSWORD_LOCK_TIME = 552;
	public static readonly PHASE = 553;
	public static readonly PLUGIN = 554;
	public static readonly PLUGIN_DIR = 555;
	public static readonly PLUGINS = 556;
	public static readonly PORT = 557;
	public static readonly PRECEDES = 558;
	public static readonly PRECEDING = 559;
	public static readonly PREPARE = 560;
	public static readonly PRESERVE = 561;
	public static readonly PREV = 562;
	public static readonly PROCESSLIST = 563;
	public static readonly PROFILE = 564;
	public static readonly PROFILES = 565;
	public static readonly PROXY = 566;
	public static readonly QUERY = 567;
	public static readonly QUICK = 568;
	public static readonly REBUILD = 569;
	public static readonly RECOVER = 570;
	public static readonly RECURSIVE = 571;
	public static readonly REDO_BUFFER_SIZE = 572;
	public static readonly REDUNDANT = 573;
	public static readonly RELAY = 574;
	public static readonly RELAY_LOG_FILE = 575;
	public static readonly RELAY_LOG_POS = 576;
	public static readonly RELAYLOG = 577;
	public static readonly REMOVE = 578;
	public static readonly REORGANIZE = 579;
	public static readonly REPAIR = 580;
	public static readonly REPLICATE_DO_DB = 581;
	public static readonly REPLICATE_DO_TABLE = 582;
	public static readonly REPLICATE_IGNORE_DB = 583;
	public static readonly REPLICATE_IGNORE_TABLE = 584;
	public static readonly REPLICATE_REWRITE_DB = 585;
	public static readonly REPLICATE_WILD_DO_TABLE = 586;
	public static readonly REPLICATE_WILD_IGNORE_TABLE = 587;
	public static readonly REPLICATION = 588;
	public static readonly RESET = 589;
	public static readonly RESTART = 590;
	public static readonly RESUME = 591;
	public static readonly RETURNED_SQLSTATE = 592;
	public static readonly RETURNING = 593;
	public static readonly RETURNS = 594;
	public static readonly REUSE = 595;
	public static readonly ROLE = 596;
	public static readonly ROLLBACK = 597;
	public static readonly ROLLUP = 598;
	public static readonly ROTATE = 599;
	public static readonly ROW = 600;
	public static readonly ROWS = 601;
	public static readonly ROW_FORMAT = 602;
	public static readonly RTREE = 603;
	public static readonly SAVEPOINT = 604;
	public static readonly SCHEDULE = 605;
	public static readonly SECURITY = 606;
	public static readonly SEQUENCE = 607;
	public static readonly SERVER = 608;
	public static readonly SESSION = 609;
	public static readonly SHARE = 610;
	public static readonly SHARED = 611;
	public static readonly SIGNED = 612;
	public static readonly SIMPLE = 613;
	public static readonly SLAVE = 614;
	public static readonly SLOW = 615;
	public static readonly SNAPSHOT = 616;
	public static readonly SOCKET = 617;
	public static readonly SOME = 618;
	public static readonly SONAME = 619;
	public static readonly SOUNDS = 620;
	public static readonly SOURCE = 621;
	public static readonly SQL_AFTER_GTIDS = 622;
	public static readonly SQL_AFTER_MTS_GAPS = 623;
	public static readonly SQL_BEFORE_GTIDS = 624;
	public static readonly SQL_BUFFER_RESULT = 625;
	public static readonly SQL_CACHE = 626;
	public static readonly SQL_NO_CACHE = 627;
	public static readonly SQL_THREAD = 628;
	public static readonly START = 629;
	public static readonly STARTS = 630;
	public static readonly STATS_AUTO_RECALC = 631;
	public static readonly STATS_PERSISTENT = 632;
	public static readonly STATS_SAMPLE_PAGES = 633;
	public static readonly STATUS = 634;
	public static readonly STOP = 635;
	public static readonly STORAGE = 636;
	public static readonly STORED = 637;
	public static readonly STRING = 638;
	public static readonly SUBCLASS_ORIGIN = 639;
	public static readonly SUBJECT = 640;
	public static readonly SUBPARTITION = 641;
	public static readonly SUBPARTITIONS = 642;
	public static readonly SUSPEND = 643;
	public static readonly SWAPS = 644;
	public static readonly SWITCHES = 645;
	public static readonly TABLE_NAME = 646;
	public static readonly TABLESPACE = 647;
	public static readonly TABLE_TYPE = 648;
	public static readonly TEMPORARY = 649;
	public static readonly TEMPTABLE = 650;
	public static readonly THAN = 651;
	public static readonly TRADITIONAL = 652;
	public static readonly TRANSACTION = 653;
	public static readonly TRANSACTIONAL = 654;
	public static readonly TRIGGERS = 655;
	public static readonly TRUNCATE = 656;
	public static readonly UNBOUNDED = 657;
	public static readonly UNDEFINED = 658;
	public static readonly UNDOFILE = 659;
	public static readonly UNDO_BUFFER_SIZE = 660;
	public static readonly UNINSTALL = 661;
	public static readonly UNKNOWN = 662;
	public static readonly UNTIL = 663;
	public static readonly UPGRADE = 664;
	public static readonly USER = 665;
	public static readonly USE_FRM = 666;
	public static readonly USER_RESOURCES = 667;
	public static readonly VALIDATION = 668;
	public static readonly VALUE = 669;
	public static readonly VARIABLES = 670;
	public static readonly VIEW = 671;
	public static readonly VIRTUAL = 672;
	public static readonly VISIBLE = 673;
	public static readonly WAIT = 674;
	public static readonly WARNINGS = 675;
	public static readonly WINDOW = 676;
	public static readonly WITHOUT = 677;
	public static readonly WORK = 678;
	public static readonly WRAPPER = 679;
	public static readonly X509 = 680;
	public static readonly XA = 681;
	public static readonly XML = 682;
	public static readonly YES = 683;
	public static readonly EUR = 684;
	public static readonly USA = 685;
	public static readonly JIS = 686;
	public static readonly ISO = 687;
	public static readonly INTERNAL = 688;
	public static readonly QUARTER = 689;
	public static readonly MONTH = 690;
	public static readonly DAY = 691;
	public static readonly HOUR = 692;
	public static readonly MINUTE = 693;
	public static readonly WEEK = 694;
	public static readonly SECOND = 695;
	public static readonly MICROSECOND = 696;
	public static readonly ADMIN = 697;
	public static readonly APPLICATION_PASSWORD_ADMIN = 698;
	public static readonly AUDIT_ABORT_EXEMPT = 699;
	public static readonly AUDIT_ADMIN = 700;
	public static readonly AUTHENTICATION_POLICY_ADMIN = 701;
	public static readonly BACKUP_ADMIN = 702;
	public static readonly BINLOG_ADMIN = 703;
	public static readonly BINLOG_ENCRYPTION_ADMIN = 704;
	public static readonly CLONE_ADMIN = 705;
	public static readonly CONNECTION_ADMIN = 706;
	public static readonly ENCRYPTION_KEY_ADMIN = 707;
	public static readonly EXECUTE = 708;
	public static readonly FILE = 709;
	public static readonly FIREWALL_ADMIN = 710;
	public static readonly FIREWALL_EXEMPT = 711;
	public static readonly FIREWALL_USER = 712;
	public static readonly FLUSH_OPTIMIZER_COSTS = 713;
	public static readonly FLUSH_STATUS = 714;
	public static readonly FLUSH_TABLES = 715;
	public static readonly FLUSH_USER_RESOURCES = 716;
	public static readonly GROUP_REPLICATION_ADMIN = 717;
	public static readonly INNODB_REDO_LOG_ARCHIVE = 718;
	public static readonly INNODB_REDO_LOG_ENABLE = 719;
	public static readonly INVOKE = 720;
	public static readonly LAMBDA = 721;
	public static readonly NDB_STORED_USER = 722;
	public static readonly PASSWORDLESS_USER_ADMIN = 723;
	public static readonly PERSIST_RO_VARIABLES_ADMIN = 724;
	public static readonly PRIVILEGES = 725;
	public static readonly PROCESS = 726;
	public static readonly RELOAD = 727;
	public static readonly REPLICATION_APPLIER = 728;
	public static readonly REPLICATION_SLAVE_ADMIN = 729;
	public static readonly RESOURCE_GROUP_ADMIN = 730;
	public static readonly RESOURCE_GROUP_USER = 731;
	public static readonly ROLE_ADMIN = 732;
	public static readonly ROUTINE = 733;
	public static readonly S3 = 734;
	public static readonly SERVICE_CONNECTION_ADMIN = 735;
	public static readonly SESSION_VARIABLES_ADMIN = 736;
	public static readonly SET_USER_ID = 737;
	public static readonly SHOW_ROUTINE = 738;
	public static readonly SHUTDOWN = 739;
	public static readonly SUPER = 740;
	public static readonly SYSTEM_VARIABLES_ADMIN = 741;
	public static readonly TABLES = 742;
	public static readonly TABLE_ENCRYPTION_ADMIN = 743;
	public static readonly VERSION_TOKEN_ADMIN = 744;
	public static readonly XA_RECOVER_ADMIN = 745;
	public static readonly ARMSCII8 = 746;
	public static readonly ASCII = 747;
	public static readonly BIG5 = 748;
	public static readonly CP1250 = 749;
	public static readonly CP1251 = 750;
	public static readonly CP1256 = 751;
	public static readonly CP1257 = 752;
	public static readonly CP850 = 753;
	public static readonly CP852 = 754;
	public static readonly CP866 = 755;
	public static readonly CP932 = 756;
	public static readonly DEC8 = 757;
	public static readonly EUCJPMS = 758;
	public static readonly EUCKR = 759;
	public static readonly GB18030 = 760;
	public static readonly GB2312 = 761;
	public static readonly GBK = 762;
	public static readonly GEOSTD8 = 763;
	public static readonly GREEK = 764;
	public static readonly HEBREW = 765;
	public static readonly HP8 = 766;
	public static readonly KEYBCS2 = 767;
	public static readonly KOI8R = 768;
	public static readonly KOI8U = 769;
	public static readonly LATIN1 = 770;
	public static readonly LATIN2 = 771;
	public static readonly LATIN5 = 772;
	public static readonly LATIN7 = 773;
	public static readonly MACCE = 774;
	public static readonly MACROMAN = 775;
	public static readonly SJIS = 776;
	public static readonly SWE7 = 777;
	public static readonly TIS620 = 778;
	public static readonly UCS2 = 779;
	public static readonly UJIS = 780;
	public static readonly UTF16 = 781;
	public static readonly UTF16LE = 782;
	public static readonly UTF32 = 783;
	public static readonly UTF8 = 784;
	public static readonly UTF8MB3 = 785;
	public static readonly UTF8MB4 = 786;
	public static readonly ARCHIVE = 787;
	public static readonly BLACKHOLE = 788;
	public static readonly CSV = 789;
	public static readonly FEDERATED = 790;
	public static readonly INNODB = 791;
	public static readonly MEMORY = 792;
	public static readonly MRG_MYISAM = 793;
	public static readonly MYISAM = 794;
	public static readonly NDB = 795;
	public static readonly NDBCLUSTER = 796;
	public static readonly PERFORMANCE_SCHEMA = 797;
	public static readonly TOKUDB = 798;
	public static readonly REPEATABLE = 799;
	public static readonly COMMITTED = 800;
	public static readonly UNCOMMITTED = 801;
	public static readonly SERIALIZABLE = 802;
	public static readonly GEOMETRYCOLLECTION = 803;
	public static readonly GEOMCOLLECTION = 804;
	public static readonly GEOMETRY = 805;
	public static readonly LINESTRING = 806;
	public static readonly MULTILINESTRING = 807;
	public static readonly MULTIPOINT = 808;
	public static readonly MULTIPOLYGON = 809;
	public static readonly POINT = 810;
	public static readonly POLYGON = 811;
	public static readonly ABS = 812;
	public static readonly ACOS = 813;
	public static readonly ADDDATE = 814;
	public static readonly ADDTIME = 815;
	public static readonly AES_DECRYPT = 816;
	public static readonly AES_ENCRYPT = 817;
	public static readonly AREA = 818;
	public static readonly ASBINARY = 819;
	public static readonly ASIN = 820;
	public static readonly ASTEXT = 821;
	public static readonly ASWKB = 822;
	public static readonly ASWKT = 823;
	public static readonly ASYMMETRIC_DECRYPT = 824;
	public static readonly ASYMMETRIC_DERIVE = 825;
	public static readonly ASYMMETRIC_ENCRYPT = 826;
	public static readonly ASYMMETRIC_SIGN = 827;
	public static readonly ASYMMETRIC_VERIFY = 828;
	public static readonly ATAN = 829;
	public static readonly ATAN2 = 830;
	public static readonly BENCHMARK = 831;
	public static readonly BIN = 832;
	public static readonly BIT_COUNT = 833;
	public static readonly BIT_LENGTH = 834;
	public static readonly BUFFER = 835;
	public static readonly CATALOG_NAME = 836;
	public static readonly CEIL = 837;
	public static readonly CEILING = 838;
	public static readonly CENTROID = 839;
	public static readonly CHARACTER_LENGTH = 840;
	public static readonly CHARSET = 841;
	public static readonly CHAR_LENGTH = 842;
	public static readonly COERCIBILITY = 843;
	public static readonly COLLATION = 844;
	public static readonly COMPRESS = 845;
	public static readonly CONCAT = 846;
	public static readonly CONCAT_WS = 847;
	public static readonly CONNECTION_ID = 848;
	public static readonly CONV = 849;
	public static readonly CONVERT_TZ = 850;
	public static readonly COS = 851;
	public static readonly COT = 852;
	public static readonly CRC32 = 853;
	public static readonly CREATE_ASYMMETRIC_PRIV_KEY = 854;
	public static readonly CREATE_ASYMMETRIC_PUB_KEY = 855;
	public static readonly CREATE_DH_PARAMETERS = 856;
	public static readonly CREATE_DIGEST = 857;
	public static readonly CROSSES = 858;
	public static readonly DATEDIFF = 859;
	public static readonly DATE_FORMAT = 860;
	public static readonly DAYNAME = 861;
	public static readonly DAYOFMONTH = 862;
	public static readonly DAYOFWEEK = 863;
	public static readonly DAYOFYEAR = 864;
	public static readonly DECODE = 865;
	public static readonly DEGREES = 866;
	public static readonly DES_DECRYPT = 867;
	public static readonly DES_ENCRYPT = 868;
	public static readonly DIMENSION = 869;
	public static readonly DISJOINT = 870;
	public static readonly ELT = 871;
	public static readonly ENCODE = 872;
	public static readonly ENCRYPT = 873;
	public static readonly ENDPOINT = 874;
	public static readonly ENGINE_ATTRIBUTE = 875;
	public static readonly ENVELOPE = 876;
	public static readonly EQUALS = 877;
	public static readonly EXP = 878;
	public static readonly EXPORT_SET = 879;
	public static readonly EXTERIORRING = 880;
	public static readonly EXTRACTVALUE = 881;
	public static readonly FIELD = 882;
	public static readonly FIND_IN_SET = 883;
	public static readonly FLOOR = 884;
	public static readonly FORMAT = 885;
	public static readonly FOUND_ROWS = 886;
	public static readonly FROM_BASE64 = 887;
	public static readonly FROM_DAYS = 888;
	public static readonly FROM_UNIXTIME = 889;
	public static readonly GEOMCOLLFROMTEXT = 890;
	public static readonly GEOMCOLLFROMWKB = 891;
	public static readonly GEOMETRYCOLLECTIONFROMTEXT = 892;
	public static readonly GEOMETRYCOLLECTIONFROMWKB = 893;
	public static readonly GEOMETRYFROMTEXT = 894;
	public static readonly GEOMETRYFROMWKB = 895;
	public static readonly GEOMETRYN = 896;
	public static readonly GEOMETRYTYPE = 897;
	public static readonly GEOMFROMTEXT = 898;
	public static readonly GEOMFROMWKB = 899;
	public static readonly GET_FORMAT = 900;
	public static readonly GET_LOCK = 901;
	public static readonly GLENGTH = 902;
	public static readonly GREATEST = 903;
	public static readonly GTID_SUBSET = 904;
	public static readonly GTID_SUBTRACT = 905;
	public static readonly HEX = 906;
	public static readonly IFNULL = 907;
	public static readonly INET6_ATON = 908;
	public static readonly INET6_NTOA = 909;
	public static readonly INET_ATON = 910;
	public static readonly INET_NTOA = 911;
	public static readonly INSTR = 912;
	public static readonly INTERIORRINGN = 913;
	public static readonly INTERSECTS = 914;
	public static readonly ISCLOSED = 915;
	public static readonly ISEMPTY = 916;
	public static readonly ISNULL = 917;
	public static readonly ISSIMPLE = 918;
	public static readonly IS_FREE_LOCK = 919;
	public static readonly IS_IPV4 = 920;
	public static readonly IS_IPV4_COMPAT = 921;
	public static readonly IS_IPV4_MAPPED = 922;
	public static readonly IS_IPV6 = 923;
	public static readonly IS_USED_LOCK = 924;
	public static readonly LAST_INSERT_ID = 925;
	public static readonly LCASE = 926;
	public static readonly LEAST = 927;
	public static readonly LENGTH = 928;
	public static readonly LINEFROMTEXT = 929;
	public static readonly LINEFROMWKB = 930;
	public static readonly LINESTRINGFROMTEXT = 931;
	public static readonly LINESTRINGFROMWKB = 932;
	public static readonly LN = 933;
	public static readonly LOAD_FILE = 934;
	public static readonly LOCATE = 935;
	public static readonly LOG = 936;
	public static readonly LOG10 = 937;
	public static readonly LOG2 = 938;
	public static readonly LOWER = 939;
	public static readonly LPAD = 940;
	public static readonly LTRIM = 941;
	public static readonly MAKEDATE = 942;
	public static readonly MAKETIME = 943;
	public static readonly MAKE_SET = 944;
	public static readonly MASTER_POS_WAIT = 945;
	public static readonly MBRCONTAINS = 946;
	public static readonly MBRDISJOINT = 947;
	public static readonly MBREQUAL = 948;
	public static readonly MBRINTERSECTS = 949;
	public static readonly MBROVERLAPS = 950;
	public static readonly MBRTOUCHES = 951;
	public static readonly MBRWITHIN = 952;
	public static readonly MD5 = 953;
	public static readonly MLINEFROMTEXT = 954;
	public static readonly MLINEFROMWKB = 955;
	public static readonly MONTHNAME = 956;
	public static readonly MPOINTFROMTEXT = 957;
	public static readonly MPOINTFROMWKB = 958;
	public static readonly MPOLYFROMTEXT = 959;
	public static readonly MPOLYFROMWKB = 960;
	public static readonly MULTILINESTRINGFROMTEXT = 961;
	public static readonly MULTILINESTRINGFROMWKB = 962;
	public static readonly MULTIPOINTFROMTEXT = 963;
	public static readonly MULTIPOINTFROMWKB = 964;
	public static readonly MULTIPOLYGONFROMTEXT = 965;
	public static readonly MULTIPOLYGONFROMWKB = 966;
	public static readonly NAME_CONST = 967;
	public static readonly NULLIF = 968;
	public static readonly NUMGEOMETRIES = 969;
	public static readonly NUMINTERIORRINGS = 970;
	public static readonly NUMPOINTS = 971;
	public static readonly OCT = 972;
	public static readonly OCTET_LENGTH = 973;
	public static readonly ORD = 974;
	public static readonly OVERLAPS = 975;
	public static readonly PERIOD_ADD = 976;
	public static readonly PERIOD_DIFF = 977;
	public static readonly PI = 978;
	public static readonly POINTFROMTEXT = 979;
	public static readonly POINTFROMWKB = 980;
	public static readonly POINTN = 981;
	public static readonly POLYFROMTEXT = 982;
	public static readonly POLYFROMWKB = 983;
	public static readonly POLYGONFROMTEXT = 984;
	public static readonly POLYGONFROMWKB = 985;
	public static readonly POW = 986;
	public static readonly POWER = 987;
	public static readonly QUOTE = 988;
	public static readonly RADIANS = 989;
	public static readonly RAND = 990;
	public static readonly RANDOM = 991;
	public static readonly RANDOM_BYTES = 992;
	public static readonly RELEASE_LOCK = 993;
	public static readonly REVERSE = 994;
	public static readonly ROUND = 995;
	public static readonly ROW_COUNT = 996;
	public static readonly RPAD = 997;
	public static readonly RTRIM = 998;
	public static readonly SEC_TO_TIME = 999;
	public static readonly SECONDARY_ENGINE_ATTRIBUTE = 1000;
	public static readonly SESSION_USER = 1001;
	public static readonly SHA = 1002;
	public static readonly SHA1 = 1003;
	public static readonly SHA2 = 1004;
	public static readonly SCHEMA_NAME = 1005;
	public static readonly SIGN = 1006;
	public static readonly SIN = 1007;
	public static readonly SLEEP = 1008;
	public static readonly SOUNDEX = 1009;
	public static readonly SQL_THREAD_WAIT_AFTER_GTIDS = 1010;
	public static readonly SQRT = 1011;
	public static readonly SRID = 1012;
	public static readonly STARTPOINT = 1013;
	public static readonly STRCMP = 1014;
	public static readonly STR_TO_DATE = 1015;
	public static readonly ST_AREA = 1016;
	public static readonly ST_ASBINARY = 1017;
	public static readonly ST_ASTEXT = 1018;
	public static readonly ST_ASWKB = 1019;
	public static readonly ST_ASWKT = 1020;
	public static readonly ST_BUFFER = 1021;
	public static readonly ST_CENTROID = 1022;
	public static readonly ST_CONTAINS = 1023;
	public static readonly ST_CROSSES = 1024;
	public static readonly ST_DIFFERENCE = 1025;
	public static readonly ST_DIMENSION = 1026;
	public static readonly ST_DISJOINT = 1027;
	public static readonly ST_DISTANCE = 1028;
	public static readonly ST_ENDPOINT = 1029;
	public static readonly ST_ENVELOPE = 1030;
	public static readonly ST_EQUALS = 1031;
	public static readonly ST_EXTERIORRING = 1032;
	public static readonly ST_GEOMCOLLFROMTEXT = 1033;
	public static readonly ST_GEOMCOLLFROMTXT = 1034;
	public static readonly ST_GEOMCOLLFROMWKB = 1035;
	public static readonly ST_GEOMETRYCOLLECTIONFROMTEXT = 1036;
	public static readonly ST_GEOMETRYCOLLECTIONFROMWKB = 1037;
	public static readonly ST_GEOMETRYFROMTEXT = 1038;
	public static readonly ST_GEOMETRYFROMWKB = 1039;
	public static readonly ST_GEOMETRYN = 1040;
	public static readonly ST_GEOMETRYTYPE = 1041;
	public static readonly ST_GEOMFROMTEXT = 1042;
	public static readonly ST_GEOMFROMWKB = 1043;
	public static readonly ST_INTERIORRINGN = 1044;
	public static readonly ST_INTERSECTION = 1045;
	public static readonly ST_INTERSECTS = 1046;
	public static readonly ST_ISCLOSED = 1047;
	public static readonly ST_ISEMPTY = 1048;
	public static readonly ST_ISSIMPLE = 1049;
	public static readonly ST_LINEFROMTEXT = 1050;
	public static readonly ST_LINEFROMWKB = 1051;
	public static readonly ST_LINESTRINGFROMTEXT = 1052;
	public static readonly ST_LINESTRINGFROMWKB = 1053;
	public static readonly ST_NUMGEOMETRIES = 1054;
	public static readonly ST_NUMINTERIORRING = 1055;
	public static readonly ST_NUMINTERIORRINGS = 1056;
	public static readonly ST_NUMPOINTS = 1057;
	public static readonly ST_OVERLAPS = 1058;
	public static readonly ST_POINTFROMTEXT = 1059;
	public static readonly ST_POINTFROMWKB = 1060;
	public static readonly ST_POINTN = 1061;
	public static readonly ST_POLYFROMTEXT = 1062;
	public static readonly ST_POLYFROMWKB = 1063;
	public static readonly ST_POLYGONFROMTEXT = 1064;
	public static readonly ST_POLYGONFROMWKB = 1065;
	public static readonly ST_SRID = 1066;
	public static readonly ST_STARTPOINT = 1067;
	public static readonly ST_SYMDIFFERENCE = 1068;
	public static readonly ST_TOUCHES = 1069;
	public static readonly ST_UNION = 1070;
	public static readonly ST_WITHIN = 1071;
	public static readonly ST_X = 1072;
	public static readonly ST_Y = 1073;
	public static readonly SUBDATE = 1074;
	public static readonly SUBSTRING_INDEX = 1075;
	public static readonly SUBTIME = 1076;
	public static readonly SYSTEM_USER = 1077;
	public static readonly TAN = 1078;
	public static readonly TIMEDIFF = 1079;
	public static readonly TIMESTAMPADD = 1080;
	public static readonly TIMESTAMPDIFF = 1081;
	public static readonly TIME_FORMAT = 1082;
	public static readonly TIME_TO_SEC = 1083;
	public static readonly TOUCHES = 1084;
	public static readonly TO_BASE64 = 1085;
	public static readonly TO_DAYS = 1086;
	public static readonly TO_SECONDS = 1087;
	public static readonly TP_CONNECTION_ADMIN = 1088;
	public static readonly UCASE = 1089;
	public static readonly UNCOMPRESS = 1090;
	public static readonly UNCOMPRESSED_LENGTH = 1091;
	public static readonly UNHEX = 1092;
	public static readonly UNIX_TIMESTAMP = 1093;
	public static readonly UPDATEXML = 1094;
	public static readonly UPPER = 1095;
	public static readonly UUID = 1096;
	public static readonly UUID_SHORT = 1097;
	public static readonly VALIDATE_PASSWORD_STRENGTH = 1098;
	public static readonly VERSION = 1099;
	public static readonly WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 1100;
	public static readonly WEEKDAY = 1101;
	public static readonly WEEKOFYEAR = 1102;
	public static readonly WEIGHT_STRING = 1103;
	public static readonly WITHIN = 1104;
	public static readonly YEARWEEK = 1105;
	public static readonly Y_FUNCTION = 1106;
	public static readonly X_FUNCTION = 1107;
	public static readonly VAR_ASSIGN = 1108;
	public static readonly PLUS_ASSIGN = 1109;
	public static readonly MINUS_ASSIGN = 1110;
	public static readonly MULT_ASSIGN = 1111;
	public static readonly DIV_ASSIGN = 1112;
	public static readonly MOD_ASSIGN = 1113;
	public static readonly AND_ASSIGN = 1114;
	public static readonly XOR_ASSIGN = 1115;
	public static readonly OR_ASSIGN = 1116;
	public static readonly STAR = 1117;
	public static readonly DIVIDE = 1118;
	public static readonly MODULE = 1119;
	public static readonly PLUS = 1120;
	public static readonly MINUS = 1121;
	public static readonly DIV = 1122;
	public static readonly MOD = 1123;
	public static readonly EQUAL_SYMBOL = 1124;
	public static readonly GREATER_SYMBOL = 1125;
	public static readonly LESS_SYMBOL = 1126;
	public static readonly EXCLAMATION_SYMBOL = 1127;
	public static readonly BIT_NOT_OP = 1128;
	public static readonly BIT_OR_OP = 1129;
	public static readonly BIT_AND_OP = 1130;
	public static readonly BIT_XOR_OP = 1131;
	public static readonly DOT = 1132;
	public static readonly LR_BRACKET = 1133;
	public static readonly RR_BRACKET = 1134;
	public static readonly COMMA = 1135;
	public static readonly SEMI = 1136;
	public static readonly AT_SIGN = 1137;
	public static readonly ZERO_DECIMAL = 1138;
	public static readonly ONE_DECIMAL = 1139;
	public static readonly TWO_DECIMAL = 1140;
	public static readonly SINGLE_QUOTE_SYMB = 1141;
	public static readonly DOUBLE_QUOTE_SYMB = 1142;
	public static readonly REVERSE_QUOTE_SYMB = 1143;
	public static readonly COLON_SYMB = 1144;
	public static readonly CHARSET_REVERSE_QOUTE_STRING = 1145;
	public static readonly FILESIZE_LITERAL = 1146;
	public static readonly START_NATIONAL_STRING_LITERAL = 1147;
	public static readonly STRING_LITERAL = 1148;
	public static readonly DECIMAL_LITERAL = 1149;
	public static readonly HEXADECIMAL_LITERAL = 1150;
	public static readonly REAL_LITERAL = 1151;
	public static readonly NULL_SPEC_LITERAL = 1152;
	public static readonly BIT_STRING = 1153;
	public static readonly STRING_CHARSET_NAME = 1154;
	public static readonly DOT_ID = 1155;
	public static readonly ID = 1156;
	public static readonly REVERSE_QUOTE_ID = 1157;
	public static readonly HOST_IP_ADDRESS = 1158;
	public static readonly LOCAL_ID = 1159;
	public static readonly GLOBAL_ID = 1160;
	public static readonly ERROR_RECONGNIGION = 1161;
	public static readonly EOF = Token.EOF;
	public static readonly RULE_root = 0;
	public static readonly RULE_sqlStatements = 1;
	public static readonly RULE_sqlStatement = 2;
	public static readonly RULE_emptyStatement_ = 3;
	public static readonly RULE_ddlStatement = 4;
	public static readonly RULE_dmlStatement = 5;
	public static readonly RULE_transactionStatement = 6;
	public static readonly RULE_replicationStatement = 7;
	public static readonly RULE_preparedStatement = 8;
	public static readonly RULE_compoundStatement = 9;
	public static readonly RULE_administrationStatement = 10;
	public static readonly RULE_utilityStatement = 11;
	public static readonly RULE_createDatabase = 12;
	public static readonly RULE_createEvent = 13;
	public static readonly RULE_createIndex = 14;
	public static readonly RULE_createLogfileGroup = 15;
	public static readonly RULE_createProcedure = 16;
	public static readonly RULE_createFunction = 17;
	public static readonly RULE_createRole = 18;
	public static readonly RULE_createServer = 19;
	public static readonly RULE_createTable = 20;
	public static readonly RULE_createTablespaceInnodb = 21;
	public static readonly RULE_createTablespaceNdb = 22;
	public static readonly RULE_createTrigger = 23;
	public static readonly RULE_withClause = 24;
	public static readonly RULE_commonTableExpressions = 25;
	public static readonly RULE_cteName = 26;
	public static readonly RULE_cteColumnName = 27;
	public static readonly RULE_createView = 28;
	public static readonly RULE_createDatabaseOption = 29;
	public static readonly RULE_charSet = 30;
	public static readonly RULE_currentUserExpression = 31;
	public static readonly RULE_ownerStatement = 32;
	public static readonly RULE_scheduleExpression = 33;
	public static readonly RULE_timestampValue = 34;
	public static readonly RULE_intervalExpr = 35;
	public static readonly RULE_intervalType = 36;
	public static readonly RULE_enableType = 37;
	public static readonly RULE_indexType = 38;
	public static readonly RULE_indexOption = 39;
	public static readonly RULE_procedureParameter = 40;
	public static readonly RULE_functionParameter = 41;
	public static readonly RULE_routineOption = 42;
	public static readonly RULE_serverOption = 43;
	public static readonly RULE_createDefinitions = 44;
	public static readonly RULE_createDefinition = 45;
	public static readonly RULE_columnDefinition = 46;
	public static readonly RULE_columnConstraint = 47;
	public static readonly RULE_tableConstraint = 48;
	public static readonly RULE_referenceDefinition = 49;
	public static readonly RULE_referenceAction = 50;
	public static readonly RULE_referenceControlType = 51;
	public static readonly RULE_indexColumnDefinition = 52;
	public static readonly RULE_tableOption = 53;
	public static readonly RULE_tableType = 54;
	public static readonly RULE_tablespaceStorage = 55;
	public static readonly RULE_partitionDefinitions = 56;
	public static readonly RULE_partitionFunctionDefinition = 57;
	public static readonly RULE_subpartitionFunctionDefinition = 58;
	public static readonly RULE_partitionDefinition = 59;
	public static readonly RULE_partitionDefinerAtom = 60;
	public static readonly RULE_partitionDefinerVector = 61;
	public static readonly RULE_subpartitionDefinition = 62;
	public static readonly RULE_partitionOption = 63;
	public static readonly RULE_alterDatabase = 64;
	public static readonly RULE_alterEvent = 65;
	public static readonly RULE_alterFunction = 66;
	public static readonly RULE_alterInstance = 67;
	public static readonly RULE_alterLogfileGroup = 68;
	public static readonly RULE_alterProcedure = 69;
	public static readonly RULE_alterServer = 70;
	public static readonly RULE_alterTable = 71;
	public static readonly RULE_alterTablespace = 72;
	public static readonly RULE_alterView = 73;
	public static readonly RULE_alterSpecification = 74;
	public static readonly RULE_alterPartitionSpecification = 75;
	public static readonly RULE_dropDatabase = 76;
	public static readonly RULE_dropEvent = 77;
	public static readonly RULE_dropIndex = 78;
	public static readonly RULE_dropLogfileGroup = 79;
	public static readonly RULE_dropProcedure = 80;
	public static readonly RULE_dropFunction = 81;
	public static readonly RULE_dropServer = 82;
	public static readonly RULE_dropTable = 83;
	public static readonly RULE_dropTablespace = 84;
	public static readonly RULE_dropTrigger = 85;
	public static readonly RULE_dropView = 86;
	public static readonly RULE_dropRole = 87;
	public static readonly RULE_setRole = 88;
	public static readonly RULE_renameTable = 89;
	public static readonly RULE_renameTableClause = 90;
	public static readonly RULE_truncateTable = 91;
	public static readonly RULE_callStatement = 92;
	public static readonly RULE_deleteStatement = 93;
	public static readonly RULE_doStatement = 94;
	public static readonly RULE_handlerStatement = 95;
	public static readonly RULE_insertStatement = 96;
	public static readonly RULE_loadDataStatement = 97;
	public static readonly RULE_loadXmlStatement = 98;
	public static readonly RULE_replaceStatement = 99;
	public static readonly RULE_selectStatement = 100;
	public static readonly RULE_updateStatement = 101;
	public static readonly RULE_valuesStatement = 102;
	public static readonly RULE_insertStatementValue = 103;
	public static readonly RULE_updatedElement = 104;
	public static readonly RULE_assignmentField = 105;
	public static readonly RULE_lockClause = 106;
	public static readonly RULE_singleDeleteStatement = 107;
	public static readonly RULE_multipleDeleteStatement = 108;
	public static readonly RULE_handlerOpenStatement = 109;
	public static readonly RULE_handlerReadIndexStatement = 110;
	public static readonly RULE_handlerReadStatement = 111;
	public static readonly RULE_handlerCloseStatement = 112;
	public static readonly RULE_singleUpdateStatement = 113;
	public static readonly RULE_multipleUpdateStatement = 114;
	public static readonly RULE_orderByClause = 115;
	public static readonly RULE_orderByExpression = 116;
	public static readonly RULE_tableSources = 117;
	public static readonly RULE_tableSource = 118;
	public static readonly RULE_tableSourceItem = 119;
	public static readonly RULE_indexHint = 120;
	public static readonly RULE_indexHintType = 121;
	public static readonly RULE_joinPart = 122;
	public static readonly RULE_joinSpec = 123;
	public static readonly RULE_queryExpression = 124;
	public static readonly RULE_queryExpressionNointo = 125;
	public static readonly RULE_querySpecification = 126;
	public static readonly RULE_querySpecificationNointo = 127;
	public static readonly RULE_unionParenthesis = 128;
	public static readonly RULE_unionStatement = 129;
	public static readonly RULE_lateralStatement = 130;
	public static readonly RULE_jsonTable = 131;
	public static readonly RULE_jsonColumnList = 132;
	public static readonly RULE_jsonColumn = 133;
	public static readonly RULE_jsonOnEmpty = 134;
	public static readonly RULE_jsonOnError = 135;
	public static readonly RULE_selectSpec = 136;
	public static readonly RULE_selectElements = 137;
	public static readonly RULE_selectElement = 138;
	public static readonly RULE_selectIntoExpression = 139;
	public static readonly RULE_selectFieldsInto = 140;
	public static readonly RULE_selectLinesInto = 141;
	public static readonly RULE_fromClause = 142;
	public static readonly RULE_groupByClause = 143;
	public static readonly RULE_havingClause = 144;
	public static readonly RULE_windowClause = 145;
	public static readonly RULE_groupByItem = 146;
	public static readonly RULE_limitClause = 147;
	public static readonly RULE_limitClauseAtom = 148;
	public static readonly RULE_startTransaction = 149;
	public static readonly RULE_beginWork = 150;
	public static readonly RULE_commitWork = 151;
	public static readonly RULE_rollbackWork = 152;
	public static readonly RULE_savepointStatement = 153;
	public static readonly RULE_rollbackStatement = 154;
	public static readonly RULE_releaseStatement = 155;
	public static readonly RULE_lockTables = 156;
	public static readonly RULE_unlockTables = 157;
	public static readonly RULE_setAutocommitStatement = 158;
	public static readonly RULE_setTransactionStatement = 159;
	public static readonly RULE_transactionMode = 160;
	public static readonly RULE_lockTableElement = 161;
	public static readonly RULE_lockAction = 162;
	public static readonly RULE_transactionOption = 163;
	public static readonly RULE_transactionLevel = 164;
	public static readonly RULE_changeMaster = 165;
	public static readonly RULE_changeReplicationFilter = 166;
	public static readonly RULE_purgeBinaryLogs = 167;
	public static readonly RULE_resetMaster = 168;
	public static readonly RULE_resetSlave = 169;
	public static readonly RULE_startSlave = 170;
	public static readonly RULE_stopSlave = 171;
	public static readonly RULE_startGroupReplication = 172;
	public static readonly RULE_stopGroupReplication = 173;
	public static readonly RULE_masterOption = 174;
	public static readonly RULE_stringMasterOption = 175;
	public static readonly RULE_decimalMasterOption = 176;
	public static readonly RULE_boolMasterOption = 177;
	public static readonly RULE_channelOption = 178;
	public static readonly RULE_replicationFilter = 179;
	public static readonly RULE_tablePair = 180;
	public static readonly RULE_threadType = 181;
	public static readonly RULE_untilOption = 182;
	public static readonly RULE_connectionOption = 183;
	public static readonly RULE_gtuidSet = 184;
	public static readonly RULE_xaStartTransaction = 185;
	public static readonly RULE_xaEndTransaction = 186;
	public static readonly RULE_xaPrepareStatement = 187;
	public static readonly RULE_xaCommitWork = 188;
	public static readonly RULE_xaRollbackWork = 189;
	public static readonly RULE_xaRecoverWork = 190;
	public static readonly RULE_prepareStatement = 191;
	public static readonly RULE_executeStatement = 192;
	public static readonly RULE_deallocatePrepare = 193;
	public static readonly RULE_routineBody = 194;
	public static readonly RULE_blockStatement = 195;
	public static readonly RULE_caseStatement = 196;
	public static readonly RULE_ifStatement = 197;
	public static readonly RULE_iterateStatement = 198;
	public static readonly RULE_leaveStatement = 199;
	public static readonly RULE_loopStatement = 200;
	public static readonly RULE_repeatStatement = 201;
	public static readonly RULE_returnStatement = 202;
	public static readonly RULE_whileStatement = 203;
	public static readonly RULE_cursorStatement = 204;
	public static readonly RULE_declareVariable = 205;
	public static readonly RULE_declareCondition = 206;
	public static readonly RULE_declareCursor = 207;
	public static readonly RULE_declareHandler = 208;
	public static readonly RULE_handlerConditionValue = 209;
	public static readonly RULE_procedureSqlStatement = 210;
	public static readonly RULE_caseAlternative = 211;
	public static readonly RULE_elifAlternative = 212;
	public static readonly RULE_alterUser = 213;
	public static readonly RULE_createUser = 214;
	public static readonly RULE_dropUser = 215;
	public static readonly RULE_grantStatement = 216;
	public static readonly RULE_roleOption = 217;
	public static readonly RULE_grantProxy = 218;
	public static readonly RULE_renameUser = 219;
	public static readonly RULE_revokeStatement = 220;
	public static readonly RULE_revokeProxy = 221;
	public static readonly RULE_setPasswordStatement = 222;
	public static readonly RULE_userSpecification = 223;
	public static readonly RULE_userAuthOption = 224;
	public static readonly RULE_authOptionClause = 225;
	public static readonly RULE_authenticationRule = 226;
	public static readonly RULE_tlsOption = 227;
	public static readonly RULE_userResourceOption = 228;
	public static readonly RULE_userPasswordOption = 229;
	public static readonly RULE_userLockOption = 230;
	public static readonly RULE_privelegeClause = 231;
	public static readonly RULE_privilege = 232;
	public static readonly RULE_privilegeLevel = 233;
	public static readonly RULE_renameUserClause = 234;
	public static readonly RULE_analyzeTable = 235;
	public static readonly RULE_checkTable = 236;
	public static readonly RULE_checksumTable = 237;
	public static readonly RULE_optimizeTable = 238;
	public static readonly RULE_repairTable = 239;
	public static readonly RULE_checkTableOption = 240;
	public static readonly RULE_createUdfunction = 241;
	public static readonly RULE_installPlugin = 242;
	public static readonly RULE_uninstallPlugin = 243;
	public static readonly RULE_setStatement = 244;
	public static readonly RULE_showStatement = 245;
	public static readonly RULE_variableClause = 246;
	public static readonly RULE_showCommonEntity = 247;
	public static readonly RULE_showFilter = 248;
	public static readonly RULE_showGlobalInfoClause = 249;
	public static readonly RULE_showSchemaEntity = 250;
	public static readonly RULE_showProfileType = 251;
	public static readonly RULE_binlogStatement = 252;
	public static readonly RULE_cacheIndexStatement = 253;
	public static readonly RULE_flushStatement = 254;
	public static readonly RULE_killStatement = 255;
	public static readonly RULE_loadIndexIntoCache = 256;
	public static readonly RULE_resetStatement = 257;
	public static readonly RULE_shutdownStatement = 258;
	public static readonly RULE_tableIndexes = 259;
	public static readonly RULE_flushOption = 260;
	public static readonly RULE_flushTableOption = 261;
	public static readonly RULE_loadedTableIndexes = 262;
	public static readonly RULE_simpleDescribeStatement = 263;
	public static readonly RULE_fullDescribeStatement = 264;
	public static readonly RULE_helpStatement = 265;
	public static readonly RULE_useStatement = 266;
	public static readonly RULE_signalStatement = 267;
	public static readonly RULE_resignalStatement = 268;
	public static readonly RULE_signalConditionInformation = 269;
	public static readonly RULE_withStatement = 270;
	public static readonly RULE_tableStatement = 271;
	public static readonly RULE_diagnosticsStatement = 272;
	public static readonly RULE_diagnosticsConditionInformationName = 273;
	public static readonly RULE_describeObjectClause = 274;
	public static readonly RULE_fullId = 275;
	public static readonly RULE_tableName = 276;
	public static readonly RULE_roleName = 277;
	public static readonly RULE_fullColumnName = 278;
	public static readonly RULE_indexColumnName = 279;
	public static readonly RULE_simpleUserName = 280;
	public static readonly RULE_hostName = 281;
	public static readonly RULE_userName = 282;
	public static readonly RULE_mysqlVariable = 283;
	public static readonly RULE_charsetName = 284;
	public static readonly RULE_collationName = 285;
	public static readonly RULE_engineName = 286;
	public static readonly RULE_engineNameBase = 287;
	public static readonly RULE_uuidSet = 288;
	public static readonly RULE_xid = 289;
	public static readonly RULE_xuidStringId = 290;
	public static readonly RULE_authPlugin = 291;
	public static readonly RULE_uid = 292;
	public static readonly RULE_simpleId = 293;
	public static readonly RULE_dottedId = 294;
	public static readonly RULE_decimalLiteral = 295;
	public static readonly RULE_fileSizeLiteral = 296;
	public static readonly RULE_stringLiteral = 297;
	public static readonly RULE_booleanLiteral = 298;
	public static readonly RULE_hexadecimalLiteral = 299;
	public static readonly RULE_nullNotnull = 300;
	public static readonly RULE_constant = 301;
	public static readonly RULE_dataType = 302;
	public static readonly RULE_collectionOptions = 303;
	public static readonly RULE_convertedDataType = 304;
	public static readonly RULE_lengthOneDimension = 305;
	public static readonly RULE_lengthTwoDimension = 306;
	public static readonly RULE_lengthTwoOptionalDimension = 307;
	public static readonly RULE_uidList = 308;
	public static readonly RULE_fullColumnNameList = 309;
	public static readonly RULE_tables = 310;
	public static readonly RULE_indexColumnNames = 311;
	public static readonly RULE_expressions = 312;
	public static readonly RULE_expressionsWithDefaults = 313;
	public static readonly RULE_constants = 314;
	public static readonly RULE_simpleStrings = 315;
	public static readonly RULE_userVariables = 316;
	public static readonly RULE_defaultValue = 317;
	public static readonly RULE_currentTimestamp = 318;
	public static readonly RULE_expressionOrDefault = 319;
	public static readonly RULE_ifExists = 320;
	public static readonly RULE_ifNotExists = 321;
	public static readonly RULE_orReplace = 322;
	public static readonly RULE_waitNowaitClause = 323;
	public static readonly RULE_functionCall = 324;
	public static readonly RULE_specificFunction = 325;
	public static readonly RULE_caseFuncAlternative = 326;
	public static readonly RULE_levelsInWeightString = 327;
	public static readonly RULE_levelInWeightListElement = 328;
	public static readonly RULE_aggregateWindowedFunction = 329;
	public static readonly RULE_nonAggregateWindowedFunction = 330;
	public static readonly RULE_overClause = 331;
	public static readonly RULE_windowSpec = 332;
	public static readonly RULE_windowName = 333;
	public static readonly RULE_frameClause = 334;
	public static readonly RULE_frameUnits = 335;
	public static readonly RULE_frameExtent = 336;
	public static readonly RULE_frameBetween = 337;
	public static readonly RULE_frameRange = 338;
	public static readonly RULE_partitionClause = 339;
	public static readonly RULE_scalarFunctionName = 340;
	public static readonly RULE_passwordFunctionClause = 341;
	public static readonly RULE_functionArgs = 342;
	public static readonly RULE_functionArg = 343;
	public static readonly RULE_expression = 344;
	public static readonly RULE_predicate = 345;
	public static readonly RULE_expressionAtom = 346;
	public static readonly RULE_unaryOperator = 347;
	public static readonly RULE_comparisonOperator = 348;
	public static readonly RULE_logicalOperator = 349;
	public static readonly RULE_bitOperator = 350;
	public static readonly RULE_multOperator = 351;
	public static readonly RULE_addOperator = 352;
	public static readonly RULE_jsonOperator = 353;
	public static readonly RULE_charsetNameBase = 354;
	public static readonly RULE_transactionLevelBase = 355;
	public static readonly RULE_privilegesBase = 356;
	public static readonly RULE_intervalTypeBase = 357;
	public static readonly RULE_dataTypeBase = 358;
	public static readonly RULE_keywordsCanBeId = 359;
	public static readonly RULE_functionNameBase = 360;
	public static readonly literalNames: (string | null)[] = [ null, null, 
                                                            null, null, 
                                                            null, "'ADD'", 
                                                            "'ALL'", "'ALTER'", 
                                                            "'ALWAYS'", 
                                                            "'ANALYZE'", 
                                                            "'AND'", "'ARRAY'", 
                                                            "'AS'", "'ASC'", 
                                                            "'ATTRIBUTE'", 
                                                            "'BEFORE'", 
                                                            "'BETWEEN'", 
                                                            "'BOTH'", "'BUCKETS'", 
                                                            "'BY'", "'CALL'", 
                                                            "'CASCADE'", 
                                                            "'CASE'", "'CAST'", 
                                                            "'CHANGE'", 
                                                            "'CHARACTER'", 
                                                            "'CHECK'", "'COLLATE'", 
                                                            "'COLUMN'", 
                                                            "'CONDITION'", 
                                                            "'CONSTRAINT'", 
                                                            "'CONTINUE'", 
                                                            "'CONVERT'", 
                                                            "'CREATE'", 
                                                            "'CROSS'", "'CURRENT'", 
                                                            "'CURRENT_ROLE'", 
                                                            "'CURRENT_USER'", 
                                                            "'CURSOR'", 
                                                            "'DATABASE'", 
                                                            "'DATABASES'", 
                                                            "'DECLARE'", 
                                                            "'DEFAULT'", 
                                                            "'DELAYED'", 
                                                            "'DELETE'", 
                                                            "'DESC'", "'DESCRIBE'", 
                                                            "'DETERMINISTIC'", 
                                                            "'DIAGNOSTICS'", 
                                                            "'DISTINCT'", 
                                                            "'DISTINCTROW'", 
                                                            "'DROP'", "'EACH'", 
                                                            "'ELSE'", "'ELSEIF'", 
                                                            "'EMPTY'", "'ENCLOSED'", 
                                                            "'ENFORCED'", 
                                                            "'ESCAPED'", 
                                                            "'EXCEPT'", 
                                                            "'EXISTS'", 
                                                            "'EXIT'", "'EXPLAIN'", 
                                                            "'FALSE'", "'FETCH'", 
                                                            "'FOR'", "'FORCE'", 
                                                            "'FOREIGN'", 
                                                            "'FROM'", "'FULLTEXT'", 
                                                            "'GENERATED'", 
                                                            "'GET'", "'GRANT'", 
                                                            "'GROUP'", "'HAVING'", 
                                                            "'HIGH_PRIORITY'", 
                                                            "'HISTOGRAM'", 
                                                            "'IF'", "'IGNORE'", 
                                                            "'IGNORED'", 
                                                            "'IN'", "'INDEX'", 
                                                            "'INFILE'", 
                                                            "'INNER'", "'INOUT'", 
                                                            "'INSERT'", 
                                                            "'INTERVAL'", 
                                                            "'INTO'", "'IS'", 
                                                            "'ITERATE'", 
                                                            "'JOIN'", "'KEY'", 
                                                            "'KEYS'", "'KILL'", 
                                                            "'LATERAL'", 
                                                            "'LEADING'", 
                                                            "'LEAVE'", "'LEFT'", 
                                                            "'LIKE'", "'LIMIT'", 
                                                            "'LINEAR'", 
                                                            "'LINES'", "'LOAD'", 
                                                            "'LOCK'", "'LOCKED'", 
                                                            "'LOOP'", "'LOW_PRIORITY'", 
                                                            "'MASTER_BIND'", 
                                                            "'MASTER_SSL_VERIFY_SERVER_CERT'", 
                                                            "'MATCH'", "'MAXVALUE'", 
                                                            "'MINVALUE'", 
                                                            "'MODIFIES'", 
                                                            "'NATURAL'", 
                                                            "'NOT'", "'NO_WRITE_TO_BINLOG'", 
                                                            "'NULL'", "'NUMBER'", 
                                                            "'ON'", "'OPTIMIZE'", 
                                                            "'OPTION'", 
                                                            "'OPTIONAL'", 
                                                            "'OPTIONALLY'", 
                                                            "'OR'", "'ORDER'", 
                                                            "'OUT'", "'OUTER'", 
                                                            "'OUTFILE'", 
                                                            "'OVER'", "'PARTITION'", 
                                                            "'PRIMARY'", 
                                                            "'PROCEDURE'", 
                                                            "'PURGE'", "'RANGE'", 
                                                            "'READ'", "'READS'", 
                                                            "'REFERENCES'", 
                                                            "'REGEXP'", 
                                                            "'RELEASE'", 
                                                            "'RENAME'", 
                                                            "'REPEAT'", 
                                                            "'REPLACE'", 
                                                            "'REQUIRE'", 
                                                            "'RESIGNAL'", 
                                                            "'RESTRICT'", 
                                                            "'RETAIN'", 
                                                            "'RETURN'", 
                                                            "'REVOKE'", 
                                                            "'RIGHT'", "'RLIKE'", 
                                                            "'SCHEMA'", 
                                                            "'SCHEMAS'", 
                                                            "'SELECT'", 
                                                            "'SET'", "'SEPARATOR'", 
                                                            "'SHOW'", "'SIGNAL'", 
                                                            "'SKIP'", "'SKIP_QUERY_REWRITE'", 
                                                            "'SPATIAL'", 
                                                            "'SQL'", "'SQLEXCEPTION'", 
                                                            "'SQLSTATE'", 
                                                            "'SQLWARNING'", 
                                                            "'SQL_BIG_RESULT'", 
                                                            "'SQL_CALC_FOUND_ROWS'", 
                                                            "'SQL_SMALL_RESULT'", 
                                                            "'SSL'", "'STACKED'", 
                                                            "'STARTING'", 
                                                            "'STATEMENT'", 
                                                            "'STRAIGHT_JOIN'", 
                                                            "'TABLE'", "'TERMINATED'", 
                                                            "'THEN'", "'TO'", 
                                                            "'TRAILING'", 
                                                            "'TRIGGER'", 
                                                            "'TRUE'", "'UNDO'", 
                                                            "'UNION'", "'UNIQUE'", 
                                                            "'UNLOCK'", 
                                                            "'UNSIGNED'", 
                                                            "'UPDATE'", 
                                                            "'USAGE'", "'USE'", 
                                                            "'USING'", "'VALUES'", 
                                                            "'WHEN'", "'WHERE'", 
                                                            "'WHILE'", "'WITH'", 
                                                            "'WRITE'", "'XOR'", 
                                                            "'ZEROFILL'", 
                                                            "'TINYINT'", 
                                                            "'SMALLINT'", 
                                                            "'MEDIUMINT'", 
                                                            "'MIDDLEINT'", 
                                                            "'INT'", "'INT1'", 
                                                            "'INT2'", "'INT3'", 
                                                            "'INT4'", "'INT8'", 
                                                            "'INTEGER'", 
                                                            "'BIGINT'", 
                                                            "'REAL'", "'DOUBLE'", 
                                                            "'PRECISION'", 
                                                            "'FLOAT'", "'FLOAT4'", 
                                                            "'FLOAT8'", 
                                                            "'DECIMAL'", 
                                                            "'DEC'", "'NUMERIC'", 
                                                            "'DATE'", "'TIME'", 
                                                            "'TIMESTAMP'", 
                                                            "'DATETIME'", 
                                                            "'YEAR'", "'CHAR'", 
                                                            "'VARCHAR'", 
                                                            "'NVARCHAR'", 
                                                            "'NATIONAL'", 
                                                            "'BINARY'", 
                                                            "'VARBINARY'", 
                                                            "'TINYBLOB'", 
                                                            "'BLOB'", "'MEDIUMBLOB'", 
                                                            "'LONG'", "'LONGBLOB'", 
                                                            "'TINYTEXT'", 
                                                            "'TEXT'", "'MEDIUMTEXT'", 
                                                            "'LONGTEXT'", 
                                                            "'ENUM'", "'VARYING'", 
                                                            "'SERIAL'", 
                                                            "'YEAR_MONTH'", 
                                                            "'DAY_HOUR'", 
                                                            "'DAY_MINUTE'", 
                                                            "'DAY_SECOND'", 
                                                            "'HOUR_MINUTE'", 
                                                            "'HOUR_SECOND'", 
                                                            "'MINUTE_SECOND'", 
                                                            "'SECOND_MICROSECOND'", 
                                                            "'MINUTE_MICROSECOND'", 
                                                            "'HOUR_MICROSECOND'", 
                                                            "'DAY_MICROSECOND'", 
                                                            "'JSON_ARRAY'", 
                                                            "'JSON_ARRAYAGG'", 
                                                            "'JSON_ARRAY_APPEND'", 
                                                            "'JSON_ARRAY_INSERT'", 
                                                            "'JSON_CONTAINS'", 
                                                            "'JSON_CONTAINS_PATH'", 
                                                            "'JSON_DEPTH'", 
                                                            "'JSON_EXTRACT'", 
                                                            "'JSON_INSERT'", 
                                                            "'JSON_KEYS'", 
                                                            "'JSON_LENGTH'", 
                                                            "'JSON_MERGE'", 
                                                            "'JSON_MERGE_PATCH'", 
                                                            "'JSON_MERGE_PRESERVE'", 
                                                            "'JSON_OBJECT'", 
                                                            "'JSON_OBJECTAGG'", 
                                                            "'JSON_OVERLAPS'", 
                                                            "'JSON_PRETTY'", 
                                                            "'JSON_QUOTE'", 
                                                            "'JSON_REMOVE'", 
                                                            "'JSON_REPLACE'", 
                                                            "'JSON_SCHEMA_VALID'", 
                                                            "'JSON_SCHEMA_VALIDATION_REPORT'", 
                                                            "'JSON_SEARCH'", 
                                                            "'JSON_SET'", 
                                                            "'JSON_STORAGE_FREE'", 
                                                            "'JSON_STORAGE_SIZE'", 
                                                            "'JSON_TABLE'", 
                                                            "'JSON_TYPE'", 
                                                            "'JSON_UNQUOTE'", 
                                                            "'JSON_VALID'", 
                                                            "'JSON_VALUE'", 
                                                            "'NESTED'", 
                                                            "'ORDINALITY'", 
                                                            "'PATH'", "'AVG'", 
                                                            "'BIT_AND'", 
                                                            "'BIT_OR'", 
                                                            "'BIT_XOR'", 
                                                            "'COUNT'", "'CUME_DIST'", 
                                                            "'DENSE_RANK'", 
                                                            "'FIRST_VALUE'", 
                                                            "'GROUP_CONCAT'", 
                                                            "'LAG'", "'LAST_VALUE'", 
                                                            "'LEAD'", "'MAX'", 
                                                            "'MIN'", "'NTILE'", 
                                                            "'NTH_VALUE'", 
                                                            "'PERCENT_RANK'", 
                                                            "'RANK'", "'ROW_NUMBER'", 
                                                            "'STD'", "'STDDEV'", 
                                                            "'STDDEV_POP'", 
                                                            "'STDDEV_SAMP'", 
                                                            "'SUM'", "'VAR_POP'", 
                                                            "'VAR_SAMP'", 
                                                            "'VARIANCE'", 
                                                            "'CURRENT_DATE'", 
                                                            "'CURRENT_TIME'", 
                                                            "'CURRENT_TIMESTAMP'", 
                                                            "'LOCALTIME'", 
                                                            "'CURDATE'", 
                                                            "'CURTIME'", 
                                                            "'DATE_ADD'", 
                                                            "'DATE_SUB'", 
                                                            "'EXTRACT'", 
                                                            "'LOCALTIMESTAMP'", 
                                                            "'NOW'", "'POSITION'", 
                                                            "'SUBSTR'", 
                                                            "'SUBSTRING'", 
                                                            "'SYSDATE'", 
                                                            "'TRIM'", "'UTC_DATE'", 
                                                            "'UTC_TIME'", 
                                                            "'UTC_TIMESTAMP'", 
                                                            "'ACCOUNT'", 
                                                            "'ACTION'", 
                                                            "'AFTER'", "'AGGREGATE'", 
                                                            "'ALGORITHM'", 
                                                            "'ANY'", "'AT'", 
                                                            "'AUTHORS'", 
                                                            "'AUTOCOMMIT'", 
                                                            "'AUTOEXTEND_SIZE'", 
                                                            "'AUTO_INCREMENT'", 
                                                            "'AVG_ROW_LENGTH'", 
                                                            "'BEGIN'", "'BINLOG'", 
                                                            "'BIT'", "'BLOCK'", 
                                                            "'BOOL'", "'BOOLEAN'", 
                                                            "'BTREE'", "'CACHE'", 
                                                            "'CASCADED'", 
                                                            "'CHAIN'", "'CHANGED'", 
                                                            "'CHANNEL'", 
                                                            "'CHECKSUM'", 
                                                            "'PAGE_CHECKSUM'", 
                                                            "'CIPHER'", 
                                                            "'CLASS_ORIGIN'", 
                                                            "'CLIENT'", 
                                                            "'CLOSE'", "'CLUSTERING'", 
                                                            "'COALESCE'", 
                                                            "'CODE'", "'COLUMNS'", 
                                                            "'COLUMN_FORMAT'", 
                                                            "'COLUMN_NAME'", 
                                                            "'COMMENT'", 
                                                            "'COMMIT'", 
                                                            "'COMPACT'", 
                                                            "'COMPLETION'", 
                                                            "'COMPRESSED'", 
                                                            "'COMPRESSION'", 
                                                            "'CONCURRENT'", 
                                                            "'CONNECT'", 
                                                            "'CONNECTION'", 
                                                            "'CONSISTENT'", 
                                                            "'CONSTRAINT_CATALOG'", 
                                                            "'CONSTRAINT_SCHEMA'", 
                                                            "'CONSTRAINT_NAME'", 
                                                            "'CONTAINS'", 
                                                            "'CONTEXT'", 
                                                            "'CONTRIBUTORS'", 
                                                            "'COPY'", "'CPU'", 
                                                            "'CYCLE'", "'CURSOR_NAME'", 
                                                            "'DATA'", "'DATAFILE'", 
                                                            "'DEALLOCATE'", 
                                                            "'DEFAULT_AUTH'", 
                                                            "'DEFINER'", 
                                                            "'DELAY_KEY_WRITE'", 
                                                            "'DES_KEY_FILE'", 
                                                            "'DIRECTORY'", 
                                                            "'DISABLE'", 
                                                            "'DISCARD'", 
                                                            "'DISK'", "'DO'", 
                                                            "'DUMPFILE'", 
                                                            "'DUPLICATE'", 
                                                            "'DYNAMIC'", 
                                                            "'ENABLE'", 
                                                            "'ENCRYPTED'", 
                                                            "'ENCRYPTION'", 
                                                            "'ENCRYPTION_KEY_ID'", 
                                                            "'END'", "'ENDS'", 
                                                            "'ENGINE'", 
                                                            "'ENGINES'", 
                                                            "'ERROR'", "'ERRORS'", 
                                                            "'ESCAPE'", 
                                                            "'EVEN'", "'EVENT'", 
                                                            "'EVENTS'", 
                                                            "'EVERY'", "'EXCHANGE'", 
                                                            "'EXCLUSIVE'", 
                                                            "'EXPIRE'", 
                                                            "'EXPORT'", 
                                                            "'EXTENDED'", 
                                                            "'EXTENT_SIZE'", 
                                                            "'FAILED_LOGIN_ATTEMPTS'", 
                                                            "'FAST'", "'FAULTS'", 
                                                            "'FIELDS'", 
                                                            "'FILE_BLOCK_SIZE'", 
                                                            "'FILTER'", 
                                                            "'FIRST'", "'FIXED'", 
                                                            "'FLUSH'", "'FOLLOWING'", 
                                                            "'FOLLOWS'", 
                                                            "'FOUND'", "'FULL'", 
                                                            "'FUNCTION'", 
                                                            "'GENERAL'", 
                                                            "'GLOBAL'", 
                                                            "'GRANTS'", 
                                                            "'GROUP_REPLICATION'", 
                                                            "'HANDLER'", 
                                                            "'HASH'", "'HELP'", 
                                                            "'HISTORY'", 
                                                            "'HOST'", "'HOSTS'", 
                                                            "'IDENTIFIED'", 
                                                            "'IGNORE_SERVER_IDS'", 
                                                            "'IMPORT'", 
                                                            "'INCREMENT'", 
                                                            "'INDEXES'", 
                                                            "'INITIAL_SIZE'", 
                                                            "'INPLACE'", 
                                                            "'INSERT_METHOD'", 
                                                            "'INSTALL'", 
                                                            "'INSTANCE'", 
                                                            "'INSTANT'", 
                                                            "'INVISIBLE'", 
                                                            "'INVOKER'", 
                                                            "'IO'", "'IO_THREAD'", 
                                                            "'IPC'", "'ISOLATION'", 
                                                            "'ISSUER'", 
                                                            "'JSON'", "'KEY_BLOCK_SIZE'", 
                                                            "'LANGUAGE'", 
                                                            "'LAST'", "'LEAVES'", 
                                                            "'LESS'", "'LEVEL'", 
                                                            "'LIST'", "'LOCAL'", 
                                                            "'LOGFILE'", 
                                                            "'LOGS'", "'MASTER'", 
                                                            "'MASTER_AUTO_POSITION'", 
                                                            "'MASTER_CONNECT_RETRY'", 
                                                            "'MASTER_DELAY'", 
                                                            "'MASTER_HEARTBEAT_PERIOD'", 
                                                            "'MASTER_HOST'", 
                                                            "'MASTER_LOG_FILE'", 
                                                            "'MASTER_LOG_POS'", 
                                                            "'MASTER_PASSWORD'", 
                                                            "'MASTER_PORT'", 
                                                            "'MASTER_RETRY_COUNT'", 
                                                            "'MASTER_SSL'", 
                                                            "'MASTER_SSL_CA'", 
                                                            "'MASTER_SSL_CAPATH'", 
                                                            "'MASTER_SSL_CERT'", 
                                                            "'MASTER_SSL_CIPHER'", 
                                                            "'MASTER_SSL_CRL'", 
                                                            "'MASTER_SSL_CRLPATH'", 
                                                            "'MASTER_SSL_KEY'", 
                                                            "'MASTER_TLS_VERSION'", 
                                                            "'MASTER_USER'", 
                                                            "'MAX_CONNECTIONS_PER_HOUR'", 
                                                            "'MAX_QUERIES_PER_HOUR'", 
                                                            "'MAX_ROWS'", 
                                                            "'MAX_SIZE'", 
                                                            "'MAX_UPDATES_PER_HOUR'", 
                                                            "'MAX_USER_CONNECTIONS'", 
                                                            "'MEDIUM'", 
                                                            "'MEMBER'", 
                                                            "'MERGE'", "'MESSAGE_TEXT'", 
                                                            "'MID'", "'MIGRATE'", 
                                                            "'MIN_ROWS'", 
                                                            "'MODE'", "'MODIFY'", 
                                                            "'MUTEX'", "'MYSQL'", 
                                                            "'MYSQL_ERRNO'", 
                                                            "'NAME'", "'NAMES'", 
                                                            "'NCHAR'", "'NEVER'", 
                                                            "'NEXT'", "'NO'", 
                                                            "'NOCACHE'", 
                                                            "'NOCOPY'", 
                                                            "'NOCYCLE'", 
                                                            "'NOMAXVALUE'", 
                                                            "'NOMINVALUE'", 
                                                            "'NOWAIT'", 
                                                            "'NODEGROUP'", 
                                                            "'NONE'", "'ODBC'", 
                                                            "'OFFLINE'", 
                                                            "'OFFSET'", 
                                                            "'OF'", "'OJ'", 
                                                            "'OLD_PASSWORD'", 
                                                            "'ONE'", "'ONLINE'", 
                                                            "'ONLY'", "'OPEN'", 
                                                            "'OPTIMIZER_COSTS'", 
                                                            "'OPTIONS'", 
                                                            "'OWNER'", "'PACK_KEYS'", 
                                                            "'PAGE'", "'PAGE_COMPRESSED'", 
                                                            "'PAGE_COMPRESSION_LEVEL'", 
                                                            "'PARSER'", 
                                                            "'PARTIAL'", 
                                                            "'PARTITIONING'", 
                                                            "'PARTITIONS'", 
                                                            "'PASSWORD'", 
                                                            "'PASSWORD_LOCK_TIME'", 
                                                            "'PHASE'", "'PLUGIN'", 
                                                            "'PLUGIN_DIR'", 
                                                            "'PLUGINS'", 
                                                            "'PORT'", "'PRECEDES'", 
                                                            "'PRECEDING'", 
                                                            "'PREPARE'", 
                                                            "'PRESERVE'", 
                                                            "'PREV'", "'PROCESSLIST'", 
                                                            "'PROFILE'", 
                                                            "'PROFILES'", 
                                                            "'PROXY'", "'QUERY'", 
                                                            "'QUICK'", "'REBUILD'", 
                                                            "'RECOVER'", 
                                                            "'RECURSIVE'", 
                                                            "'REDO_BUFFER_SIZE'", 
                                                            "'REDUNDANT'", 
                                                            "'RELAY'", "'RELAY_LOG_FILE'", 
                                                            "'RELAY_LOG_POS'", 
                                                            "'RELAYLOG'", 
                                                            "'REMOVE'", 
                                                            "'REORGANIZE'", 
                                                            "'REPAIR'", 
                                                            "'REPLICATE_DO_DB'", 
                                                            "'REPLICATE_DO_TABLE'", 
                                                            "'REPLICATE_IGNORE_DB'", 
                                                            "'REPLICATE_IGNORE_TABLE'", 
                                                            "'REPLICATE_REWRITE_DB'", 
                                                            "'REPLICATE_WILD_DO_TABLE'", 
                                                            "'REPLICATE_WILD_IGNORE_TABLE'", 
                                                            "'REPLICATION'", 
                                                            "'RESET'", "'RESTART'", 
                                                            "'RESUME'", 
                                                            "'RETURNED_SQLSTATE'", 
                                                            "'RETURNING'", 
                                                            "'RETURNS'", 
                                                            "'REUSE'", "'ROLE'", 
                                                            "'ROLLBACK'", 
                                                            "'ROLLUP'", 
                                                            "'ROTATE'", 
                                                            "'ROW'", "'ROWS'", 
                                                            "'ROW_FORMAT'", 
                                                            "'RTREE'", "'SAVEPOINT'", 
                                                            "'SCHEDULE'", 
                                                            "'SECURITY'", 
                                                            "'SEQUENCE'", 
                                                            "'SERVER'", 
                                                            "'SESSION'", 
                                                            "'SHARE'", "'SHARED'", 
                                                            "'SIGNED'", 
                                                            "'SIMPLE'", 
                                                            "'SLAVE'", "'SLOW'", 
                                                            "'SNAPSHOT'", 
                                                            "'SOCKET'", 
                                                            "'SOME'", "'SONAME'", 
                                                            "'SOUNDS'", 
                                                            "'SOURCE'", 
                                                            "'SQL_AFTER_GTIDS'", 
                                                            "'SQL_AFTER_MTS_GAPS'", 
                                                            "'SQL_BEFORE_GTIDS'", 
                                                            "'SQL_BUFFER_RESULT'", 
                                                            "'SQL_CACHE'", 
                                                            "'SQL_NO_CACHE'", 
                                                            "'SQL_THREAD'", 
                                                            "'START'", "'STARTS'", 
                                                            "'STATS_AUTO_RECALC'", 
                                                            "'STATS_PERSISTENT'", 
                                                            "'STATS_SAMPLE_PAGES'", 
                                                            "'STATUS'", 
                                                            "'STOP'", "'STORAGE'", 
                                                            "'STORED'", 
                                                            "'STRING'", 
                                                            "'SUBCLASS_ORIGIN'", 
                                                            "'SUBJECT'", 
                                                            "'SUBPARTITION'", 
                                                            "'SUBPARTITIONS'", 
                                                            "'SUSPEND'", 
                                                            "'SWAPS'", "'SWITCHES'", 
                                                            "'TABLE_NAME'", 
                                                            "'TABLESPACE'", 
                                                            "'TABLE_TYPE'", 
                                                            "'TEMPORARY'", 
                                                            "'TEMPTABLE'", 
                                                            "'THAN'", "'TRADITIONAL'", 
                                                            "'TRANSACTION'", 
                                                            "'TRANSACTIONAL'", 
                                                            "'TRIGGERS'", 
                                                            "'TRUNCATE'", 
                                                            "'UNBOUNDED'", 
                                                            "'UNDEFINED'", 
                                                            "'UNDOFILE'", 
                                                            "'UNDO_BUFFER_SIZE'", 
                                                            "'UNINSTALL'", 
                                                            "'UNKNOWN'", 
                                                            "'UNTIL'", "'UPGRADE'", 
                                                            "'USER'", "'USE_FRM'", 
                                                            "'USER_RESOURCES'", 
                                                            "'VALIDATION'", 
                                                            "'VALUE'", "'VARIABLES'", 
                                                            "'VIEW'", "'VIRTUAL'", 
                                                            "'VISIBLE'", 
                                                            "'WAIT'", "'WARNINGS'", 
                                                            "'WINDOW'", 
                                                            "'WITHOUT'", 
                                                            "'WORK'", "'WRAPPER'", 
                                                            "'X509'", "'XA'", 
                                                            "'XML'", "'YES'", 
                                                            "'EUR'", "'USA'", 
                                                            "'JIS'", "'ISO'", 
                                                            "'INTERNAL'", 
                                                            "'QUARTER'", 
                                                            "'MONTH'", "'DAY'", 
                                                            "'HOUR'", "'MINUTE'", 
                                                            "'WEEK'", "'SECOND'", 
                                                            "'MICROSECOND'", 
                                                            "'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", 
                                                            "'AUDIT_ABORT_EXEMPT'", 
                                                            "'AUDIT_ADMIN'", 
                                                            "'AUTHENTICATION_POLICY_ADMIN'", 
                                                            "'BACKUP_ADMIN'", 
                                                            "'BINLOG_ADMIN'", 
                                                            "'BINLOG_ENCRYPTION_ADMIN'", 
                                                            "'CLONE_ADMIN'", 
                                                            "'CONNECTION_ADMIN'", 
                                                            "'ENCRYPTION_KEY_ADMIN'", 
                                                            "'EXECUTE'", 
                                                            "'FILE'", "'FIREWALL_ADMIN'", 
                                                            "'FIREWALL_EXEMPT'", 
                                                            "'FIREWALL_USER'", 
                                                            "'FLUSH_OPTIMIZER_COSTS'", 
                                                            "'FLUSH_STATUS'", 
                                                            "'FLUSH_TABLES'", 
                                                            "'FLUSH_USER_RESOURCES'", 
                                                            "'GROUP_REPLICATION_ADMIN'", 
                                                            "'INNODB_REDO_LOG_ARCHIVE'", 
                                                            "'INNODB_REDO_LOG_ENABLE'", 
                                                            "'INVOKE'", 
                                                            "'LAMBDA'", 
                                                            "'NDB_STORED_USER'", 
                                                            "'PASSWORDLESS_USER_ADMIN'", 
                                                            "'PERSIST_RO_VARIABLES_ADMIN'", 
                                                            "'PRIVILEGES'", 
                                                            "'PROCESS'", 
                                                            "'RELOAD'", 
                                                            "'REPLICATION_APPLIER'", 
                                                            "'REPLICATION_SLAVE_ADMIN'", 
                                                            "'RESOURCE_GROUP_ADMIN'", 
                                                            "'RESOURCE_GROUP_USER'", 
                                                            "'ROLE_ADMIN'", 
                                                            "'ROUTINE'", 
                                                            "'S3'", "'SERVICE_CONNECTION_ADMIN'", 
                                                            null, "'SET_USER_ID'", 
                                                            "'SHOW_ROUTINE'", 
                                                            "'SHUTDOWN'", 
                                                            "'SUPER'", "'SYSTEM_VARIABLES_ADMIN'", 
                                                            "'TABLES'", 
                                                            "'TABLE_ENCRYPTION_ADMIN'", 
                                                            "'VERSION_TOKEN_ADMIN'", 
                                                            "'XA_RECOVER_ADMIN'", 
                                                            "'ARMSCII8'", 
                                                            "'ASCII'", "'BIG5'", 
                                                            "'CP1250'", 
                                                            "'CP1251'", 
                                                            "'CP1256'", 
                                                            "'CP1257'", 
                                                            "'CP850'", "'CP852'", 
                                                            "'CP866'", "'CP932'", 
                                                            "'DEC8'", "'EUCJPMS'", 
                                                            "'EUCKR'", "'GB18030'", 
                                                            "'GB2312'", 
                                                            "'GBK'", "'GEOSTD8'", 
                                                            "'GREEK'", "'HEBREW'", 
                                                            "'HP8'", "'KEYBCS2'", 
                                                            "'KOI8R'", "'KOI8U'", 
                                                            "'LATIN1'", 
                                                            "'LATIN2'", 
                                                            "'LATIN5'", 
                                                            "'LATIN7'", 
                                                            "'MACCE'", "'MACROMAN'", 
                                                            "'SJIS'", "'SWE7'", 
                                                            "'TIS620'", 
                                                            "'UCS2'", "'UJIS'", 
                                                            "'UTF16'", "'UTF16LE'", 
                                                            "'UTF32'", "'UTF8'", 
                                                            "'UTF8MB3'", 
                                                            "'UTF8MB4'", 
                                                            "'ARCHIVE'", 
                                                            "'BLACKHOLE'", 
                                                            "'CSV'", "'FEDERATED'", 
                                                            "'INNODB'", 
                                                            "'MEMORY'", 
                                                            "'MRG_MYISAM'", 
                                                            "'MYISAM'", 
                                                            "'NDB'", "'NDBCLUSTER'", 
                                                            "'PERFORMANCE_SCHEMA'", 
                                                            "'TOKUDB'", 
                                                            "'REPEATABLE'", 
                                                            "'COMMITTED'", 
                                                            "'UNCOMMITTED'", 
                                                            "'SERIALIZABLE'", 
                                                            "'GEOMETRYCOLLECTION'", 
                                                            "'GEOMCOLLECTION'", 
                                                            "'GEOMETRY'", 
                                                            "'LINESTRING'", 
                                                            "'MULTILINESTRING'", 
                                                            "'MULTIPOINT'", 
                                                            "'MULTIPOLYGON'", 
                                                            "'POINT'", "'POLYGON'", 
                                                            "'ABS'", "'ACOS'", 
                                                            "'ADDDATE'", 
                                                            "'ADDTIME'", 
                                                            "'AES_DECRYPT'", 
                                                            "'AES_ENCRYPT'", 
                                                            "'AREA'", "'ASBINARY'", 
                                                            "'ASIN'", "'ASTEXT'", 
                                                            "'ASWKB'", "'ASWKT'", 
                                                            "'ASYMMETRIC_DECRYPT'", 
                                                            "'ASYMMETRIC_DERIVE'", 
                                                            "'ASYMMETRIC_ENCRYPT'", 
                                                            "'ASYMMETRIC_SIGN'", 
                                                            "'ASYMMETRIC_VERIFY'", 
                                                            "'ATAN'", "'ATAN2'", 
                                                            "'BENCHMARK'", 
                                                            "'BIN'", "'BIT_COUNT'", 
                                                            "'BIT_LENGTH'", 
                                                            "'BUFFER'", 
                                                            "'CATALOG_NAME'", 
                                                            "'CEIL'", "'CEILING'", 
                                                            "'CENTROID'", 
                                                            "'CHARACTER_LENGTH'", 
                                                            "'CHARSET'", 
                                                            "'CHAR_LENGTH'", 
                                                            "'COERCIBILITY'", 
                                                            "'COLLATION'", 
                                                            "'COMPRESS'", 
                                                            "'CONCAT'", 
                                                            "'CONCAT_WS'", 
                                                            "'CONNECTION_ID'", 
                                                            "'CONV'", "'CONVERT_TZ'", 
                                                            "'COS'", "'COT'", 
                                                            "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", 
                                                            "'CREATE_ASYMMETRIC_PUB_KEY'", 
                                                            "'CREATE_DH_PARAMETERS'", 
                                                            "'CREATE_DIGEST'", 
                                                            "'CROSSES'", 
                                                            "'DATEDIFF'", 
                                                            "'DATE_FORMAT'", 
                                                            "'DAYNAME'", 
                                                            "'DAYOFMONTH'", 
                                                            "'DAYOFWEEK'", 
                                                            "'DAYOFYEAR'", 
                                                            "'DECODE'", 
                                                            "'DEGREES'", 
                                                            "'DES_DECRYPT'", 
                                                            "'DES_ENCRYPT'", 
                                                            "'DIMENSION'", 
                                                            "'DISJOINT'", 
                                                            "'ELT'", "'ENCODE'", 
                                                            "'ENCRYPT'", 
                                                            "'ENDPOINT'", 
                                                            "'ENGINE_ATTRIBUTE'", 
                                                            "'ENVELOPE'", 
                                                            "'EQUALS'", 
                                                            "'EXP'", "'EXPORT_SET'", 
                                                            "'EXTERIORRING'", 
                                                            "'EXTRACTVALUE'", 
                                                            "'FIELD'", "'FIND_IN_SET'", 
                                                            "'FLOOR'", "'FORMAT'", 
                                                            "'FOUND_ROWS'", 
                                                            "'FROM_BASE64'", 
                                                            "'FROM_DAYS'", 
                                                            "'FROM_UNIXTIME'", 
                                                            "'GEOMCOLLFROMTEXT'", 
                                                            "'GEOMCOLLFROMWKB'", 
                                                            "'GEOMETRYCOLLECTIONFROMTEXT'", 
                                                            "'GEOMETRYCOLLECTIONFROMWKB'", 
                                                            "'GEOMETRYFROMTEXT'", 
                                                            "'GEOMETRYFROMWKB'", 
                                                            "'GEOMETRYN'", 
                                                            "'GEOMETRYTYPE'", 
                                                            "'GEOMFROMTEXT'", 
                                                            "'GEOMFROMWKB'", 
                                                            "'GET_FORMAT'", 
                                                            "'GET_LOCK'", 
                                                            "'GLENGTH'", 
                                                            "'GREATEST'", 
                                                            "'GTID_SUBSET'", 
                                                            "'GTID_SUBTRACT'", 
                                                            "'HEX'", "'IFNULL'", 
                                                            "'INET6_ATON'", 
                                                            "'INET6_NTOA'", 
                                                            "'INET_ATON'", 
                                                            "'INET_NTOA'", 
                                                            "'INSTR'", "'INTERIORRINGN'", 
                                                            "'INTERSECTS'", 
                                                            "'ISCLOSED'", 
                                                            "'ISEMPTY'", 
                                                            "'ISNULL'", 
                                                            "'ISSIMPLE'", 
                                                            "'IS_FREE_LOCK'", 
                                                            "'IS_IPV4'", 
                                                            "'IS_IPV4_COMPAT'", 
                                                            "'IS_IPV4_MAPPED'", 
                                                            "'IS_IPV6'", 
                                                            "'IS_USED_LOCK'", 
                                                            "'LAST_INSERT_ID'", 
                                                            "'LCASE'", "'LEAST'", 
                                                            "'LENGTH'", 
                                                            "'LINEFROMTEXT'", 
                                                            "'LINEFROMWKB'", 
                                                            "'LINESTRINGFROMTEXT'", 
                                                            "'LINESTRINGFROMWKB'", 
                                                            "'LN'", "'LOAD_FILE'", 
                                                            "'LOCATE'", 
                                                            "'LOG'", "'LOG10'", 
                                                            "'LOG2'", "'LOWER'", 
                                                            "'LPAD'", "'LTRIM'", 
                                                            "'MAKEDATE'", 
                                                            "'MAKETIME'", 
                                                            "'MAKE_SET'", 
                                                            "'MASTER_POS_WAIT'", 
                                                            "'MBRCONTAINS'", 
                                                            "'MBRDISJOINT'", 
                                                            "'MBREQUAL'", 
                                                            "'MBRINTERSECTS'", 
                                                            "'MBROVERLAPS'", 
                                                            "'MBRTOUCHES'", 
                                                            "'MBRWITHIN'", 
                                                            "'MD5'", "'MLINEFROMTEXT'", 
                                                            "'MLINEFROMWKB'", 
                                                            "'MONTHNAME'", 
                                                            "'MPOINTFROMTEXT'", 
                                                            "'MPOINTFROMWKB'", 
                                                            "'MPOLYFROMTEXT'", 
                                                            "'MPOLYFROMWKB'", 
                                                            "'MULTILINESTRINGFROMTEXT'", 
                                                            "'MULTILINESTRINGFROMWKB'", 
                                                            "'MULTIPOINTFROMTEXT'", 
                                                            "'MULTIPOINTFROMWKB'", 
                                                            "'MULTIPOLYGONFROMTEXT'", 
                                                            "'MULTIPOLYGONFROMWKB'", 
                                                            "'NAME_CONST'", 
                                                            "'NULLIF'", 
                                                            "'NUMGEOMETRIES'", 
                                                            "'NUMINTERIORRINGS'", 
                                                            "'NUMPOINTS'", 
                                                            "'OCT'", "'OCTET_LENGTH'", 
                                                            "'ORD'", "'OVERLAPS'", 
                                                            "'PERIOD_ADD'", 
                                                            "'PERIOD_DIFF'", 
                                                            "'PI'", "'POINTFROMTEXT'", 
                                                            "'POINTFROMWKB'", 
                                                            "'POINTN'", 
                                                            "'POLYFROMTEXT'", 
                                                            "'POLYFROMWKB'", 
                                                            "'POLYGONFROMTEXT'", 
                                                            "'POLYGONFROMWKB'", 
                                                            "'POW'", "'POWER'", 
                                                            "'QUOTE'", "'RADIANS'", 
                                                            "'RAND'", "'RANDOM'", 
                                                            "'RANDOM_BYTES'", 
                                                            "'RELEASE_LOCK'", 
                                                            "'REVERSE'", 
                                                            "'ROUND'", "'ROW_COUNT'", 
                                                            "'RPAD'", "'RTRIM'", 
                                                            "'SEC_TO_TIME'", 
                                                            "'SECONDARY_ENGINE_ATTRIBUTE'", 
                                                            "'SESSION_USER'", 
                                                            "'SHA'", "'SHA1'", 
                                                            "'SHA2'", "'SCHEMA_NAME'", 
                                                            "'SIGN'", "'SIN'", 
                                                            "'SLEEP'", "'SOUNDEX'", 
                                                            "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
                                                            "'SQRT'", "'SRID'", 
                                                            "'STARTPOINT'", 
                                                            "'STRCMP'", 
                                                            "'STR_TO_DATE'", 
                                                            "'ST_AREA'", 
                                                            "'ST_ASBINARY'", 
                                                            "'ST_ASTEXT'", 
                                                            "'ST_ASWKB'", 
                                                            "'ST_ASWKT'", 
                                                            "'ST_BUFFER'", 
                                                            "'ST_CENTROID'", 
                                                            "'ST_CONTAINS'", 
                                                            "'ST_CROSSES'", 
                                                            "'ST_DIFFERENCE'", 
                                                            "'ST_DIMENSION'", 
                                                            "'ST_DISJOINT'", 
                                                            "'ST_DISTANCE'", 
                                                            "'ST_ENDPOINT'", 
                                                            "'ST_ENVELOPE'", 
                                                            "'ST_EQUALS'", 
                                                            "'ST_EXTERIORRING'", 
                                                            "'ST_GEOMCOLLFROMTEXT'", 
                                                            "'ST_GEOMCOLLFROMTXT'", 
                                                            "'ST_GEOMCOLLFROMWKB'", 
                                                            "'ST_GEOMETRYCOLLECTIONFROMTEXT'", 
                                                            "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
                                                            "'ST_GEOMETRYFROMTEXT'", 
                                                            "'ST_GEOMETRYFROMWKB'", 
                                                            "'ST_GEOMETRYN'", 
                                                            "'ST_GEOMETRYTYPE'", 
                                                            "'ST_GEOMFROMTEXT'", 
                                                            "'ST_GEOMFROMWKB'", 
                                                            "'ST_INTERIORRINGN'", 
                                                            "'ST_INTERSECTION'", 
                                                            "'ST_INTERSECTS'", 
                                                            "'ST_ISCLOSED'", 
                                                            "'ST_ISEMPTY'", 
                                                            "'ST_ISSIMPLE'", 
                                                            "'ST_LINEFROMTEXT'", 
                                                            "'ST_LINEFROMWKB'", 
                                                            "'ST_LINESTRINGFROMTEXT'", 
                                                            "'ST_LINESTRINGFROMWKB'", 
                                                            "'ST_NUMGEOMETRIES'", 
                                                            "'ST_NUMINTERIORRING'", 
                                                            "'ST_NUMINTERIORRINGS'", 
                                                            "'ST_NUMPOINTS'", 
                                                            "'ST_OVERLAPS'", 
                                                            "'ST_POINTFROMTEXT'", 
                                                            "'ST_POINTFROMWKB'", 
                                                            "'ST_POINTN'", 
                                                            "'ST_POLYFROMTEXT'", 
                                                            "'ST_POLYFROMWKB'", 
                                                            "'ST_POLYGONFROMTEXT'", 
                                                            "'ST_POLYGONFROMWKB'", 
                                                            "'ST_SRID'", 
                                                            "'ST_STARTPOINT'", 
                                                            "'ST_SYMDIFFERENCE'", 
                                                            "'ST_TOUCHES'", 
                                                            "'ST_UNION'", 
                                                            "'ST_WITHIN'", 
                                                            "'ST_X'", "'ST_Y'", 
                                                            "'SUBDATE'", 
                                                            "'SUBSTRING_INDEX'", 
                                                            "'SUBTIME'", 
                                                            "'SYSTEM_USER'", 
                                                            "'TAN'", "'TIMEDIFF'", 
                                                            "'TIMESTAMPADD'", 
                                                            "'TIMESTAMPDIFF'", 
                                                            "'TIME_FORMAT'", 
                                                            "'TIME_TO_SEC'", 
                                                            "'TOUCHES'", 
                                                            "'TO_BASE64'", 
                                                            "'TO_DAYS'", 
                                                            "'TO_SECONDS'", 
                                                            "'TP_CONNECTION_ADMIN'", 
                                                            "'UCASE'", "'UNCOMPRESS'", 
                                                            "'UNCOMPRESSED_LENGTH'", 
                                                            "'UNHEX'", "'UNIX_TIMESTAMP'", 
                                                            "'UPDATEXML'", 
                                                            "'UPPER'", "'UUID'", 
                                                            "'UUID_SHORT'", 
                                                            "'VALIDATE_PASSWORD_STRENGTH'", 
                                                            "'VERSION'", 
                                                            "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
                                                            "'WEEKDAY'", 
                                                            "'WEEKOFYEAR'", 
                                                            "'WEIGHT_STRING'", 
                                                            "'WITHIN'", 
                                                            "'YEARWEEK'", 
                                                            "'Y'", "'X'", 
                                                            "':='", "'+='", 
                                                            "'-='", "'*='", 
                                                            "'/='", "'%='", 
                                                            "'&='", "'^='", 
                                                            "'|='", "'*'", 
                                                            "'/'", "'%'", 
                                                            "'+'", "'-'", 
                                                            "'DIV'", "'MOD'", 
                                                            "'='", "'>'", 
                                                            "'<'", "'!'", 
                                                            "'~'", "'|'", 
                                                            "'&'", "'^'", 
                                                            "'.'", "'('", 
                                                            "')'", "','", 
                                                            "';'", "'@'", 
                                                            "'0'", "'1'", 
                                                            "'2'", "'''", 
                                                            "'\"'", "'`'", 
                                                            "':'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "SPACE", 
                                                             "SPEC_MYSQL_COMMENT", 
                                                             "COMMENT_INPUT", 
                                                             "LINE_COMMENT", 
                                                             "ADD", "ALL", 
                                                             "ALTER", "ALWAYS", 
                                                             "ANALYZE", 
                                                             "AND", "ARRAY", 
                                                             "AS", "ASC", 
                                                             "ATTRIBUTE", 
                                                             "BEFORE", "BETWEEN", 
                                                             "BOTH", "BUCKETS", 
                                                             "BY", "CALL", 
                                                             "CASCADE", 
                                                             "CASE", "CAST", 
                                                             "CHANGE", "CHARACTER", 
                                                             "CHECK", "COLLATE", 
                                                             "COLUMN", "CONDITION", 
                                                             "CONSTRAINT", 
                                                             "CONTINUE", 
                                                             "CONVERT", 
                                                             "CREATE", "CROSS", 
                                                             "CURRENT", 
                                                             "CURRENT_ROLE", 
                                                             "CURRENT_USER", 
                                                             "CURSOR", "DATABASE", 
                                                             "DATABASES", 
                                                             "DECLARE", 
                                                             "DEFAULT", 
                                                             "DELAYED", 
                                                             "DELETE", "DESC", 
                                                             "DESCRIBE", 
                                                             "DETERMINISTIC", 
                                                             "DIAGNOSTICS", 
                                                             "DISTINCT", 
                                                             "DISTINCTROW", 
                                                             "DROP", "EACH", 
                                                             "ELSE", "ELSEIF", 
                                                             "EMPTY", "ENCLOSED", 
                                                             "ENFORCED", 
                                                             "ESCAPED", 
                                                             "EXCEPT", "EXISTS", 
                                                             "EXIT", "EXPLAIN", 
                                                             "FALSE", "FETCH", 
                                                             "FOR", "FORCE", 
                                                             "FOREIGN", 
                                                             "FROM", "FULLTEXT", 
                                                             "GENERATED", 
                                                             "GET", "GRANT", 
                                                             "GROUP", "HAVING", 
                                                             "HIGH_PRIORITY", 
                                                             "HISTOGRAM", 
                                                             "IF", "IGNORE", 
                                                             "IGNORED", 
                                                             "IN", "INDEX", 
                                                             "INFILE", "INNER", 
                                                             "INOUT", "INSERT", 
                                                             "INTERVAL", 
                                                             "INTO", "IS", 
                                                             "ITERATE", 
                                                             "JOIN", "KEY", 
                                                             "KEYS", "KILL", 
                                                             "LATERAL", 
                                                             "LEADING", 
                                                             "LEAVE", "LEFT", 
                                                             "LIKE", "LIMIT", 
                                                             "LINEAR", "LINES", 
                                                             "LOAD", "LOCK", 
                                                             "LOCKED", "LOOP", 
                                                             "LOW_PRIORITY", 
                                                             "MASTER_BIND", 
                                                             "MASTER_SSL_VERIFY_SERVER_CERT", 
                                                             "MATCH", "MAXVALUE", 
                                                             "MINVALUE", 
                                                             "MODIFIES", 
                                                             "NATURAL", 
                                                             "NOT", "NO_WRITE_TO_BINLOG", 
                                                             "NULL_LITERAL", 
                                                             "NUMBER", "ON", 
                                                             "OPTIMIZE", 
                                                             "OPTION", "OPTIONAL", 
                                                             "OPTIONALLY", 
                                                             "OR", "ORDER", 
                                                             "OUT", "OUTER", 
                                                             "OUTFILE", 
                                                             "OVER", "PARTITION", 
                                                             "PRIMARY", 
                                                             "PROCEDURE", 
                                                             "PURGE", "RANGE", 
                                                             "READ", "READS", 
                                                             "REFERENCES", 
                                                             "REGEXP", "RELEASE", 
                                                             "RENAME", "REPEAT", 
                                                             "REPLACE", 
                                                             "REQUIRE", 
                                                             "RESIGNAL", 
                                                             "RESTRICT", 
                                                             "RETAIN", "RETURN", 
                                                             "REVOKE", "RIGHT", 
                                                             "RLIKE", "SCHEMA", 
                                                             "SCHEMAS", 
                                                             "SELECT", "SET", 
                                                             "SEPARATOR", 
                                                             "SHOW", "SIGNAL", 
                                                             "SKIP_", "SKIP_QUERY_REWRITE", 
                                                             "SPATIAL", 
                                                             "SQL", "SQLEXCEPTION", 
                                                             "SQLSTATE", 
                                                             "SQLWARNING", 
                                                             "SQL_BIG_RESULT", 
                                                             "SQL_CALC_FOUND_ROWS", 
                                                             "SQL_SMALL_RESULT", 
                                                             "SSL", "STACKED", 
                                                             "STARTING", 
                                                             "STATEMENT", 
                                                             "STRAIGHT_JOIN", 
                                                             "TABLE", "TERMINATED", 
                                                             "THEN", "TO", 
                                                             "TRAILING", 
                                                             "TRIGGER", 
                                                             "TRUE", "UNDO", 
                                                             "UNION", "UNIQUE", 
                                                             "UNLOCK", "UNSIGNED", 
                                                             "UPDATE", "USAGE", 
                                                             "USE", "USING", 
                                                             "VALUES", "WHEN", 
                                                             "WHERE", "WHILE", 
                                                             "WITH", "WRITE", 
                                                             "XOR", "ZEROFILL", 
                                                             "TINYINT", 
                                                             "SMALLINT", 
                                                             "MEDIUMINT", 
                                                             "MIDDLEINT", 
                                                             "INT", "INT1", 
                                                             "INT2", "INT3", 
                                                             "INT4", "INT8", 
                                                             "INTEGER", 
                                                             "BIGINT", "REAL", 
                                                             "DOUBLE", "PRECISION", 
                                                             "FLOAT", "FLOAT4", 
                                                             "FLOAT8", "DECIMAL", 
                                                             "DEC", "NUMERIC", 
                                                             "DATE", "TIME", 
                                                             "TIMESTAMP", 
                                                             "DATETIME", 
                                                             "YEAR", "CHAR", 
                                                             "VARCHAR", 
                                                             "NVARCHAR", 
                                                             "NATIONAL", 
                                                             "BINARY", "VARBINARY", 
                                                             "TINYBLOB", 
                                                             "BLOB", "MEDIUMBLOB", 
                                                             "LONG", "LONGBLOB", 
                                                             "TINYTEXT", 
                                                             "TEXT", "MEDIUMTEXT", 
                                                             "LONGTEXT", 
                                                             "ENUM", "VARYING", 
                                                             "SERIAL", "YEAR_MONTH", 
                                                             "DAY_HOUR", 
                                                             "DAY_MINUTE", 
                                                             "DAY_SECOND", 
                                                             "HOUR_MINUTE", 
                                                             "HOUR_SECOND", 
                                                             "MINUTE_SECOND", 
                                                             "SECOND_MICROSECOND", 
                                                             "MINUTE_MICROSECOND", 
                                                             "HOUR_MICROSECOND", 
                                                             "DAY_MICROSECOND", 
                                                             "JSON_ARRAY", 
                                                             "JSON_ARRAYAGG", 
                                                             "JSON_ARRAY_APPEND", 
                                                             "JSON_ARRAY_INSERT", 
                                                             "JSON_CONTAINS", 
                                                             "JSON_CONTAINS_PATH", 
                                                             "JSON_DEPTH", 
                                                             "JSON_EXTRACT", 
                                                             "JSON_INSERT", 
                                                             "JSON_KEYS", 
                                                             "JSON_LENGTH", 
                                                             "JSON_MERGE", 
                                                             "JSON_MERGE_PATCH", 
                                                             "JSON_MERGE_PRESERVE", 
                                                             "JSON_OBJECT", 
                                                             "JSON_OBJECTAGG", 
                                                             "JSON_OVERLAPS", 
                                                             "JSON_PRETTY", 
                                                             "JSON_QUOTE", 
                                                             "JSON_REMOVE", 
                                                             "JSON_REPLACE", 
                                                             "JSON_SCHEMA_VALID", 
                                                             "JSON_SCHEMA_VALIDATION_REPORT", 
                                                             "JSON_SEARCH", 
                                                             "JSON_SET", 
                                                             "JSON_STORAGE_FREE", 
                                                             "JSON_STORAGE_SIZE", 
                                                             "JSON_TABLE", 
                                                             "JSON_TYPE", 
                                                             "JSON_UNQUOTE", 
                                                             "JSON_VALID", 
                                                             "JSON_VALUE", 
                                                             "NESTED", "ORDINALITY", 
                                                             "PATH", "AVG", 
                                                             "BIT_AND", 
                                                             "BIT_OR", "BIT_XOR", 
                                                             "COUNT", "CUME_DIST", 
                                                             "DENSE_RANK", 
                                                             "FIRST_VALUE", 
                                                             "GROUP_CONCAT", 
                                                             "LAG", "LAST_VALUE", 
                                                             "LEAD", "MAX", 
                                                             "MIN", "NTILE", 
                                                             "NTH_VALUE", 
                                                             "PERCENT_RANK", 
                                                             "RANK", "ROW_NUMBER", 
                                                             "STD", "STDDEV", 
                                                             "STDDEV_POP", 
                                                             "STDDEV_SAMP", 
                                                             "SUM", "VAR_POP", 
                                                             "VAR_SAMP", 
                                                             "VARIANCE", 
                                                             "CURRENT_DATE", 
                                                             "CURRENT_TIME", 
                                                             "CURRENT_TIMESTAMP", 
                                                             "LOCALTIME", 
                                                             "CURDATE", 
                                                             "CURTIME", 
                                                             "DATE_ADD", 
                                                             "DATE_SUB", 
                                                             "EXTRACT", 
                                                             "LOCALTIMESTAMP", 
                                                             "NOW", "POSITION", 
                                                             "SUBSTR", "SUBSTRING", 
                                                             "SYSDATE", 
                                                             "TRIM", "UTC_DATE", 
                                                             "UTC_TIME", 
                                                             "UTC_TIMESTAMP", 
                                                             "ACCOUNT", 
                                                             "ACTION", "AFTER", 
                                                             "AGGREGATE", 
                                                             "ALGORITHM", 
                                                             "ANY", "AT", 
                                                             "AUTHORS", 
                                                             "AUTOCOMMIT", 
                                                             "AUTOEXTEND_SIZE", 
                                                             "AUTO_INCREMENT", 
                                                             "AVG_ROW_LENGTH", 
                                                             "BEGIN", "BINLOG", 
                                                             "BIT", "BLOCK", 
                                                             "BOOL", "BOOLEAN", 
                                                             "BTREE", "CACHE", 
                                                             "CASCADED", 
                                                             "CHAIN", "CHANGED", 
                                                             "CHANNEL", 
                                                             "CHECKSUM", 
                                                             "PAGE_CHECKSUM", 
                                                             "CIPHER", "CLASS_ORIGIN", 
                                                             "CLIENT", "CLOSE", 
                                                             "CLUSTERING", 
                                                             "COALESCE", 
                                                             "CODE", "COLUMNS", 
                                                             "COLUMN_FORMAT", 
                                                             "COLUMN_NAME", 
                                                             "COMMENT", 
                                                             "COMMIT", "COMPACT", 
                                                             "COMPLETION", 
                                                             "COMPRESSED", 
                                                             "COMPRESSION", 
                                                             "CONCURRENT", 
                                                             "CONNECT", 
                                                             "CONNECTION", 
                                                             "CONSISTENT", 
                                                             "CONSTRAINT_CATALOG", 
                                                             "CONSTRAINT_SCHEMA", 
                                                             "CONSTRAINT_NAME", 
                                                             "CONTAINS", 
                                                             "CONTEXT", 
                                                             "CONTRIBUTORS", 
                                                             "COPY", "CPU", 
                                                             "CYCLE", "CURSOR_NAME", 
                                                             "DATA", "DATAFILE", 
                                                             "DEALLOCATE", 
                                                             "DEFAULT_AUTH", 
                                                             "DEFINER", 
                                                             "DELAY_KEY_WRITE", 
                                                             "DES_KEY_FILE", 
                                                             "DIRECTORY", 
                                                             "DISABLE", 
                                                             "DISCARD", 
                                                             "DISK", "DO", 
                                                             "DUMPFILE", 
                                                             "DUPLICATE", 
                                                             "DYNAMIC", 
                                                             "ENABLE", "ENCRYPTED", 
                                                             "ENCRYPTION", 
                                                             "ENCRYPTION_KEY_ID", 
                                                             "END", "ENDS", 
                                                             "ENGINE", "ENGINES", 
                                                             "ERROR", "ERRORS", 
                                                             "ESCAPE", "EVEN", 
                                                             "EVENT", "EVENTS", 
                                                             "EVERY", "EXCHANGE", 
                                                             "EXCLUSIVE", 
                                                             "EXPIRE", "EXPORT", 
                                                             "EXTENDED", 
                                                             "EXTENT_SIZE", 
                                                             "FAILED_LOGIN_ATTEMPTS", 
                                                             "FAST", "FAULTS", 
                                                             "FIELDS", "FILE_BLOCK_SIZE", 
                                                             "FILTER", "FIRST", 
                                                             "FIXED", "FLUSH", 
                                                             "FOLLOWING", 
                                                             "FOLLOWS", 
                                                             "FOUND", "FULL", 
                                                             "FUNCTION", 
                                                             "GENERAL", 
                                                             "GLOBAL", "GRANTS", 
                                                             "GROUP_REPLICATION", 
                                                             "HANDLER", 
                                                             "HASH", "HELP", 
                                                             "HISTORY", 
                                                             "HOST", "HOSTS", 
                                                             "IDENTIFIED", 
                                                             "IGNORE_SERVER_IDS", 
                                                             "IMPORT", "INCREMENT", 
                                                             "INDEXES", 
                                                             "INITIAL_SIZE", 
                                                             "INPLACE", 
                                                             "INSERT_METHOD", 
                                                             "INSTALL", 
                                                             "INSTANCE", 
                                                             "INSTANT", 
                                                             "INVISIBLE", 
                                                             "INVOKER", 
                                                             "IO", "IO_THREAD", 
                                                             "IPC", "ISOLATION", 
                                                             "ISSUER", "JSON", 
                                                             "KEY_BLOCK_SIZE", 
                                                             "LANGUAGE", 
                                                             "LAST", "LEAVES", 
                                                             "LESS", "LEVEL", 
                                                             "LIST", "LOCAL", 
                                                             "LOGFILE", 
                                                             "LOGS", "MASTER", 
                                                             "MASTER_AUTO_POSITION", 
                                                             "MASTER_CONNECT_RETRY", 
                                                             "MASTER_DELAY", 
                                                             "MASTER_HEARTBEAT_PERIOD", 
                                                             "MASTER_HOST", 
                                                             "MASTER_LOG_FILE", 
                                                             "MASTER_LOG_POS", 
                                                             "MASTER_PASSWORD", 
                                                             "MASTER_PORT", 
                                                             "MASTER_RETRY_COUNT", 
                                                             "MASTER_SSL", 
                                                             "MASTER_SSL_CA", 
                                                             "MASTER_SSL_CAPATH", 
                                                             "MASTER_SSL_CERT", 
                                                             "MASTER_SSL_CIPHER", 
                                                             "MASTER_SSL_CRL", 
                                                             "MASTER_SSL_CRLPATH", 
                                                             "MASTER_SSL_KEY", 
                                                             "MASTER_TLS_VERSION", 
                                                             "MASTER_USER", 
                                                             "MAX_CONNECTIONS_PER_HOUR", 
                                                             "MAX_QUERIES_PER_HOUR", 
                                                             "MAX_ROWS", 
                                                             "MAX_SIZE", 
                                                             "MAX_UPDATES_PER_HOUR", 
                                                             "MAX_USER_CONNECTIONS", 
                                                             "MEDIUM", "MEMBER", 
                                                             "MERGE", "MESSAGE_TEXT", 
                                                             "MID", "MIGRATE", 
                                                             "MIN_ROWS", 
                                                             "MODE", "MODIFY", 
                                                             "MUTEX", "MYSQL", 
                                                             "MYSQL_ERRNO", 
                                                             "NAME", "NAMES", 
                                                             "NCHAR", "NEVER", 
                                                             "NEXT", "NO", 
                                                             "NOCACHE", 
                                                             "NOCOPY", "NOCYCLE", 
                                                             "NOMAXVALUE", 
                                                             "NOMINVALUE", 
                                                             "NOWAIT", "NODEGROUP", 
                                                             "NONE", "ODBC", 
                                                             "OFFLINE", 
                                                             "OFFSET", "OF", 
                                                             "OJ", "OLD_PASSWORD", 
                                                             "ONE", "ONLINE", 
                                                             "ONLY", "OPEN", 
                                                             "OPTIMIZER_COSTS", 
                                                             "OPTIONS", 
                                                             "OWNER", "PACK_KEYS", 
                                                             "PAGE", "PAGE_COMPRESSED", 
                                                             "PAGE_COMPRESSION_LEVEL", 
                                                             "PARSER", "PARTIAL", 
                                                             "PARTITIONING", 
                                                             "PARTITIONS", 
                                                             "PASSWORD", 
                                                             "PASSWORD_LOCK_TIME", 
                                                             "PHASE", "PLUGIN", 
                                                             "PLUGIN_DIR", 
                                                             "PLUGINS", 
                                                             "PORT", "PRECEDES", 
                                                             "PRECEDING", 
                                                             "PREPARE", 
                                                             "PRESERVE", 
                                                             "PREV", "PROCESSLIST", 
                                                             "PROFILE", 
                                                             "PROFILES", 
                                                             "PROXY", "QUERY", 
                                                             "QUICK", "REBUILD", 
                                                             "RECOVER", 
                                                             "RECURSIVE", 
                                                             "REDO_BUFFER_SIZE", 
                                                             "REDUNDANT", 
                                                             "RELAY", "RELAY_LOG_FILE", 
                                                             "RELAY_LOG_POS", 
                                                             "RELAYLOG", 
                                                             "REMOVE", "REORGANIZE", 
                                                             "REPAIR", "REPLICATE_DO_DB", 
                                                             "REPLICATE_DO_TABLE", 
                                                             "REPLICATE_IGNORE_DB", 
                                                             "REPLICATE_IGNORE_TABLE", 
                                                             "REPLICATE_REWRITE_DB", 
                                                             "REPLICATE_WILD_DO_TABLE", 
                                                             "REPLICATE_WILD_IGNORE_TABLE", 
                                                             "REPLICATION", 
                                                             "RESET", "RESTART", 
                                                             "RESUME", "RETURNED_SQLSTATE", 
                                                             "RETURNING", 
                                                             "RETURNS", 
                                                             "REUSE", "ROLE", 
                                                             "ROLLBACK", 
                                                             "ROLLUP", "ROTATE", 
                                                             "ROW", "ROWS", 
                                                             "ROW_FORMAT", 
                                                             "RTREE", "SAVEPOINT", 
                                                             "SCHEDULE", 
                                                             "SECURITY", 
                                                             "SEQUENCE", 
                                                             "SERVER", "SESSION", 
                                                             "SHARE", "SHARED", 
                                                             "SIGNED", "SIMPLE", 
                                                             "SLAVE", "SLOW", 
                                                             "SNAPSHOT", 
                                                             "SOCKET", "SOME", 
                                                             "SONAME", "SOUNDS", 
                                                             "SOURCE", "SQL_AFTER_GTIDS", 
                                                             "SQL_AFTER_MTS_GAPS", 
                                                             "SQL_BEFORE_GTIDS", 
                                                             "SQL_BUFFER_RESULT", 
                                                             "SQL_CACHE", 
                                                             "SQL_NO_CACHE", 
                                                             "SQL_THREAD", 
                                                             "START", "STARTS", 
                                                             "STATS_AUTO_RECALC", 
                                                             "STATS_PERSISTENT", 
                                                             "STATS_SAMPLE_PAGES", 
                                                             "STATUS", "STOP", 
                                                             "STORAGE", 
                                                             "STORED", "STRING", 
                                                             "SUBCLASS_ORIGIN", 
                                                             "SUBJECT", 
                                                             "SUBPARTITION", 
                                                             "SUBPARTITIONS", 
                                                             "SUSPEND", 
                                                             "SWAPS", "SWITCHES", 
                                                             "TABLE_NAME", 
                                                             "TABLESPACE", 
                                                             "TABLE_TYPE", 
                                                             "TEMPORARY", 
                                                             "TEMPTABLE", 
                                                             "THAN", "TRADITIONAL", 
                                                             "TRANSACTION", 
                                                             "TRANSACTIONAL", 
                                                             "TRIGGERS", 
                                                             "TRUNCATE", 
                                                             "UNBOUNDED", 
                                                             "UNDEFINED", 
                                                             "UNDOFILE", 
                                                             "UNDO_BUFFER_SIZE", 
                                                             "UNINSTALL", 
                                                             "UNKNOWN", 
                                                             "UNTIL", "UPGRADE", 
                                                             "USER", "USE_FRM", 
                                                             "USER_RESOURCES", 
                                                             "VALIDATION", 
                                                             "VALUE", "VARIABLES", 
                                                             "VIEW", "VIRTUAL", 
                                                             "VISIBLE", 
                                                             "WAIT", "WARNINGS", 
                                                             "WINDOW", "WITHOUT", 
                                                             "WORK", "WRAPPER", 
                                                             "X509", "XA", 
                                                             "XML", "YES", 
                                                             "EUR", "USA", 
                                                             "JIS", "ISO", 
                                                             "INTERNAL", 
                                                             "QUARTER", 
                                                             "MONTH", "DAY", 
                                                             "HOUR", "MINUTE", 
                                                             "WEEK", "SECOND", 
                                                             "MICROSECOND", 
                                                             "ADMIN", "APPLICATION_PASSWORD_ADMIN", 
                                                             "AUDIT_ABORT_EXEMPT", 
                                                             "AUDIT_ADMIN", 
                                                             "AUTHENTICATION_POLICY_ADMIN", 
                                                             "BACKUP_ADMIN", 
                                                             "BINLOG_ADMIN", 
                                                             "BINLOG_ENCRYPTION_ADMIN", 
                                                             "CLONE_ADMIN", 
                                                             "CONNECTION_ADMIN", 
                                                             "ENCRYPTION_KEY_ADMIN", 
                                                             "EXECUTE", 
                                                             "FILE", "FIREWALL_ADMIN", 
                                                             "FIREWALL_EXEMPT", 
                                                             "FIREWALL_USER", 
                                                             "FLUSH_OPTIMIZER_COSTS", 
                                                             "FLUSH_STATUS", 
                                                             "FLUSH_TABLES", 
                                                             "FLUSH_USER_RESOURCES", 
                                                             "GROUP_REPLICATION_ADMIN", 
                                                             "INNODB_REDO_LOG_ARCHIVE", 
                                                             "INNODB_REDO_LOG_ENABLE", 
                                                             "INVOKE", "LAMBDA", 
                                                             "NDB_STORED_USER", 
                                                             "PASSWORDLESS_USER_ADMIN", 
                                                             "PERSIST_RO_VARIABLES_ADMIN", 
                                                             "PRIVILEGES", 
                                                             "PROCESS", 
                                                             "RELOAD", "REPLICATION_APPLIER", 
                                                             "REPLICATION_SLAVE_ADMIN", 
                                                             "RESOURCE_GROUP_ADMIN", 
                                                             "RESOURCE_GROUP_USER", 
                                                             "ROLE_ADMIN", 
                                                             "ROUTINE", 
                                                             "S3", "SERVICE_CONNECTION_ADMIN", 
                                                             "SESSION_VARIABLES_ADMIN", 
                                                             "SET_USER_ID", 
                                                             "SHOW_ROUTINE", 
                                                             "SHUTDOWN", 
                                                             "SUPER", "SYSTEM_VARIABLES_ADMIN", 
                                                             "TABLES", "TABLE_ENCRYPTION_ADMIN", 
                                                             "VERSION_TOKEN_ADMIN", 
                                                             "XA_RECOVER_ADMIN", 
                                                             "ARMSCII8", 
                                                             "ASCII", "BIG5", 
                                                             "CP1250", "CP1251", 
                                                             "CP1256", "CP1257", 
                                                             "CP850", "CP852", 
                                                             "CP866", "CP932", 
                                                             "DEC8", "EUCJPMS", 
                                                             "EUCKR", "GB18030", 
                                                             "GB2312", "GBK", 
                                                             "GEOSTD8", 
                                                             "GREEK", "HEBREW", 
                                                             "HP8", "KEYBCS2", 
                                                             "KOI8R", "KOI8U", 
                                                             "LATIN1", "LATIN2", 
                                                             "LATIN5", "LATIN7", 
                                                             "MACCE", "MACROMAN", 
                                                             "SJIS", "SWE7", 
                                                             "TIS620", "UCS2", 
                                                             "UJIS", "UTF16", 
                                                             "UTF16LE", 
                                                             "UTF32", "UTF8", 
                                                             "UTF8MB3", 
                                                             "UTF8MB4", 
                                                             "ARCHIVE", 
                                                             "BLACKHOLE", 
                                                             "CSV", "FEDERATED", 
                                                             "INNODB", "MEMORY", 
                                                             "MRG_MYISAM", 
                                                             "MYISAM", "NDB", 
                                                             "NDBCLUSTER", 
                                                             "PERFORMANCE_SCHEMA", 
                                                             "TOKUDB", "REPEATABLE", 
                                                             "COMMITTED", 
                                                             "UNCOMMITTED", 
                                                             "SERIALIZABLE", 
                                                             "GEOMETRYCOLLECTION", 
                                                             "GEOMCOLLECTION", 
                                                             "GEOMETRY", 
                                                             "LINESTRING", 
                                                             "MULTILINESTRING", 
                                                             "MULTIPOINT", 
                                                             "MULTIPOLYGON", 
                                                             "POINT", "POLYGON", 
                                                             "ABS", "ACOS", 
                                                             "ADDDATE", 
                                                             "ADDTIME", 
                                                             "AES_DECRYPT", 
                                                             "AES_ENCRYPT", 
                                                             "AREA", "ASBINARY", 
                                                             "ASIN", "ASTEXT", 
                                                             "ASWKB", "ASWKT", 
                                                             "ASYMMETRIC_DECRYPT", 
                                                             "ASYMMETRIC_DERIVE", 
                                                             "ASYMMETRIC_ENCRYPT", 
                                                             "ASYMMETRIC_SIGN", 
                                                             "ASYMMETRIC_VERIFY", 
                                                             "ATAN", "ATAN2", 
                                                             "BENCHMARK", 
                                                             "BIN", "BIT_COUNT", 
                                                             "BIT_LENGTH", 
                                                             "BUFFER", "CATALOG_NAME", 
                                                             "CEIL", "CEILING", 
                                                             "CENTROID", 
                                                             "CHARACTER_LENGTH", 
                                                             "CHARSET", 
                                                             "CHAR_LENGTH", 
                                                             "COERCIBILITY", 
                                                             "COLLATION", 
                                                             "COMPRESS", 
                                                             "CONCAT", "CONCAT_WS", 
                                                             "CONNECTION_ID", 
                                                             "CONV", "CONVERT_TZ", 
                                                             "COS", "COT", 
                                                             "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
                                                             "CREATE_ASYMMETRIC_PUB_KEY", 
                                                             "CREATE_DH_PARAMETERS", 
                                                             "CREATE_DIGEST", 
                                                             "CROSSES", 
                                                             "DATEDIFF", 
                                                             "DATE_FORMAT", 
                                                             "DAYNAME", 
                                                             "DAYOFMONTH", 
                                                             "DAYOFWEEK", 
                                                             "DAYOFYEAR", 
                                                             "DECODE", "DEGREES", 
                                                             "DES_DECRYPT", 
                                                             "DES_ENCRYPT", 
                                                             "DIMENSION", 
                                                             "DISJOINT", 
                                                             "ELT", "ENCODE", 
                                                             "ENCRYPT", 
                                                             "ENDPOINT", 
                                                             "ENGINE_ATTRIBUTE", 
                                                             "ENVELOPE", 
                                                             "EQUALS", "EXP", 
                                                             "EXPORT_SET", 
                                                             "EXTERIORRING", 
                                                             "EXTRACTVALUE", 
                                                             "FIELD", "FIND_IN_SET", 
                                                             "FLOOR", "FORMAT", 
                                                             "FOUND_ROWS", 
                                                             "FROM_BASE64", 
                                                             "FROM_DAYS", 
                                                             "FROM_UNIXTIME", 
                                                             "GEOMCOLLFROMTEXT", 
                                                             "GEOMCOLLFROMWKB", 
                                                             "GEOMETRYCOLLECTIONFROMTEXT", 
                                                             "GEOMETRYCOLLECTIONFROMWKB", 
                                                             "GEOMETRYFROMTEXT", 
                                                             "GEOMETRYFROMWKB", 
                                                             "GEOMETRYN", 
                                                             "GEOMETRYTYPE", 
                                                             "GEOMFROMTEXT", 
                                                             "GEOMFROMWKB", 
                                                             "GET_FORMAT", 
                                                             "GET_LOCK", 
                                                             "GLENGTH", 
                                                             "GREATEST", 
                                                             "GTID_SUBSET", 
                                                             "GTID_SUBTRACT", 
                                                             "HEX", "IFNULL", 
                                                             "INET6_ATON", 
                                                             "INET6_NTOA", 
                                                             "INET_ATON", 
                                                             "INET_NTOA", 
                                                             "INSTR", "INTERIORRINGN", 
                                                             "INTERSECTS", 
                                                             "ISCLOSED", 
                                                             "ISEMPTY", 
                                                             "ISNULL", "ISSIMPLE", 
                                                             "IS_FREE_LOCK", 
                                                             "IS_IPV4", 
                                                             "IS_IPV4_COMPAT", 
                                                             "IS_IPV4_MAPPED", 
                                                             "IS_IPV6", 
                                                             "IS_USED_LOCK", 
                                                             "LAST_INSERT_ID", 
                                                             "LCASE", "LEAST", 
                                                             "LENGTH", "LINEFROMTEXT", 
                                                             "LINEFROMWKB", 
                                                             "LINESTRINGFROMTEXT", 
                                                             "LINESTRINGFROMWKB", 
                                                             "LN", "LOAD_FILE", 
                                                             "LOCATE", "LOG", 
                                                             "LOG10", "LOG2", 
                                                             "LOWER", "LPAD", 
                                                             "LTRIM", "MAKEDATE", 
                                                             "MAKETIME", 
                                                             "MAKE_SET", 
                                                             "MASTER_POS_WAIT", 
                                                             "MBRCONTAINS", 
                                                             "MBRDISJOINT", 
                                                             "MBREQUAL", 
                                                             "MBRINTERSECTS", 
                                                             "MBROVERLAPS", 
                                                             "MBRTOUCHES", 
                                                             "MBRWITHIN", 
                                                             "MD5", "MLINEFROMTEXT", 
                                                             "MLINEFROMWKB", 
                                                             "MONTHNAME", 
                                                             "MPOINTFROMTEXT", 
                                                             "MPOINTFROMWKB", 
                                                             "MPOLYFROMTEXT", 
                                                             "MPOLYFROMWKB", 
                                                             "MULTILINESTRINGFROMTEXT", 
                                                             "MULTILINESTRINGFROMWKB", 
                                                             "MULTIPOINTFROMTEXT", 
                                                             "MULTIPOINTFROMWKB", 
                                                             "MULTIPOLYGONFROMTEXT", 
                                                             "MULTIPOLYGONFROMWKB", 
                                                             "NAME_CONST", 
                                                             "NULLIF", "NUMGEOMETRIES", 
                                                             "NUMINTERIORRINGS", 
                                                             "NUMPOINTS", 
                                                             "OCT", "OCTET_LENGTH", 
                                                             "ORD", "OVERLAPS", 
                                                             "PERIOD_ADD", 
                                                             "PERIOD_DIFF", 
                                                             "PI", "POINTFROMTEXT", 
                                                             "POINTFROMWKB", 
                                                             "POINTN", "POLYFROMTEXT", 
                                                             "POLYFROMWKB", 
                                                             "POLYGONFROMTEXT", 
                                                             "POLYGONFROMWKB", 
                                                             "POW", "POWER", 
                                                             "QUOTE", "RADIANS", 
                                                             "RAND", "RANDOM", 
                                                             "RANDOM_BYTES", 
                                                             "RELEASE_LOCK", 
                                                             "REVERSE", 
                                                             "ROUND", "ROW_COUNT", 
                                                             "RPAD", "RTRIM", 
                                                             "SEC_TO_TIME", 
                                                             "SECONDARY_ENGINE_ATTRIBUTE", 
                                                             "SESSION_USER", 
                                                             "SHA", "SHA1", 
                                                             "SHA2", "SCHEMA_NAME", 
                                                             "SIGN", "SIN", 
                                                             "SLEEP", "SOUNDEX", 
                                                             "SQL_THREAD_WAIT_AFTER_GTIDS", 
                                                             "SQRT", "SRID", 
                                                             "STARTPOINT", 
                                                             "STRCMP", "STR_TO_DATE", 
                                                             "ST_AREA", 
                                                             "ST_ASBINARY", 
                                                             "ST_ASTEXT", 
                                                             "ST_ASWKB", 
                                                             "ST_ASWKT", 
                                                             "ST_BUFFER", 
                                                             "ST_CENTROID", 
                                                             "ST_CONTAINS", 
                                                             "ST_CROSSES", 
                                                             "ST_DIFFERENCE", 
                                                             "ST_DIMENSION", 
                                                             "ST_DISJOINT", 
                                                             "ST_DISTANCE", 
                                                             "ST_ENDPOINT", 
                                                             "ST_ENVELOPE", 
                                                             "ST_EQUALS", 
                                                             "ST_EXTERIORRING", 
                                                             "ST_GEOMCOLLFROMTEXT", 
                                                             "ST_GEOMCOLLFROMTXT", 
                                                             "ST_GEOMCOLLFROMWKB", 
                                                             "ST_GEOMETRYCOLLECTIONFROMTEXT", 
                                                             "ST_GEOMETRYCOLLECTIONFROMWKB", 
                                                             "ST_GEOMETRYFROMTEXT", 
                                                             "ST_GEOMETRYFROMWKB", 
                                                             "ST_GEOMETRYN", 
                                                             "ST_GEOMETRYTYPE", 
                                                             "ST_GEOMFROMTEXT", 
                                                             "ST_GEOMFROMWKB", 
                                                             "ST_INTERIORRINGN", 
                                                             "ST_INTERSECTION", 
                                                             "ST_INTERSECTS", 
                                                             "ST_ISCLOSED", 
                                                             "ST_ISEMPTY", 
                                                             "ST_ISSIMPLE", 
                                                             "ST_LINEFROMTEXT", 
                                                             "ST_LINEFROMWKB", 
                                                             "ST_LINESTRINGFROMTEXT", 
                                                             "ST_LINESTRINGFROMWKB", 
                                                             "ST_NUMGEOMETRIES", 
                                                             "ST_NUMINTERIORRING", 
                                                             "ST_NUMINTERIORRINGS", 
                                                             "ST_NUMPOINTS", 
                                                             "ST_OVERLAPS", 
                                                             "ST_POINTFROMTEXT", 
                                                             "ST_POINTFROMWKB", 
                                                             "ST_POINTN", 
                                                             "ST_POLYFROMTEXT", 
                                                             "ST_POLYFROMWKB", 
                                                             "ST_POLYGONFROMTEXT", 
                                                             "ST_POLYGONFROMWKB", 
                                                             "ST_SRID", 
                                                             "ST_STARTPOINT", 
                                                             "ST_SYMDIFFERENCE", 
                                                             "ST_TOUCHES", 
                                                             "ST_UNION", 
                                                             "ST_WITHIN", 
                                                             "ST_X", "ST_Y", 
                                                             "SUBDATE", 
                                                             "SUBSTRING_INDEX", 
                                                             "SUBTIME", 
                                                             "SYSTEM_USER", 
                                                             "TAN", "TIMEDIFF", 
                                                             "TIMESTAMPADD", 
                                                             "TIMESTAMPDIFF", 
                                                             "TIME_FORMAT", 
                                                             "TIME_TO_SEC", 
                                                             "TOUCHES", 
                                                             "TO_BASE64", 
                                                             "TO_DAYS", 
                                                             "TO_SECONDS", 
                                                             "TP_CONNECTION_ADMIN", 
                                                             "UCASE", "UNCOMPRESS", 
                                                             "UNCOMPRESSED_LENGTH", 
                                                             "UNHEX", "UNIX_TIMESTAMP", 
                                                             "UPDATEXML", 
                                                             "UPPER", "UUID", 
                                                             "UUID_SHORT", 
                                                             "VALIDATE_PASSWORD_STRENGTH", 
                                                             "VERSION", 
                                                             "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
                                                             "WEEKDAY", 
                                                             "WEEKOFYEAR", 
                                                             "WEIGHT_STRING", 
                                                             "WITHIN", "YEARWEEK", 
                                                             "Y_FUNCTION", 
                                                             "X_FUNCTION", 
                                                             "VAR_ASSIGN", 
                                                             "PLUS_ASSIGN", 
                                                             "MINUS_ASSIGN", 
                                                             "MULT_ASSIGN", 
                                                             "DIV_ASSIGN", 
                                                             "MOD_ASSIGN", 
                                                             "AND_ASSIGN", 
                                                             "XOR_ASSIGN", 
                                                             "OR_ASSIGN", 
                                                             "STAR", "DIVIDE", 
                                                             "MODULE", "PLUS", 
                                                             "MINUS", "DIV", 
                                                             "MOD", "EQUAL_SYMBOL", 
                                                             "GREATER_SYMBOL", 
                                                             "LESS_SYMBOL", 
                                                             "EXCLAMATION_SYMBOL", 
                                                             "BIT_NOT_OP", 
                                                             "BIT_OR_OP", 
                                                             "BIT_AND_OP", 
                                                             "BIT_XOR_OP", 
                                                             "DOT", "LR_BRACKET", 
                                                             "RR_BRACKET", 
                                                             "COMMA", "SEMI", 
                                                             "AT_SIGN", 
                                                             "ZERO_DECIMAL", 
                                                             "ONE_DECIMAL", 
                                                             "TWO_DECIMAL", 
                                                             "SINGLE_QUOTE_SYMB", 
                                                             "DOUBLE_QUOTE_SYMB", 
                                                             "REVERSE_QUOTE_SYMB", 
                                                             "COLON_SYMB", 
                                                             "CHARSET_REVERSE_QOUTE_STRING", 
                                                             "FILESIZE_LITERAL", 
                                                             "START_NATIONAL_STRING_LITERAL", 
                                                             "STRING_LITERAL", 
                                                             "DECIMAL_LITERAL", 
                                                             "HEXADECIMAL_LITERAL", 
                                                             "REAL_LITERAL", 
                                                             "NULL_SPEC_LITERAL", 
                                                             "BIT_STRING", 
                                                             "STRING_CHARSET_NAME", 
                                                             "DOT_ID", "ID", 
                                                             "REVERSE_QUOTE_ID", 
                                                             "HOST_IP_ADDRESS", 
                                                             "LOCAL_ID", 
                                                             "GLOBAL_ID", 
                                                             "ERROR_RECONGNIGION" ];
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", 
		"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
		"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
		"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
		"createFunction", "createRole", "createServer", "createTable", "createTablespaceInnodb", 
		"createTablespaceNdb", "createTrigger", "withClause", "commonTableExpressions", 
		"cteName", "cteColumnName", "createView", "createDatabaseOption", "charSet", 
		"currentUserExpression", "ownerStatement", "scheduleExpression", "timestampValue", 
		"intervalExpr", "intervalType", "enableType", "indexType", "indexOption", 
		"procedureParameter", "functionParameter", "routineOption", "serverOption", 
		"createDefinitions", "createDefinition", "columnDefinition", "columnConstraint", 
		"tableConstraint", "referenceDefinition", "referenceAction", "referenceControlType", 
		"indexColumnDefinition", "tableOption", "tableType", "tablespaceStorage", 
		"partitionDefinitions", "partitionFunctionDefinition", "subpartitionFunctionDefinition", 
		"partitionDefinition", "partitionDefinerAtom", "partitionDefinerVector", 
		"subpartitionDefinition", "partitionOption", "alterDatabase", "alterEvent", 
		"alterFunction", "alterInstance", "alterLogfileGroup", "alterProcedure", 
		"alterServer", "alterTable", "alterTablespace", "alterView", "alterSpecification", 
		"alterPartitionSpecification", "dropDatabase", "dropEvent", "dropIndex", 
		"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", 
		"dropTablespace", "dropTrigger", "dropView", "dropRole", "setRole", "renameTable", 
		"renameTableClause", "truncateTable", "callStatement", "deleteStatement", 
		"doStatement", "handlerStatement", "insertStatement", "loadDataStatement", 
		"loadXmlStatement", "replaceStatement", "selectStatement", "updateStatement", 
		"valuesStatement", "insertStatementValue", "updatedElement", "assignmentField", 
		"lockClause", "singleDeleteStatement", "multipleDeleteStatement", "handlerOpenStatement", 
		"handlerReadIndexStatement", "handlerReadStatement", "handlerCloseStatement", 
		"singleUpdateStatement", "multipleUpdateStatement", "orderByClause", "orderByExpression", 
		"tableSources", "tableSource", "tableSourceItem", "indexHint", "indexHintType", 
		"joinPart", "joinSpec", "queryExpression", "queryExpressionNointo", "querySpecification", 
		"querySpecificationNointo", "unionParenthesis", "unionStatement", "lateralStatement", 
		"jsonTable", "jsonColumnList", "jsonColumn", "jsonOnEmpty", "jsonOnError", 
		"selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
		"selectFieldsInto", "selectLinesInto", "fromClause", "groupByClause", 
		"havingClause", "windowClause", "groupByItem", "limitClause", "limitClauseAtom", 
		"startTransaction", "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
		"rollbackStatement", "releaseStatement", "lockTables", "unlockTables", 
		"setAutocommitStatement", "setTransactionStatement", "transactionMode", 
		"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
		"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
		"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
		"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
		"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
		"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
		"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
		"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
		"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
		"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
		"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
		"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
		"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
		"grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", 
		"revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", 
		"authOptionClause", "authenticationRule", "tlsOption", "userResourceOption", 
		"userPasswordOption", "userLockOption", "privelegeClause", "privilege", 
		"privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable", 
		"optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
		"showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
		"showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", 
		"killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
		"tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
		"simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement", 
		"signalStatement", "resignalStatement", "signalConditionInformation", 
		"withStatement", "tableStatement", "diagnosticsStatement", "diagnosticsConditionInformationName", 
		"describeObjectClause", "fullId", "tableName", "roleName", "fullColumnName", 
		"indexColumnName", "simpleUserName", "hostName", "userName", "mysqlVariable", 
		"charsetName", "collationName", "engineName", "engineNameBase", "uuidSet", 
		"xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
		"fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
		"nullNotnull", "constant", "dataType", "collectionOptions", "convertedDataType", 
		"lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
		"uidList", "fullColumnNameList", "tables", "indexColumnNames", "expressions", 
		"expressionsWithDefaults", "constants", "simpleStrings", "userVariables", 
		"defaultValue", "currentTimestamp", "expressionOrDefault", "ifExists", 
		"ifNotExists", "orReplace", "waitNowaitClause", "functionCall", "specificFunction", 
		"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
		"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
		"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
		"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
		"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
		"predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
		"logicalOperator", "bitOperator", "multOperator", "addOperator", "jsonOperator", 
		"charsetNameBase", "transactionLevelBase", "privilegesBase", "intervalTypeBase", 
		"dataTypeBase", "keywordsCanBeId", "functionNameBase",
	];
	public get grammarFileName(): string { return "MySqlParser.g4"; }
	public get literalNames(): (string | null)[] { return MySqlParser.literalNames; }
	public get symbolicNames(): (string | null)[] { return MySqlParser.symbolicNames; }
	public get ruleNames(): string[] { return MySqlParser.ruleNames; }
	public get serializedATN(): number[] { return MySqlParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(this, MySqlParser._ATN, MySqlParser.DecisionsToDFA, new PredictionContextCache());
	}
	// @RuleVersion(0)
	public root(): RootContext {
		let localctx: RootContext = new RootContext(this, this._ctx, this.state);
		this.enterRule(localctx, 0, MySqlParser.RULE_root);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 723;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 84935296) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 537147393) !== 0) || ((((_la - 71)) & ~0x1F) === 0 && ((1 << (_la - 71)) & 2151694339) !== 0) || ((((_la - 103)) & ~0x1F) === 0 && ((1 << (_la - 103)) & 536936449) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & 442923) !== 0) || ((((_la - 172)) & ~0x1F) === 0 && ((1 << (_la - 172)) & 1135617) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 33558659) !== 0) || _la===390 || _la===399 || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & 16782337) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & 537919489) !== 0) || _la===597 || _la===604 || ((((_la - 629)) & ~0x1F) === 0 && ((1 << (_la - 629)) & 134217793) !== 0) || _la===661 || _la===681 || _la===708 || _la===739 || _la===1133 || _la===1136) {
				{
				this.state = 722;
				this.sqlStatements();
				}
			}

			this.state = 727;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1121) {
				{
				this.state = 725;
				this.match(MySqlParser.MINUS);
				this.state = 726;
				this.match(MySqlParser.MINUS);
				}
			}

			this.state = 729;
			this.match(MySqlParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sqlStatements(): SqlStatementsContext {
		let localctx: SqlStatementsContext = new SqlStatementsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 2, MySqlParser.RULE_sqlStatements);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 742;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 5, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 740;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 7:
					case 9:
					case 20:
					case 24:
					case 26:
					case 33:
					case 44:
					case 45:
					case 46:
					case 51:
					case 62:
					case 71:
					case 72:
					case 85:
					case 93:
					case 102:
					case 103:
					case 119:
					case 132:
					case 138:
					case 139:
					case 141:
					case 143:
					case 147:
					case 152:
					case 153:
					case 155:
					case 156:
					case 172:
					case 182:
					case 184:
					case 186:
					case 188:
					case 192:
					case 344:
					case 345:
					case 351:
					case 356:
					case 369:
					case 390:
					case 399:
					case 432:
					case 442:
					case 444:
					case 456:
					case 560:
					case 580:
					case 589:
					case 597:
					case 604:
					case 629:
					case 635:
					case 656:
					case 661:
					case 681:
					case 708:
					case 739:
					case 1133:
						{
						this.state = 731;
						this.sqlStatement();
						this.state = 734;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===1121) {
							{
							this.state = 732;
							this.match(MySqlParser.MINUS);
							this.state = 733;
							this.match(MySqlParser.MINUS);
							}
						}

						this.state = 737;
						this._errHandler.sync(this);
						switch ( this._interp.adaptivePredict(this._input, 3, this._ctx) ) {
						case 1:
							{
							this.state = 736;
							this.match(MySqlParser.SEMI);
							}
							break;
						}
						}
						break;
					case 1136:
						{
						this.state = 739;
						this.emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 744;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 5, this._ctx);
			}
			this.state = 754;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 7:
			case 9:
			case 20:
			case 24:
			case 26:
			case 33:
			case 44:
			case 45:
			case 46:
			case 51:
			case 62:
			case 71:
			case 72:
			case 85:
			case 93:
			case 102:
			case 103:
			case 119:
			case 132:
			case 138:
			case 139:
			case 141:
			case 143:
			case 147:
			case 152:
			case 153:
			case 155:
			case 156:
			case 172:
			case 182:
			case 184:
			case 186:
			case 188:
			case 192:
			case 344:
			case 345:
			case 351:
			case 356:
			case 369:
			case 390:
			case 399:
			case 432:
			case 442:
			case 444:
			case 456:
			case 560:
			case 580:
			case 589:
			case 597:
			case 604:
			case 629:
			case 635:
			case 656:
			case 661:
			case 681:
			case 708:
			case 739:
			case 1133:
				{
				this.state = 745;
				this.sqlStatement();
				this.state = 751;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 7, this._ctx) ) {
				case 1:
					{
					this.state = 748;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===1121) {
						{
						this.state = 746;
						this.match(MySqlParser.MINUS);
						this.state = 747;
						this.match(MySqlParser.MINUS);
						}
					}

					this.state = 750;
					this.match(MySqlParser.SEMI);
					}
					break;
				}
				}
				break;
			case 1136:
				{
				this.state = 753;
				this.emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sqlStatement(): SqlStatementContext {
		let localctx: SqlStatementContext = new SqlStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 4, MySqlParser.RULE_sqlStatement);
		try {
			this.state = 763;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 9, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 756;
				this.ddlStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 757;
				this.dmlStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 758;
				this.transactionStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 759;
				this.replicationStatement();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 760;
				this.preparedStatement();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 761;
				this.administrationStatement();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 762;
				this.utilityStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public emptyStatement_(): EmptyStatement_Context {
		let localctx: EmptyStatement_Context = new EmptyStatement_Context(this, this._ctx, this.state);
		this.enterRule(localctx, 6, MySqlParser.RULE_emptyStatement_);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 765;
			this.match(MySqlParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ddlStatement(): DdlStatementContext {
		let localctx: DdlStatementContext = new DdlStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 8, MySqlParser.RULE_ddlStatement);
		try {
			this.state = 805;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 10, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 767;
				this.createDatabase();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 768;
				this.createEvent();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 769;
				this.createIndex();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 770;
				this.createLogfileGroup();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 771;
				this.createProcedure();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 772;
				this.createFunction();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 773;
				this.createServer();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 774;
				this.createTable();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 775;
				this.createTablespaceInnodb();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 776;
				this.createTablespaceNdb();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 777;
				this.createTrigger();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 778;
				this.createView();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 779;
				this.createRole();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 780;
				this.alterDatabase();
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 781;
				this.alterEvent();
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 782;
				this.alterFunction();
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 783;
				this.alterInstance();
				}
				break;
			case 18:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 784;
				this.alterLogfileGroup();
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 785;
				this.alterProcedure();
				}
				break;
			case 20:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 786;
				this.alterServer();
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 787;
				this.alterTable();
				}
				break;
			case 22:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 788;
				this.alterTablespace();
				}
				break;
			case 23:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 789;
				this.alterView();
				}
				break;
			case 24:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 790;
				this.dropDatabase();
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 791;
				this.dropEvent();
				}
				break;
			case 26:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 792;
				this.dropIndex();
				}
				break;
			case 27:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 793;
				this.dropLogfileGroup();
				}
				break;
			case 28:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 794;
				this.dropProcedure();
				}
				break;
			case 29:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 795;
				this.dropFunction();
				}
				break;
			case 30:
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 796;
				this.dropServer();
				}
				break;
			case 31:
				this.enterOuterAlt(localctx, 31);
				{
				this.state = 797;
				this.dropTable();
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 32);
				{
				this.state = 798;
				this.dropTablespace();
				}
				break;
			case 33:
				this.enterOuterAlt(localctx, 33);
				{
				this.state = 799;
				this.dropTrigger();
				}
				break;
			case 34:
				this.enterOuterAlt(localctx, 34);
				{
				this.state = 800;
				this.dropView();
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 35);
				{
				this.state = 801;
				this.dropRole();
				}
				break;
			case 36:
				this.enterOuterAlt(localctx, 36);
				{
				this.state = 802;
				this.setRole();
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 37);
				{
				this.state = 803;
				this.renameTable();
				}
				break;
			case 38:
				this.enterOuterAlt(localctx, 38);
				{
				this.state = 804;
				this.truncateTable();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dmlStatement(): DmlStatementContext {
		let localctx: DmlStatementContext = new DmlStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 10, MySqlParser.RULE_dmlStatement);
		try {
			this.state = 820;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 11, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 807;
				this.selectStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 808;
				this.insertStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 809;
				this.updateStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 810;
				this.deleteStatement();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 811;
				this.replaceStatement();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 812;
				this.callStatement();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 813;
				this.loadDataStatement();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 814;
				this.loadXmlStatement();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 815;
				this.doStatement();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 816;
				this.handlerStatement();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 817;
				this.valuesStatement();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 818;
				this.withStatement();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 819;
				this.tableStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionStatement(): TransactionStatementContext {
		let localctx: TransactionStatementContext = new TransactionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 12, MySqlParser.RULE_transactionStatement);
		try {
			this.state = 831;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 12, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 822;
				this.startTransaction();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 823;
				this.beginWork();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 824;
				this.commitWork();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 825;
				this.rollbackWork();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 826;
				this.savepointStatement();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 827;
				this.rollbackStatement();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 828;
				this.releaseStatement();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 829;
				this.lockTables();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 830;
				this.unlockTables();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replicationStatement(): ReplicationStatementContext {
		let localctx: ReplicationStatementContext = new ReplicationStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 14, MySqlParser.RULE_replicationStatement);
		try {
			this.state = 848;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 13, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 833;
				this.changeMaster();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 834;
				this.changeReplicationFilter();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 835;
				this.purgeBinaryLogs();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 836;
				this.resetMaster();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 837;
				this.resetSlave();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 838;
				this.startSlave();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 839;
				this.stopSlave();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 840;
				this.startGroupReplication();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 841;
				this.stopGroupReplication();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 842;
				this.xaStartTransaction();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 843;
				this.xaEndTransaction();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 844;
				this.xaPrepareStatement();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 845;
				this.xaCommitWork();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 846;
				this.xaRollbackWork();
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 847;
				this.xaRecoverWork();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public preparedStatement(): PreparedStatementContext {
		let localctx: PreparedStatementContext = new PreparedStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 16, MySqlParser.RULE_preparedStatement);
		try {
			this.state = 853;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 560:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 850;
				this.prepareStatement();
				}
				break;
			case 708:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 851;
				this.executeStatement();
				}
				break;
			case 51:
			case 390:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 852;
				this.deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compoundStatement(): CompoundStatementContext {
		let localctx: CompoundStatementContext = new CompoundStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 18, MySqlParser.RULE_compoundStatement);
		try {
			this.state = 868;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 855;
				this.blockStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 856;
				this.caseStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 857;
				this.ifStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 858;
				this.leaveStatement();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 859;
				this.loopStatement();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 860;
				this.repeatStatement();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 861;
				this.whileStatement();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 862;
				this.iterateStatement();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 863;
				this.returnStatement();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 864;
				this.cursorStatement();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 865;
				this.withStatement();
				this.state = 866;
				this.dmlStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public administrationStatement(): AdministrationStatementContext {
		let localctx: AdministrationStatementContext = new AdministrationStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 20, MySqlParser.RULE_administrationStatement);
		try {
			this.state = 895;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 870;
				this.alterUser();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 871;
				this.createUser();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 872;
				this.dropUser();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 873;
				this.grantStatement();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 874;
				this.grantProxy();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 875;
				this.renameUser();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 876;
				this.revokeStatement();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 877;
				this.revokeProxy();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 878;
				this.analyzeTable();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 879;
				this.checkTable();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 880;
				this.checksumTable();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 881;
				this.optimizeTable();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 882;
				this.repairTable();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 883;
				this.createUdfunction();
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 884;
				this.installPlugin();
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 885;
				this.uninstallPlugin();
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 886;
				this.setStatement();
				}
				break;
			case 18:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 887;
				this.showStatement();
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 888;
				this.binlogStatement();
				}
				break;
			case 20:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 889;
				this.cacheIndexStatement();
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 890;
				this.flushStatement();
				}
				break;
			case 22:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 891;
				this.killStatement();
				}
				break;
			case 23:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 892;
				this.loadIndexIntoCache();
				}
				break;
			case 24:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 893;
				this.resetStatement();
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 894;
				this.shutdownStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public utilityStatement(): UtilityStatementContext {
		let localctx: UtilityStatementContext = new UtilityStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 22, MySqlParser.RULE_utilityStatement);
		try {
			this.state = 904;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 17, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 897;
				this.simpleDescribeStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 898;
				this.fullDescribeStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 899;
				this.helpStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 900;
				this.useStatement();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 901;
				this.signalStatement();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 902;
				this.resignalStatement();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 903;
				this.diagnosticsStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createDatabase(): CreateDatabaseContext {
		let localctx: CreateDatabaseContext = new CreateDatabaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 24, MySqlParser.RULE_createDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 906;
			this.match(MySqlParser.CREATE);
			this.state = 907;
			localctx._dbFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===39 || _la===150)) {
			    localctx._dbFormat = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 909;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 18, this._ctx) ) {
			case 1:
				{
				this.state = 908;
				this.ifNotExists();
				}
				break;
			}
			this.state = 911;
			this.uid();
			this.state = 915;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la===134 || _la===222 || _la===405 || _la===841) {
				{
				{
				this.state = 912;
				this.createDatabaseOption();
				}
				}
				this.state = 917;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createEvent(): CreateEventContext {
		let localctx: CreateEventContext = new CreateEventContext(this, this._ctx, this.state);
		this.enterRule(localctx, 26, MySqlParser.RULE_createEvent);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 918;
			this.match(MySqlParser.CREATE);
			this.state = 920;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===392) {
				{
				this.state = 919;
				this.ownerStatement();
				}
			}

			this.state = 922;
			this.match(MySqlParser.EVENT);
			this.state = 924;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 21, this._ctx) ) {
			case 1:
				{
				this.state = 923;
				this.ifNotExists();
				}
				break;
			}
			this.state = 926;
			this.fullId();
			this.state = 927;
			this.match(MySqlParser.ON);
			this.state = 928;
			this.match(MySqlParser.SCHEDULE);
			this.state = 929;
			this.scheduleExpression();
			this.state = 936;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===118) {
				{
				this.state = 930;
				this.match(MySqlParser.ON);
				this.state = 931;
				this.match(MySqlParser.COMPLETION);
				this.state = 933;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===114) {
					{
					this.state = 932;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 935;
				this.match(MySqlParser.PRESERVE);
				}
			}

			this.state = 939;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===396 || _la===403) {
				{
				this.state = 938;
				this.enableType();
				}
			}

			this.state = 943;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===368) {
				{
				this.state = 941;
				this.match(MySqlParser.COMMENT);
				this.state = 942;
				this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 945;
			this.match(MySqlParser.DO);
			this.state = 946;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createIndex(): CreateIndexContext {
		let localctx: CreateIndexContext = new CreateIndexContext(this, this._ctx, this.state);
		this.enterRule(localctx, 28, MySqlParser.RULE_createIndex);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 948;
			this.match(MySqlParser.CREATE);
			this.state = 950;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===531 || _la===537) {
				{
				this.state = 949;
				localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===531 || _la===537)) {
				    localctx._intimeAction = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 953;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===69 || _la===159 || _la===181) {
				{
				this.state = 952;
				localctx._indexCategory = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===69 || _la===159 || _la===181)) {
				    localctx._indexCategory = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 955;
			this.match(MySqlParser.INDEX);
			this.state = 956;
			this.uid();
			this.state = 958;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===187) {
				{
				this.state = 957;
				this.indexType();
				}
			}

			this.state = 960;
			this.match(MySqlParser.ON);
			this.state = 961;
			this.tableName();
			this.state = 962;
			this.indexColumnNames();
			this.state = 966;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 29, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 963;
					this.indexOption();
					}
					}
				}
				this.state = 968;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 29, this._ctx);
			}
			this.state = 981;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 33, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 979;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 336:
						{
						this.state = 969;
						this.match(MySqlParser.ALGORITHM);
						this.state = 971;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===1124) {
							{
							this.state = 970;
							this.match(MySqlParser.EQUAL_SYMBOL);
							}
						}

						this.state = 973;
						localctx._algType = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===42 || _la===384 || _la===454)) {
						    localctx._algType = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
						break;
					case 103:
						{
						this.state = 974;
						this.match(MySqlParser.LOCK);
						this.state = 976;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===1124) {
							{
							this.state = 975;
							this.match(MySqlParser.EQUAL_SYMBOL);
							}
						}

						this.state = 978;
						localctx._lockType = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===42 || _la===419 || _la===529 || _la===611)) {
						    localctx._lockType = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 983;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 33, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createLogfileGroup(): CreateLogfileGroupContext {
		let localctx: CreateLogfileGroupContext = new CreateLogfileGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 30, MySqlParser.RULE_createLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 984;
			this.match(MySqlParser.CREATE);
			this.state = 985;
			this.match(MySqlParser.LOGFILE);
			this.state = 986;
			this.match(MySqlParser.GROUP);
			this.state = 987;
			this.uid();
			this.state = 988;
			this.match(MySqlParser.ADD);
			this.state = 989;
			this.match(MySqlParser.UNDOFILE);
			this.state = 990;
			localctx._undoFile = this.match(MySqlParser.STRING_LITERAL);
			this.state = 996;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===453) {
				{
				this.state = 991;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 993;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 992;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 995;
				localctx._initSize = this.fileSizeLiteral();
				}
			}

			this.state = 1003;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===660) {
				{
				this.state = 998;
				this.match(MySqlParser.UNDO_BUFFER_SIZE);
				this.state = 1000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 999;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1002;
				localctx._undoSize = this.fileSizeLiteral();
				}
			}

			this.state = 1010;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===572) {
				{
				this.state = 1005;
				this.match(MySqlParser.REDO_BUFFER_SIZE);
				this.state = 1007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1006;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1009;
				localctx._redoSize = this.fileSizeLiteral();
				}
			}

			this.state = 1017;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===528) {
				{
				this.state = 1012;
				this.match(MySqlParser.NODEGROUP);
				this.state = 1014;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1013;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1016;
				this.uid();
				}
			}

			this.state = 1020;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===674) {
				{
				this.state = 1019;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 1027;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===368) {
				{
				this.state = 1022;
				this.match(MySqlParser.COMMENT);
				this.state = 1024;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1023;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1026;
				localctx._comment = this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 1029;
			this.match(MySqlParser.ENGINE);
			this.state = 1031;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1124) {
				{
				this.state = 1030;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 1033;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createProcedure(): CreateProcedureContext {
		let localctx: CreateProcedureContext = new CreateProcedureContext(this, this._ctx, this.state);
		this.enterRule(localctx, 32, MySqlParser.RULE_createProcedure);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1035;
			this.match(MySqlParser.CREATE);
			this.state = 1037;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===392) {
				{
				this.state = 1036;
				this.ownerStatement();
				}
			}

			this.state = 1039;
			this.match(MySqlParser.PROCEDURE);
			this.state = 1040;
			this.fullId();
			this.state = 1041;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 1043;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18880721) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172658065) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
				{
				this.state = 1042;
				this.procedureParameter();
				}
			}

			this.state = 1049;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 1045;
				this.match(MySqlParser.COMMA);
				this.state = 1046;
				this.procedureParameter();
				}
				}
				this.state = 1051;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1052;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 1056;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1053;
					this.routineOption();
					}
					}
				}
				this.state = 1058;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
			}
			this.state = 1059;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createFunction(): CreateFunctionContext {
		let localctx: CreateFunctionContext = new CreateFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 34, MySqlParser.RULE_createFunction);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1061;
			this.match(MySqlParser.CREATE);
			this.state = 1063;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===392) {
				{
				this.state = 1062;
				this.ownerStatement();
				}
			}

			this.state = 1066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===335) {
				{
				this.state = 1065;
				this.match(MySqlParser.AGGREGATE);
				}
			}

			this.state = 1068;
			this.match(MySqlParser.FUNCTION);
			this.state = 1070;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 52, this._ctx) ) {
			case 1:
				{
				this.state = 1069;
				this.ifNotExists();
				}
				break;
			}
			this.state = 1072;
			this.fullId();
			this.state = 1073;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 1075;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
				{
				this.state = 1074;
				this.functionParameter();
				}
			}

			this.state = 1081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 1077;
				this.match(MySqlParser.COMMA);
				this.state = 1078;
				this.functionParameter();
				}
				}
				this.state = 1083;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1084;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 1085;
			this.match(MySqlParser.RETURNS);
			this.state = 1086;
			this.dataType();
			this.state = 1090;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 55, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1087;
					this.routineOption();
					}
					}
				}
				this.state = 1092;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 55, this._ctx);
			}
			this.state = 1095;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 7:
			case 9:
			case 11:
			case 14:
			case 18:
			case 20:
			case 24:
			case 26:
			case 29:
			case 33:
			case 35:
			case 37:
			case 39:
			case 42:
			case 44:
			case 45:
			case 46:
			case 48:
			case 51:
			case 55:
			case 57:
			case 59:
			case 62:
			case 71:
			case 72:
			case 73:
			case 77:
			case 79:
			case 85:
			case 93:
			case 94:
			case 97:
			case 102:
			case 103:
			case 117:
			case 119:
			case 121:
			case 124:
			case 130:
			case 132:
			case 138:
			case 139:
			case 140:
			case 141:
			case 143:
			case 147:
			case 148:
			case 150:
			case 152:
			case 153:
			case 155:
			case 156:
			case 158:
			case 168:
			case 172:
			case 182:
			case 184:
			case 186:
			case 188:
			case 192:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 226:
			case 234:
			case 237:
			case 239:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 365:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 371:
			case 372:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 382:
			case 383:
			case 384:
			case 385:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
			case 399:
			case 400:
			case 401:
			case 402:
			case 403:
			case 405:
			case 407:
			case 408:
			case 409:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 420:
			case 421:
			case 422:
			case 423:
			case 424:
			case 425:
			case 426:
			case 427:
			case 428:
			case 429:
			case 430:
			case 431:
			case 432:
			case 434:
			case 435:
			case 436:
			case 437:
			case 438:
			case 439:
			case 440:
			case 441:
			case 442:
			case 443:
			case 444:
			case 445:
			case 446:
			case 447:
			case 448:
			case 449:
			case 450:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			case 460:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 472:
			case 473:
			case 474:
			case 475:
			case 476:
			case 477:
			case 478:
			case 479:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 492:
			case 493:
			case 494:
			case 495:
			case 496:
			case 497:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 507:
			case 508:
			case 509:
			case 510:
			case 511:
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 518:
			case 519:
			case 520:
			case 521:
			case 523:
			case 527:
			case 528:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 534:
			case 535:
			case 536:
			case 537:
			case 538:
			case 539:
			case 540:
			case 541:
			case 542:
			case 543:
			case 544:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
			case 579:
			case 580:
			case 581:
			case 582:
			case 583:
			case 584:
			case 585:
			case 586:
			case 587:
			case 588:
			case 589:
			case 591:
			case 592:
			case 593:
			case 594:
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 616:
			case 617:
			case 618:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 624:
			case 625:
			case 626:
			case 627:
			case 628:
			case 629:
			case 630:
			case 631:
			case 632:
			case 633:
			case 634:
			case 635:
			case 636:
			case 638:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 656:
			case 657:
			case 658:
			case 659:
			case 660:
			case 661:
			case 662:
			case 663:
			case 664:
			case 665:
			case 666:
			case 667:
			case 668:
			case 669:
			case 670:
			case 671:
			case 672:
			case 673:
			case 674:
			case 675:
			case 677:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 684:
			case 685:
			case 686:
			case 687:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
			case 697:
			case 699:
			case 700:
			case 701:
			case 702:
			case 703:
			case 704:
			case 705:
			case 706:
			case 707:
			case 708:
			case 709:
			case 710:
			case 711:
			case 712:
			case 717:
			case 718:
			case 720:
			case 721:
			case 722:
			case 723:
			case 724:
			case 725:
			case 726:
			case 727:
			case 728:
			case 729:
			case 730:
			case 731:
			case 732:
			case 733:
			case 734:
			case 736:
			case 737:
			case 738:
			case 739:
			case 740:
			case 741:
			case 742:
			case 743:
			case 744:
			case 745:
			case 746:
			case 747:
			case 748:
			case 749:
			case 750:
			case 751:
			case 752:
			case 753:
			case 754:
			case 755:
			case 756:
			case 757:
			case 758:
			case 759:
			case 760:
			case 761:
			case 762:
			case 763:
			case 764:
			case 765:
			case 766:
			case 767:
			case 768:
			case 769:
			case 770:
			case 771:
			case 772:
			case 773:
			case 774:
			case 775:
			case 776:
			case 777:
			case 778:
			case 779:
			case 780:
			case 781:
			case 782:
			case 783:
			case 784:
			case 785:
			case 786:
			case 787:
			case 788:
			case 789:
			case 790:
			case 791:
			case 792:
			case 793:
			case 794:
			case 795:
			case 796:
			case 797:
			case 798:
			case 799:
			case 800:
			case 801:
			case 802:
			case 803:
			case 806:
			case 807:
			case 808:
			case 809:
			case 810:
			case 811:
			case 812:
			case 813:
			case 814:
			case 815:
			case 816:
			case 817:
			case 818:
			case 819:
			case 820:
			case 821:
			case 822:
			case 823:
			case 824:
			case 825:
			case 826:
			case 827:
			case 828:
			case 829:
			case 830:
			case 831:
			case 832:
			case 833:
			case 834:
			case 835:
			case 836:
			case 837:
			case 838:
			case 839:
			case 840:
			case 841:
			case 842:
			case 843:
			case 844:
			case 845:
			case 846:
			case 847:
			case 848:
			case 849:
			case 850:
			case 851:
			case 852:
			case 853:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			case 873:
			case 874:
			case 875:
			case 876:
			case 877:
			case 878:
			case 879:
			case 880:
			case 881:
			case 882:
			case 883:
			case 884:
			case 885:
			case 886:
			case 887:
			case 888:
			case 889:
			case 890:
			case 891:
			case 892:
			case 893:
			case 894:
			case 895:
			case 896:
			case 897:
			case 898:
			case 899:
			case 900:
			case 901:
			case 902:
			case 903:
			case 904:
			case 905:
			case 906:
			case 907:
			case 908:
			case 909:
			case 910:
			case 911:
			case 912:
			case 913:
			case 914:
			case 915:
			case 916:
			case 917:
			case 918:
			case 919:
			case 920:
			case 921:
			case 922:
			case 923:
			case 924:
			case 925:
			case 926:
			case 927:
			case 928:
			case 929:
			case 930:
			case 931:
			case 932:
			case 933:
			case 934:
			case 935:
			case 936:
			case 937:
			case 938:
			case 939:
			case 940:
			case 941:
			case 942:
			case 943:
			case 944:
			case 945:
			case 946:
			case 947:
			case 948:
			case 949:
			case 950:
			case 951:
			case 952:
			case 953:
			case 954:
			case 955:
			case 956:
			case 957:
			case 958:
			case 959:
			case 960:
			case 961:
			case 962:
			case 963:
			case 964:
			case 965:
			case 966:
			case 967:
			case 968:
			case 969:
			case 970:
			case 971:
			case 972:
			case 973:
			case 974:
			case 975:
			case 976:
			case 977:
			case 978:
			case 979:
			case 980:
			case 981:
			case 982:
			case 983:
			case 984:
			case 985:
			case 986:
			case 987:
			case 988:
			case 989:
			case 990:
			case 991:
			case 992:
			case 993:
			case 994:
			case 995:
			case 996:
			case 997:
			case 998:
			case 999:
			case 1000:
			case 1001:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
			case 1007:
			case 1008:
			case 1009:
			case 1010:
			case 1011:
			case 1012:
			case 1013:
			case 1014:
			case 1015:
			case 1016:
			case 1017:
			case 1018:
			case 1019:
			case 1020:
			case 1021:
			case 1022:
			case 1023:
			case 1024:
			case 1025:
			case 1026:
			case 1027:
			case 1028:
			case 1029:
			case 1030:
			case 1031:
			case 1032:
			case 1033:
			case 1034:
			case 1035:
			case 1036:
			case 1037:
			case 1038:
			case 1039:
			case 1040:
			case 1041:
			case 1042:
			case 1043:
			case 1044:
			case 1045:
			case 1046:
			case 1047:
			case 1048:
			case 1049:
			case 1050:
			case 1051:
			case 1052:
			case 1053:
			case 1054:
			case 1055:
			case 1056:
			case 1057:
			case 1058:
			case 1059:
			case 1060:
			case 1061:
			case 1062:
			case 1063:
			case 1064:
			case 1065:
			case 1066:
			case 1067:
			case 1068:
			case 1069:
			case 1070:
			case 1071:
			case 1072:
			case 1073:
			case 1074:
			case 1075:
			case 1076:
			case 1077:
			case 1078:
			case 1079:
			case 1080:
			case 1081:
			case 1082:
			case 1083:
			case 1084:
			case 1085:
			case 1086:
			case 1087:
			case 1088:
			case 1089:
			case 1090:
			case 1091:
			case 1092:
			case 1093:
			case 1094:
			case 1095:
			case 1096:
			case 1097:
			case 1098:
			case 1099:
			case 1100:
			case 1101:
			case 1102:
			case 1103:
			case 1104:
			case 1105:
			case 1106:
			case 1107:
			case 1123:
			case 1133:
			case 1145:
			case 1148:
			case 1156:
				{
				this.state = 1093;
				this.routineBody();
				}
				break;
			case 146:
				{
				this.state = 1094;
				this.returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createRole(): CreateRoleContext {
		let localctx: CreateRoleContext = new CreateRoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 36, MySqlParser.RULE_createRole);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1097;
			this.match(MySqlParser.CREATE);
			this.state = 1098;
			this.match(MySqlParser.ROLE);
			this.state = 1100;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 57, this._ctx) ) {
			case 1:
				{
				this.state = 1099;
				this.ifNotExists();
				}
				break;
			}
			this.state = 1102;
			this.roleName();
			this.state = 1107;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 1103;
				this.match(MySqlParser.COMMA);
				this.state = 1104;
				this.roleName();
				}
				}
				this.state = 1109;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createServer(): CreateServerContext {
		let localctx: CreateServerContext = new CreateServerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 38, MySqlParser.RULE_createServer);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1110;
			this.match(MySqlParser.CREATE);
			this.state = 1111;
			this.match(MySqlParser.SERVER);
			this.state = 1112;
			this.uid();
			this.state = 1113;
			this.match(MySqlParser.FOREIGN);
			this.state = 1114;
			this.match(MySqlParser.DATA);
			this.state = 1115;
			this.match(MySqlParser.WRAPPER);
			this.state = 1116;
			localctx._wrapperName = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===514 || _la===1148)) {
			    localctx._wrapperName = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 1117;
			this.match(MySqlParser.OPTIONS);
			this.state = 1118;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 1119;
			this.serverOption();
			this.state = 1124;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 1120;
				this.match(MySqlParser.COMMA);
				this.state = 1121;
				this.serverOption();
				}
				}
				this.state = 1126;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1127;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTable(): CreateTableContext {
		let localctx: CreateTableContext = new CreateTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 40, MySqlParser.RULE_createTable);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1207;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 78, this._ctx) ) {
			case 1:
				localctx = new CopyCreateTableContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1129;
				this.match(MySqlParser.CREATE);
				this.state = 1131;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===649) {
					{
					this.state = 1130;
					this.match(MySqlParser.TEMPORARY);
					}
				}

				this.state = 1133;
				this.match(MySqlParser.TABLE);
				this.state = 1135;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 61, this._ctx) ) {
				case 1:
					{
					this.state = 1134;
					this.ifNotExists();
					}
					break;
				}
				this.state = 1137;
				this.tableName();
				this.state = 1145;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 98:
					{
					this.state = 1138;
					this.match(MySqlParser.LIKE);
					this.state = 1139;
					this.tableName();
					}
					break;
				case 1133:
					{
					this.state = 1140;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 1141;
					this.match(MySqlParser.LIKE);
					this.state = 1142;
					(localctx as CopyCreateTableContext)._parenthesisTable = this.tableName();
					this.state = 1143;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				localctx = new QueryCreateTableContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1147;
				this.match(MySqlParser.CREATE);
				this.state = 1149;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===649) {
					{
					this.state = 1148;
					this.match(MySqlParser.TEMPORARY);
					}
				}

				this.state = 1151;
				this.match(MySqlParser.TABLE);
				this.state = 1153;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 64, this._ctx) ) {
				case 1:
					{
					this.state = 1152;
					this.ifNotExists();
					}
					break;
				}
				this.state = 1155;
				this.tableName();
				this.state = 1157;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 65, this._ctx) ) {
				case 1:
					{
					this.state = 1156;
					this.createDefinitions();
					}
					break;
				}
				this.state = 1169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la===81 || _la===180 || _la===222 || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & 134316039) !== 0) || ((((_la - 373)) & ~0x1F) === 0 && ((1 << (_la - 373)) & 1081353) !== 0) || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 19) !== 0) || _la===455 || _la===467 || _la===500 || _la===510 || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & 269) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & 3892314113) !== 0) || ((((_la - 636)) & ~0x1F) === 0 && ((1 << (_la - 636)) & 268289) !== 0) || _la===841 || _la===875 || _la===1000 || _la===1148) {
					{
					this.state = 1159;
					this.tableOption();
					this.state = 1166;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la===81 || _la===180 || _la===222 || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & 134316039) !== 0) || ((((_la - 373)) & ~0x1F) === 0 && ((1 << (_la - 373)) & 1081353) !== 0) || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 19) !== 0) || _la===455 || _la===467 || _la===500 || _la===510 || ((((_la - 543)) & ~0x1F) === 0 && ((1 << (_la - 543)) & 269) !== 0) || ((((_la - 602)) & ~0x1F) === 0 && ((1 << (_la - 602)) & 3892314113) !== 0) || ((((_la - 636)) & ~0x1F) === 0 && ((1 << (_la - 636)) & 268289) !== 0) || _la===841 || _la===875 || _la===1000 || _la===1135 || _la===1148) {
						{
						{
						this.state = 1161;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===1135) {
							{
							this.state = 1160;
							this.match(MySqlParser.COMMA);
							}
						}

						this.state = 1163;
						this.tableOption();
						}
						}
						this.state = 1168;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1172;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===129) {
					{
					this.state = 1171;
					this.partitionDefinitions();
					}
				}

				this.state = 1175;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===78 || _la===141) {
					{
					this.state = 1174;
					(localctx as QueryCreateTableContext)._keyViolate = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===78 || _la===141)) {
					    (localctx as QueryCreateTableContext)._keyViolate = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 1178;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===12) {
					{
					this.state = 1177;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 1180;
				this.selectStatement();
				}
				break;
			case 3:
				localctx = new ColumnCreateTableContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1182;
				this.match(MySqlParser.CREATE);
				this.state = 1184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===649) {
					{
					this.state = 1183;
					this.match(MySqlParser.TEMPORARY);
					}
				}

				this.state = 1186;
				this.match(MySqlParser.TABLE);
				this.state = 1188;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 73, this._ctx) ) {
				case 1:
					{
					this.state = 1187;
					this.ifNotExists();
					}
					break;
				}
				this.state = 1190;
				this.tableName();
				this.state = 1191;
				this.createDefinitions();
				this.state = 1202;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 76, this._ctx) ) {
				case 1:
					{
					this.state = 1192;
					this.tableOption();
					this.state = 1199;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 75, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1194;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la===1135) {
								{
								this.state = 1193;
								this.match(MySqlParser.COMMA);
								}
							}

							this.state = 1196;
							this.tableOption();
							}
							}
						}
						this.state = 1201;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 75, this._ctx);
					}
					}
					break;
				}
				this.state = 1205;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===129) {
					{
					this.state = 1204;
					this.partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTablespaceInnodb(): CreateTablespaceInnodbContext {
		let localctx: CreateTablespaceInnodbContext = new CreateTablespaceInnodbContext(this, this._ctx, this.state);
		this.enterRule(localctx, 42, MySqlParser.RULE_createTablespaceInnodb);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1209;
			this.match(MySqlParser.CREATE);
			this.state = 1210;
			this.match(MySqlParser.TABLESPACE);
			this.state = 1211;
			this.uid();
			this.state = 1212;
			this.match(MySqlParser.ADD);
			this.state = 1213;
			this.match(MySqlParser.DATAFILE);
			this.state = 1214;
			localctx._datafile = this.match(MySqlParser.STRING_LITERAL);
			this.state = 1218;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===428) {
				{
				this.state = 1215;
				this.match(MySqlParser.FILE_BLOCK_SIZE);
				this.state = 1216;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 1217;
				localctx._fileBlockSize = this.fileSizeLiteral();
				}
			}

			this.state = 1225;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 1220;
				this.match(MySqlParser.ENGINE);
				this.state = 1222;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1221;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1224;
				this.engineName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTablespaceNdb(): CreateTablespaceNdbContext {
		let localctx: CreateTablespaceNdbContext = new CreateTablespaceNdbContext(this, this._ctx, this.state);
		this.enterRule(localctx, 44, MySqlParser.RULE_createTablespaceNdb);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1227;
			this.match(MySqlParser.CREATE);
			this.state = 1228;
			this.match(MySqlParser.TABLESPACE);
			this.state = 1229;
			this.uid();
			this.state = 1230;
			this.match(MySqlParser.ADD);
			this.state = 1231;
			this.match(MySqlParser.DATAFILE);
			this.state = 1232;
			localctx._datafile = this.match(MySqlParser.STRING_LITERAL);
			this.state = 1233;
			this.match(MySqlParser.USE);
			this.state = 1234;
			this.match(MySqlParser.LOGFILE);
			this.state = 1235;
			this.match(MySqlParser.GROUP);
			this.state = 1236;
			this.uid();
			this.state = 1242;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===423) {
				{
				this.state = 1237;
				this.match(MySqlParser.EXTENT_SIZE);
				this.state = 1239;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1238;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1241;
				localctx._extentSize = this.fileSizeLiteral();
				}
			}

			this.state = 1249;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===453) {
				{
				this.state = 1244;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 1246;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1245;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1248;
				localctx._initialSize = this.fileSizeLiteral();
				}
			}

			this.state = 1256;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===341) {
				{
				this.state = 1251;
				this.match(MySqlParser.AUTOEXTEND_SIZE);
				this.state = 1253;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1252;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1255;
				localctx._autoextendSize = this.fileSizeLiteral();
				}
			}

			this.state = 1263;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===501) {
				{
				this.state = 1258;
				this.match(MySqlParser.MAX_SIZE);
				this.state = 1260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1259;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1262;
				localctx._maxSize = this.fileSizeLiteral();
				}
			}

			this.state = 1270;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===528) {
				{
				this.state = 1265;
				this.match(MySqlParser.NODEGROUP);
				this.state = 1267;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1266;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1269;
				this.uid();
				}
			}

			this.state = 1273;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===674) {
				{
				this.state = 1272;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 1280;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===368) {
				{
				this.state = 1275;
				this.match(MySqlParser.COMMENT);
				this.state = 1277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1276;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1279;
				localctx._comment = this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 1282;
			this.match(MySqlParser.ENGINE);
			this.state = 1284;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1124) {
				{
				this.state = 1283;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 1286;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTrigger(): CreateTriggerContext {
		let localctx: CreateTriggerContext = new CreateTriggerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 46, MySqlParser.RULE_createTrigger);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1288;
			this.match(MySqlParser.CREATE);
			this.state = 1290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===392) {
				{
				this.state = 1289;
				this.ownerStatement();
				}
			}

			this.state = 1292;
			this.match(MySqlParser.TRIGGER);
			this.state = 1293;
			localctx._thisTrigger = this.fullId();
			this.state = 1294;
			localctx._triggerTime = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===15 || _la===334)) {
			    localctx._triggerTime = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 1295;
			localctx._triggerEvent = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===44 || _la===85 || _la===184)) {
			    localctx._triggerEvent = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 1296;
			this.match(MySqlParser.ON);
			this.state = 1297;
			this.tableName();
			this.state = 1298;
			this.match(MySqlParser.FOR);
			this.state = 1299;
			this.match(MySqlParser.EACH);
			this.state = 1300;
			this.match(MySqlParser.ROW);
			this.state = 1303;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 97, this._ctx) ) {
			case 1:
				{
				this.state = 1301;
				localctx._triggerPlace = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===434 || _la===558)) {
				    localctx._triggerPlace = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 1302;
				localctx._otherTrigger = this.fullId();
				}
				break;
			}
			this.state = 1305;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public withClause(): WithClauseContext {
		let localctx: WithClauseContext = new WithClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 48, MySqlParser.RULE_withClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1307;
			this.match(MySqlParser.WITH);
			this.state = 1309;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 98, this._ctx) ) {
			case 1:
				{
				this.state = 1308;
				this.match(MySqlParser.RECURSIVE);
				}
				break;
			}
			this.state = 1311;
			this.commonTableExpressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public commonTableExpressions(): CommonTableExpressionsContext {
		let localctx: CommonTableExpressionsContext = new CommonTableExpressionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 50, MySqlParser.RULE_commonTableExpressions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1313;
			this.cteName();
			this.state = 1325;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1133) {
				{
				this.state = 1314;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1315;
				this.cteColumnName();
				this.state = 1320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 1316;
					this.match(MySqlParser.COMMA);
					this.state = 1317;
					this.cteColumnName();
					}
					}
					this.state = 1322;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1323;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 1327;
			this.match(MySqlParser.AS);
			this.state = 1328;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 1329;
			this.dmlStatement();
			this.state = 1330;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 1333;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 101, this._ctx) ) {
			case 1:
				{
				this.state = 1331;
				this.match(MySqlParser.COMMA);
				this.state = 1332;
				this.commonTableExpressions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cteName(): CteNameContext {
		let localctx: CteNameContext = new CteNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 52, MySqlParser.RULE_cteName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1335;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cteColumnName(): CteColumnNameContext {
		let localctx: CteColumnNameContext = new CteColumnNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 54, MySqlParser.RULE_cteColumnName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1337;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createView(): CreateViewContext {
		let localctx: CreateViewContext = new CreateViewContext(this, this._ctx, this.state);
		this.enterRule(localctx, 56, MySqlParser.RULE_createView);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1339;
			this.match(MySqlParser.CREATE);
			this.state = 1341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===123) {
				{
				this.state = 1340;
				this.orReplace();
				}
			}

			this.state = 1346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===336) {
				{
				this.state = 1343;
				this.match(MySqlParser.ALGORITHM);
				this.state = 1344;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 1345;
				localctx._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===506 || _la===650 || _la===658)) {
				    localctx._algType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 1349;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===392) {
				{
				this.state = 1348;
				this.ownerStatement();
				}
			}

			this.state = 1354;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===160) {
				{
				this.state = 1351;
				this.match(MySqlParser.SQL);
				this.state = 1352;
				this.match(MySqlParser.SECURITY);
				this.state = 1353;
				localctx._secContext = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===392 || _la===460)) {
				    localctx._secContext = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 1356;
			this.match(MySqlParser.VIEW);
			this.state = 1357;
			this.fullId();
			this.state = 1362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1133) {
				{
				this.state = 1358;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1359;
				this.uidList();
				this.state = 1360;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 1364;
			this.match(MySqlParser.AS);
			this.state = 1384;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 111, this._ctx) ) {
			case 1:
				{
				this.state = 1365;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1367;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===192) {
					{
					this.state = 1366;
					this.withClause();
					}
				}

				this.state = 1369;
				this.selectStatement();
				this.state = 1370;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 2:
				{
				this.state = 1373;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===192) {
					{
					this.state = 1372;
					this.withClause();
					}
				}

				this.state = 1375;
				this.selectStatement();
				this.state = 1382;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 110, this._ctx) ) {
				case 1:
					{
					this.state = 1376;
					this.match(MySqlParser.WITH);
					this.state = 1378;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===352 || _la===474) {
						{
						this.state = 1377;
						localctx._checkOption = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===352 || _la===474)) {
						    localctx._checkOption = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
					}

					this.state = 1380;
					this.match(MySqlParser.CHECK);
					this.state = 1381;
					this.match(MySqlParser.OPTION);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createDatabaseOption(): CreateDatabaseOptionContext {
		let localctx: CreateDatabaseOptionContext = new CreateDatabaseOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 58, MySqlParser.RULE_createDatabaseOption);
		let _la: number;
		try {
			this.state = 1419;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 120, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===42) {
					{
					this.state = 1386;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1389;
				this.charSet();
				this.state = 1391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1390;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1395;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 226:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 1145:
				case 1148:
					{
					this.state = 1393;
					this.charsetName();
					}
					break;
				case 42:
					{
					this.state = 1394;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===42) {
					{
					this.state = 1397;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1400;
				this.match(MySqlParser.COLLATE);
				this.state = 1402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1401;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1404;
				this.collationName();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1406;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===42) {
					{
					this.state = 1405;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1408;
				this.match(MySqlParser.ENCRYPTION);
				this.state = 1410;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1409;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1412;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1413;
				this.match(MySqlParser.READ);
				this.state = 1414;
				this.match(MySqlParser.ONLY);
				this.state = 1416;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1415;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1418;
				_la = this._input.LA(1);
				if(!(_la===42 || _la===1138 || _la===1139)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charSet(): CharSetContext {
		let localctx: CharSetContext = new CharSetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 60, MySqlParser.RULE_charSet);
		try {
			this.state = 1426;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 25:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1421;
				this.match(MySqlParser.CHARACTER);
				this.state = 1422;
				this.match(MySqlParser.SET);
				}
				break;
			case 841:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1423;
				this.match(MySqlParser.CHARSET);
				}
				break;
			case 222:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1424;
				this.match(MySqlParser.CHAR);
				this.state = 1425;
				this.match(MySqlParser.SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public currentUserExpression(): CurrentUserExpressionContext {
		let localctx: CurrentUserExpressionContext = new CurrentUserExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 62, MySqlParser.RULE_currentUserExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1428;
			this.match(MySqlParser.CURRENT_USER);
			this.state = 1431;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 122, this._ctx) ) {
			case 1:
				{
				this.state = 1429;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1430;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ownerStatement(): OwnerStatementContext {
		let localctx: OwnerStatementContext = new OwnerStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 64, MySqlParser.RULE_ownerStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1433;
			this.match(MySqlParser.DEFINER);
			this.state = 1434;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 1437;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 123, this._ctx) ) {
			case 1:
				{
				this.state = 1435;
				this.userName();
				}
				break;
			case 2:
				{
				this.state = 1436;
				this.currentUserExpression();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public scheduleExpression(): ScheduleExpressionContext {
		let localctx: ScheduleExpressionContext = new ScheduleExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 66, MySqlParser.RULE_scheduleExpression);
		let _la: number;
		try {
			this.state = 1473;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 338:
				localctx = new PreciseScheduleContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1439;
				this.match(MySqlParser.AT);
				this.state = 1440;
				this.timestampValue();
				this.state = 1444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1120) {
					{
					{
					this.state = 1441;
					this.intervalExpr();
					}
					}
					this.state = 1446;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 417:
				localctx = new IntervalScheduleContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1447;
				this.match(MySqlParser.EVERY);
				this.state = 1450;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 125, this._ctx) ) {
				case 1:
					{
					this.state = 1448;
					this.decimalLiteral();
					}
					break;
				case 2:
					{
					this.state = 1449;
					this.expression(0);
					}
					break;
				}
				this.state = 1452;
				this.intervalType();
				this.state = 1461;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===630) {
					{
					this.state = 1453;
					this.match(MySqlParser.STARTS);
					this.state = 1454;
					(localctx as IntervalScheduleContext)._startTimestamp = this.timestampValue();
					this.state = 1458;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1120) {
						{
						{
						this.state = 1455;
						(localctx as IntervalScheduleContext)._intervalExpr = this.intervalExpr();
						(localctx as IntervalScheduleContext)._startIntervals.push((localctx as IntervalScheduleContext)._intervalExpr);
						}
						}
						this.state = 1460;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1471;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===408) {
					{
					this.state = 1463;
					this.match(MySqlParser.ENDS);
					this.state = 1464;
					(localctx as IntervalScheduleContext)._endTimestamp = this.timestampValue();
					this.state = 1468;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1120) {
						{
						{
						this.state = 1465;
						(localctx as IntervalScheduleContext)._intervalExpr = this.intervalExpr();
						(localctx as IntervalScheduleContext)._endIntervals.push((localctx as IntervalScheduleContext)._intervalExpr);
						}
						}
						this.state = 1470;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timestampValue(): TimestampValueContext {
		let localctx: TimestampValueContext = new TimestampValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 68, MySqlParser.RULE_timestampValue);
		try {
			this.state = 1479;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 131, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1475;
				this.match(MySqlParser.CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1476;
				this.stringLiteral();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1477;
				this.decimalLiteral();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1478;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public intervalExpr(): IntervalExprContext {
		let localctx: IntervalExprContext = new IntervalExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 70, MySqlParser.RULE_intervalExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1481;
			this.match(MySqlParser.PLUS);
			this.state = 1482;
			this.match(MySqlParser.INTERVAL);
			this.state = 1485;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 132, this._ctx) ) {
			case 1:
				{
				this.state = 1483;
				this.decimalLiteral();
				}
				break;
			case 2:
				{
				this.state = 1484;
				this.expression(0);
				}
				break;
			}
			this.state = 1487;
			this.intervalType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public intervalType(): IntervalTypeContext {
		let localctx: IntervalTypeContext = new IntervalTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 72, MySqlParser.RULE_intervalType);
		try {
			this.state = 1502;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1489;
				this.intervalTypeBase();
				}
				break;
			case 221:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1490;
				this.match(MySqlParser.YEAR);
				}
				break;
			case 240:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1491;
				this.match(MySqlParser.YEAR_MONTH);
				}
				break;
			case 241:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1492;
				this.match(MySqlParser.DAY_HOUR);
				}
				break;
			case 242:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1493;
				this.match(MySqlParser.DAY_MINUTE);
				}
				break;
			case 243:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1494;
				this.match(MySqlParser.DAY_SECOND);
				}
				break;
			case 244:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1495;
				this.match(MySqlParser.HOUR_MINUTE);
				}
				break;
			case 245:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1496;
				this.match(MySqlParser.HOUR_SECOND);
				}
				break;
			case 246:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1497;
				this.match(MySqlParser.MINUTE_SECOND);
				}
				break;
			case 247:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1498;
				this.match(MySqlParser.SECOND_MICROSECOND);
				}
				break;
			case 248:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1499;
				this.match(MySqlParser.MINUTE_MICROSECOND);
				}
				break;
			case 249:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1500;
				this.match(MySqlParser.HOUR_MICROSECOND);
				}
				break;
			case 250:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1501;
				this.match(MySqlParser.DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public enableType(): EnableTypeContext {
		let localctx: EnableTypeContext = new EnableTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 74, MySqlParser.RULE_enableType);
		try {
			this.state = 1509;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 134, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1504;
				this.match(MySqlParser.ENABLE);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1505;
				this.match(MySqlParser.DISABLE);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1506;
				this.match(MySqlParser.DISABLE);
				this.state = 1507;
				this.match(MySqlParser.ON);
				this.state = 1508;
				this.match(MySqlParser.SLAVE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexType(): IndexTypeContext {
		let localctx: IndexTypeContext = new IndexTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 76, MySqlParser.RULE_indexType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1511;
			this.match(MySqlParser.USING);
			this.state = 1512;
			_la = this._input.LA(1);
			if(!(_la===350 || _la===443)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexOption(): IndexOptionContext {
		let localctx: IndexOptionContext = new IndexOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 78, MySqlParser.RULE_indexOption);
		let _la: number;
		try {
			this.state = 1536;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 467:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1514;
				this.match(MySqlParser.KEY_BLOCK_SIZE);
				this.state = 1516;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1515;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1518;
				this.fileSizeLiteral();
				}
				break;
			case 187:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1519;
				this.indexType();
				}
				break;
			case 192:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1520;
				this.match(MySqlParser.WITH);
				this.state = 1521;
				this.match(MySqlParser.PARSER);
				this.state = 1522;
				this.uid();
				}
				break;
			case 368:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1523;
				this.match(MySqlParser.COMMENT);
				this.state = 1524;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 459:
			case 673:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1525;
				_la = this._input.LA(1);
				if(!(_la===459 || _la===673)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 875:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1526;
				this.match(MySqlParser.ENGINE_ATTRIBUTE);
				this.state = 1528;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1527;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1530;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 1000:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1531;
				this.match(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE);
				this.state = 1533;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1532;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1535;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureParameter(): ProcedureParameterContext {
		let localctx: ProcedureParameterContext = new ProcedureParameterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 80, MySqlParser.RULE_procedureParameter);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1539;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===80 || _la===84 || _la===125) {
				{
				this.state = 1538;
				localctx._direction = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===80 || _la===84 || _la===125)) {
				    localctx._direction = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 1541;
			this.uid();
			this.state = 1542;
			this.dataType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionParameter(): FunctionParameterContext {
		let localctx: FunctionParameterContext = new FunctionParameterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 82, MySqlParser.RULE_functionParameter);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1544;
			this.uid();
			this.state = 1545;
			this.dataType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public routineOption(): RoutineOptionContext {
		let localctx: RoutineOptionContext = new RoutineOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 84, MySqlParser.RULE_routineOption);
		let _la: number;
		try {
			this.state = 1570;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 368:
				localctx = new RoutineCommentContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1547;
				this.match(MySqlParser.COMMENT);
				this.state = 1548;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 468:
				localctx = new RoutineLanguageContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1549;
				this.match(MySqlParser.LANGUAGE);
				this.state = 1550;
				this.match(MySqlParser.SQL);
				}
				break;
			case 47:
			case 114:
				localctx = new RoutineBehaviorContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===114) {
					{
					this.state = 1551;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 1554;
				this.match(MySqlParser.DETERMINISTIC);
				}
				break;
			case 112:
			case 135:
			case 381:
			case 521:
				localctx = new RoutineDataContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1565;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 381:
					{
					this.state = 1555;
					this.match(MySqlParser.CONTAINS);
					this.state = 1556;
					this.match(MySqlParser.SQL);
					}
					break;
				case 521:
					{
					this.state = 1557;
					this.match(MySqlParser.NO);
					this.state = 1558;
					this.match(MySqlParser.SQL);
					}
					break;
				case 135:
					{
					this.state = 1559;
					this.match(MySqlParser.READS);
					this.state = 1560;
					this.match(MySqlParser.SQL);
					this.state = 1561;
					this.match(MySqlParser.DATA);
					}
					break;
				case 112:
					{
					this.state = 1562;
					this.match(MySqlParser.MODIFIES);
					this.state = 1563;
					this.match(MySqlParser.SQL);
					this.state = 1564;
					this.match(MySqlParser.DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 160:
				localctx = new RoutineSecurityContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1567;
				this.match(MySqlParser.SQL);
				this.state = 1568;
				this.match(MySqlParser.SECURITY);
				this.state = 1569;
				(localctx as RoutineSecurityContext)._context = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===392 || _la===460)) {
				    (localctx as RoutineSecurityContext)._context = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public serverOption(): ServerOptionContext {
		let localctx: ServerOptionContext = new ServerOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 86, MySqlParser.RULE_serverOption);
		try {
			this.state = 1586;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 446:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1572;
				this.match(MySqlParser.HOST);
				this.state = 1573;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 39:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1574;
				this.match(MySqlParser.DATABASE);
				this.state = 1575;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 665:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1576;
				this.match(MySqlParser.USER);
				this.state = 1577;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 551:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1578;
				this.match(MySqlParser.PASSWORD);
				this.state = 1579;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 617:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1580;
				this.match(MySqlParser.SOCKET);
				this.state = 1581;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 542:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1582;
				this.match(MySqlParser.OWNER);
				this.state = 1583;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 557:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1584;
				this.match(MySqlParser.PORT);
				this.state = 1585;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createDefinitions(): CreateDefinitionsContext {
		let localctx: CreateDefinitionsContext = new CreateDefinitionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 88, MySqlParser.RULE_createDefinitions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1588;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 1589;
			this.createDefinition();
			this.state = 1594;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 1590;
				this.match(MySqlParser.COMMA);
				this.state = 1591;
				this.createDefinition();
				}
				}
				this.state = 1596;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1597;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createDefinition(): CreateDefinitionContext {
		let localctx: CreateDefinitionContext = new CreateDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 90, MySqlParser.RULE_createDefinition);
		let _la: number;
		try {
			this.state = 1610;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 147, this._ctx) ) {
			case 1:
				localctx = new ColumnDeclarationContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1599;
				this.fullColumnName();
				this.state = 1600;
				this.columnDefinition();
				}
				break;
			case 2:
				localctx = new ConstraintDeclarationContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1602;
				this.tableConstraint();
				this.state = 1604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===114) {
					{
					this.state = 1603;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 1607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===57) {
					{
					this.state = 1606;
					this.match(MySqlParser.ENFORCED);
					}
				}

				}
				break;
			case 3:
				localctx = new IndexDeclarationContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1609;
				this.indexColumnDefinition();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnDefinition(): ColumnDefinitionContext {
		let localctx: ColumnDefinitionContext = new ColumnDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 92, MySqlParser.RULE_columnDefinition);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1612;
			this.dataType();
			this.state = 1616;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 148, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1613;
					this.columnConstraint();
					}
					}
				}
				this.state = 1618;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 148, this._ctx);
			}
			this.state = 1620;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===114) {
				{
				this.state = 1619;
				this.match(MySqlParser.NOT);
				}
			}

			this.state = 1623;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===57) {
				{
				this.state = 1622;
				this.match(MySqlParser.ENFORCED);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnConstraint(): ColumnConstraintContext {
		let localctx: ColumnConstraintContext = new ColumnConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 94, MySqlParser.RULE_columnConstraint);
		let _la: number;
		try {
			this.state = 1678;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 114:
			case 116:
			case 1152:
				localctx = new NullColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1625;
				this.nullNotnull();
				}
				break;
			case 42:
				localctx = new DefaultColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1626;
				this.match(MySqlParser.DEFAULT);
				this.state = 1627;
				this.defaultValue();
				}
				break;
			case 673:
				localctx = new VisibilityColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1628;
				this.match(MySqlParser.VISIBLE);
				}
				break;
			case 459:
				localctx = new InvisibilityColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1629;
				this.match(MySqlParser.INVISIBLE);
				}
				break;
			case 118:
			case 342:
				localctx = new AutoIncrementColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1634;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 342:
					{
					this.state = 1630;
					this.match(MySqlParser.AUTO_INCREMENT);
					}
					break;
				case 118:
					{
					this.state = 1631;
					this.match(MySqlParser.ON);
					this.state = 1632;
					this.match(MySqlParser.UPDATE);
					this.state = 1633;
					this.currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 91:
			case 130:
				localctx = new PrimaryKeyColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1637;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===130) {
					{
					this.state = 1636;
					this.match(MySqlParser.PRIMARY);
					}
				}

				this.state = 1639;
				this.match(MySqlParser.KEY);
				}
				break;
			case 181:
				localctx = new UniqueKeyColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1640;
				this.match(MySqlParser.UNIQUE);
				this.state = 1642;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 153, this._ctx) ) {
				case 1:
					{
					this.state = 1641;
					this.match(MySqlParser.KEY);
					}
					break;
				}
				}
				break;
			case 368:
				localctx = new CommentColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1644;
				this.match(MySqlParser.COMMENT);
				this.state = 1645;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 366:
				localctx = new FormatColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1646;
				this.match(MySqlParser.COLUMN_FORMAT);
				this.state = 1647;
				(localctx as FormatColumnConstraintContext)._colformat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===42 || _la===402 || _la===431)) {
				    (localctx as FormatColumnConstraintContext)._colformat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 636:
				localctx = new StorageColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1648;
				this.match(MySqlParser.STORAGE);
				this.state = 1649;
				(localctx as StorageColumnConstraintContext)._storageval = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===42 || _la===398 || _la===792)) {
				    (localctx as StorageColumnConstraintContext)._storageval = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 136:
				localctx = new ReferenceColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1650;
				this.referenceDefinition();
				}
				break;
			case 27:
				localctx = new CollateColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1651;
				this.match(MySqlParser.COLLATE);
				this.state = 1652;
				this.collationName();
				}
				break;
			case 12:
			case 70:
				localctx = new GeneratedColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1655;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===70) {
					{
					this.state = 1653;
					this.match(MySqlParser.GENERATED);
					this.state = 1654;
					this.match(MySqlParser.ALWAYS);
					}
				}

				this.state = 1657;
				this.match(MySqlParser.AS);
				this.state = 1658;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1659;
				this.expression(0);
				this.state = 1660;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 1662;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===637 || _la===672) {
					{
					this.state = 1661;
					_la = this._input.LA(1);
					if(!(_la===637 || _la===672)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				}
				break;
			case 239:
				localctx = new SerialDefaultColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 1664;
				this.match(MySqlParser.SERIAL);
				this.state = 1665;
				this.match(MySqlParser.DEFAULT);
				this.state = 1666;
				this.match(MySqlParser.VALUE);
				}
				break;
			case 26:
			case 30:
				localctx = new CheckColumnConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 1671;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 1667;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1669;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
						{
						this.state = 1668;
						(localctx as CheckColumnConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1673;
				this.match(MySqlParser.CHECK);
				this.state = 1674;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1675;
				this.expression(0);
				this.state = 1676;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableConstraint(): TableConstraintContext {
		let localctx: TableConstraintContext = new TableConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 96, MySqlParser.RULE_tableConstraint);
		let _la: number;
		try {
			this.state = 1749;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 175, this._ctx) ) {
			case 1:
				localctx = new PrimaryKeyTableConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1684;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 1680;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1682;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 159, this._ctx) ) {
					case 1:
						{
						this.state = 1681;
						(localctx as PrimaryKeyTableConstraintContext)._name = this.uid();
						}
						break;
					}
					}
				}

				this.state = 1686;
				this.match(MySqlParser.PRIMARY);
				this.state = 1687;
				this.match(MySqlParser.KEY);
				this.state = 1689;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 1688;
					(localctx as PrimaryKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1692;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===187) {
					{
					this.state = 1691;
					this.indexType();
					}
				}

				this.state = 1694;
				this.indexColumnNames();
				this.state = 1698;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===187 || _la===192 || _la===368 || _la===459 || _la===467 || _la===673 || _la===875 || _la===1000) {
					{
					{
					this.state = 1695;
					this.indexOption();
					}
					}
					this.state = 1700;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				localctx = new UniqueKeyTableConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 1701;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1703;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
						{
						this.state = 1702;
						(localctx as UniqueKeyTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1707;
				this.match(MySqlParser.UNIQUE);
				this.state = 1709;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===81 || _la===91) {
					{
					this.state = 1708;
					(localctx as UniqueKeyTableConstraintContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===81 || _la===91)) {
					    (localctx as UniqueKeyTableConstraintContext)._indexFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 1712;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 1711;
					(localctx as UniqueKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1715;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===187) {
					{
					this.state = 1714;
					this.indexType();
					}
				}

				this.state = 1717;
				this.indexColumnNames();
				this.state = 1721;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===187 || _la===192 || _la===368 || _la===459 || _la===467 || _la===673 || _la===875 || _la===1000) {
					{
					{
					this.state = 1718;
					this.indexOption();
					}
					}
					this.state = 1723;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 3:
				localctx = new ForeignKeyTableConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1728;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 1724;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1726;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
						{
						this.state = 1725;
						(localctx as ForeignKeyTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1730;
				this.match(MySqlParser.FOREIGN);
				this.state = 1731;
				this.match(MySqlParser.KEY);
				this.state = 1733;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 1732;
					(localctx as ForeignKeyTableConstraintContext)._index = this.uid();
					}
				}

				this.state = 1735;
				this.indexColumnNames();
				this.state = 1736;
				this.referenceDefinition();
				}
				break;
			case 4:
				localctx = new CheckTableConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 1738;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 1740;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
						{
						this.state = 1739;
						(localctx as CheckTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 1744;
				this.match(MySqlParser.CHECK);
				this.state = 1745;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 1746;
				this.expression(0);
				this.state = 1747;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public referenceDefinition(): ReferenceDefinitionContext {
		let localctx: ReferenceDefinitionContext = new ReferenceDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 98, MySqlParser.RULE_referenceDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1751;
			this.match(MySqlParser.REFERENCES);
			this.state = 1752;
			this.tableName();
			this.state = 1754;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 176, this._ctx) ) {
			case 1:
				{
				this.state = 1753;
				this.indexColumnNames();
				}
				break;
			}
			this.state = 1758;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===109) {
				{
				this.state = 1756;
				this.match(MySqlParser.MATCH);
				this.state = 1757;
				localctx._matchType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===436 || _la===548 || _la===613)) {
				    localctx._matchType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 1761;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 178, this._ctx) ) {
			case 1:
				{
				this.state = 1760;
				this.referenceAction();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public referenceAction(): ReferenceActionContext {
		let localctx: ReferenceActionContext = new ReferenceActionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 100, MySqlParser.RULE_referenceAction);
		try {
			this.state = 1779;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 181, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1763;
				this.match(MySqlParser.ON);
				this.state = 1764;
				this.match(MySqlParser.DELETE);
				this.state = 1765;
				localctx._onDelete = this.referenceControlType();
				this.state = 1769;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 179, this._ctx) ) {
				case 1:
					{
					this.state = 1766;
					this.match(MySqlParser.ON);
					this.state = 1767;
					this.match(MySqlParser.UPDATE);
					this.state = 1768;
					localctx._onUpdate = this.referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1771;
				this.match(MySqlParser.ON);
				this.state = 1772;
				this.match(MySqlParser.UPDATE);
				this.state = 1773;
				localctx._onUpdate = this.referenceControlType();
				this.state = 1777;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 180, this._ctx) ) {
				case 1:
					{
					this.state = 1774;
					this.match(MySqlParser.ON);
					this.state = 1775;
					this.match(MySqlParser.DELETE);
					this.state = 1776;
					localctx._onDelete = this.referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public referenceControlType(): ReferenceControlTypeContext {
		let localctx: ReferenceControlTypeContext = new ReferenceControlTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 102, MySqlParser.RULE_referenceControlType);
		try {
			this.state = 1789;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 182, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1781;
				this.match(MySqlParser.RESTRICT);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1782;
				this.match(MySqlParser.CASCADE);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1783;
				this.match(MySqlParser.SET);
				this.state = 1784;
				this.match(MySqlParser.NULL_LITERAL);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1785;
				this.match(MySqlParser.NO);
				this.state = 1786;
				this.match(MySqlParser.ACTION);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1787;
				this.match(MySqlParser.SET);
				this.state = 1788;
				this.match(MySqlParser.DEFAULT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexColumnDefinition(): IndexColumnDefinitionContext {
		let localctx: IndexColumnDefinitionContext = new IndexColumnDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 104, MySqlParser.RULE_indexColumnDefinition);
		let _la: number;
		try {
			this.state = 1819;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 81:
			case 91:
				localctx = new SimpleIndexDeclarationContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1791;
				(localctx as SimpleIndexDeclarationContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===81 || _la===91)) {
				    (localctx as SimpleIndexDeclarationContext)._indexFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 1793;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 1792;
					this.uid();
					}
				}

				this.state = 1796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===187) {
					{
					this.state = 1795;
					this.indexType();
					}
				}

				this.state = 1798;
				this.indexColumnNames();
				this.state = 1802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===187 || _la===192 || _la===368 || _la===459 || _la===467 || _la===673 || _la===875 || _la===1000) {
					{
					{
					this.state = 1799;
					this.indexOption();
					}
					}
					this.state = 1804;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 69:
			case 159:
				localctx = new SpecialIndexDeclarationContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1805;
				_la = this._input.LA(1);
				if(!(_la===69 || _la===159)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 1807;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===81 || _la===91) {
					{
					this.state = 1806;
					(localctx as SpecialIndexDeclarationContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===81 || _la===91)) {
					    (localctx as SpecialIndexDeclarationContext)._indexFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 1810;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 1809;
					this.uid();
					}
				}

				this.state = 1812;
				this.indexColumnNames();
				this.state = 1816;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===187 || _la===192 || _la===368 || _la===459 || _la===467 || _la===673 || _la===875 || _la===1000) {
					{
					{
					this.state = 1813;
					this.indexOption();
					}
					}
					this.state = 1818;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableOption(): TableOptionContext {
		let localctx: TableOptionContext = new TableOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 106, MySqlParser.RULE_tableOption);
		let _la: number;
		try {
			this.state = 2006;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 227, this._ctx) ) {
			case 1:
				localctx = new TableOptionEngineContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1821;
				this.match(MySqlParser.ENGINE);
				this.state = 1823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1822;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1826;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 191, this._ctx) ) {
				case 1:
					{
					this.state = 1825;
					this.engineName();
					}
					break;
				}
				}
				break;
			case 2:
				localctx = new TableOptionEngineAttributeContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1828;
				this.match(MySqlParser.ENGINE_ATTRIBUTE);
				this.state = 1830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1829;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1832;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 3:
				localctx = new TableOptionAutoextendSizeContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1833;
				this.match(MySqlParser.AUTOEXTEND_SIZE);
				this.state = 1835;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1834;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1837;
				this.decimalLiteral();
				}
				break;
			case 4:
				localctx = new TableOptionAutoIncrementContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1838;
				this.match(MySqlParser.AUTO_INCREMENT);
				this.state = 1840;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1839;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1842;
				this.decimalLiteral();
				}
				break;
			case 5:
				localctx = new TableOptionAverageContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1843;
				this.match(MySqlParser.AVG_ROW_LENGTH);
				this.state = 1845;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1844;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1847;
				this.decimalLiteral();
				}
				break;
			case 6:
				localctx = new TableOptionCharsetContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1849;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===42) {
					{
					this.state = 1848;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1851;
				this.charSet();
				this.state = 1853;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1852;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1857;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 226:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 1145:
				case 1148:
					{
					this.state = 1855;
					this.charsetName();
					}
					break;
				case 42:
					{
					this.state = 1856;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				localctx = new TableOptionChecksumContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1859;
				_la = this._input.LA(1);
				if(!(_la===356 || _la===357)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 1861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1860;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1863;
				(localctx as TableOptionChecksumContext)._boolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===1138 || _la===1139)) {
				    (localctx as TableOptionChecksumContext)._boolValue = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 8:
				localctx = new TableOptionCollateContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1865;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===42) {
					{
					this.state = 1864;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 1867;
				this.match(MySqlParser.COLLATE);
				this.state = 1869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1868;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1871;
				this.collationName();
				}
				break;
			case 9:
				localctx = new TableOptionCommentContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1872;
				this.match(MySqlParser.COMMENT);
				this.state = 1874;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1873;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1876;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 10:
				localctx = new TableOptionCompressionContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1877;
				this.match(MySqlParser.COMPRESSION);
				this.state = 1879;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1878;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1881;
				_la = this._input.LA(1);
				if(!(_la===1148 || _la===1156)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 11:
				localctx = new TableOptionConnectionContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1882;
				this.match(MySqlParser.CONNECTION);
				this.state = 1884;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1883;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1886;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 12:
				localctx = new TableOptionDataDirectoryContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1887;
				_la = this._input.LA(1);
				if(!(_la===81 || _la===388)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 1888;
				this.match(MySqlParser.DIRECTORY);
				this.state = 1890;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1889;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1892;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 13:
				localctx = new TableOptionDelayContext(this, localctx);
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1893;
				this.match(MySqlParser.DELAY_KEY_WRITE);
				this.state = 1895;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1894;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1897;
				(localctx as TableOptionDelayContext)._boolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===1138 || _la===1139)) {
				    (localctx as TableOptionDelayContext)._boolValue = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 14:
				localctx = new TableOptionEncryptionContext(this, localctx);
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 1898;
				this.match(MySqlParser.ENCRYPTION);
				this.state = 1900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1899;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1902;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 15:
				localctx = new TableOptionPageCompressedContext(this, localctx);
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 1903;
				_la = this._input.LA(1);
				if(!(_la===545 || _la===1148)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 1905;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1904;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1907;
				_la = this._input.LA(1);
				if(!(_la===1138 || _la===1139)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 16:
				localctx = new TableOptionPageCompressionLevelContext(this, localctx);
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 1908;
				_la = this._input.LA(1);
				if(!(_la===546 || _la===1148)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 1910;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1909;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1912;
				this.decimalLiteral();
				}
				break;
			case 17:
				localctx = new TableOptionEncryptionKeyIdContext(this, localctx);
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 1913;
				this.match(MySqlParser.ENCRYPTION_KEY_ID);
				this.state = 1915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1914;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1917;
				this.decimalLiteral();
				}
				break;
			case 18:
				localctx = new TableOptionIndexDirectoryContext(this, localctx);
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 1918;
				this.match(MySqlParser.INDEX);
				this.state = 1919;
				this.match(MySqlParser.DIRECTORY);
				this.state = 1921;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1920;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1923;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 19:
				localctx = new TableOptionInsertMethodContext(this, localctx);
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 1924;
				this.match(MySqlParser.INSERT_METHOD);
				this.state = 1926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1925;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1928;
				(localctx as TableOptionInsertMethodContext)._insertMethod = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===430 || _la===469 || _la===521)) {
				    (localctx as TableOptionInsertMethodContext)._insertMethod = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 20:
				localctx = new TableOptionKeyBlockSizeContext(this, localctx);
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 1929;
				this.match(MySqlParser.KEY_BLOCK_SIZE);
				this.state = 1931;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1930;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1933;
				this.fileSizeLiteral();
				}
				break;
			case 21:
				localctx = new TableOptionMaxRowsContext(this, localctx);
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 1934;
				this.match(MySqlParser.MAX_ROWS);
				this.state = 1936;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1935;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1938;
				this.decimalLiteral();
				}
				break;
			case 22:
				localctx = new TableOptionMinRowsContext(this, localctx);
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 1939;
				this.match(MySqlParser.MIN_ROWS);
				this.state = 1941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1940;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1943;
				this.decimalLiteral();
				}
				break;
			case 23:
				localctx = new TableOptionPackKeysContext(this, localctx);
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 1944;
				this.match(MySqlParser.PACK_KEYS);
				this.state = 1946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1945;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1948;
				(localctx as TableOptionPackKeysContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===42 || _la===1138 || _la===1139)) {
				    (localctx as TableOptionPackKeysContext)._extBoolValue = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 24:
				localctx = new TableOptionPasswordContext(this, localctx);
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 1949;
				this.match(MySqlParser.PASSWORD);
				this.state = 1951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1950;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1953;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 25:
				localctx = new TableOptionRowFormatContext(this, localctx);
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 1954;
				this.match(MySqlParser.ROW_FORMAT);
				this.state = 1956;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1955;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1958;
				(localctx as TableOptionRowFormatContext)._rowFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===42 || _la===370 || _la===372 || _la===402 || _la===431 || _la===573 || _la===1156)) {
				    (localctx as TableOptionRowFormatContext)._rowFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 26:
				localctx = new TableOptionStartTransactionContext(this, localctx);
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 1959;
				this.match(MySqlParser.START);
				this.state = 1960;
				this.match(MySqlParser.TRANSACTION);
				}
				break;
			case 27:
				localctx = new TableOptionSecondaryEngineAttributeContext(this, localctx);
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 1961;
				this.match(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE);
				this.state = 1963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1962;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1965;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 28:
				localctx = new TableOptionRecalculationContext(this, localctx);
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 1966;
				this.match(MySqlParser.STATS_AUTO_RECALC);
				this.state = 1968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1967;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1970;
				(localctx as TableOptionRecalculationContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===42 || _la===1138 || _la===1139)) {
				    (localctx as TableOptionRecalculationContext)._extBoolValue = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 29:
				localctx = new TableOptionPersistentContext(this, localctx);
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 1971;
				this.match(MySqlParser.STATS_PERSISTENT);
				this.state = 1973;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1972;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1975;
				(localctx as TableOptionPersistentContext)._extBoolValue = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===42 || _la===1138 || _la===1139)) {
				    (localctx as TableOptionPersistentContext)._extBoolValue = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 30:
				localctx = new TableOptionSamplePageContext(this, localctx);
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 1976;
				this.match(MySqlParser.STATS_SAMPLE_PAGES);
				this.state = 1978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1977;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1982;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 42:
					{
					this.state = 1980;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				case 1138:
				case 1139:
				case 1140:
				case 1149:
				case 1151:
					{
					this.state = 1981;
					this.decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 31:
				localctx = new TableOptionTablespaceContext(this, localctx);
				this.enterOuterAlt(localctx, 31);
				{
				this.state = 1984;
				this.match(MySqlParser.TABLESPACE);
				this.state = 1985;
				this.uid();
				this.state = 1987;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 224, this._ctx) ) {
				case 1:
					{
					this.state = 1986;
					this.tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 32:
				localctx = new TableOptionTableTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 32);
				{
				this.state = 1989;
				this.match(MySqlParser.TABLE_TYPE);
				this.state = 1990;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 1991;
				this.tableType();
				}
				break;
			case 33:
				localctx = new TableOptionTablespaceContext(this, localctx);
				this.enterOuterAlt(localctx, 33);
				{
				this.state = 1992;
				this.tablespaceStorage();
				}
				break;
			case 34:
				localctx = new TableOptionTransactionalContext(this, localctx);
				this.enterOuterAlt(localctx, 34);
				{
				this.state = 1993;
				this.match(MySqlParser.TRANSACTIONAL);
				this.state = 1995;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1994;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 1997;
				_la = this._input.LA(1);
				if(!(_la===1138 || _la===1139)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 35:
				localctx = new TableOptionUnionContext(this, localctx);
				this.enterOuterAlt(localctx, 35);
				{
				this.state = 1998;
				this.match(MySqlParser.UNION);
				this.state = 2000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 1999;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2002;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2003;
				this.tables();
				this.state = 2004;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableType(): TableTypeContext {
		let localctx: TableTypeContext = new TableTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 108, MySqlParser.RULE_tableType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2008;
			_la = this._input.LA(1);
			if(!(_la===514 || _la===530)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tablespaceStorage(): TablespaceStorageContext {
		let localctx: TablespaceStorageContext = new TablespaceStorageContext(this, this._ctx, this.state);
		this.enterRule(localctx, 110, MySqlParser.RULE_tablespaceStorage);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2010;
			this.match(MySqlParser.STORAGE);
			this.state = 2011;
			_la = this._input.LA(1);
			if(!(_la===42 || _la===398 || _la===792)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionDefinitions(): PartitionDefinitionsContext {
		let localctx: PartitionDefinitionsContext = new PartitionDefinitionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 112, MySqlParser.RULE_partitionDefinitions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2013;
			this.match(MySqlParser.PARTITION);
			this.state = 2014;
			this.match(MySqlParser.BY);
			this.state = 2015;
			this.partitionFunctionDefinition();
			this.state = 2018;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===550) {
				{
				this.state = 2016;
				this.match(MySqlParser.PARTITIONS);
				this.state = 2017;
				localctx._count = this.decimalLiteral();
				}
			}

			this.state = 2027;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===641) {
				{
				this.state = 2020;
				this.match(MySqlParser.SUBPARTITION);
				this.state = 2021;
				this.match(MySqlParser.BY);
				this.state = 2022;
				this.subpartitionFunctionDefinition();
				this.state = 2025;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===642) {
					{
					this.state = 2023;
					this.match(MySqlParser.SUBPARTITIONS);
					this.state = 2024;
					localctx._subCount = this.decimalLiteral();
					}
				}

				}
			}

			this.state = 2040;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 232, this._ctx) ) {
			case 1:
				{
				this.state = 2029;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2030;
				this.partitionDefinition();
				this.state = 2035;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 2031;
					this.match(MySqlParser.COMMA);
					this.state = 2032;
					this.partitionDefinition();
					}
					}
					this.state = 2037;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2038;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionFunctionDefinition(): PartitionFunctionDefinitionContext {
		let localctx: PartitionFunctionDefinitionContext = new PartitionFunctionDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 114, MySqlParser.RULE_partitionFunctionDefinition);
		let _la: number;
		try {
			this.state = 2088;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 239, this._ctx) ) {
			case 1:
				localctx = new PartitionFunctionHashContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2043;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===100) {
					{
					this.state = 2042;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 2045;
				this.match(MySqlParser.HASH);
				this.state = 2046;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2047;
				this.expression(0);
				this.state = 2048;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 2:
				localctx = new PartitionFunctionKeyContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2051;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===100) {
					{
					this.state = 2050;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 2053;
				this.match(MySqlParser.KEY);
				this.state = 2057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===336) {
					{
					this.state = 2054;
					this.match(MySqlParser.ALGORITHM);
					this.state = 2055;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 2056;
					(localctx as PartitionFunctionKeyContext)._algType = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===1139 || _la===1140)) {
					    (localctx as PartitionFunctionKeyContext)._algType = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 2059;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2061;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 2060;
					this.uidList();
					}
				}

				this.state = 2063;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 3:
				localctx = new PartitionFunctionRangeContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2064;
				this.match(MySqlParser.RANGE);
				this.state = 2074;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 1133:
					{
					this.state = 2065;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2066;
					this.expression(0);
					this.state = 2067;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				case 365:
					{
					this.state = 2069;
					this.match(MySqlParser.COLUMNS);
					this.state = 2070;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2071;
					this.uidList();
					this.state = 2072;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				localctx = new PartitionFunctionListContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2076;
				this.match(MySqlParser.LIST);
				this.state = 2086;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 1133:
					{
					this.state = 2077;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2078;
					this.expression(0);
					this.state = 2079;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				case 365:
					{
					this.state = 2081;
					this.match(MySqlParser.COLUMNS);
					this.state = 2082;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2083;
					this.uidList();
					this.state = 2084;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext {
		let localctx: SubpartitionFunctionDefinitionContext = new SubpartitionFunctionDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 116, MySqlParser.RULE_subpartitionFunctionDefinition);
		let _la: number;
		try {
			this.state = 2111;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 243, this._ctx) ) {
			case 1:
				localctx = new SubPartitionFunctionHashContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2091;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===100) {
					{
					this.state = 2090;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 2093;
				this.match(MySqlParser.HASH);
				this.state = 2094;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2095;
				this.expression(0);
				this.state = 2096;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 2:
				localctx = new SubPartitionFunctionKeyContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2099;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===100) {
					{
					this.state = 2098;
					this.match(MySqlParser.LINEAR);
					}
				}

				this.state = 2101;
				this.match(MySqlParser.KEY);
				this.state = 2105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===336) {
					{
					this.state = 2102;
					this.match(MySqlParser.ALGORITHM);
					this.state = 2103;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 2104;
					(localctx as SubPartitionFunctionKeyContext)._algType = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===1139 || _la===1140)) {
					    (localctx as SubPartitionFunctionKeyContext)._algType = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 2107;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2108;
				this.uidList();
				this.state = 2109;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionDefinition(): PartitionDefinitionContext {
		let localctx: PartitionDefinitionContext = new PartitionDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 118, MySqlParser.RULE_partitionDefinition);
		let _la: number;
		try {
			this.state = 2259;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 262, this._ctx) ) {
			case 1:
				localctx = new PartitionComparisonContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2113;
				this.match(MySqlParser.PARTITION);
				this.state = 2114;
				this.uid();
				this.state = 2115;
				this.match(MySqlParser.VALUES);
				this.state = 2116;
				this.match(MySqlParser.LESS);
				this.state = 2117;
				this.match(MySqlParser.THAN);
				this.state = 2118;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2119;
				this.partitionDefinerAtom();
				this.state = 2124;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 2120;
					this.match(MySqlParser.COMMA);
					this.state = 2121;
					this.partitionDefinerAtom();
					}
					}
					this.state = 2126;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2127;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 2131;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
					{
					{
					this.state = 2128;
					this.partitionOption();
					}
					}
					this.state = 2133;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1133) {
					{
					this.state = 2134;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2135;
					this.subpartitionDefinition();
					this.state = 2140;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1135) {
						{
						{
						this.state = 2136;
						this.match(MySqlParser.COMMA);
						this.state = 2137;
						this.subpartitionDefinition();
						}
						}
						this.state = 2142;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2143;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				localctx = new PartitionComparisonContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2147;
				this.match(MySqlParser.PARTITION);
				this.state = 2148;
				this.uid();
				this.state = 2149;
				this.match(MySqlParser.VALUES);
				this.state = 2150;
				this.match(MySqlParser.LESS);
				this.state = 2151;
				this.match(MySqlParser.THAN);
				this.state = 2152;
				this.partitionDefinerAtom();
				this.state = 2156;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
					{
					{
					this.state = 2153;
					this.partitionOption();
					}
					}
					this.state = 2158;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1133) {
					{
					this.state = 2159;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2160;
					this.subpartitionDefinition();
					this.state = 2165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1135) {
						{
						{
						this.state = 2161;
						this.match(MySqlParser.COMMA);
						this.state = 2162;
						this.subpartitionDefinition();
						}
						}
						this.state = 2167;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2168;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				localctx = new PartitionListAtomContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2172;
				this.match(MySqlParser.PARTITION);
				this.state = 2173;
				this.uid();
				this.state = 2174;
				this.match(MySqlParser.VALUES);
				this.state = 2175;
				this.match(MySqlParser.IN);
				this.state = 2176;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2177;
				this.partitionDefinerAtom();
				this.state = 2182;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 2178;
					this.match(MySqlParser.COMMA);
					this.state = 2179;
					this.partitionDefinerAtom();
					}
					}
					this.state = 2184;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2185;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 2189;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
					{
					{
					this.state = 2186;
					this.partitionOption();
					}
					}
					this.state = 2191;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1133) {
					{
					this.state = 2192;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2193;
					this.subpartitionDefinition();
					this.state = 2198;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1135) {
						{
						{
						this.state = 2194;
						this.match(MySqlParser.COMMA);
						this.state = 2195;
						this.subpartitionDefinition();
						}
						}
						this.state = 2200;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2201;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				localctx = new PartitionListVectorContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2205;
				this.match(MySqlParser.PARTITION);
				this.state = 2206;
				this.uid();
				this.state = 2207;
				this.match(MySqlParser.VALUES);
				this.state = 2208;
				this.match(MySqlParser.IN);
				this.state = 2209;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2210;
				this.partitionDefinerVector();
				this.state = 2215;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 2211;
					this.match(MySqlParser.COMMA);
					this.state = 2212;
					this.partitionDefinerVector();
					}
					}
					this.state = 2217;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2218;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 2222;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
					{
					{
					this.state = 2219;
					this.partitionOption();
					}
					}
					this.state = 2224;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1133) {
					{
					this.state = 2225;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2226;
					this.subpartitionDefinition();
					this.state = 2231;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1135) {
						{
						{
						this.state = 2227;
						this.match(MySqlParser.COMMA);
						this.state = 2228;
						this.subpartitionDefinition();
						}
						}
						this.state = 2233;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2234;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				localctx = new PartitionSimpleContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2238;
				this.match(MySqlParser.PARTITION);
				this.state = 2239;
				this.uid();
				this.state = 2243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
					{
					{
					this.state = 2240;
					this.partitionOption();
					}
					}
					this.state = 2245;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2257;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1133) {
					{
					this.state = 2246;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2247;
					this.subpartitionDefinition();
					this.state = 2252;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1135) {
						{
						{
						this.state = 2248;
						this.match(MySqlParser.COMMA);
						this.state = 2249;
						this.subpartitionDefinition();
						}
						}
						this.state = 2254;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2255;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionDefinerAtom(): PartitionDefinerAtomContext {
		let localctx: PartitionDefinerAtomContext = new PartitionDefinerAtomContext(this, this._ctx, this.state);
		this.enterRule(localctx, 120, MySqlParser.RULE_partitionDefinerAtom);
		try {
			this.state = 2264;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 263, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2261;
				this.constant();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2262;
				this.expression(0);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2263;
				this.match(MySqlParser.MAXVALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionDefinerVector(): PartitionDefinerVectorContext {
		let localctx: PartitionDefinerVectorContext = new PartitionDefinerVectorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 122, MySqlParser.RULE_partitionDefinerVector);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2266;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 2267;
			this.partitionDefinerAtom();
			this.state = 2270;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2268;
				this.match(MySqlParser.COMMA);
				this.state = 2269;
				this.partitionDefinerAtom();
				}
				}
				this.state = 2272;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===1135);
			this.state = 2274;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subpartitionDefinition(): SubpartitionDefinitionContext {
		let localctx: SubpartitionDefinitionContext = new SubpartitionDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 124, MySqlParser.RULE_subpartitionDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2276;
			this.match(MySqlParser.SUBPARTITION);
			this.state = 2277;
			this.uid();
			this.state = 2281;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
				{
				{
				this.state = 2278;
				this.partitionOption();
				}
				}
				this.state = 2283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionOption(): PartitionOptionContext {
		let localctx: PartitionOptionContext = new PartitionOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 126, MySqlParser.RULE_partitionOption);
		let _la: number;
		try {
			this.state = 2332;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 42:
			case 409:
			case 636:
				localctx = new PartitionOptionEngineContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2285;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===42) {
					{
					this.state = 2284;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 2288;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===636) {
					{
					this.state = 2287;
					this.match(MySqlParser.STORAGE);
					}
				}

				this.state = 2290;
				this.match(MySqlParser.ENGINE);
				this.state = 2292;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2291;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2294;
				this.engineName();
				}
				break;
			case 368:
				localctx = new PartitionOptionCommentContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2295;
				this.match(MySqlParser.COMMENT);
				this.state = 2297;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2296;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2299;
				(localctx as PartitionOptionCommentContext)._comment = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 388:
				localctx = new PartitionOptionDataDirectoryContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2300;
				this.match(MySqlParser.DATA);
				this.state = 2301;
				this.match(MySqlParser.DIRECTORY);
				this.state = 2303;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2302;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2305;
				(localctx as PartitionOptionDataDirectoryContext)._dataDirectory = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 81:
				localctx = new PartitionOptionIndexDirectoryContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2306;
				this.match(MySqlParser.INDEX);
				this.state = 2307;
				this.match(MySqlParser.DIRECTORY);
				this.state = 2309;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2308;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2311;
				(localctx as PartitionOptionIndexDirectoryContext)._indexDirectory = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 500:
				localctx = new PartitionOptionMaxRowsContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2312;
				this.match(MySqlParser.MAX_ROWS);
				this.state = 2314;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2313;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2316;
				(localctx as PartitionOptionMaxRowsContext)._maxRows = this.decimalLiteral();
				}
				break;
			case 510:
				localctx = new PartitionOptionMinRowsContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2317;
				this.match(MySqlParser.MIN_ROWS);
				this.state = 2319;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2318;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2321;
				(localctx as PartitionOptionMinRowsContext)._minRows = this.decimalLiteral();
				}
				break;
			case 647:
				localctx = new PartitionOptionTablespaceContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2322;
				this.match(MySqlParser.TABLESPACE);
				this.state = 2324;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2323;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2326;
				(localctx as PartitionOptionTablespaceContext)._tablespace = this.uid();
				}
				break;
			case 528:
				localctx = new PartitionOptionNodeGroupContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 2327;
				this.match(MySqlParser.NODEGROUP);
				this.state = 2329;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2328;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2331;
				(localctx as PartitionOptionNodeGroupContext)._nodegroup = this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDatabase(): AlterDatabaseContext {
		let localctx: AlterDatabaseContext = new AlterDatabaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 128, MySqlParser.RULE_alterDatabase);
		let _la: number;
		try {
			this.state = 2352;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 279, this._ctx) ) {
			case 1:
				localctx = new AlterSimpleDatabaseContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2334;
				this.match(MySqlParser.ALTER);
				this.state = 2335;
				(localctx as AlterSimpleDatabaseContext)._dbFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===39 || _la===150)) {
				    (localctx as AlterSimpleDatabaseContext)._dbFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2337;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 277, this._ctx) ) {
				case 1:
					{
					this.state = 2336;
					this.uid();
					}
					break;
				}
				this.state = 2340;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2339;
					this.createDatabaseOption();
					}
					}
					this.state = 2342;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (((((_la - 25)) & ~0x1F) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la===134 || _la===222 || _la===405 || _la===841);
				}
				break;
			case 2:
				localctx = new AlterUpgradeNameContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2344;
				this.match(MySqlParser.ALTER);
				this.state = 2345;
				(localctx as AlterUpgradeNameContext)._dbFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===39 || _la===150)) {
				    (localctx as AlterUpgradeNameContext)._dbFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2346;
				this.uid();
				this.state = 2347;
				this.match(MySqlParser.UPGRADE);
				this.state = 2348;
				this.match(MySqlParser.DATA);
				this.state = 2349;
				this.match(MySqlParser.DIRECTORY);
				this.state = 2350;
				this.match(MySqlParser.NAME);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterEvent(): AlterEventContext {
		let localctx: AlterEventContext = new AlterEventContext(this, this._ctx, this.state);
		this.enterRule(localctx, 130, MySqlParser.RULE_alterEvent);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2354;
			this.match(MySqlParser.ALTER);
			this.state = 2356;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===392) {
				{
				this.state = 2355;
				this.ownerStatement();
				}
			}

			this.state = 2358;
			this.match(MySqlParser.EVENT);
			this.state = 2359;
			this.fullId();
			this.state = 2363;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 281, this._ctx) ) {
			case 1:
				{
				this.state = 2360;
				this.match(MySqlParser.ON);
				this.state = 2361;
				this.match(MySqlParser.SCHEDULE);
				this.state = 2362;
				this.scheduleExpression();
				}
				break;
			}
			this.state = 2371;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===118) {
				{
				this.state = 2365;
				this.match(MySqlParser.ON);
				this.state = 2366;
				this.match(MySqlParser.COMPLETION);
				this.state = 2368;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===114) {
					{
					this.state = 2367;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 2370;
				this.match(MySqlParser.PRESERVE);
				}
			}

			this.state = 2376;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 284, this._ctx) ) {
			case 1:
				{
				this.state = 2373;
				this.match(MySqlParser.RENAME);
				this.state = 2374;
				this.match(MySqlParser.TO);
				this.state = 2375;
				this.fullId();
				}
				break;
			}
			this.state = 2379;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===396 || _la===403) {
				{
				this.state = 2378;
				this.enableType();
				}
			}

			this.state = 2383;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===368) {
				{
				this.state = 2381;
				this.match(MySqlParser.COMMENT);
				this.state = 2382;
				this.match(MySqlParser.STRING_LITERAL);
				}
			}

			this.state = 2387;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 287, this._ctx) ) {
			case 1:
				{
				this.state = 2385;
				this.match(MySqlParser.DO);
				this.state = 2386;
				this.routineBody();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterFunction(): AlterFunctionContext {
		let localctx: AlterFunctionContext = new AlterFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 132, MySqlParser.RULE_alterFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2389;
			this.match(MySqlParser.ALTER);
			this.state = 2390;
			this.match(MySqlParser.FUNCTION);
			this.state = 2391;
			this.fullId();
			this.state = 2395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===47 || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 8388613) !== 0) || _la===160 || _la===368 || _la===381 || _la===468 || _la===521) {
				{
				{
				this.state = 2392;
				this.routineOption();
				}
				}
				this.state = 2397;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterInstance(): AlterInstanceContext {
		let localctx: AlterInstanceContext = new AlterInstanceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 134, MySqlParser.RULE_alterInstance);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2398;
			this.match(MySqlParser.ALTER);
			this.state = 2399;
			this.match(MySqlParser.INSTANCE);
			this.state = 2400;
			this.match(MySqlParser.ROTATE);
			this.state = 2401;
			this.match(MySqlParser.INNODB);
			this.state = 2402;
			this.match(MySqlParser.MASTER);
			this.state = 2403;
			this.match(MySqlParser.KEY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterLogfileGroup(): AlterLogfileGroupContext {
		let localctx: AlterLogfileGroupContext = new AlterLogfileGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 136, MySqlParser.RULE_alterLogfileGroup);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2405;
			this.match(MySqlParser.ALTER);
			this.state = 2406;
			this.match(MySqlParser.LOGFILE);
			this.state = 2407;
			this.match(MySqlParser.GROUP);
			this.state = 2408;
			this.uid();
			this.state = 2409;
			this.match(MySqlParser.ADD);
			this.state = 2410;
			this.match(MySqlParser.UNDOFILE);
			this.state = 2411;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 2417;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===453) {
				{
				this.state = 2412;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 2414;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2413;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2416;
				this.fileSizeLiteral();
				}
			}

			this.state = 2420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===674) {
				{
				this.state = 2419;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 2422;
			this.match(MySqlParser.ENGINE);
			this.state = 2424;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1124) {
				{
				this.state = 2423;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 2426;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterProcedure(): AlterProcedureContext {
		let localctx: AlterProcedureContext = new AlterProcedureContext(this, this._ctx, this.state);
		this.enterRule(localctx, 138, MySqlParser.RULE_alterProcedure);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2428;
			this.match(MySqlParser.ALTER);
			this.state = 2429;
			this.match(MySqlParser.PROCEDURE);
			this.state = 2430;
			this.fullId();
			this.state = 2434;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===47 || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 8388613) !== 0) || _la===160 || _la===368 || _la===381 || _la===468 || _la===521) {
				{
				{
				this.state = 2431;
				this.routineOption();
				}
				}
				this.state = 2436;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterServer(): AlterServerContext {
		let localctx: AlterServerContext = new AlterServerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 140, MySqlParser.RULE_alterServer);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2437;
			this.match(MySqlParser.ALTER);
			this.state = 2438;
			this.match(MySqlParser.SERVER);
			this.state = 2439;
			this.uid();
			this.state = 2440;
			this.match(MySqlParser.OPTIONS);
			this.state = 2441;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 2442;
			this.serverOption();
			this.state = 2447;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 2443;
				this.match(MySqlParser.COMMA);
				this.state = 2444;
				this.serverOption();
				}
				}
				this.state = 2449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2450;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTable(): AlterTableContext {
		let localctx: AlterTableContext = new AlterTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 142, MySqlParser.RULE_alterTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2452;
			this.match(MySqlParser.ALTER);
			this.state = 2454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===531 || _la===537) {
				{
				this.state = 2453;
				localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===531 || _la===537)) {
				    localctx._intimeAction = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 2457;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78) {
				{
				this.state = 2456;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 2459;
			this.match(MySqlParser.TABLE);
			this.state = 2460;
			this.tableName();
			this.state = 2462;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===527 || _la===674) {
				{
				this.state = 2461;
				this.waitNowaitClause();
				}
			}

			this.state = 2472;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 299, this._ctx) ) {
			case 1:
				{
				this.state = 2464;
				this.alterSpecification();
				this.state = 2469;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 2465;
					this.match(MySqlParser.COMMA);
					this.state = 2466;
					this.alterSpecification();
					}
					}
					this.state = 2471;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 2475;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 2474;
				this.partitionDefinitions();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTablespace(): AlterTablespaceContext {
		let localctx: AlterTablespaceContext = new AlterTablespaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 144, MySqlParser.RULE_alterTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2477;
			this.match(MySqlParser.ALTER);
			this.state = 2478;
			this.match(MySqlParser.TABLESPACE);
			this.state = 2479;
			this.uid();
			this.state = 2480;
			localctx._objectAction = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===5 || _la===51)) {
			    localctx._objectAction = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2481;
			this.match(MySqlParser.DATAFILE);
			this.state = 2482;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 2486;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===453) {
				{
				this.state = 2483;
				this.match(MySqlParser.INITIAL_SIZE);
				this.state = 2484;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 2485;
				this.fileSizeLiteral();
				}
			}

			this.state = 2489;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===674) {
				{
				this.state = 2488;
				this.match(MySqlParser.WAIT);
				}
			}

			this.state = 2491;
			this.match(MySqlParser.ENGINE);
			this.state = 2493;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1124) {
				{
				this.state = 2492;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
			}

			this.state = 2495;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterView(): AlterViewContext {
		let localctx: AlterViewContext = new AlterViewContext(this, this._ctx, this.state);
		this.enterRule(localctx, 146, MySqlParser.RULE_alterView);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2497;
			this.match(MySqlParser.ALTER);
			this.state = 2501;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===336) {
				{
				this.state = 2498;
				this.match(MySqlParser.ALGORITHM);
				this.state = 2499;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 2500;
				localctx._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===506 || _la===650 || _la===658)) {
				    localctx._algType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 2504;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===392) {
				{
				this.state = 2503;
				this.ownerStatement();
				}
			}

			this.state = 2509;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===160) {
				{
				this.state = 2506;
				this.match(MySqlParser.SQL);
				this.state = 2507;
				this.match(MySqlParser.SECURITY);
				this.state = 2508;
				localctx._secContext = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===392 || _la===460)) {
				    localctx._secContext = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 2511;
			this.match(MySqlParser.VIEW);
			this.state = 2512;
			this.fullId();
			this.state = 2517;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1133) {
				{
				this.state = 2513;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2514;
				this.uidList();
				this.state = 2515;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 2519;
			this.match(MySqlParser.AS);
			this.state = 2520;
			this.selectStatement();
			this.state = 2527;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 309, this._ctx) ) {
			case 1:
				{
				this.state = 2521;
				this.match(MySqlParser.WITH);
				this.state = 2523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===352 || _la===474) {
					{
					this.state = 2522;
					localctx._checkOpt = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===352 || _la===474)) {
					    localctx._checkOpt = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 2525;
				this.match(MySqlParser.CHECK);
				this.state = 2526;
				this.match(MySqlParser.OPTION);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterSpecification(): AlterSpecificationContext {
		let localctx: AlterSpecificationContext = new AlterSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 148, MySqlParser.RULE_alterSpecification);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2880;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 369, this._ctx) ) {
			case 1:
				localctx = new AlterByTableOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2529;
				this.tableOption();
				this.state = 2536;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 311, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2531;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===1135) {
							{
							this.state = 2530;
							this.match(MySqlParser.COMMA);
							}
						}

						this.state = 2533;
						this.tableOption();
						}
						}
					}
					this.state = 2538;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 311, this._ctx);
				}
				}
				break;
			case 2:
				localctx = new AlterByAddColumnContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2539;
				this.match(MySqlParser.ADD);
				this.state = 2541;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===28) {
					{
					this.state = 2540;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2543;
				this.uid();
				this.state = 2544;
				this.columnDefinition();
				this.state = 2548;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 430:
					{
					this.state = 2545;
					this.match(MySqlParser.FIRST);
					}
					break;
				case 334:
					{
					this.state = 2546;
					this.match(MySqlParser.AFTER);
					this.state = 2547;
					this.uid();
					}
					break;
				case -1:
				case 7:
				case 9:
				case 20:
				case 24:
				case 26:
				case 33:
				case 44:
				case 45:
				case 46:
				case 51:
				case 62:
				case 71:
				case 72:
				case 85:
				case 93:
				case 102:
				case 103:
				case 119:
				case 129:
				case 132:
				case 138:
				case 139:
				case 141:
				case 143:
				case 147:
				case 152:
				case 153:
				case 155:
				case 156:
				case 172:
				case 182:
				case 184:
				case 186:
				case 188:
				case 192:
				case 344:
				case 345:
				case 351:
				case 356:
				case 369:
				case 390:
				case 399:
				case 432:
				case 442:
				case 444:
				case 456:
				case 560:
				case 580:
				case 589:
				case 597:
				case 604:
				case 629:
				case 635:
				case 656:
				case 661:
				case 681:
				case 708:
				case 739:
				case 1121:
				case 1133:
				case 1135:
				case 1136:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				localctx = new AlterByAddColumnsContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2550;
				this.match(MySqlParser.ADD);
				this.state = 2552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===28) {
					{
					this.state = 2551;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2554;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2555;
				this.uid();
				this.state = 2556;
				this.columnDefinition();
				this.state = 2563;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 2557;
					this.match(MySqlParser.COMMA);
					this.state = 2558;
					this.uid();
					this.state = 2559;
					this.columnDefinition();
					}
					}
					this.state = 2565;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2566;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 4:
				localctx = new AlterByAddIndexContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2568;
				this.match(MySqlParser.ADD);
				this.state = 2569;
				(localctx as AlterByAddIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===81 || _la===91)) {
				    (localctx as AlterByAddIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 2570;
					this.uid();
					}
				}

				this.state = 2574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===187) {
					{
					this.state = 2573;
					this.indexType();
					}
				}

				this.state = 2576;
				this.indexColumnNames();
				this.state = 2580;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 318, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2577;
						this.indexOption();
						}
						}
					}
					this.state = 2582;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 318, this._ctx);
				}
				}
				break;
			case 5:
				localctx = new AlterByAddPrimaryKeyContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2583;
				this.match(MySqlParser.ADD);
				this.state = 2588;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 2584;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2586;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 319, this._ctx) ) {
					case 1:
						{
						this.state = 2585;
						(localctx as AlterByAddPrimaryKeyContext)._name = this.uid();
						}
						break;
					}
					}
				}

				this.state = 2590;
				this.match(MySqlParser.PRIMARY);
				this.state = 2591;
				this.match(MySqlParser.KEY);
				this.state = 2593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 2592;
					(localctx as AlterByAddPrimaryKeyContext)._index = this.uid();
					}
				}

				this.state = 2596;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===187) {
					{
					this.state = 2595;
					this.indexType();
					}
				}

				this.state = 2598;
				this.indexColumnNames();
				this.state = 2602;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 323, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2599;
						this.indexOption();
						}
						}
					}
					this.state = 2604;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 323, this._ctx);
				}
				}
				break;
			case 6:
				localctx = new AlterByAddUniqueKeyContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2605;
				this.match(MySqlParser.ADD);
				this.state = 2610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 2606;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2608;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
						{
						this.state = 2607;
						(localctx as AlterByAddUniqueKeyContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2612;
				this.match(MySqlParser.UNIQUE);
				this.state = 2614;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===81 || _la===91) {
					{
					this.state = 2613;
					(localctx as AlterByAddUniqueKeyContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===81 || _la===91)) {
					    (localctx as AlterByAddUniqueKeyContext)._indexFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 2617;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 2616;
					(localctx as AlterByAddUniqueKeyContext)._indexName = this.uid();
					}
				}

				this.state = 2620;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===187) {
					{
					this.state = 2619;
					this.indexType();
					}
				}

				this.state = 2622;
				this.indexColumnNames();
				this.state = 2626;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 329, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2623;
						this.indexOption();
						}
						}
					}
					this.state = 2628;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 329, this._ctx);
				}
				}
				break;
			case 7:
				localctx = new AlterByAddSpecialIndexContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2629;
				this.match(MySqlParser.ADD);
				this.state = 2630;
				(localctx as AlterByAddSpecialIndexContext)._keyType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===69 || _la===159)) {
				    (localctx as AlterByAddSpecialIndexContext)._keyType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2632;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===81 || _la===91) {
					{
					this.state = 2631;
					(localctx as AlterByAddSpecialIndexContext)._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===81 || _la===91)) {
					    (localctx as AlterByAddSpecialIndexContext)._indexFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 2635;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 2634;
					this.uid();
					}
				}

				this.state = 2637;
				this.indexColumnNames();
				this.state = 2641;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 332, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2638;
						this.indexOption();
						}
						}
					}
					this.state = 2643;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 332, this._ctx);
				}
				}
				break;
			case 8:
				localctx = new AlterByAddForeignKeyContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 2644;
				this.match(MySqlParser.ADD);
				this.state = 2649;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 2645;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2647;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
						{
						this.state = 2646;
						(localctx as AlterByAddForeignKeyContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2651;
				this.match(MySqlParser.FOREIGN);
				this.state = 2652;
				this.match(MySqlParser.KEY);
				this.state = 2654;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 2653;
					(localctx as AlterByAddForeignKeyContext)._indexName = this.uid();
					}
				}

				this.state = 2656;
				this.indexColumnNames();
				this.state = 2657;
				this.referenceDefinition();
				}
				break;
			case 9:
				localctx = new AlterByAddCheckTableConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 2659;
				this.match(MySqlParser.ADD);
				this.state = 2664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 2660;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2662;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
						{
						this.state = 2661;
						(localctx as AlterByAddCheckTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2666;
				this.match(MySqlParser.CHECK);
				this.state = 2673;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 338, this._ctx) ) {
				case 1:
					{
					this.state = 2667;
					this.uid();
					}
					break;
				case 2:
					{
					this.state = 2668;
					this.stringLiteral();
					}
					break;
				case 3:
					{
					this.state = 2669;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2670;
					this.expression(0);
					this.state = 2671;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 2676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===114) {
					{
					this.state = 2675;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 2679;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===57) {
					{
					this.state = 2678;
					this.match(MySqlParser.ENFORCED);
					}
				}

				}
				break;
			case 10:
				localctx = new AlterByAlterCheckTableConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 2681;
				this.match(MySqlParser.ALTER);
				this.state = 2686;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 2682;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2684;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
						{
						this.state = 2683;
						(localctx as AlterByAlterCheckTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2688;
				this.match(MySqlParser.CHECK);
				this.state = 2695;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 343, this._ctx) ) {
				case 1:
					{
					this.state = 2689;
					this.uid();
					}
					break;
				case 2:
					{
					this.state = 2690;
					this.stringLiteral();
					}
					break;
				case 3:
					{
					this.state = 2691;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 2692;
					this.expression(0);
					this.state = 2693;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 2698;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===114) {
					{
					this.state = 2697;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 2701;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===57) {
					{
					this.state = 2700;
					this.match(MySqlParser.ENFORCED);
					}
				}

				}
				break;
			case 11:
				localctx = new AlterByAddCheckTableConstraintContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 2703;
				this.match(MySqlParser.ADD);
				this.state = 2708;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===30) {
					{
					this.state = 2704;
					this.match(MySqlParser.CONSTRAINT);
					this.state = 2706;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
						{
						this.state = 2705;
						(localctx as AlterByAddCheckTableConstraintContext)._name = this.uid();
						}
					}

					}
				}

				this.state = 2710;
				this.match(MySqlParser.CHECK);
				this.state = 2711;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2712;
				this.expression(0);
				this.state = 2713;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 12:
				localctx = new AlterBySetAlgorithmContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 2715;
				this.match(MySqlParser.ALGORITHM);
				this.state = 2717;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2716;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2719;
				(localctx as AlterBySetAlgorithmContext)._algType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===42 || _la===384 || _la===454 || _la===458)) {
				    (localctx as AlterBySetAlgorithmContext)._algType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 13:
				localctx = new AlterByChangeDefaultContext(this, localctx);
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 2720;
				this.match(MySqlParser.ALTER);
				this.state = 2722;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===28) {
					{
					this.state = 2721;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2724;
				this.uid();
				this.state = 2730;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 153:
					{
					this.state = 2725;
					this.match(MySqlParser.SET);
					this.state = 2726;
					this.match(MySqlParser.DEFAULT);
					this.state = 2727;
					this.defaultValue();
					}
					break;
				case 51:
					{
					this.state = 2728;
					this.match(MySqlParser.DROP);
					this.state = 2729;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 14:
				localctx = new AlterByChangeColumnContext(this, localctx);
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 2732;
				this.match(MySqlParser.CHANGE);
				this.state = 2734;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===28) {
					{
					this.state = 2733;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2736;
				(localctx as AlterByChangeColumnContext)._oldColumn = this.uid();
				this.state = 2737;
				(localctx as AlterByChangeColumnContext)._newColumn = this.uid();
				this.state = 2738;
				this.columnDefinition();
				this.state = 2742;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 430:
					{
					this.state = 2739;
					this.match(MySqlParser.FIRST);
					}
					break;
				case 334:
					{
					this.state = 2740;
					this.match(MySqlParser.AFTER);
					this.state = 2741;
					(localctx as AlterByChangeColumnContext)._afterColumn = this.uid();
					}
					break;
				case -1:
				case 7:
				case 9:
				case 20:
				case 24:
				case 26:
				case 33:
				case 44:
				case 45:
				case 46:
				case 51:
				case 62:
				case 71:
				case 72:
				case 85:
				case 93:
				case 102:
				case 103:
				case 119:
				case 129:
				case 132:
				case 138:
				case 139:
				case 141:
				case 143:
				case 147:
				case 152:
				case 153:
				case 155:
				case 156:
				case 172:
				case 182:
				case 184:
				case 186:
				case 188:
				case 192:
				case 344:
				case 345:
				case 351:
				case 356:
				case 369:
				case 390:
				case 399:
				case 432:
				case 442:
				case 444:
				case 456:
				case 560:
				case 580:
				case 589:
				case 597:
				case 604:
				case 629:
				case 635:
				case 656:
				case 661:
				case 681:
				case 708:
				case 739:
				case 1121:
				case 1133:
				case 1135:
				case 1136:
					break;
				default:
					break;
				}
				}
				break;
			case 15:
				localctx = new AlterByRenameColumnContext(this, localctx);
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 2744;
				this.match(MySqlParser.RENAME);
				this.state = 2745;
				this.match(MySqlParser.COLUMN);
				this.state = 2746;
				(localctx as AlterByRenameColumnContext)._oldColumn = this.uid();
				this.state = 2747;
				this.match(MySqlParser.TO);
				this.state = 2748;
				(localctx as AlterByRenameColumnContext)._newColumn = this.uid();
				}
				break;
			case 16:
				localctx = new AlterByLockContext(this, localctx);
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 2750;
				this.match(MySqlParser.LOCK);
				this.state = 2752;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 2751;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 2754;
				(localctx as AlterByLockContext)._lockType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===42 || _la===419 || _la===529 || _la===611)) {
				    (localctx as AlterByLockContext)._lockType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 17:
				localctx = new AlterByModifyColumnContext(this, localctx);
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 2755;
				this.match(MySqlParser.MODIFY);
				this.state = 2757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===28) {
					{
					this.state = 2756;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2759;
				this.uid();
				this.state = 2760;
				this.columnDefinition();
				this.state = 2764;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 430:
					{
					this.state = 2761;
					this.match(MySqlParser.FIRST);
					}
					break;
				case 334:
					{
					this.state = 2762;
					this.match(MySqlParser.AFTER);
					this.state = 2763;
					this.uid();
					}
					break;
				case -1:
				case 7:
				case 9:
				case 20:
				case 24:
				case 26:
				case 33:
				case 44:
				case 45:
				case 46:
				case 51:
				case 62:
				case 71:
				case 72:
				case 85:
				case 93:
				case 102:
				case 103:
				case 119:
				case 129:
				case 132:
				case 138:
				case 139:
				case 141:
				case 143:
				case 147:
				case 152:
				case 153:
				case 155:
				case 156:
				case 172:
				case 182:
				case 184:
				case 186:
				case 188:
				case 192:
				case 344:
				case 345:
				case 351:
				case 356:
				case 369:
				case 390:
				case 399:
				case 432:
				case 442:
				case 444:
				case 456:
				case 560:
				case 580:
				case 589:
				case 597:
				case 604:
				case 629:
				case 635:
				case 656:
				case 661:
				case 681:
				case 708:
				case 739:
				case 1121:
				case 1133:
				case 1135:
				case 1136:
					break;
				default:
					break;
				}
				}
				break;
			case 18:
				localctx = new AlterByDropColumnContext(this, localctx);
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 2766;
				this.match(MySqlParser.DROP);
				this.state = 2768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===28) {
					{
					this.state = 2767;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2770;
				this.uid();
				this.state = 2772;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===144) {
					{
					this.state = 2771;
					this.match(MySqlParser.RESTRICT);
					}
				}

				}
				break;
			case 19:
				localctx = new AlterByDropConstraintCheckContext(this, localctx);
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 2774;
				this.match(MySqlParser.DROP);
				this.state = 2775;
				_la = this._input.LA(1);
				if(!(_la===26 || _la===30)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2776;
				this.uid();
				}
				break;
			case 20:
				localctx = new AlterByDropPrimaryKeyContext(this, localctx);
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 2777;
				this.match(MySqlParser.DROP);
				this.state = 2778;
				this.match(MySqlParser.PRIMARY);
				this.state = 2779;
				this.match(MySqlParser.KEY);
				}
				break;
			case 21:
				localctx = new AlterByDropIndexContext(this, localctx);
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 2780;
				this.match(MySqlParser.DROP);
				this.state = 2781;
				(localctx as AlterByDropIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===81 || _la===91)) {
				    (localctx as AlterByDropIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2782;
				this.uid();
				}
				break;
			case 22:
				localctx = new AlterByRenameIndexContext(this, localctx);
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 2783;
				this.match(MySqlParser.RENAME);
				this.state = 2784;
				(localctx as AlterByRenameIndexContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===81 || _la===91)) {
				    (localctx as AlterByRenameIndexContext)._indexFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2785;
				this.uid();
				this.state = 2786;
				this.match(MySqlParser.TO);
				this.state = 2787;
				this.uid();
				}
				break;
			case 23:
				localctx = new AlterByAlterColumnDefaultContext(this, localctx);
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 2789;
				this.match(MySqlParser.ALTER);
				this.state = 2791;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===28) {
					{
					this.state = 2790;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2793;
				this.uid();
				this.state = 2807;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 360, this._ctx) ) {
				case 1:
					{
					this.state = 2794;
					this.match(MySqlParser.SET);
					this.state = 2795;
					this.match(MySqlParser.DEFAULT);
					this.state = 2801;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 1147:
					case 1148:
					case 1154:
						{
						this.state = 2796;
						this.stringLiteral();
						}
						break;
					case 1133:
						{
						this.state = 2797;
						this.match(MySqlParser.LR_BRACKET);
						this.state = 2798;
						this.expression(0);
						this.state = 2799;
						this.match(MySqlParser.RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					this.state = 2803;
					this.match(MySqlParser.SET);
					this.state = 2804;
					_la = this._input.LA(1);
					if(!(_la===459 || _la===673)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				case 3:
					{
					this.state = 2805;
					this.match(MySqlParser.DROP);
					this.state = 2806;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				}
				}
				break;
			case 24:
				localctx = new AlterByAlterIndexVisibilityContext(this, localctx);
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 2809;
				this.match(MySqlParser.ALTER);
				this.state = 2810;
				this.match(MySqlParser.INDEX);
				this.state = 2811;
				this.uid();
				this.state = 2812;
				_la = this._input.LA(1);
				if(!(_la===459 || _la===673)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 25:
				localctx = new AlterByDropForeignKeyContext(this, localctx);
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 2814;
				this.match(MySqlParser.DROP);
				this.state = 2815;
				this.match(MySqlParser.FOREIGN);
				this.state = 2816;
				this.match(MySqlParser.KEY);
				this.state = 2817;
				this.uid();
				}
				break;
			case 26:
				localctx = new AlterByDisableKeysContext(this, localctx);
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 2818;
				this.match(MySqlParser.DISABLE);
				this.state = 2819;
				this.match(MySqlParser.KEYS);
				}
				break;
			case 27:
				localctx = new AlterByEnableKeysContext(this, localctx);
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 2820;
				this.match(MySqlParser.ENABLE);
				this.state = 2821;
				this.match(MySqlParser.KEYS);
				}
				break;
			case 28:
				localctx = new AlterByRenameContext(this, localctx);
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 2822;
				this.match(MySqlParser.RENAME);
				this.state = 2824;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===12 || _la===175) {
					{
					this.state = 2823;
					(localctx as AlterByRenameContext)._renameFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===12 || _la===175)) {
					    (localctx as AlterByRenameContext)._renameFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 2828;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 362, this._ctx) ) {
				case 1:
					{
					this.state = 2826;
					this.uid();
					}
					break;
				case 2:
					{
					this.state = 2827;
					this.fullId();
					}
					break;
				}
				}
				break;
			case 29:
				localctx = new AlterByOrderContext(this, localctx);
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 2830;
				this.match(MySqlParser.ORDER);
				this.state = 2831;
				this.match(MySqlParser.BY);
				this.state = 2832;
				this.uidList();
				}
				break;
			case 30:
				localctx = new AlterByConvertCharsetContext(this, localctx);
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 2833;
				this.match(MySqlParser.CONVERT);
				this.state = 2834;
				this.match(MySqlParser.TO);
				this.state = 2838;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 841:
					{
					this.state = 2835;
					this.match(MySqlParser.CHARSET);
					}
					break;
				case 25:
					{
					this.state = 2836;
					this.match(MySqlParser.CHARACTER);
					this.state = 2837;
					this.match(MySqlParser.SET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2840;
				this.charsetName();
				this.state = 2843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===27) {
					{
					this.state = 2841;
					this.match(MySqlParser.COLLATE);
					this.state = 2842;
					this.collationName();
					}
				}

				}
				break;
			case 31:
				localctx = new AlterByDefaultCharsetContext(this, localctx);
				this.enterOuterAlt(localctx, 31);
				{
				this.state = 2846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===42) {
					{
					this.state = 2845;
					this.match(MySqlParser.DEFAULT);
					}
				}

				this.state = 2848;
				this.match(MySqlParser.CHARACTER);
				this.state = 2849;
				this.match(MySqlParser.SET);
				this.state = 2850;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 2851;
				this.charsetName();
				this.state = 2855;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===27) {
					{
					this.state = 2852;
					this.match(MySqlParser.COLLATE);
					this.state = 2853;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 2854;
					this.collationName();
					}
				}

				}
				break;
			case 32:
				localctx = new AlterByDiscardTablespaceContext(this, localctx);
				this.enterOuterAlt(localctx, 32);
				{
				this.state = 2857;
				this.match(MySqlParser.DISCARD);
				this.state = 2858;
				this.match(MySqlParser.TABLESPACE);
				}
				break;
			case 33:
				localctx = new AlterByImportTablespaceContext(this, localctx);
				this.enterOuterAlt(localctx, 33);
				{
				this.state = 2859;
				this.match(MySqlParser.IMPORT);
				this.state = 2860;
				this.match(MySqlParser.TABLESPACE);
				}
				break;
			case 34:
				localctx = new AlterByForceContext(this, localctx);
				this.enterOuterAlt(localctx, 34);
				{
				this.state = 2861;
				this.match(MySqlParser.FORCE);
				}
				break;
			case 35:
				localctx = new AlterByValidateContext(this, localctx);
				this.enterOuterAlt(localctx, 35);
				{
				this.state = 2862;
				(localctx as AlterByValidateContext)._validationFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===192 || _la===677)) {
				    (localctx as AlterByValidateContext)._validationFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2863;
				this.match(MySqlParser.VALIDATION);
				}
				break;
			case 36:
				localctx = new AlterByAddDefinitionsContext(this, localctx);
				this.enterOuterAlt(localctx, 36);
				{
				this.state = 2864;
				this.match(MySqlParser.ADD);
				this.state = 2866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===28) {
					{
					this.state = 2865;
					this.match(MySqlParser.COLUMN);
					}
				}

				this.state = 2868;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2869;
				this.createDefinition();
				this.state = 2874;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 2870;
					this.match(MySqlParser.COMMA);
					this.state = 2871;
					this.createDefinition();
					}
					}
					this.state = 2876;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2877;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 37:
				localctx = new AlterPartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 37);
				{
				this.state = 2879;
				this.alterPartitionSpecification();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterPartitionSpecification(): AlterPartitionSpecificationContext {
		let localctx: AlterPartitionSpecificationContext = new AlterPartitionSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 150, MySqlParser.RULE_alterPartitionSpecification);
		let _la: number;
		try {
			this.state = 2980;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 5:
				localctx = new AlterByAddPartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2882;
				this.match(MySqlParser.ADD);
				this.state = 2883;
				this.match(MySqlParser.PARTITION);
				this.state = 2884;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2885;
				this.partitionDefinition();
				this.state = 2890;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 2886;
					this.match(MySqlParser.COMMA);
					this.state = 2887;
					this.partitionDefinition();
					}
					}
					this.state = 2892;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2893;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 51:
				localctx = new AlterByDropPartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2895;
				this.match(MySqlParser.DROP);
				this.state = 2896;
				this.match(MySqlParser.PARTITION);
				this.state = 2897;
				this.uidList();
				}
				break;
			case 397:
				localctx = new AlterByDiscardPartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2898;
				this.match(MySqlParser.DISCARD);
				this.state = 2899;
				this.match(MySqlParser.PARTITION);
				this.state = 2902;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1145:
				case 1148:
				case 1156:
					{
					this.state = 2900;
					this.uidList();
					}
					break;
				case 6:
					{
					this.state = 2901;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2904;
				this.match(MySqlParser.TABLESPACE);
				}
				break;
			case 450:
				localctx = new AlterByImportPartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2905;
				this.match(MySqlParser.IMPORT);
				this.state = 2906;
				this.match(MySqlParser.PARTITION);
				this.state = 2909;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1145:
				case 1148:
				case 1156:
					{
					this.state = 2907;
					this.uidList();
					}
					break;
				case 6:
					{
					this.state = 2908;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2911;
				this.match(MySqlParser.TABLESPACE);
				}
				break;
			case 656:
				localctx = new AlterByTruncatePartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2912;
				this.match(MySqlParser.TRUNCATE);
				this.state = 2913;
				this.match(MySqlParser.PARTITION);
				this.state = 2916;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1145:
				case 1148:
				case 1156:
					{
					this.state = 2914;
					this.uidList();
					}
					break;
				case 6:
					{
					this.state = 2915;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 363:
				localctx = new AlterByCoalescePartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2918;
				this.match(MySqlParser.COALESCE);
				this.state = 2919;
				this.match(MySqlParser.PARTITION);
				this.state = 2920;
				this.decimalLiteral();
				}
				break;
			case 579:
				localctx = new AlterByReorganizePartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2921;
				this.match(MySqlParser.REORGANIZE);
				this.state = 2922;
				this.match(MySqlParser.PARTITION);
				this.state = 2923;
				this.uidList();
				this.state = 2924;
				this.match(MySqlParser.INTO);
				this.state = 2925;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 2926;
				this.partitionDefinition();
				this.state = 2931;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 2927;
					this.match(MySqlParser.COMMA);
					this.state = 2928;
					this.partitionDefinition();
					}
					}
					this.state = 2933;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2934;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 418:
				localctx = new AlterByExchangePartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 2936;
				this.match(MySqlParser.EXCHANGE);
				this.state = 2937;
				this.match(MySqlParser.PARTITION);
				this.state = 2938;
				this.uid();
				this.state = 2939;
				this.match(MySqlParser.WITH);
				this.state = 2940;
				this.match(MySqlParser.TABLE);
				this.state = 2941;
				this.tableName();
				this.state = 2944;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 375, this._ctx) ) {
				case 1:
					{
					this.state = 2942;
					(localctx as AlterByExchangePartitionContext)._validationFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===192 || _la===677)) {
					    (localctx as AlterByExchangePartitionContext)._validationFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 2943;
					this.match(MySqlParser.VALIDATION);
					}
					break;
				}
				}
				break;
			case 9:
				localctx = new AlterByAnalyzePartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 2946;
				this.match(MySqlParser.ANALYZE);
				this.state = 2947;
				this.match(MySqlParser.PARTITION);
				this.state = 2950;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1145:
				case 1148:
				case 1156:
					{
					this.state = 2948;
					this.uidList();
					}
					break;
				case 6:
					{
					this.state = 2949;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 26:
				localctx = new AlterByCheckPartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 2952;
				this.match(MySqlParser.CHECK);
				this.state = 2953;
				this.match(MySqlParser.PARTITION);
				this.state = 2956;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1145:
				case 1148:
				case 1156:
					{
					this.state = 2954;
					this.uidList();
					}
					break;
				case 6:
					{
					this.state = 2955;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 119:
				localctx = new AlterByOptimizePartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 2958;
				this.match(MySqlParser.OPTIMIZE);
				this.state = 2959;
				this.match(MySqlParser.PARTITION);
				this.state = 2962;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1145:
				case 1148:
				case 1156:
					{
					this.state = 2960;
					this.uidList();
					}
					break;
				case 6:
					{
					this.state = 2961;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 569:
				localctx = new AlterByRebuildPartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 2964;
				this.match(MySqlParser.REBUILD);
				this.state = 2965;
				this.match(MySqlParser.PARTITION);
				this.state = 2968;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1145:
				case 1148:
				case 1156:
					{
					this.state = 2966;
					this.uidList();
					}
					break;
				case 6:
					{
					this.state = 2967;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 580:
				localctx = new AlterByRepairPartitionContext(this, localctx);
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 2970;
				this.match(MySqlParser.REPAIR);
				this.state = 2971;
				this.match(MySqlParser.PARTITION);
				this.state = 2974;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1145:
				case 1148:
				case 1156:
					{
					this.state = 2972;
					this.uidList();
					}
					break;
				case 6:
					{
					this.state = 2973;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 578:
				localctx = new AlterByRemovePartitioningContext(this, localctx);
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 2976;
				this.match(MySqlParser.REMOVE);
				this.state = 2977;
				this.match(MySqlParser.PARTITIONING);
				}
				break;
			case 664:
				localctx = new AlterByUpgradePartitioningContext(this, localctx);
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 2978;
				this.match(MySqlParser.UPGRADE);
				this.state = 2979;
				this.match(MySqlParser.PARTITIONING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropDatabase(): DropDatabaseContext {
		let localctx: DropDatabaseContext = new DropDatabaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 152, MySqlParser.RULE_dropDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2982;
			this.match(MySqlParser.DROP);
			this.state = 2983;
			localctx._dbFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===39 || _la===150)) {
			    localctx._dbFormat = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2985;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 382, this._ctx) ) {
			case 1:
				{
				this.state = 2984;
				this.ifExists();
				}
				break;
			}
			this.state = 2987;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropEvent(): DropEventContext {
		let localctx: DropEventContext = new DropEventContext(this, this._ctx, this.state);
		this.enterRule(localctx, 154, MySqlParser.RULE_dropEvent);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2989;
			this.match(MySqlParser.DROP);
			this.state = 2990;
			this.match(MySqlParser.EVENT);
			this.state = 2992;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 383, this._ctx) ) {
			case 1:
				{
				this.state = 2991;
				this.ifExists();
				}
				break;
			}
			this.state = 2994;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropIndex(): DropIndexContext {
		let localctx: DropIndexContext = new DropIndexContext(this, this._ctx, this.state);
		this.enterRule(localctx, 156, MySqlParser.RULE_dropIndex);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2996;
			this.match(MySqlParser.DROP);
			this.state = 2997;
			this.match(MySqlParser.INDEX);
			this.state = 2999;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 384, this._ctx) ) {
			case 1:
				{
				this.state = 2998;
				localctx._intimeAction = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===531 || _la===537)) {
				    localctx._intimeAction = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
			this.state = 3001;
			this.uid();
			this.state = 3002;
			this.match(MySqlParser.ON);
			this.state = 3003;
			this.tableName();
			this.state = 3016;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 388, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 3014;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 336:
						{
						this.state = 3004;
						this.match(MySqlParser.ALGORITHM);
						this.state = 3006;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===1124) {
							{
							this.state = 3005;
							this.match(MySqlParser.EQUAL_SYMBOL);
							}
						}

						this.state = 3008;
						localctx._algType = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===42 || _la===384 || _la===454)) {
						    localctx._algType = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
						break;
					case 103:
						{
						this.state = 3009;
						this.match(MySqlParser.LOCK);
						this.state = 3011;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===1124) {
							{
							this.state = 3010;
							this.match(MySqlParser.EQUAL_SYMBOL);
							}
						}

						this.state = 3013;
						localctx._lockType = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===42 || _la===419 || _la===529 || _la===611)) {
						    localctx._lockType = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 3018;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 388, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropLogfileGroup(): DropLogfileGroupContext {
		let localctx: DropLogfileGroupContext = new DropLogfileGroupContext(this, this._ctx, this.state);
		this.enterRule(localctx, 158, MySqlParser.RULE_dropLogfileGroup);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3019;
			this.match(MySqlParser.DROP);
			this.state = 3020;
			this.match(MySqlParser.LOGFILE);
			this.state = 3021;
			this.match(MySqlParser.GROUP);
			this.state = 3022;
			this.uid();
			this.state = 3023;
			this.match(MySqlParser.ENGINE);
			this.state = 3024;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 3025;
			this.engineName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropProcedure(): DropProcedureContext {
		let localctx: DropProcedureContext = new DropProcedureContext(this, this._ctx, this.state);
		this.enterRule(localctx, 160, MySqlParser.RULE_dropProcedure);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3027;
			this.match(MySqlParser.DROP);
			this.state = 3028;
			this.match(MySqlParser.PROCEDURE);
			this.state = 3030;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 389, this._ctx) ) {
			case 1:
				{
				this.state = 3029;
				this.ifExists();
				}
				break;
			}
			this.state = 3032;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropFunction(): DropFunctionContext {
		let localctx: DropFunctionContext = new DropFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 162, MySqlParser.RULE_dropFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3034;
			this.match(MySqlParser.DROP);
			this.state = 3035;
			this.match(MySqlParser.FUNCTION);
			this.state = 3037;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 390, this._ctx) ) {
			case 1:
				{
				this.state = 3036;
				this.ifExists();
				}
				break;
			}
			this.state = 3039;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropServer(): DropServerContext {
		let localctx: DropServerContext = new DropServerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 164, MySqlParser.RULE_dropServer);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3041;
			this.match(MySqlParser.DROP);
			this.state = 3042;
			this.match(MySqlParser.SERVER);
			this.state = 3044;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 391, this._ctx) ) {
			case 1:
				{
				this.state = 3043;
				this.ifExists();
				}
				break;
			}
			this.state = 3046;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropTable(): DropTableContext {
		let localctx: DropTableContext = new DropTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 166, MySqlParser.RULE_dropTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3048;
			this.match(MySqlParser.DROP);
			this.state = 3050;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===649) {
				{
				this.state = 3049;
				this.match(MySqlParser.TEMPORARY);
				}
			}

			this.state = 3052;
			this.match(MySqlParser.TABLE);
			this.state = 3054;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 393, this._ctx) ) {
			case 1:
				{
				this.state = 3053;
				this.ifExists();
				}
				break;
			}
			this.state = 3056;
			this.tables();
			this.state = 3058;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===21 || _la===144) {
				{
				this.state = 3057;
				localctx._dropType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===21 || _la===144)) {
				    localctx._dropType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropTablespace(): DropTablespaceContext {
		let localctx: DropTablespaceContext = new DropTablespaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 168, MySqlParser.RULE_dropTablespace);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3060;
			this.match(MySqlParser.DROP);
			this.state = 3061;
			this.match(MySqlParser.TABLESPACE);
			this.state = 3062;
			this.uid();
			this.state = 3068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===409) {
				{
				this.state = 3063;
				this.match(MySqlParser.ENGINE);
				this.state = 3065;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1124) {
					{
					this.state = 3064;
					this.match(MySqlParser.EQUAL_SYMBOL);
					}
				}

				this.state = 3067;
				this.engineName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropTrigger(): DropTriggerContext {
		let localctx: DropTriggerContext = new DropTriggerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 170, MySqlParser.RULE_dropTrigger);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3070;
			this.match(MySqlParser.DROP);
			this.state = 3071;
			this.match(MySqlParser.TRIGGER);
			this.state = 3073;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 397, this._ctx) ) {
			case 1:
				{
				this.state = 3072;
				this.ifExists();
				}
				break;
			}
			this.state = 3075;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropView(): DropViewContext {
		let localctx: DropViewContext = new DropViewContext(this, this._ctx, this.state);
		this.enterRule(localctx, 172, MySqlParser.RULE_dropView);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3077;
			this.match(MySqlParser.DROP);
			this.state = 3078;
			this.match(MySqlParser.VIEW);
			this.state = 3080;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 398, this._ctx) ) {
			case 1:
				{
				this.state = 3079;
				this.ifExists();
				}
				break;
			}
			this.state = 3082;
			this.fullId();
			this.state = 3087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 3083;
				this.match(MySqlParser.COMMA);
				this.state = 3084;
				this.fullId();
				}
				}
				this.state = 3089;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3091;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===21 || _la===144) {
				{
				this.state = 3090;
				localctx._dropType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===21 || _la===144)) {
				    localctx._dropType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropRole(): DropRoleContext {
		let localctx: DropRoleContext = new DropRoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 174, MySqlParser.RULE_dropRole);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3093;
			this.match(MySqlParser.DROP);
			this.state = 3094;
			this.match(MySqlParser.ROLE);
			this.state = 3096;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 401, this._ctx) ) {
			case 1:
				{
				this.state = 3095;
				this.ifExists();
				}
				break;
			}
			this.state = 3098;
			this.roleName();
			this.state = 3103;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 3099;
				this.match(MySqlParser.COMMA);
				this.state = 3100;
				this.roleName();
				}
				}
				this.state = 3105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setRole(): SetRoleContext {
		let localctx: SetRoleContext = new SetRoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 176, MySqlParser.RULE_setRole);
		let _la: number;
		try {
			this.state = 3139;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 408, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3106;
				this.match(MySqlParser.SET);
				this.state = 3107;
				this.match(MySqlParser.DEFAULT);
				this.state = 3108;
				this.match(MySqlParser.ROLE);
				this.state = 3119;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 404, this._ctx) ) {
				case 1:
					{
					this.state = 3109;
					this.match(MySqlParser.NONE);
					}
					break;
				case 2:
					{
					this.state = 3110;
					this.match(MySqlParser.ALL);
					}
					break;
				case 3:
					{
					this.state = 3111;
					this.roleName();
					this.state = 3116;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1135) {
						{
						{
						this.state = 3112;
						this.match(MySqlParser.COMMA);
						this.state = 3113;
						this.roleName();
						}
						}
						this.state = 3118;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				}
				this.state = 3121;
				this.match(MySqlParser.TO);
				this.state = 3124;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 405, this._ctx) ) {
				case 1:
					{
					this.state = 3122;
					this.userName();
					}
					break;
				case 2:
					{
					this.state = 3123;
					this.uid();
					}
					break;
				}
				this.state = 3133;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3126;
					this.match(MySqlParser.COMMA);
					this.state = 3129;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 406, this._ctx) ) {
					case 1:
						{
						this.state = 3127;
						this.userName();
						}
						break;
					case 2:
						{
						this.state = 3128;
						this.uid();
						}
						break;
					}
					}
					}
					this.state = 3135;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3136;
				this.match(MySqlParser.SET);
				this.state = 3137;
				this.match(MySqlParser.ROLE);
				this.state = 3138;
				this.roleOption();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public renameTable(): RenameTableContext {
		let localctx: RenameTableContext = new RenameTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 178, MySqlParser.RULE_renameTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3141;
			this.match(MySqlParser.RENAME);
			this.state = 3142;
			this.match(MySqlParser.TABLE);
			this.state = 3143;
			this.renameTableClause();
			this.state = 3148;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 3144;
				this.match(MySqlParser.COMMA);
				this.state = 3145;
				this.renameTableClause();
				}
				}
				this.state = 3150;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public renameTableClause(): RenameTableClauseContext {
		let localctx: RenameTableClauseContext = new RenameTableClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 180, MySqlParser.RULE_renameTableClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3151;
			this.tableName();
			this.state = 3152;
			this.match(MySqlParser.TO);
			this.state = 3153;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public truncateTable(): TruncateTableContext {
		let localctx: TruncateTableContext = new TruncateTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 182, MySqlParser.RULE_truncateTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3155;
			this.match(MySqlParser.TRUNCATE);
			this.state = 3157;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===172) {
				{
				this.state = 3156;
				this.match(MySqlParser.TABLE);
				}
			}

			this.state = 3159;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public callStatement(): CallStatementContext {
		let localctx: CallStatementContext = new CallStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 184, MySqlParser.RULE_callStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3161;
			this.match(MySqlParser.CALL);
			this.state = 3162;
			this.fullId();
			this.state = 3169;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 412, this._ctx) ) {
			case 1:
				{
				this.state = 3163;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3166;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 411, this._ctx) ) {
				case 1:
					{
					this.state = 3164;
					this.constants();
					}
					break;
				case 2:
					{
					this.state = 3165;
					this.expressions();
					}
					break;
				}
				this.state = 3168;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteStatement(): DeleteStatementContext {
		let localctx: DeleteStatementContext = new DeleteStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 186, MySqlParser.RULE_deleteStatement);
		try {
			this.state = 3173;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 413, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3171;
				this.singleDeleteStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3172;
				this.multipleDeleteStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public doStatement(): DoStatementContext {
		let localctx: DoStatementContext = new DoStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 188, MySqlParser.RULE_doStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3175;
			this.match(MySqlParser.DO);
			this.state = 3176;
			this.expressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public handlerStatement(): HandlerStatementContext {
		let localctx: HandlerStatementContext = new HandlerStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 190, MySqlParser.RULE_handlerStatement);
		try {
			this.state = 3182;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 414, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3178;
				this.handlerOpenStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3179;
				this.handlerReadIndexStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3180;
				this.handlerReadStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3181;
				this.handlerCloseStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertStatement(): InsertStatementContext {
		let localctx: InsertStatementContext = new InsertStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 192, MySqlParser.RULE_insertStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3184;
			this.match(MySqlParser.INSERT);
			this.state = 3186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===43 || _la===75 || _la===106) {
				{
				this.state = 3185;
				localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===43 || _la===75 || _la===106)) {
				    localctx._priority = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 3189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78) {
				{
				this.state = 3188;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3192;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===87) {
				{
				this.state = 3191;
				this.match(MySqlParser.INTO);
				}
			}

			this.state = 3194;
			this.tableName();
			this.state = 3201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 3195;
				this.match(MySqlParser.PARTITION);
				this.state = 3196;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3198;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 3197;
					localctx._partitions = this.uidList();
					}
				}

				this.state = 3200;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 3226;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 152:
			case 188:
			case 669:
			case 1133:
				{
				this.state = 3208;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 421, this._ctx) ) {
				case 1:
					{
					this.state = 3203;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3205;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 420, this._ctx) ) {
					case 1:
						{
						this.state = 3204;
						localctx._columns = this.fullColumnNameList();
						}
						break;
					}
					this.state = 3207;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 3210;
				this.insertStatementValue();
				this.state = 3215;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 423, this._ctx) ) {
				case 1:
					{
					this.state = 3212;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===12) {
						{
						this.state = 3211;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 3214;
					this.uid();
					}
					break;
				}
				}
				break;
			case 153:
				{
				this.state = 3217;
				this.match(MySqlParser.SET);
				this.state = 3218;
				localctx._setFirst = this.updatedElement();
				this.state = 3223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3219;
					this.match(MySqlParser.COMMA);
					this.state = 3220;
					localctx._updatedElement = this.updatedElement();
					localctx._setElements.push(localctx._updatedElement);
					}
					}
					this.state = 3225;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3240;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===118) {
				{
				this.state = 3228;
				this.match(MySqlParser.ON);
				this.state = 3229;
				this.match(MySqlParser.DUPLICATE);
				this.state = 3230;
				this.match(MySqlParser.KEY);
				this.state = 3231;
				this.match(MySqlParser.UPDATE);
				this.state = 3232;
				localctx._duplicatedFirst = this.updatedElement();
				this.state = 3237;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3233;
					this.match(MySqlParser.COMMA);
					this.state = 3234;
					localctx._updatedElement = this.updatedElement();
					localctx._duplicatedElements.push(localctx._updatedElement);
					}
					}
					this.state = 3239;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public loadDataStatement(): LoadDataStatementContext {
		let localctx: LoadDataStatementContext = new LoadDataStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 194, MySqlParser.RULE_loadDataStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3242;
			this.match(MySqlParser.LOAD);
			this.state = 3243;
			this.match(MySqlParser.DATA);
			this.state = 3245;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===106 || _la===374) {
				{
				this.state = 3244;
				localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===106 || _la===374)) {
				    localctx._priority = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 3248;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===474) {
				{
				this.state = 3247;
				this.match(MySqlParser.LOCAL);
				}
			}

			this.state = 3250;
			this.match(MySqlParser.INFILE);
			this.state = 3251;
			localctx._filename = this.match(MySqlParser.STRING_LITERAL);
			this.state = 3253;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78 || _la===141) {
				{
				this.state = 3252;
				localctx._violation = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===78 || _la===141)) {
				    localctx._violation = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 3255;
			this.match(MySqlParser.INTO);
			this.state = 3256;
			this.match(MySqlParser.TABLE);
			this.state = 3257;
			this.tableName();
			this.state = 3263;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 3258;
				this.match(MySqlParser.PARTITION);
				this.state = 3259;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3260;
				this.uidList();
				this.state = 3261;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 3268;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===25) {
				{
				this.state = 3265;
				this.match(MySqlParser.CHARACTER);
				this.state = 3266;
				this.match(MySqlParser.SET);
				this.state = 3267;
				localctx._charset = this.charsetName();
				}
			}

			this.state = 3276;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===365 || _la===427) {
				{
				this.state = 3270;
				localctx._fieldsFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===365 || _la===427)) {
				    localctx._fieldsFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 3272;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3271;
					this.selectFieldsInto();
					}
					}
					this.state = 3274;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===56 || _la===58 || _la===122 || _la===173);
				}
			}

			this.state = 3284;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===101) {
				{
				this.state = 3278;
				this.match(MySqlParser.LINES);
				this.state = 3280;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3279;
					this.selectLinesInto();
					}
					}
					this.state = 3282;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===169 || _la===173);
				}
			}

			this.state = 3290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78) {
				{
				this.state = 3286;
				this.match(MySqlParser.IGNORE);
				this.state = 3287;
				this.decimalLiteral();
				this.state = 3288;
				localctx._linesFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===101 || _la===601)) {
				    localctx._linesFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 3303;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 439, this._ctx) ) {
			case 1:
				{
				this.state = 3292;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3293;
				this.assignmentField();
				this.state = 3298;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3294;
					this.match(MySqlParser.COMMA);
					this.state = 3295;
					this.assignmentField();
					}
					}
					this.state = 3300;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3301;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 3314;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 441, this._ctx) ) {
			case 1:
				{
				this.state = 3305;
				this.match(MySqlParser.SET);
				this.state = 3306;
				this.updatedElement();
				this.state = 3311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3307;
					this.match(MySqlParser.COMMA);
					this.state = 3308;
					this.updatedElement();
					}
					}
					this.state = 3313;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public loadXmlStatement(): LoadXmlStatementContext {
		let localctx: LoadXmlStatementContext = new LoadXmlStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 196, MySqlParser.RULE_loadXmlStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3316;
			this.match(MySqlParser.LOAD);
			this.state = 3317;
			this.match(MySqlParser.XML);
			this.state = 3319;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===106 || _la===374) {
				{
				this.state = 3318;
				localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===106 || _la===374)) {
				    localctx._priority = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 3322;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===474) {
				{
				this.state = 3321;
				this.match(MySqlParser.LOCAL);
				}
			}

			this.state = 3324;
			this.match(MySqlParser.INFILE);
			this.state = 3325;
			localctx._filename = this.match(MySqlParser.STRING_LITERAL);
			this.state = 3327;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78 || _la===141) {
				{
				this.state = 3326;
				localctx._violation = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===78 || _la===141)) {
				    localctx._violation = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 3329;
			this.match(MySqlParser.INTO);
			this.state = 3330;
			this.match(MySqlParser.TABLE);
			this.state = 3331;
			this.tableName();
			this.state = 3335;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===25) {
				{
				this.state = 3332;
				this.match(MySqlParser.CHARACTER);
				this.state = 3333;
				this.match(MySqlParser.SET);
				this.state = 3334;
				localctx._charset = this.charsetName();
				}
			}

			this.state = 3343;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===601) {
				{
				this.state = 3337;
				this.match(MySqlParser.ROWS);
				this.state = 3338;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 3339;
				this.match(MySqlParser.BY);
				this.state = 3340;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 3341;
				localctx._tag = this.match(MySqlParser.STRING_LITERAL);
				this.state = 3342;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
			}

			this.state = 3349;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78) {
				{
				this.state = 3345;
				this.match(MySqlParser.IGNORE);
				this.state = 3346;
				this.decimalLiteral();
				this.state = 3347;
				localctx._linesFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===101 || _la===601)) {
				    localctx._linesFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 3362;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 449, this._ctx) ) {
			case 1:
				{
				this.state = 3351;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3352;
				this.assignmentField();
				this.state = 3357;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3353;
					this.match(MySqlParser.COMMA);
					this.state = 3354;
					this.assignmentField();
					}
					}
					this.state = 3359;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3360;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 3373;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 451, this._ctx) ) {
			case 1:
				{
				this.state = 3364;
				this.match(MySqlParser.SET);
				this.state = 3365;
				this.updatedElement();
				this.state = 3370;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3366;
					this.match(MySqlParser.COMMA);
					this.state = 3367;
					this.updatedElement();
					}
					}
					this.state = 3372;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replaceStatement(): ReplaceStatementContext {
		let localctx: ReplaceStatementContext = new ReplaceStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 198, MySqlParser.RULE_replaceStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3375;
			this.match(MySqlParser.REPLACE);
			this.state = 3377;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===43 || _la===106) {
				{
				this.state = 3376;
				localctx._priority = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===43 || _la===106)) {
				    localctx._priority = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 3380;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===87) {
				{
				this.state = 3379;
				this.match(MySqlParser.INTO);
				}
			}

			this.state = 3382;
			this.tableName();
			this.state = 3388;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 3383;
				this.match(MySqlParser.PARTITION);
				this.state = 3384;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3385;
				localctx._partitions = this.uidList();
				this.state = 3386;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 3406;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 152:
			case 188:
			case 669:
			case 1133:
				{
				this.state = 3394;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 455, this._ctx) ) {
				case 1:
					{
					this.state = 3390;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3391;
					localctx._columns = this.uidList();
					this.state = 3392;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 3396;
				this.insertStatementValue();
				}
				break;
			case 153:
				{
				this.state = 3397;
				this.match(MySqlParser.SET);
				this.state = 3398;
				localctx._setFirst = this.updatedElement();
				this.state = 3403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3399;
					this.match(MySqlParser.COMMA);
					this.state = 3400;
					localctx._updatedElement = this.updatedElement();
					localctx._setElements.push(localctx._updatedElement);
					}
					}
					this.state = 3405;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectStatement(): SelectStatementContext {
		let localctx: SelectStatementContext = new SelectStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 200, MySqlParser.RULE_selectStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3473;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 475, this._ctx) ) {
			case 1:
				localctx = new SimpleSelectContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3408;
				this.querySpecification();
				this.state = 3410;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 458, this._ctx) ) {
				case 1:
					{
					this.state = 3409;
					this.lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				localctx = new ParenthesisSelectContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3412;
				this.queryExpression();
				this.state = 3414;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 459, this._ctx) ) {
				case 1:
					{
					this.state = 3413;
					this.lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				localctx = new UnionSelectContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3418;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 152:
					{
					this.state = 3416;
					this.querySpecificationNointo();
					}
					break;
				case 1133:
					{
					this.state = 3417;
					this.queryExpressionNointo();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3421;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3420;
						this.unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3423;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 461, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===180) {
					{
					this.state = 3425;
					this.match(MySqlParser.UNION);
					this.state = 3427;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===6 || _la===49) {
						{
						this.state = 3426;
						(localctx as UnionSelectContext)._unionType = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===6 || _la===49)) {
						    (localctx as UnionSelectContext)._unionType = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
					}

					this.state = 3431;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 152:
						{
						this.state = 3429;
						this.querySpecification();
						}
						break;
					case 1133:
						{
						this.state = 3430;
						this.queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 3436;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 465, this._ctx) ) {
				case 1:
					{
					this.state = 3435;
					this.orderByClause();
					}
					break;
				}
				this.state = 3439;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===99) {
					{
					this.state = 3438;
					this.limitClause();
					}
				}

				this.state = 3442;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 467, this._ctx) ) {
				case 1:
					{
					this.state = 3441;
					this.lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				localctx = new UnionParenthesisSelectContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3444;
				this.queryExpressionNointo();
				this.state = 3446;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3445;
						this.unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3448;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 468, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3455;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===180) {
					{
					this.state = 3450;
					this.match(MySqlParser.UNION);
					this.state = 3452;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===6 || _la===49) {
						{
						this.state = 3451;
						(localctx as UnionParenthesisSelectContext)._unionType = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===6 || _la===49)) {
						    (localctx as UnionParenthesisSelectContext)._unionType = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
					}

					this.state = 3454;
					this.queryExpression();
					}
				}

				this.state = 3458;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 471, this._ctx) ) {
				case 1:
					{
					this.state = 3457;
					this.orderByClause();
					}
					break;
				}
				this.state = 3461;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===99) {
					{
					this.state = 3460;
					this.limitClause();
					}
				}

				this.state = 3464;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 473, this._ctx) ) {
				case 1:
					{
					this.state = 3463;
					this.lockClause();
					}
					break;
				}
				}
				break;
			case 5:
				localctx = new WithLateralStatementContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3466;
				this.querySpecificationNointo();
				this.state = 3469;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3467;
					this.match(MySqlParser.COMMA);
					this.state = 3468;
					this.lateralStatement();
					}
					}
					this.state = 3471;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===1135);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public updateStatement(): UpdateStatementContext {
		let localctx: UpdateStatementContext = new UpdateStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 202, MySqlParser.RULE_updateStatement);
		try {
			this.state = 3477;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 476, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3475;
				this.singleUpdateStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3476;
				this.multipleUpdateStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valuesStatement(): ValuesStatementContext {
		let localctx: ValuesStatementContext = new ValuesStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 204, MySqlParser.RULE_valuesStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3479;
			this.match(MySqlParser.VALUES);
			this.state = 3480;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 3482;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 477, this._ctx) ) {
			case 1:
				{
				this.state = 3481;
				this.expressionsWithDefaults();
				}
				break;
			}
			this.state = 3484;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 3493;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 3485;
				this.match(MySqlParser.COMMA);
				this.state = 3486;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3488;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 478, this._ctx) ) {
				case 1:
					{
					this.state = 3487;
					this.expressionsWithDefaults();
					}
					break;
				}
				this.state = 3490;
				this.match(MySqlParser.RR_BRACKET);
				}
				}
				this.state = 3495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertStatementValue(): InsertStatementValueContext {
		let localctx: InsertStatementValueContext = new InsertStatementValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 206, MySqlParser.RULE_insertStatementValue);
		let _la: number;
		try {
			this.state = 3514;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 152:
			case 1133:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3496;
				this.selectStatement();
				}
				break;
			case 188:
			case 669:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3497;
				localctx._insertFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===188 || _la===669)) {
				    localctx._insertFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 3498;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3500;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 480, this._ctx) ) {
				case 1:
					{
					this.state = 3499;
					this.expressionsWithDefaults();
					}
					break;
				}
				this.state = 3502;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 3511;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3503;
					this.match(MySqlParser.COMMA);
					this.state = 3504;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3506;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 481, this._ctx) ) {
					case 1:
						{
						this.state = 3505;
						this.expressionsWithDefaults();
						}
						break;
					}
					this.state = 3508;
					this.match(MySqlParser.RR_BRACKET);
					}
					}
					this.state = 3513;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public updatedElement(): UpdatedElementContext {
		let localctx: UpdatedElementContext = new UpdatedElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 208, MySqlParser.RULE_updatedElement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3516;
			this.fullColumnName();
			this.state = 3517;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 3520;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 484, this._ctx) ) {
			case 1:
				{
				this.state = 3518;
				this.expression(0);
				}
				break;
			case 2:
				{
				this.state = 3519;
				this.match(MySqlParser.DEFAULT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public assignmentField(): AssignmentFieldContext {
		let localctx: AssignmentFieldContext = new AssignmentFieldContext(this, this._ctx, this.state);
		this.enterRule(localctx, 210, MySqlParser.RULE_assignmentField);
		try {
			this.state = 3524;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 11:
			case 14:
			case 18:
			case 29:
			case 35:
			case 37:
			case 39:
			case 42:
			case 48:
			case 55:
			case 57:
			case 59:
			case 73:
			case 77:
			case 79:
			case 85:
			case 94:
			case 97:
			case 117:
			case 121:
			case 124:
			case 130:
			case 140:
			case 141:
			case 148:
			case 150:
			case 158:
			case 168:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 226:
			case 234:
			case 237:
			case 239:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 365:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 371:
			case 372:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 382:
			case 383:
			case 384:
			case 385:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
			case 399:
			case 400:
			case 401:
			case 402:
			case 403:
			case 405:
			case 407:
			case 408:
			case 409:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 420:
			case 421:
			case 422:
			case 423:
			case 424:
			case 425:
			case 426:
			case 427:
			case 428:
			case 429:
			case 430:
			case 431:
			case 432:
			case 434:
			case 435:
			case 436:
			case 437:
			case 438:
			case 439:
			case 440:
			case 441:
			case 442:
			case 443:
			case 444:
			case 445:
			case 446:
			case 447:
			case 448:
			case 449:
			case 450:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			case 460:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 472:
			case 473:
			case 474:
			case 475:
			case 476:
			case 477:
			case 478:
			case 479:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 492:
			case 493:
			case 494:
			case 495:
			case 496:
			case 497:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 507:
			case 508:
			case 509:
			case 510:
			case 511:
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 518:
			case 519:
			case 520:
			case 521:
			case 523:
			case 527:
			case 528:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 534:
			case 535:
			case 536:
			case 537:
			case 538:
			case 539:
			case 540:
			case 541:
			case 542:
			case 543:
			case 544:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
			case 579:
			case 580:
			case 581:
			case 582:
			case 583:
			case 584:
			case 585:
			case 586:
			case 587:
			case 588:
			case 589:
			case 591:
			case 592:
			case 593:
			case 594:
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 616:
			case 617:
			case 618:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 624:
			case 625:
			case 626:
			case 627:
			case 628:
			case 629:
			case 630:
			case 631:
			case 632:
			case 633:
			case 634:
			case 635:
			case 636:
			case 638:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 656:
			case 657:
			case 658:
			case 659:
			case 660:
			case 661:
			case 662:
			case 663:
			case 664:
			case 665:
			case 666:
			case 667:
			case 668:
			case 669:
			case 670:
			case 671:
			case 672:
			case 673:
			case 674:
			case 675:
			case 677:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 684:
			case 685:
			case 686:
			case 687:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
			case 697:
			case 699:
			case 700:
			case 701:
			case 702:
			case 703:
			case 704:
			case 705:
			case 706:
			case 707:
			case 708:
			case 709:
			case 710:
			case 711:
			case 712:
			case 717:
			case 718:
			case 720:
			case 721:
			case 722:
			case 723:
			case 724:
			case 725:
			case 726:
			case 727:
			case 728:
			case 729:
			case 730:
			case 731:
			case 732:
			case 733:
			case 734:
			case 736:
			case 737:
			case 738:
			case 739:
			case 740:
			case 741:
			case 742:
			case 743:
			case 744:
			case 745:
			case 746:
			case 747:
			case 748:
			case 749:
			case 750:
			case 751:
			case 752:
			case 753:
			case 754:
			case 755:
			case 756:
			case 757:
			case 758:
			case 759:
			case 760:
			case 761:
			case 762:
			case 763:
			case 764:
			case 765:
			case 766:
			case 767:
			case 768:
			case 769:
			case 770:
			case 771:
			case 772:
			case 773:
			case 774:
			case 775:
			case 776:
			case 777:
			case 778:
			case 779:
			case 780:
			case 781:
			case 782:
			case 783:
			case 784:
			case 785:
			case 786:
			case 787:
			case 788:
			case 789:
			case 790:
			case 791:
			case 792:
			case 793:
			case 794:
			case 795:
			case 796:
			case 797:
			case 798:
			case 799:
			case 800:
			case 801:
			case 802:
			case 803:
			case 806:
			case 807:
			case 808:
			case 809:
			case 810:
			case 811:
			case 812:
			case 813:
			case 814:
			case 815:
			case 816:
			case 817:
			case 818:
			case 819:
			case 820:
			case 821:
			case 822:
			case 823:
			case 824:
			case 825:
			case 826:
			case 827:
			case 828:
			case 829:
			case 830:
			case 831:
			case 832:
			case 833:
			case 834:
			case 835:
			case 836:
			case 837:
			case 838:
			case 839:
			case 840:
			case 841:
			case 842:
			case 843:
			case 844:
			case 845:
			case 846:
			case 847:
			case 848:
			case 849:
			case 850:
			case 851:
			case 852:
			case 853:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			case 873:
			case 874:
			case 875:
			case 876:
			case 877:
			case 878:
			case 879:
			case 880:
			case 881:
			case 882:
			case 883:
			case 884:
			case 885:
			case 886:
			case 887:
			case 888:
			case 889:
			case 890:
			case 891:
			case 892:
			case 893:
			case 894:
			case 895:
			case 896:
			case 897:
			case 898:
			case 899:
			case 900:
			case 901:
			case 902:
			case 903:
			case 904:
			case 905:
			case 906:
			case 907:
			case 908:
			case 909:
			case 910:
			case 911:
			case 912:
			case 913:
			case 914:
			case 915:
			case 916:
			case 917:
			case 918:
			case 919:
			case 920:
			case 921:
			case 922:
			case 923:
			case 924:
			case 925:
			case 926:
			case 927:
			case 928:
			case 929:
			case 930:
			case 931:
			case 932:
			case 933:
			case 934:
			case 935:
			case 936:
			case 937:
			case 938:
			case 939:
			case 940:
			case 941:
			case 942:
			case 943:
			case 944:
			case 945:
			case 946:
			case 947:
			case 948:
			case 949:
			case 950:
			case 951:
			case 952:
			case 953:
			case 954:
			case 955:
			case 956:
			case 957:
			case 958:
			case 959:
			case 960:
			case 961:
			case 962:
			case 963:
			case 964:
			case 965:
			case 966:
			case 967:
			case 968:
			case 969:
			case 970:
			case 971:
			case 972:
			case 973:
			case 974:
			case 975:
			case 976:
			case 977:
			case 978:
			case 979:
			case 980:
			case 981:
			case 982:
			case 983:
			case 984:
			case 985:
			case 986:
			case 987:
			case 988:
			case 989:
			case 990:
			case 991:
			case 992:
			case 993:
			case 994:
			case 995:
			case 996:
			case 997:
			case 998:
			case 999:
			case 1000:
			case 1001:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
			case 1007:
			case 1008:
			case 1009:
			case 1010:
			case 1011:
			case 1012:
			case 1013:
			case 1014:
			case 1015:
			case 1016:
			case 1017:
			case 1018:
			case 1019:
			case 1020:
			case 1021:
			case 1022:
			case 1023:
			case 1024:
			case 1025:
			case 1026:
			case 1027:
			case 1028:
			case 1029:
			case 1030:
			case 1031:
			case 1032:
			case 1033:
			case 1034:
			case 1035:
			case 1036:
			case 1037:
			case 1038:
			case 1039:
			case 1040:
			case 1041:
			case 1042:
			case 1043:
			case 1044:
			case 1045:
			case 1046:
			case 1047:
			case 1048:
			case 1049:
			case 1050:
			case 1051:
			case 1052:
			case 1053:
			case 1054:
			case 1055:
			case 1056:
			case 1057:
			case 1058:
			case 1059:
			case 1060:
			case 1061:
			case 1062:
			case 1063:
			case 1064:
			case 1065:
			case 1066:
			case 1067:
			case 1068:
			case 1069:
			case 1070:
			case 1071:
			case 1072:
			case 1073:
			case 1074:
			case 1075:
			case 1076:
			case 1077:
			case 1078:
			case 1079:
			case 1080:
			case 1081:
			case 1082:
			case 1083:
			case 1084:
			case 1085:
			case 1086:
			case 1087:
			case 1088:
			case 1089:
			case 1090:
			case 1091:
			case 1092:
			case 1093:
			case 1094:
			case 1095:
			case 1096:
			case 1097:
			case 1098:
			case 1099:
			case 1100:
			case 1101:
			case 1102:
			case 1103:
			case 1104:
			case 1105:
			case 1106:
			case 1107:
			case 1123:
			case 1145:
			case 1148:
			case 1156:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3522;
				this.uid();
				}
				break;
			case 1159:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3523;
				this.match(MySqlParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockClause(): LockClauseContext {
		let localctx: LockClauseContext = new LockClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 212, MySqlParser.RULE_lockClause);
		try {
			this.state = 3532;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 65:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3526;
				this.match(MySqlParser.FOR);
				this.state = 3527;
				this.match(MySqlParser.UPDATE);
				}
				break;
			case 103:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3528;
				this.match(MySqlParser.LOCK);
				this.state = 3529;
				this.match(MySqlParser.IN);
				this.state = 3530;
				this.match(MySqlParser.SHARE);
				this.state = 3531;
				this.match(MySqlParser.MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public singleDeleteStatement(): SingleDeleteStatementContext {
		let localctx: SingleDeleteStatementContext = new SingleDeleteStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 214, MySqlParser.RULE_singleDeleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3534;
			this.match(MySqlParser.DELETE);
			this.state = 3536;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===106) {
				{
				this.state = 3535;
				localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 3539;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===568) {
				{
				this.state = 3538;
				this.match(MySqlParser.QUICK);
				}
			}

			this.state = 3542;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78) {
				{
				this.state = 3541;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3544;
			this.match(MySqlParser.FROM);
			this.state = 3545;
			this.tableName();
			this.state = 3550;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 491, this._ctx) ) {
			case 1:
				{
				this.state = 3547;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===12) {
					{
					this.state = 3546;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3549;
				this.uid();
				}
				break;
			}
			this.state = 3557;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 3552;
				this.match(MySqlParser.PARTITION);
				this.state = 3553;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3554;
				this.uidList();
				this.state = 3555;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 3561;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===190) {
				{
				this.state = 3559;
				this.match(MySqlParser.WHERE);
				this.state = 3560;
				this.expression(0);
				}
			}

			this.state = 3564;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===124) {
				{
				this.state = 3563;
				this.orderByClause();
				}
			}

			this.state = 3568;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===99) {
				{
				this.state = 3566;
				this.match(MySqlParser.LIMIT);
				this.state = 3567;
				this.limitClauseAtom();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public multipleDeleteStatement(): MultipleDeleteStatementContext {
		let localctx: MultipleDeleteStatementContext = new MultipleDeleteStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 216, MySqlParser.RULE_multipleDeleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3570;
			this.match(MySqlParser.DELETE);
			this.state = 3572;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===106) {
				{
				this.state = 3571;
				localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 3575;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 497, this._ctx) ) {
			case 1:
				{
				this.state = 3574;
				this.match(MySqlParser.QUICK);
				}
				break;
			}
			this.state = 3578;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78) {
				{
				this.state = 3577;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3619;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 11:
			case 14:
			case 18:
			case 29:
			case 35:
			case 37:
			case 39:
			case 42:
			case 48:
			case 55:
			case 57:
			case 59:
			case 73:
			case 77:
			case 79:
			case 85:
			case 94:
			case 97:
			case 117:
			case 121:
			case 124:
			case 130:
			case 140:
			case 141:
			case 148:
			case 150:
			case 158:
			case 168:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 226:
			case 234:
			case 237:
			case 239:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 365:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 371:
			case 372:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 382:
			case 383:
			case 384:
			case 385:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
			case 399:
			case 400:
			case 401:
			case 402:
			case 403:
			case 405:
			case 407:
			case 408:
			case 409:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 420:
			case 421:
			case 422:
			case 423:
			case 424:
			case 425:
			case 426:
			case 427:
			case 428:
			case 429:
			case 430:
			case 431:
			case 432:
			case 434:
			case 435:
			case 436:
			case 437:
			case 438:
			case 439:
			case 440:
			case 441:
			case 442:
			case 443:
			case 444:
			case 445:
			case 446:
			case 447:
			case 448:
			case 449:
			case 450:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			case 460:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 472:
			case 473:
			case 474:
			case 475:
			case 476:
			case 477:
			case 478:
			case 479:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 492:
			case 493:
			case 494:
			case 495:
			case 496:
			case 497:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 507:
			case 508:
			case 509:
			case 510:
			case 511:
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 518:
			case 519:
			case 520:
			case 521:
			case 523:
			case 527:
			case 528:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 534:
			case 535:
			case 536:
			case 537:
			case 538:
			case 539:
			case 540:
			case 541:
			case 542:
			case 543:
			case 544:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
			case 579:
			case 580:
			case 581:
			case 582:
			case 583:
			case 584:
			case 585:
			case 586:
			case 587:
			case 588:
			case 589:
			case 591:
			case 592:
			case 593:
			case 594:
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 616:
			case 617:
			case 618:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 624:
			case 625:
			case 626:
			case 627:
			case 628:
			case 629:
			case 630:
			case 631:
			case 632:
			case 633:
			case 634:
			case 635:
			case 636:
			case 638:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 656:
			case 657:
			case 658:
			case 659:
			case 660:
			case 661:
			case 662:
			case 663:
			case 664:
			case 665:
			case 666:
			case 667:
			case 668:
			case 669:
			case 670:
			case 671:
			case 672:
			case 673:
			case 674:
			case 675:
			case 677:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 684:
			case 685:
			case 686:
			case 687:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
			case 697:
			case 699:
			case 700:
			case 701:
			case 702:
			case 703:
			case 704:
			case 705:
			case 706:
			case 707:
			case 708:
			case 709:
			case 710:
			case 711:
			case 712:
			case 717:
			case 718:
			case 720:
			case 721:
			case 722:
			case 723:
			case 724:
			case 725:
			case 726:
			case 727:
			case 728:
			case 729:
			case 730:
			case 731:
			case 732:
			case 733:
			case 734:
			case 736:
			case 737:
			case 738:
			case 739:
			case 740:
			case 741:
			case 742:
			case 743:
			case 744:
			case 745:
			case 746:
			case 747:
			case 748:
			case 749:
			case 750:
			case 751:
			case 752:
			case 753:
			case 754:
			case 755:
			case 756:
			case 757:
			case 758:
			case 759:
			case 760:
			case 761:
			case 762:
			case 763:
			case 764:
			case 765:
			case 766:
			case 767:
			case 768:
			case 769:
			case 770:
			case 771:
			case 772:
			case 773:
			case 774:
			case 775:
			case 776:
			case 777:
			case 778:
			case 779:
			case 780:
			case 781:
			case 782:
			case 783:
			case 784:
			case 785:
			case 786:
			case 787:
			case 788:
			case 789:
			case 790:
			case 791:
			case 792:
			case 793:
			case 794:
			case 795:
			case 796:
			case 797:
			case 798:
			case 799:
			case 800:
			case 801:
			case 802:
			case 803:
			case 806:
			case 807:
			case 808:
			case 809:
			case 810:
			case 811:
			case 812:
			case 813:
			case 814:
			case 815:
			case 816:
			case 817:
			case 818:
			case 819:
			case 820:
			case 821:
			case 822:
			case 823:
			case 824:
			case 825:
			case 826:
			case 827:
			case 828:
			case 829:
			case 830:
			case 831:
			case 832:
			case 833:
			case 834:
			case 835:
			case 836:
			case 837:
			case 838:
			case 839:
			case 840:
			case 841:
			case 842:
			case 843:
			case 844:
			case 845:
			case 846:
			case 847:
			case 848:
			case 849:
			case 850:
			case 851:
			case 852:
			case 853:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			case 873:
			case 874:
			case 875:
			case 876:
			case 877:
			case 878:
			case 879:
			case 880:
			case 881:
			case 882:
			case 883:
			case 884:
			case 885:
			case 886:
			case 887:
			case 888:
			case 889:
			case 890:
			case 891:
			case 892:
			case 893:
			case 894:
			case 895:
			case 896:
			case 897:
			case 898:
			case 899:
			case 900:
			case 901:
			case 902:
			case 903:
			case 904:
			case 905:
			case 906:
			case 907:
			case 908:
			case 909:
			case 910:
			case 911:
			case 912:
			case 913:
			case 914:
			case 915:
			case 916:
			case 917:
			case 918:
			case 919:
			case 920:
			case 921:
			case 922:
			case 923:
			case 924:
			case 925:
			case 926:
			case 927:
			case 928:
			case 929:
			case 930:
			case 931:
			case 932:
			case 933:
			case 934:
			case 935:
			case 936:
			case 937:
			case 938:
			case 939:
			case 940:
			case 941:
			case 942:
			case 943:
			case 944:
			case 945:
			case 946:
			case 947:
			case 948:
			case 949:
			case 950:
			case 951:
			case 952:
			case 953:
			case 954:
			case 955:
			case 956:
			case 957:
			case 958:
			case 959:
			case 960:
			case 961:
			case 962:
			case 963:
			case 964:
			case 965:
			case 966:
			case 967:
			case 968:
			case 969:
			case 970:
			case 971:
			case 972:
			case 973:
			case 974:
			case 975:
			case 976:
			case 977:
			case 978:
			case 979:
			case 980:
			case 981:
			case 982:
			case 983:
			case 984:
			case 985:
			case 986:
			case 987:
			case 988:
			case 989:
			case 990:
			case 991:
			case 992:
			case 993:
			case 994:
			case 995:
			case 996:
			case 997:
			case 998:
			case 999:
			case 1000:
			case 1001:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
			case 1007:
			case 1008:
			case 1009:
			case 1010:
			case 1011:
			case 1012:
			case 1013:
			case 1014:
			case 1015:
			case 1016:
			case 1017:
			case 1018:
			case 1019:
			case 1020:
			case 1021:
			case 1022:
			case 1023:
			case 1024:
			case 1025:
			case 1026:
			case 1027:
			case 1028:
			case 1029:
			case 1030:
			case 1031:
			case 1032:
			case 1033:
			case 1034:
			case 1035:
			case 1036:
			case 1037:
			case 1038:
			case 1039:
			case 1040:
			case 1041:
			case 1042:
			case 1043:
			case 1044:
			case 1045:
			case 1046:
			case 1047:
			case 1048:
			case 1049:
			case 1050:
			case 1051:
			case 1052:
			case 1053:
			case 1054:
			case 1055:
			case 1056:
			case 1057:
			case 1058:
			case 1059:
			case 1060:
			case 1061:
			case 1062:
			case 1063:
			case 1064:
			case 1065:
			case 1066:
			case 1067:
			case 1068:
			case 1069:
			case 1070:
			case 1071:
			case 1072:
			case 1073:
			case 1074:
			case 1075:
			case 1076:
			case 1077:
			case 1078:
			case 1079:
			case 1080:
			case 1081:
			case 1082:
			case 1083:
			case 1084:
			case 1085:
			case 1086:
			case 1087:
			case 1088:
			case 1089:
			case 1090:
			case 1091:
			case 1092:
			case 1093:
			case 1094:
			case 1095:
			case 1096:
			case 1097:
			case 1098:
			case 1099:
			case 1100:
			case 1101:
			case 1102:
			case 1103:
			case 1104:
			case 1105:
			case 1106:
			case 1107:
			case 1123:
			case 1145:
			case 1148:
			case 1156:
				{
				this.state = 3580;
				this.tableName();
				this.state = 3583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1132) {
					{
					this.state = 3581;
					this.match(MySqlParser.DOT);
					this.state = 3582;
					this.match(MySqlParser.STAR);
					}
				}

				this.state = 3593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3585;
					this.match(MySqlParser.COMMA);
					this.state = 3586;
					this.tableName();
					this.state = 3589;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===1132) {
						{
						this.state = 3587;
						this.match(MySqlParser.DOT);
						this.state = 3588;
						this.match(MySqlParser.STAR);
						}
					}

					}
					}
					this.state = 3595;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3596;
				this.match(MySqlParser.FROM);
				this.state = 3597;
				this.tableSources();
				}
				break;
			case 68:
				{
				this.state = 3599;
				this.match(MySqlParser.FROM);
				this.state = 3600;
				this.tableName();
				this.state = 3603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1132) {
					{
					this.state = 3601;
					this.match(MySqlParser.DOT);
					this.state = 3602;
					this.match(MySqlParser.STAR);
					}
				}

				this.state = 3613;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 3605;
					this.match(MySqlParser.COMMA);
					this.state = 3606;
					this.tableName();
					this.state = 3609;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===1132) {
						{
						this.state = 3607;
						this.match(MySqlParser.DOT);
						this.state = 3608;
						this.match(MySqlParser.STAR);
						}
					}

					}
					}
					this.state = 3615;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3616;
				this.match(MySqlParser.USING);
				this.state = 3617;
				this.tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3623;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===190) {
				{
				this.state = 3621;
				this.match(MySqlParser.WHERE);
				this.state = 3622;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public handlerOpenStatement(): HandlerOpenStatementContext {
		let localctx: HandlerOpenStatementContext = new HandlerOpenStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 218, MySqlParser.RULE_handlerOpenStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3625;
			this.match(MySqlParser.HANDLER);
			this.state = 3626;
			this.tableName();
			this.state = 3627;
			this.match(MySqlParser.OPEN);
			this.state = 3632;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 508, this._ctx) ) {
			case 1:
				{
				this.state = 3629;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===12) {
					{
					this.state = 3628;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3631;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public handlerReadIndexStatement(): HandlerReadIndexStatementContext {
		let localctx: HandlerReadIndexStatementContext = new HandlerReadIndexStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 220, MySqlParser.RULE_handlerReadIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3634;
			this.match(MySqlParser.HANDLER);
			this.state = 3635;
			this.tableName();
			this.state = 3636;
			this.match(MySqlParser.READ);
			this.state = 3637;
			localctx._index = this.uid();
			this.state = 3644;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1124:
			case 1125:
			case 1126:
			case 1127:
				{
				this.state = 3638;
				this.comparisonOperator();
				this.state = 3639;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3640;
				this.constants();
				this.state = 3641;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 430:
			case 469:
			case 520:
			case 562:
				{
				this.state = 3643;
				localctx._moveOrder = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===430 || _la===469 || _la===520 || _la===562)) {
				    localctx._moveOrder = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3648;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===190) {
				{
				this.state = 3646;
				this.match(MySqlParser.WHERE);
				this.state = 3647;
				this.expression(0);
				}
			}

			this.state = 3652;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===99) {
				{
				this.state = 3650;
				this.match(MySqlParser.LIMIT);
				this.state = 3651;
				this.limitClauseAtom();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public handlerReadStatement(): HandlerReadStatementContext {
		let localctx: HandlerReadStatementContext = new HandlerReadStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 222, MySqlParser.RULE_handlerReadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3654;
			this.match(MySqlParser.HANDLER);
			this.state = 3655;
			this.tableName();
			this.state = 3656;
			this.match(MySqlParser.READ);
			this.state = 3657;
			localctx._moveOrder = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===430 || _la===520)) {
			    localctx._moveOrder = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 3660;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===190) {
				{
				this.state = 3658;
				this.match(MySqlParser.WHERE);
				this.state = 3659;
				this.expression(0);
				}
			}

			this.state = 3664;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===99) {
				{
				this.state = 3662;
				this.match(MySqlParser.LIMIT);
				this.state = 3663;
				this.limitClauseAtom();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public handlerCloseStatement(): HandlerCloseStatementContext {
		let localctx: HandlerCloseStatementContext = new HandlerCloseStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 224, MySqlParser.RULE_handlerCloseStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3666;
			this.match(MySqlParser.HANDLER);
			this.state = 3667;
			this.tableName();
			this.state = 3668;
			this.match(MySqlParser.CLOSE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public singleUpdateStatement(): SingleUpdateStatementContext {
		let localctx: SingleUpdateStatementContext = new SingleUpdateStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 226, MySqlParser.RULE_singleUpdateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3670;
			this.match(MySqlParser.UPDATE);
			this.state = 3672;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===106) {
				{
				this.state = 3671;
				localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 3675;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78) {
				{
				this.state = 3674;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3677;
			this.tableName();
			this.state = 3682;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537155584) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
				{
				this.state = 3679;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===12) {
					{
					this.state = 3678;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3681;
				this.uid();
				}
			}

			this.state = 3684;
			this.match(MySqlParser.SET);
			this.state = 3685;
			this.updatedElement();
			this.state = 3690;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 3686;
				this.match(MySqlParser.COMMA);
				this.state = 3687;
				this.updatedElement();
				}
				}
				this.state = 3692;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3695;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===190) {
				{
				this.state = 3693;
				this.match(MySqlParser.WHERE);
				this.state = 3694;
				this.expression(0);
				}
			}

			this.state = 3698;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===124) {
				{
				this.state = 3697;
				this.orderByClause();
				}
			}

			this.state = 3701;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===99) {
				{
				this.state = 3700;
				this.limitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public multipleUpdateStatement(): MultipleUpdateStatementContext {
		let localctx: MultipleUpdateStatementContext = new MultipleUpdateStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 228, MySqlParser.RULE_multipleUpdateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3703;
			this.match(MySqlParser.UPDATE);
			this.state = 3705;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===106) {
				{
				this.state = 3704;
				localctx._priority = this.match(MySqlParser.LOW_PRIORITY);
				}
			}

			this.state = 3708;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78) {
				{
				this.state = 3707;
				this.match(MySqlParser.IGNORE);
				}
			}

			this.state = 3710;
			this.tableSources();
			this.state = 3711;
			this.match(MySqlParser.SET);
			this.state = 3712;
			this.updatedElement();
			this.state = 3717;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 3713;
				this.match(MySqlParser.COMMA);
				this.state = 3714;
				this.updatedElement();
				}
				}
				this.state = 3719;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3722;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===190) {
				{
				this.state = 3720;
				this.match(MySqlParser.WHERE);
				this.state = 3721;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderByClause(): OrderByClauseContext {
		let localctx: OrderByClauseContext = new OrderByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 230, MySqlParser.RULE_orderByClause);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3724;
			this.match(MySqlParser.ORDER);
			this.state = 3725;
			this.match(MySqlParser.BY);
			this.state = 3726;
			this.orderByExpression();
			this.state = 3731;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 526, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3727;
					this.match(MySqlParser.COMMA);
					this.state = 3728;
					this.orderByExpression();
					}
					}
				}
				this.state = 3733;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 526, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderByExpression(): OrderByExpressionContext {
		let localctx: OrderByExpressionContext = new OrderByExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 232, MySqlParser.RULE_orderByExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3734;
			this.expression(0);
			this.state = 3736;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 527, this._ctx) ) {
			case 1:
				{
				this.state = 3735;
				localctx._order = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===13 || _la===45)) {
				    localctx._order = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableSources(): TableSourcesContext {
		let localctx: TableSourcesContext = new TableSourcesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 234, MySqlParser.RULE_tableSources);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3738;
			this.tableSource();
			this.state = 3743;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 528, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3739;
					this.match(MySqlParser.COMMA);
					this.state = 3740;
					this.tableSource();
					}
					}
				}
				this.state = 3745;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 528, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableSource(): TableSourceContext {
		let localctx: TableSourceContext = new TableSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 236, MySqlParser.RULE_tableSource);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3764;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 531, this._ctx) ) {
			case 1:
				localctx = new TableSourceBaseContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3746;
				this.tableSourceItem();
				this.state = 3750;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 529, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3747;
						this.joinPart();
						}
						}
					}
					this.state = 3752;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 529, this._ctx);
				}
				}
				break;
			case 2:
				localctx = new TableSourceNestedContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3753;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3754;
				this.tableSourceItem();
				this.state = 3758;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===34 || ((((_la - 83)) & ~0x1F) === 0 && ((1 << (_la - 83)) & 1073758337) !== 0) || _la===148 || _la===171) {
					{
					{
					this.state = 3755;
					this.joinPart();
					}
					}
					this.state = 3760;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3761;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 3:
				localctx = new TableJsonContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3763;
				this.jsonTable();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableSourceItem(): TableSourceItemContext {
		let localctx: TableSourceItemContext = new TableSourceItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 238, MySqlParser.RULE_tableSourceItem);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3806;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 539, this._ctx) ) {
			case 1:
				localctx = new AtomTableItemContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3766;
				this.tableName();
				this.state = 3772;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===129) {
					{
					this.state = 3767;
					this.match(MySqlParser.PARTITION);
					this.state = 3768;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3769;
					this.uidList();
					this.state = 3770;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				this.state = 3778;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 534, this._ctx) ) {
				case 1:
					{
					this.state = 3775;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===12) {
						{
						this.state = 3774;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 3777;
					(localctx as AtomTableItemContext)._alias = this.uid();
					}
					break;
				}
				this.state = 3788;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 536, this._ctx) ) {
				case 1:
					{
					this.state = 3780;
					this.indexHint();
					this.state = 3785;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 535, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3781;
							this.match(MySqlParser.COMMA);
							this.state = 3782;
							this.indexHint();
							}
							}
						}
						this.state = 3787;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 535, this._ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				localctx = new SubqueryTableItemContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3795;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 537, this._ctx) ) {
				case 1:
					{
					this.state = 3790;
					this.selectStatement();
					}
					break;
				case 2:
					{
					this.state = 3791;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 3792;
					(localctx as SubqueryTableItemContext)._parenthesisSubquery = this.selectStatement();
					this.state = 3793;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				this.state = 3798;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===12) {
					{
					this.state = 3797;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 3800;
				(localctx as SubqueryTableItemContext)._alias = this.uid();
				}
				break;
			case 3:
				localctx = new TableSourcesItemContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3802;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3803;
				this.tableSources();
				this.state = 3804;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexHint(): IndexHintContext {
		let localctx: IndexHintContext = new IndexHintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 240, MySqlParser.RULE_indexHint);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3808;
			localctx._indexHintAction = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===66 || _la===78 || _la===186)) {
			    localctx._indexHintAction = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 3809;
			localctx._keyFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===81 || _la===91)) {
			    localctx._keyFormat = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 3812;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===65) {
				{
				this.state = 3810;
				this.match(MySqlParser.FOR);
				this.state = 3811;
				this.indexHintType();
				}
			}

			this.state = 3814;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 3815;
			this.uidList();
			this.state = 3816;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexHintType(): IndexHintTypeContext {
		let localctx: IndexHintTypeContext = new IndexHintTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 242, MySqlParser.RULE_indexHintType);
		try {
			this.state = 3823;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 90:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3818;
				this.match(MySqlParser.JOIN);
				}
				break;
			case 124:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3819;
				this.match(MySqlParser.ORDER);
				this.state = 3820;
				this.match(MySqlParser.BY);
				}
				break;
			case 73:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3821;
				this.match(MySqlParser.GROUP);
				this.state = 3822;
				this.match(MySqlParser.BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public joinPart(): JoinPartContext {
		let localctx: JoinPartContext = new JoinPartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 244, MySqlParser.RULE_joinPart);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3872;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 34:
			case 83:
			case 90:
				localctx = new InnerJoinContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3826;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===34 || _la===83) {
					{
					this.state = 3825;
					_la = this._input.LA(1);
					if(!(_la===34 || _la===83)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 3828;
				this.match(MySqlParser.JOIN);
				this.state = 3830;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 543, this._ctx) ) {
				case 1:
					{
					this.state = 3829;
					this.match(MySqlParser.LATERAL);
					}
					break;
				}
				this.state = 3832;
				this.tableSourceItem();
				this.state = 3836;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 544, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3833;
						this.joinSpec();
						}
						}
					}
					this.state = 3838;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 544, this._ctx);
				}
				}
				break;
			case 171:
				localctx = new StraightJoinContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3839;
				this.match(MySqlParser.STRAIGHT_JOIN);
				this.state = 3840;
				this.tableSourceItem();
				this.state = 3845;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 545, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3841;
						this.match(MySqlParser.ON);
						this.state = 3842;
						this.expression(0);
						}
						}
					}
					this.state = 3847;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 545, this._ctx);
				}
				}
				break;
			case 97:
			case 148:
				localctx = new OuterJoinContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3848;
				_la = this._input.LA(1);
				if(!(_la===97 || _la===148)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 3850;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===126) {
					{
					this.state = 3849;
					this.match(MySqlParser.OUTER);
					}
				}

				this.state = 3852;
				this.match(MySqlParser.JOIN);
				this.state = 3854;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 547, this._ctx) ) {
				case 1:
					{
					this.state = 3853;
					this.match(MySqlParser.LATERAL);
					}
					break;
				}
				this.state = 3856;
				this.tableSourceItem();
				this.state = 3860;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 548, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3857;
						this.joinSpec();
						}
						}
					}
					this.state = 3862;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 548, this._ctx);
				}
				}
				break;
			case 113:
				localctx = new NaturalJoinContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3863;
				this.match(MySqlParser.NATURAL);
				this.state = 3868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===97 || _la===148) {
					{
					this.state = 3864;
					_la = this._input.LA(1);
					if(!(_la===97 || _la===148)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 3866;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===126) {
						{
						this.state = 3865;
						this.match(MySqlParser.OUTER);
						}
					}

					}
				}

				this.state = 3870;
				this.match(MySqlParser.JOIN);
				this.state = 3871;
				this.tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public joinSpec(): JoinSpecContext {
		let localctx: JoinSpecContext = new JoinSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 246, MySqlParser.RULE_joinSpec);
		try {
			this.state = 3881;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 118:
				this.enterOuterAlt(localctx, 1);
				{
				{
				this.state = 3874;
				this.match(MySqlParser.ON);
				this.state = 3875;
				this.expression(0);
				}
				}
				break;
			case 187:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3876;
				this.match(MySqlParser.USING);
				this.state = 3877;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3878;
				this.uidList();
				this.state = 3879;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public queryExpression(): QueryExpressionContext {
		let localctx: QueryExpressionContext = new QueryExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 248, MySqlParser.RULE_queryExpression);
		try {
			this.state = 3891;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 553, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3883;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3884;
				this.querySpecification();
				this.state = 3885;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3887;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3888;
				this.queryExpression();
				this.state = 3889;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public queryExpressionNointo(): QueryExpressionNointoContext {
		let localctx: QueryExpressionNointoContext = new QueryExpressionNointoContext(this, this._ctx, this.state);
		this.enterRule(localctx, 250, MySqlParser.RULE_queryExpressionNointo);
		try {
			this.state = 3901;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 554, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3893;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3894;
				this.querySpecificationNointo();
				this.state = 3895;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3897;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 3898;
				this.queryExpressionNointo();
				this.state = 3899;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public querySpecification(): QuerySpecificationContext {
		let localctx: QuerySpecificationContext = new QuerySpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 252, MySqlParser.RULE_querySpecification);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3957;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 569, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3903;
				this.match(MySqlParser.SELECT);
				this.state = 3907;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 555, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3904;
						this.selectSpec();
						}
						}
					}
					this.state = 3909;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 555, this._ctx);
				}
				this.state = 3910;
				this.selectElements();
				this.state = 3912;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===87) {
					{
					this.state = 3911;
					this.selectIntoExpression();
					}
				}

				this.state = 3914;
				this.fromClause();
				this.state = 3916;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 557, this._ctx) ) {
				case 1:
					{
					this.state = 3915;
					this.groupByClause();
					}
					break;
				}
				this.state = 3919;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===74) {
					{
					this.state = 3918;
					this.havingClause();
					}
				}

				this.state = 3922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===676) {
					{
					this.state = 3921;
					this.windowClause();
					}
				}

				this.state = 3925;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 560, this._ctx) ) {
				case 1:
					{
					this.state = 3924;
					this.orderByClause();
					}
					break;
				}
				this.state = 3928;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 561, this._ctx) ) {
				case 1:
					{
					this.state = 3927;
					this.limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3930;
				this.match(MySqlParser.SELECT);
				this.state = 3934;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 562, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3931;
						this.selectSpec();
						}
						}
					}
					this.state = 3936;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 562, this._ctx);
				}
				this.state = 3937;
				this.selectElements();
				this.state = 3938;
				this.fromClause();
				this.state = 3940;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 563, this._ctx) ) {
				case 1:
					{
					this.state = 3939;
					this.groupByClause();
					}
					break;
				}
				this.state = 3943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===74) {
					{
					this.state = 3942;
					this.havingClause();
					}
				}

				this.state = 3946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===676) {
					{
					this.state = 3945;
					this.windowClause();
					}
				}

				this.state = 3949;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 566, this._ctx) ) {
				case 1:
					{
					this.state = 3948;
					this.orderByClause();
					}
					break;
				}
				this.state = 3952;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 567, this._ctx) ) {
				case 1:
					{
					this.state = 3951;
					this.limitClause();
					}
					break;
				}
				this.state = 3955;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===87) {
					{
					this.state = 3954;
					this.selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		let localctx: QuerySpecificationNointoContext = new QuerySpecificationNointoContext(this, this._ctx, this.state);
		this.enterRule(localctx, 254, MySqlParser.RULE_querySpecificationNointo);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3959;
			this.match(MySqlParser.SELECT);
			this.state = 3963;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 570, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3960;
					this.selectSpec();
					}
					}
				}
				this.state = 3965;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 570, this._ctx);
			}
			this.state = 3966;
			this.selectElements();
			this.state = 3967;
			this.fromClause();
			this.state = 3969;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 571, this._ctx) ) {
			case 1:
				{
				this.state = 3968;
				this.groupByClause();
				}
				break;
			}
			this.state = 3972;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===74) {
				{
				this.state = 3971;
				this.havingClause();
				}
			}

			this.state = 3975;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===676) {
				{
				this.state = 3974;
				this.windowClause();
				}
			}

			this.state = 3978;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 574, this._ctx) ) {
			case 1:
				{
				this.state = 3977;
				this.orderByClause();
				}
				break;
			}
			this.state = 3981;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 575, this._ctx) ) {
			case 1:
				{
				this.state = 3980;
				this.limitClause();
				}
				break;
			}
			this.state = 3984;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 576, this._ctx) ) {
			case 1:
				{
				this.state = 3983;
				this.unionStatement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unionParenthesis(): UnionParenthesisContext {
		let localctx: UnionParenthesisContext = new UnionParenthesisContext(this, this._ctx, this.state);
		this.enterRule(localctx, 256, MySqlParser.RULE_unionParenthesis);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3986;
			this.match(MySqlParser.UNION);
			this.state = 3988;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===6 || _la===49) {
				{
				this.state = 3987;
				localctx._unionType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===6 || _la===49)) {
				    localctx._unionType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 3990;
			this.queryExpressionNointo();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unionStatement(): UnionStatementContext {
		let localctx: UnionStatementContext = new UnionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 258, MySqlParser.RULE_unionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3992;
			this.match(MySqlParser.UNION);
			this.state = 3994;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===6 || _la===49) {
				{
				this.state = 3993;
				localctx._unionType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===6 || _la===49)) {
				    localctx._unionType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 3998;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 152:
				{
				this.state = 3996;
				this.querySpecificationNointo();
				}
				break;
			case 1133:
				{
				this.state = 3997;
				this.queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lateralStatement(): LateralStatementContext {
		let localctx: LateralStatementContext = new LateralStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 260, MySqlParser.RULE_lateralStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4000;
			this.match(MySqlParser.LATERAL);
			this.state = 4015;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 583, this._ctx) ) {
			case 1:
				{
				this.state = 4001;
				this.querySpecificationNointo();
				}
				break;
			case 2:
				{
				this.state = 4002;
				this.queryExpressionNointo();
				}
				break;
			case 3:
				{
				{
				this.state = 4003;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4006;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 152:
					{
					this.state = 4004;
					this.querySpecificationNointo();
					}
					break;
				case 1133:
					{
					this.state = 4005;
					this.queryExpressionNointo();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4008;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 4013;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 582, this._ctx) ) {
				case 1:
					{
					this.state = 4010;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===12) {
						{
						this.state = 4009;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 4012;
					this.uid();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsonTable(): JsonTableContext {
		let localctx: JsonTableContext = new JsonTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 262, MySqlParser.RULE_jsonTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4017;
			this.match(MySqlParser.JSON_TABLE);
			this.state = 4018;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 4019;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 4020;
			this.match(MySqlParser.COMMA);
			this.state = 4021;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 4022;
			this.match(MySqlParser.COLUMNS);
			this.state = 4023;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 4024;
			this.jsonColumnList();
			this.state = 4025;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 4026;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 4031;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 585, this._ctx) ) {
			case 1:
				{
				this.state = 4028;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===12) {
					{
					this.state = 4027;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 4030;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsonColumnList(): JsonColumnListContext {
		let localctx: JsonColumnListContext = new JsonColumnListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 264, MySqlParser.RULE_jsonColumnList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4033;
			this.jsonColumn();
			this.state = 4038;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 4034;
				this.match(MySqlParser.COMMA);
				this.state = 4035;
				this.jsonColumn();
				}
				}
				this.state = 4040;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsonColumn(): JsonColumnContext {
		let localctx: JsonColumnContext = new JsonColumnContext(this, this._ctx, this.state);
		this.enterRule(localctx, 266, MySqlParser.RULE_jsonColumn);
		let _la: number;
		try {
			this.state = 4070;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 592, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4041;
				this.fullColumnName();
				this.state = 4058;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 65:
					{
					this.state = 4042;
					this.match(MySqlParser.FOR);
					this.state = 4043;
					this.match(MySqlParser.ORDINALITY);
					}
					break;
				case 25:
				case 153:
				case 196:
				case 197:
				case 198:
				case 199:
				case 200:
				case 201:
				case 202:
				case 203:
				case 204:
				case 205:
				case 206:
				case 207:
				case 208:
				case 209:
				case 211:
				case 212:
				case 213:
				case 214:
				case 215:
				case 216:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 226:
				case 227:
				case 228:
				case 229:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
				case 235:
				case 236:
				case 237:
				case 239:
				case 346:
				case 348:
				case 349:
				case 431:
				case 466:
				case 518:
				case 803:
				case 804:
				case 805:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
					{
					this.state = 4044;
					this.dataType();
					this.state = 4056;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 285:
						{
						this.state = 4045;
						this.match(MySqlParser.PATH);
						this.state = 4046;
						this.match(MySqlParser.STRING_LITERAL);
						this.state = 4048;
						this._errHandler.sync(this);
						switch ( this._interp.adaptivePredict(this._input, 587, this._ctx) ) {
						case 1:
							{
							this.state = 4047;
							this.jsonOnEmpty();
							}
							break;
						}
						this.state = 4051;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===42 || _la===116 || _la===411) {
							{
							this.state = 4050;
							this.jsonOnError();
							}
						}

						}
						break;
					case 60:
						{
						this.state = 4053;
						this.match(MySqlParser.EXISTS);
						this.state = 4054;
						this.match(MySqlParser.PATH);
						this.state = 4055;
						this.match(MySqlParser.STRING_LITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4060;
				this.match(MySqlParser.NESTED);
				this.state = 4062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===285) {
					{
					this.state = 4061;
					this.match(MySqlParser.PATH);
					}
				}

				this.state = 4064;
				this.match(MySqlParser.STRING_LITERAL);
				this.state = 4065;
				this.match(MySqlParser.COLUMNS);
				this.state = 4066;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4067;
				this.jsonColumnList();
				this.state = 4068;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsonOnEmpty(): JsonOnEmptyContext {
		let localctx: JsonOnEmptyContext = new JsonOnEmptyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 268, MySqlParser.RULE_jsonOnEmpty);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4076;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 116:
				{
				this.state = 4072;
				this.match(MySqlParser.NULL_LITERAL);
				}
				break;
			case 411:
				{
				this.state = 4073;
				this.match(MySqlParser.ERROR);
				}
				break;
			case 42:
				{
				this.state = 4074;
				this.match(MySqlParser.DEFAULT);
				this.state = 4075;
				this.defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4078;
			this.match(MySqlParser.ON);
			this.state = 4079;
			this.match(MySqlParser.EMPTY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsonOnError(): JsonOnErrorContext {
		let localctx: JsonOnErrorContext = new JsonOnErrorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 270, MySqlParser.RULE_jsonOnError);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4085;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 116:
				{
				this.state = 4081;
				this.match(MySqlParser.NULL_LITERAL);
				}
				break;
			case 411:
				{
				this.state = 4082;
				this.match(MySqlParser.ERROR);
				}
				break;
			case 42:
				{
				this.state = 4083;
				this.match(MySqlParser.DEFAULT);
				this.state = 4084;
				this.defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4087;
			this.match(MySqlParser.ON);
			this.state = 4088;
			this.match(MySqlParser.ERROR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectSpec(): SelectSpecContext {
		let localctx: SelectSpecContext = new SelectSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 272, MySqlParser.RULE_selectSpec);
		let _la: number;
		try {
			this.state = 4098;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 6:
			case 49:
			case 50:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4090;
				_la = this._input.LA(1);
				if(!(_la===6 || _la===49 || _la===50)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 75:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4091;
				this.match(MySqlParser.HIGH_PRIORITY);
				}
				break;
			case 171:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4092;
				this.match(MySqlParser.STRAIGHT_JOIN);
				}
				break;
			case 166:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4093;
				this.match(MySqlParser.SQL_SMALL_RESULT);
				}
				break;
			case 164:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4094;
				this.match(MySqlParser.SQL_BIG_RESULT);
				}
				break;
			case 625:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4095;
				this.match(MySqlParser.SQL_BUFFER_RESULT);
				}
				break;
			case 626:
			case 627:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4096;
				_la = this._input.LA(1);
				if(!(_la===626 || _la===627)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 165:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4097;
				this.match(MySqlParser.SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectElements(): SelectElementsContext {
		let localctx: SelectElementsContext = new SelectElementsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 274, MySqlParser.RULE_selectElements);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4102;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 596, this._ctx) ) {
			case 1:
				{
				this.state = 4100;
				localctx._star = this.match(MySqlParser.STAR);
				}
				break;
			case 2:
				{
				this.state = 4101;
				this.selectElement();
				}
				break;
			}
			this.state = 4108;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 597, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4104;
					this.match(MySqlParser.COMMA);
					this.state = 4105;
					this.selectElement();
					}
					}
				}
				this.state = 4110;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 597, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectElement(): SelectElementContext {
		let localctx: SelectElementContext = new SelectElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 276, MySqlParser.RULE_selectElement);
		let _la: number;
		try {
			this.state = 4140;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 605, this._ctx) ) {
			case 1:
				localctx = new SelectStarElementContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4111;
				this.fullId();
				this.state = 4112;
				this.match(MySqlParser.DOT);
				this.state = 4113;
				this.match(MySqlParser.STAR);
				}
				break;
			case 2:
				localctx = new SelectColumnElementContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4115;
				this.fullColumnName();
				this.state = 4120;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 599, this._ctx) ) {
				case 1:
					{
					this.state = 4117;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===12) {
						{
						this.state = 4116;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 4119;
					this.uid();
					}
					break;
				}
				}
				break;
			case 3:
				localctx = new SelectFunctionElementContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4122;
				this.functionCall();
				this.state = 4127;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 601, this._ctx) ) {
				case 1:
					{
					this.state = 4124;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===12) {
						{
						this.state = 4123;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 4126;
					this.uid();
					}
					break;
				}
				}
				break;
			case 4:
				localctx = new SelectExpressionElementContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4131;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 602, this._ctx) ) {
				case 1:
					{
					this.state = 4129;
					this.match(MySqlParser.LOCAL_ID);
					this.state = 4130;
					this.match(MySqlParser.VAR_ASSIGN);
					}
					break;
				}
				this.state = 4133;
				this.expression(0);
				this.state = 4138;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 604, this._ctx) ) {
				case 1:
					{
					this.state = 4135;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===12) {
						{
						this.state = 4134;
						this.match(MySqlParser.AS);
						}
					}

					this.state = 4137;
					this.uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectIntoExpression(): SelectIntoExpressionContext {
		let localctx: SelectIntoExpressionContext = new SelectIntoExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 278, MySqlParser.RULE_selectIntoExpression);
		let _la: number;
		try {
			this.state = 4178;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 612, this._ctx) ) {
			case 1:
				localctx = new SelectIntoVariablesContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4142;
				this.match(MySqlParser.INTO);
				this.state = 4143;
				this.assignmentField();
				this.state = 4148;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 4144;
					this.match(MySqlParser.COMMA);
					this.state = 4145;
					this.assignmentField();
					}
					}
					this.state = 4150;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				localctx = new SelectIntoDumpFileContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4151;
				this.match(MySqlParser.INTO);
				this.state = 4152;
				this.match(MySqlParser.DUMPFILE);
				this.state = 4153;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 3:
				localctx = new SelectIntoTextFileContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				{
				this.state = 4154;
				this.match(MySqlParser.INTO);
				this.state = 4155;
				this.match(MySqlParser.OUTFILE);
				this.state = 4156;
				(localctx as SelectIntoTextFileContext)._filename = this.match(MySqlParser.STRING_LITERAL);
				this.state = 4160;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===25) {
					{
					this.state = 4157;
					this.match(MySqlParser.CHARACTER);
					this.state = 4158;
					this.match(MySqlParser.SET);
					this.state = 4159;
					(localctx as SelectIntoTextFileContext)._charset = this.charsetName();
					}
				}

				this.state = 4168;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 609, this._ctx) ) {
				case 1:
					{
					this.state = 4162;
					(localctx as SelectIntoTextFileContext)._fieldsFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===365 || _la===427)) {
					    (localctx as SelectIntoTextFileContext)._fieldsFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 4164;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4163;
						this.selectFieldsInto();
						}
						}
						this.state = 4166;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la===56 || _la===58 || _la===122 || _la===173);
					}
					break;
				}
				this.state = 4176;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===101) {
					{
					this.state = 4170;
					this.match(MySqlParser.LINES);
					this.state = 4172;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4171;
						this.selectLinesInto();
						}
						}
						this.state = 4174;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la===169 || _la===173);
					}
				}

				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectFieldsInto(): SelectFieldsIntoContext {
		let localctx: SelectFieldsIntoContext = new SelectFieldsIntoContext(this, this._ctx, this.state);
		this.enterRule(localctx, 280, MySqlParser.RULE_selectFieldsInto);
		let _la: number;
		try {
			this.state = 4192;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 173:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4180;
				this.match(MySqlParser.TERMINATED);
				this.state = 4181;
				this.match(MySqlParser.BY);
				this.state = 4182;
				localctx._terminationField = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 56:
			case 122:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4184;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===122) {
					{
					this.state = 4183;
					this.match(MySqlParser.OPTIONALLY);
					}
				}

				this.state = 4186;
				this.match(MySqlParser.ENCLOSED);
				this.state = 4187;
				this.match(MySqlParser.BY);
				this.state = 4188;
				localctx._enclosion = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 58:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4189;
				this.match(MySqlParser.ESCAPED);
				this.state = 4190;
				this.match(MySqlParser.BY);
				this.state = 4191;
				localctx._escaping = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectLinesInto(): SelectLinesIntoContext {
		let localctx: SelectLinesIntoContext = new SelectLinesIntoContext(this, this._ctx, this.state);
		this.enterRule(localctx, 282, MySqlParser.RULE_selectLinesInto);
		try {
			this.state = 4200;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 169:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4194;
				this.match(MySqlParser.STARTING);
				this.state = 4195;
				this.match(MySqlParser.BY);
				this.state = 4196;
				localctx._starting = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 173:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4197;
				this.match(MySqlParser.TERMINATED);
				this.state = 4198;
				this.match(MySqlParser.BY);
				this.state = 4199;
				localctx._terminationLine = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fromClause(): FromClauseContext {
		let localctx: FromClauseContext = new FromClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 284, MySqlParser.RULE_fromClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===68) {
				{
				this.state = 4202;
				this.match(MySqlParser.FROM);
				this.state = 4203;
				this.tableSources();
				}
			}

			this.state = 4208;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===190) {
				{
				this.state = 4206;
				this.match(MySqlParser.WHERE);
				this.state = 4207;
				localctx._whereExpr = this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupByClause(): GroupByClauseContext {
		let localctx: GroupByClauseContext = new GroupByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 286, MySqlParser.RULE_groupByClause);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4210;
			this.match(MySqlParser.GROUP);
			this.state = 4211;
			this.match(MySqlParser.BY);
			this.state = 4212;
			this.groupByItem();
			this.state = 4217;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 618, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4213;
					this.match(MySqlParser.COMMA);
					this.state = 4214;
					this.groupByItem();
					}
					}
				}
				this.state = 4219;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 618, this._ctx);
			}
			this.state = 4222;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 619, this._ctx) ) {
			case 1:
				{
				this.state = 4220;
				this.match(MySqlParser.WITH);
				this.state = 4221;
				this.match(MySqlParser.ROLLUP);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public havingClause(): HavingClauseContext {
		let localctx: HavingClauseContext = new HavingClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 288, MySqlParser.RULE_havingClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4224;
			this.match(MySqlParser.HAVING);
			this.state = 4225;
			localctx._havingExpr = this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowClause(): WindowClauseContext {
		let localctx: WindowClauseContext = new WindowClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 290, MySqlParser.RULE_windowClause);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4227;
			this.match(MySqlParser.WINDOW);
			this.state = 4228;
			this.windowName();
			this.state = 4229;
			this.match(MySqlParser.AS);
			this.state = 4230;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 4231;
			this.windowSpec();
			this.state = 4232;
			this.match(MySqlParser.RR_BRACKET);
			this.state = 4242;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 620, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4233;
					this.match(MySqlParser.COMMA);
					this.state = 4234;
					this.windowName();
					this.state = 4235;
					this.match(MySqlParser.AS);
					this.state = 4236;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 4237;
					this.windowSpec();
					this.state = 4238;
					this.match(MySqlParser.RR_BRACKET);
					}
					}
				}
				this.state = 4244;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 620, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupByItem(): GroupByItemContext {
		let localctx: GroupByItemContext = new GroupByItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 292, MySqlParser.RULE_groupByItem);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4245;
			this.expression(0);
			this.state = 4247;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 621, this._ctx) ) {
			case 1:
				{
				this.state = 4246;
				localctx._order = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===13 || _la===45)) {
				    localctx._order = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public limitClause(): LimitClauseContext {
		let localctx: LimitClauseContext = new LimitClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 294, MySqlParser.RULE_limitClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4249;
			this.match(MySqlParser.LIMIT);
			this.state = 4260;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 623, this._ctx) ) {
			case 1:
				{
				this.state = 4253;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 622, this._ctx) ) {
				case 1:
					{
					this.state = 4250;
					localctx._offset = this.limitClauseAtom();
					this.state = 4251;
					this.match(MySqlParser.COMMA);
					}
					break;
				}
				this.state = 4255;
				localctx._limit = this.limitClauseAtom();
				}
				break;
			case 2:
				{
				this.state = 4256;
				localctx._limit = this.limitClauseAtom();
				this.state = 4257;
				this.match(MySqlParser.OFFSET);
				this.state = 4258;
				localctx._offset = this.limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public limitClauseAtom(): LimitClauseAtomContext {
		let localctx: LimitClauseAtomContext = new LimitClauseAtomContext(this, this._ctx, this.state);
		this.enterRule(localctx, 296, MySqlParser.RULE_limitClauseAtom);
		try {
			this.state = 4265;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1138:
			case 1139:
			case 1140:
			case 1149:
			case 1151:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4262;
				this.decimalLiteral();
				}
				break;
			case 1159:
			case 1160:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4263;
				this.mysqlVariable();
				}
				break;
			case 11:
			case 14:
			case 18:
			case 29:
			case 35:
			case 37:
			case 39:
			case 42:
			case 48:
			case 55:
			case 57:
			case 59:
			case 73:
			case 77:
			case 79:
			case 85:
			case 94:
			case 97:
			case 117:
			case 121:
			case 124:
			case 130:
			case 140:
			case 141:
			case 148:
			case 150:
			case 158:
			case 168:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 226:
			case 234:
			case 237:
			case 239:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 365:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 371:
			case 372:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 382:
			case 383:
			case 384:
			case 385:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
			case 399:
			case 400:
			case 401:
			case 402:
			case 403:
			case 405:
			case 407:
			case 408:
			case 409:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 420:
			case 421:
			case 422:
			case 423:
			case 424:
			case 425:
			case 426:
			case 427:
			case 428:
			case 429:
			case 430:
			case 431:
			case 432:
			case 434:
			case 435:
			case 436:
			case 437:
			case 438:
			case 439:
			case 440:
			case 441:
			case 442:
			case 443:
			case 444:
			case 445:
			case 446:
			case 447:
			case 448:
			case 449:
			case 450:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			case 460:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 472:
			case 473:
			case 474:
			case 475:
			case 476:
			case 477:
			case 478:
			case 479:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 492:
			case 493:
			case 494:
			case 495:
			case 496:
			case 497:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 507:
			case 508:
			case 509:
			case 510:
			case 511:
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 518:
			case 519:
			case 520:
			case 521:
			case 523:
			case 527:
			case 528:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 534:
			case 535:
			case 536:
			case 537:
			case 538:
			case 539:
			case 540:
			case 541:
			case 542:
			case 543:
			case 544:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
			case 579:
			case 580:
			case 581:
			case 582:
			case 583:
			case 584:
			case 585:
			case 586:
			case 587:
			case 588:
			case 589:
			case 591:
			case 592:
			case 593:
			case 594:
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 616:
			case 617:
			case 618:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 624:
			case 625:
			case 626:
			case 627:
			case 628:
			case 629:
			case 630:
			case 631:
			case 632:
			case 633:
			case 634:
			case 635:
			case 636:
			case 638:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 656:
			case 657:
			case 658:
			case 659:
			case 660:
			case 661:
			case 662:
			case 663:
			case 664:
			case 665:
			case 666:
			case 667:
			case 668:
			case 669:
			case 670:
			case 671:
			case 672:
			case 673:
			case 674:
			case 675:
			case 677:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 684:
			case 685:
			case 686:
			case 687:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
			case 697:
			case 699:
			case 700:
			case 701:
			case 702:
			case 703:
			case 704:
			case 705:
			case 706:
			case 707:
			case 708:
			case 709:
			case 710:
			case 711:
			case 712:
			case 717:
			case 718:
			case 720:
			case 721:
			case 722:
			case 723:
			case 724:
			case 725:
			case 726:
			case 727:
			case 728:
			case 729:
			case 730:
			case 731:
			case 732:
			case 733:
			case 734:
			case 736:
			case 737:
			case 738:
			case 739:
			case 740:
			case 741:
			case 742:
			case 743:
			case 744:
			case 745:
			case 746:
			case 747:
			case 748:
			case 749:
			case 750:
			case 751:
			case 752:
			case 753:
			case 754:
			case 755:
			case 756:
			case 757:
			case 758:
			case 759:
			case 760:
			case 761:
			case 762:
			case 763:
			case 764:
			case 765:
			case 766:
			case 767:
			case 768:
			case 769:
			case 770:
			case 771:
			case 772:
			case 773:
			case 774:
			case 775:
			case 776:
			case 777:
			case 778:
			case 779:
			case 780:
			case 781:
			case 782:
			case 783:
			case 784:
			case 785:
			case 786:
			case 787:
			case 788:
			case 789:
			case 790:
			case 791:
			case 792:
			case 793:
			case 794:
			case 795:
			case 796:
			case 797:
			case 798:
			case 799:
			case 800:
			case 801:
			case 802:
			case 803:
			case 806:
			case 807:
			case 808:
			case 809:
			case 810:
			case 811:
			case 812:
			case 813:
			case 814:
			case 815:
			case 816:
			case 817:
			case 818:
			case 819:
			case 820:
			case 821:
			case 822:
			case 823:
			case 824:
			case 825:
			case 826:
			case 827:
			case 828:
			case 829:
			case 830:
			case 831:
			case 832:
			case 833:
			case 834:
			case 835:
			case 836:
			case 837:
			case 838:
			case 839:
			case 840:
			case 841:
			case 842:
			case 843:
			case 844:
			case 845:
			case 846:
			case 847:
			case 848:
			case 849:
			case 850:
			case 851:
			case 852:
			case 853:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			case 873:
			case 874:
			case 875:
			case 876:
			case 877:
			case 878:
			case 879:
			case 880:
			case 881:
			case 882:
			case 883:
			case 884:
			case 885:
			case 886:
			case 887:
			case 888:
			case 889:
			case 890:
			case 891:
			case 892:
			case 893:
			case 894:
			case 895:
			case 896:
			case 897:
			case 898:
			case 899:
			case 900:
			case 901:
			case 902:
			case 903:
			case 904:
			case 905:
			case 906:
			case 907:
			case 908:
			case 909:
			case 910:
			case 911:
			case 912:
			case 913:
			case 914:
			case 915:
			case 916:
			case 917:
			case 918:
			case 919:
			case 920:
			case 921:
			case 922:
			case 923:
			case 924:
			case 925:
			case 926:
			case 927:
			case 928:
			case 929:
			case 930:
			case 931:
			case 932:
			case 933:
			case 934:
			case 935:
			case 936:
			case 937:
			case 938:
			case 939:
			case 940:
			case 941:
			case 942:
			case 943:
			case 944:
			case 945:
			case 946:
			case 947:
			case 948:
			case 949:
			case 950:
			case 951:
			case 952:
			case 953:
			case 954:
			case 955:
			case 956:
			case 957:
			case 958:
			case 959:
			case 960:
			case 961:
			case 962:
			case 963:
			case 964:
			case 965:
			case 966:
			case 967:
			case 968:
			case 969:
			case 970:
			case 971:
			case 972:
			case 973:
			case 974:
			case 975:
			case 976:
			case 977:
			case 978:
			case 979:
			case 980:
			case 981:
			case 982:
			case 983:
			case 984:
			case 985:
			case 986:
			case 987:
			case 988:
			case 989:
			case 990:
			case 991:
			case 992:
			case 993:
			case 994:
			case 995:
			case 996:
			case 997:
			case 998:
			case 999:
			case 1000:
			case 1001:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
			case 1007:
			case 1008:
			case 1009:
			case 1010:
			case 1011:
			case 1012:
			case 1013:
			case 1014:
			case 1015:
			case 1016:
			case 1017:
			case 1018:
			case 1019:
			case 1020:
			case 1021:
			case 1022:
			case 1023:
			case 1024:
			case 1025:
			case 1026:
			case 1027:
			case 1028:
			case 1029:
			case 1030:
			case 1031:
			case 1032:
			case 1033:
			case 1034:
			case 1035:
			case 1036:
			case 1037:
			case 1038:
			case 1039:
			case 1040:
			case 1041:
			case 1042:
			case 1043:
			case 1044:
			case 1045:
			case 1046:
			case 1047:
			case 1048:
			case 1049:
			case 1050:
			case 1051:
			case 1052:
			case 1053:
			case 1054:
			case 1055:
			case 1056:
			case 1057:
			case 1058:
			case 1059:
			case 1060:
			case 1061:
			case 1062:
			case 1063:
			case 1064:
			case 1065:
			case 1066:
			case 1067:
			case 1068:
			case 1069:
			case 1070:
			case 1071:
			case 1072:
			case 1073:
			case 1074:
			case 1075:
			case 1076:
			case 1077:
			case 1078:
			case 1079:
			case 1080:
			case 1081:
			case 1082:
			case 1083:
			case 1084:
			case 1085:
			case 1086:
			case 1087:
			case 1088:
			case 1089:
			case 1090:
			case 1091:
			case 1092:
			case 1093:
			case 1094:
			case 1095:
			case 1096:
			case 1097:
			case 1098:
			case 1099:
			case 1100:
			case 1101:
			case 1102:
			case 1103:
			case 1104:
			case 1105:
			case 1106:
			case 1107:
			case 1123:
			case 1156:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4264;
				this.simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public startTransaction(): StartTransactionContext {
		let localctx: StartTransactionContext = new StartTransactionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 298, MySqlParser.RULE_startTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4267;
			this.match(MySqlParser.START);
			this.state = 4268;
			this.match(MySqlParser.TRANSACTION);
			this.state = 4277;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 626, this._ctx) ) {
			case 1:
				{
				this.state = 4269;
				this.transactionMode();
				this.state = 4274;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 4270;
					this.match(MySqlParser.COMMA);
					this.state = 4271;
					this.transactionMode();
					}
					}
					this.state = 4276;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public beginWork(): BeginWorkContext {
		let localctx: BeginWorkContext = new BeginWorkContext(this, this._ctx, this.state);
		this.enterRule(localctx, 300, MySqlParser.RULE_beginWork);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4279;
			this.match(MySqlParser.BEGIN);
			this.state = 4281;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===678) {
				{
				this.state = 4280;
				this.match(MySqlParser.WORK);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public commitWork(): CommitWorkContext {
		let localctx: CommitWorkContext = new CommitWorkContext(this, this._ctx, this.state);
		this.enterRule(localctx, 302, MySqlParser.RULE_commitWork);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4283;
			this.match(MySqlParser.COMMIT);
			this.state = 4285;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===678) {
				{
				this.state = 4284;
				this.match(MySqlParser.WORK);
				}
			}

			this.state = 4292;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===10) {
				{
				this.state = 4287;
				this.match(MySqlParser.AND);
				this.state = 4289;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===521) {
					{
					this.state = 4288;
					localctx._nochain = this.match(MySqlParser.NO);
					}
				}

				this.state = 4291;
				this.match(MySqlParser.CHAIN);
				}
			}

			this.state = 4298;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 632, this._ctx) ) {
			case 1:
				{
				this.state = 4295;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===521) {
					{
					this.state = 4294;
					localctx._norelease = this.match(MySqlParser.NO);
					}
				}

				this.state = 4297;
				this.match(MySqlParser.RELEASE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rollbackWork(): RollbackWorkContext {
		let localctx: RollbackWorkContext = new RollbackWorkContext(this, this._ctx, this.state);
		this.enterRule(localctx, 304, MySqlParser.RULE_rollbackWork);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4300;
			this.match(MySqlParser.ROLLBACK);
			this.state = 4302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===678) {
				{
				this.state = 4301;
				this.match(MySqlParser.WORK);
				}
			}

			this.state = 4309;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===10) {
				{
				this.state = 4304;
				this.match(MySqlParser.AND);
				this.state = 4306;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===521) {
					{
					this.state = 4305;
					localctx._nochain = this.match(MySqlParser.NO);
					}
				}

				this.state = 4308;
				this.match(MySqlParser.CHAIN);
				}
			}

			this.state = 4315;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 637, this._ctx) ) {
			case 1:
				{
				this.state = 4312;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===521) {
					{
					this.state = 4311;
					localctx._norelease = this.match(MySqlParser.NO);
					}
				}

				this.state = 4314;
				this.match(MySqlParser.RELEASE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public savepointStatement(): SavepointStatementContext {
		let localctx: SavepointStatementContext = new SavepointStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 306, MySqlParser.RULE_savepointStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4317;
			this.match(MySqlParser.SAVEPOINT);
			this.state = 4318;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rollbackStatement(): RollbackStatementContext {
		let localctx: RollbackStatementContext = new RollbackStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 308, MySqlParser.RULE_rollbackStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4320;
			this.match(MySqlParser.ROLLBACK);
			this.state = 4322;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===678) {
				{
				this.state = 4321;
				this.match(MySqlParser.WORK);
				}
			}

			this.state = 4324;
			this.match(MySqlParser.TO);
			this.state = 4326;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 639, this._ctx) ) {
			case 1:
				{
				this.state = 4325;
				this.match(MySqlParser.SAVEPOINT);
				}
				break;
			}
			this.state = 4328;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public releaseStatement(): ReleaseStatementContext {
		let localctx: ReleaseStatementContext = new ReleaseStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 310, MySqlParser.RULE_releaseStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4330;
			this.match(MySqlParser.RELEASE);
			this.state = 4331;
			this.match(MySqlParser.SAVEPOINT);
			this.state = 4332;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockTables(): LockTablesContext {
		let localctx: LockTablesContext = new LockTablesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 312, MySqlParser.RULE_lockTables);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4334;
			this.match(MySqlParser.LOCK);
			this.state = 4335;
			_la = this._input.LA(1);
			if(!(_la===172 || _la===742)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4336;
			this.lockTableElement();
			this.state = 4341;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 4337;
				this.match(MySqlParser.COMMA);
				this.state = 4338;
				this.lockTableElement();
				}
				}
				this.state = 4343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4345;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===527 || _la===674) {
				{
				this.state = 4344;
				this.waitNowaitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unlockTables(): UnlockTablesContext {
		let localctx: UnlockTablesContext = new UnlockTablesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 314, MySqlParser.RULE_unlockTables);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4347;
			this.match(MySqlParser.UNLOCK);
			this.state = 4348;
			this.match(MySqlParser.TABLES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setAutocommitStatement(): SetAutocommitStatementContext {
		let localctx: SetAutocommitStatementContext = new SetAutocommitStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 316, MySqlParser.RULE_setAutocommitStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4350;
			this.match(MySqlParser.SET);
			this.state = 4351;
			this.match(MySqlParser.AUTOCOMMIT);
			this.state = 4352;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 4353;
			localctx._autocommitValue = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===1138 || _la===1139)) {
			    localctx._autocommitValue = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setTransactionStatement(): SetTransactionStatementContext {
		let localctx: SetTransactionStatementContext = new SetTransactionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 318, MySqlParser.RULE_setTransactionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4355;
			this.match(MySqlParser.SET);
			this.state = 4357;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===439 || _la===609) {
				{
				this.state = 4356;
				localctx._transactionContext = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===439 || _la===609)) {
				    localctx._transactionContext = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 4359;
			this.match(MySqlParser.TRANSACTION);
			this.state = 4360;
			this.transactionOption();
			this.state = 4365;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 4361;
				this.match(MySqlParser.COMMA);
				this.state = 4362;
				this.transactionOption();
				}
				}
				this.state = 4367;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionMode(): TransactionModeContext {
		let localctx: TransactionModeContext = new TransactionModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 320, MySqlParser.RULE_transactionMode);
		try {
			this.state = 4375;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 644, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4368;
				this.match(MySqlParser.WITH);
				this.state = 4369;
				this.match(MySqlParser.CONSISTENT);
				this.state = 4370;
				this.match(MySqlParser.SNAPSHOT);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4371;
				this.match(MySqlParser.READ);
				this.state = 4372;
				this.match(MySqlParser.WRITE);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4373;
				this.match(MySqlParser.READ);
				this.state = 4374;
				this.match(MySqlParser.ONLY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockTableElement(): LockTableElementContext {
		let localctx: LockTableElementContext = new LockTableElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 322, MySqlParser.RULE_lockTableElement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4377;
			this.tableName();
			this.state = 4382;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537155584) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
				{
				this.state = 4379;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===12) {
					{
					this.state = 4378;
					this.match(MySqlParser.AS);
					}
				}

				this.state = 4381;
				this.uid();
				}
			}

			this.state = 4384;
			this.lockAction();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockAction(): LockActionContext {
		let localctx: LockActionContext = new LockActionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 324, MySqlParser.RULE_lockAction);
		let _la: number;
		try {
			this.state = 4394;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 134:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4386;
				this.match(MySqlParser.READ);
				this.state = 4388;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===474) {
					{
					this.state = 4387;
					this.match(MySqlParser.LOCAL);
					}
				}

				}
				break;
			case 106:
			case 193:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4391;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===106) {
					{
					this.state = 4390;
					this.match(MySqlParser.LOW_PRIORITY);
					}
				}

				this.state = 4393;
				this.match(MySqlParser.WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionOption(): TransactionOptionContext {
		let localctx: TransactionOptionContext = new TransactionOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 326, MySqlParser.RULE_transactionOption);
		try {
			this.state = 4403;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 650, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4396;
				this.match(MySqlParser.ISOLATION);
				this.state = 4397;
				this.match(MySqlParser.LEVEL);
				this.state = 4398;
				this.transactionLevel();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4399;
				this.match(MySqlParser.READ);
				this.state = 4400;
				this.match(MySqlParser.WRITE);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4401;
				this.match(MySqlParser.READ);
				this.state = 4402;
				this.match(MySqlParser.ONLY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionLevel(): TransactionLevelContext {
		let localctx: TransactionLevelContext = new TransactionLevelContext(this, this._ctx, this.state);
		this.enterRule(localctx, 328, MySqlParser.RULE_transactionLevel);
		try {
			this.state = 4412;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 651, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4405;
				this.match(MySqlParser.REPEATABLE);
				this.state = 4406;
				this.match(MySqlParser.READ);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4407;
				this.match(MySqlParser.READ);
				this.state = 4408;
				this.match(MySqlParser.COMMITTED);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4409;
				this.match(MySqlParser.READ);
				this.state = 4410;
				this.match(MySqlParser.UNCOMMITTED);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4411;
				this.match(MySqlParser.SERIALIZABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public changeMaster(): ChangeMasterContext {
		let localctx: ChangeMasterContext = new ChangeMasterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 330, MySqlParser.RULE_changeMaster);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4414;
			this.match(MySqlParser.CHANGE);
			this.state = 4415;
			this.match(MySqlParser.MASTER);
			this.state = 4416;
			this.match(MySqlParser.TO);
			this.state = 4417;
			this.masterOption();
			this.state = 4422;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 4418;
				this.match(MySqlParser.COMMA);
				this.state = 4419;
				this.masterOption();
				}
				}
				this.state = 4424;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4426;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===65) {
				{
				this.state = 4425;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public changeReplicationFilter(): ChangeReplicationFilterContext {
		let localctx: ChangeReplicationFilterContext = new ChangeReplicationFilterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 332, MySqlParser.RULE_changeReplicationFilter);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4428;
			this.match(MySqlParser.CHANGE);
			this.state = 4429;
			this.match(MySqlParser.REPLICATION);
			this.state = 4430;
			this.match(MySqlParser.FILTER);
			this.state = 4431;
			this.replicationFilter();
			this.state = 4436;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 4432;
				this.match(MySqlParser.COMMA);
				this.state = 4433;
				this.replicationFilter();
				}
				}
				this.state = 4438;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public purgeBinaryLogs(): PurgeBinaryLogsContext {
		let localctx: PurgeBinaryLogsContext = new PurgeBinaryLogsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 334, MySqlParser.RULE_purgeBinaryLogs);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4439;
			this.match(MySqlParser.PURGE);
			this.state = 4440;
			localctx._purgeFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===226 || _la===477)) {
			    localctx._purgeFormat = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4441;
			this.match(MySqlParser.LOGS);
			this.state = 4446;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 175:
				{
				this.state = 4442;
				this.match(MySqlParser.TO);
				this.state = 4443;
				localctx._fileName = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 15:
				{
				this.state = 4444;
				this.match(MySqlParser.BEFORE);
				this.state = 4445;
				localctx._timeValue = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resetMaster(): ResetMasterContext {
		let localctx: ResetMasterContext = new ResetMasterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 336, MySqlParser.RULE_resetMaster);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4448;
			this.match(MySqlParser.RESET);
			this.state = 4449;
			this.match(MySqlParser.MASTER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resetSlave(): ResetSlaveContext {
		let localctx: ResetSlaveContext = new ResetSlaveContext(this, this._ctx, this.state);
		this.enterRule(localctx, 338, MySqlParser.RULE_resetSlave);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4451;
			this.match(MySqlParser.RESET);
			this.state = 4452;
			this.match(MySqlParser.SLAVE);
			this.state = 4454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===6) {
				{
				this.state = 4453;
				this.match(MySqlParser.ALL);
				}
			}

			this.state = 4457;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===65) {
				{
				this.state = 4456;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public startSlave(): StartSlaveContext {
		let localctx: StartSlaveContext = new StartSlaveContext(this, this._ctx, this.state);
		this.enterRule(localctx, 340, MySqlParser.RULE_startSlave);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4459;
			this.match(MySqlParser.START);
			this.state = 4460;
			this.match(MySqlParser.SLAVE);
			this.state = 4469;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===462 || _la===628) {
				{
				this.state = 4461;
				this.threadType();
				this.state = 4466;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 4462;
					this.match(MySqlParser.COMMA);
					this.state = 4463;
					this.threadType();
					}
					}
					this.state = 4468;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 4473;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===663) {
				{
				this.state = 4471;
				this.match(MySqlParser.UNTIL);
				this.state = 4472;
				this.untilOption();
				}
			}

			this.state = 4478;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===391 || _la===551 || _la===555 || _la===665) {
				{
				{
				this.state = 4475;
				this.connectionOption();
				}
				}
				this.state = 4480;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4482;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===65) {
				{
				this.state = 4481;
				this.channelOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stopSlave(): StopSlaveContext {
		let localctx: StopSlaveContext = new StopSlaveContext(this, this._ctx, this.state);
		this.enterRule(localctx, 342, MySqlParser.RULE_stopSlave);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4484;
			this.match(MySqlParser.STOP);
			this.state = 4485;
			this.match(MySqlParser.SLAVE);
			this.state = 4494;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===462 || _la===628) {
				{
				this.state = 4486;
				this.threadType();
				this.state = 4491;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 4487;
					this.match(MySqlParser.COMMA);
					this.state = 4488;
					this.threadType();
					}
					}
					this.state = 4493;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public startGroupReplication(): StartGroupReplicationContext {
		let localctx: StartGroupReplicationContext = new StartGroupReplicationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 344, MySqlParser.RULE_startGroupReplication);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4496;
			this.match(MySqlParser.START);
			this.state = 4497;
			this.match(MySqlParser.GROUP_REPLICATION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stopGroupReplication(): StopGroupReplicationContext {
		let localctx: StopGroupReplicationContext = new StopGroupReplicationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 346, MySqlParser.RULE_stopGroupReplication);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4499;
			this.match(MySqlParser.STOP);
			this.state = 4500;
			this.match(MySqlParser.GROUP_REPLICATION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public masterOption(): MasterOptionContext {
		let localctx: MasterOptionContext = new MasterOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 348, MySqlParser.RULE_masterOption);
		let _la: number;
		try {
			this.state = 4531;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 107:
			case 482:
			case 483:
			case 485:
			case 489:
			case 490:
			case 491:
			case 492:
			case 493:
			case 494:
			case 495:
			case 496:
			case 497:
			case 575:
				localctx = new MasterStringOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4502;
				this.stringMasterOption();
				this.state = 4503;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4504;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 479:
			case 480:
			case 484:
			case 486:
			case 487:
			case 576:
				localctx = new MasterDecimalOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4506;
				this.decimalMasterOption();
				this.state = 4507;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4508;
				this.decimalLiteral();
				}
				break;
			case 108:
			case 478:
			case 488:
				localctx = new MasterBoolOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4510;
				this.boolMasterOption();
				this.state = 4511;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4512;
				(localctx as MasterBoolOptionContext)._boolVal = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===1138 || _la===1139)) {
				    (localctx as MasterBoolOptionContext)._boolVal = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 481:
				localctx = new MasterRealOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4514;
				this.match(MySqlParser.MASTER_HEARTBEAT_PERIOD);
				this.state = 4515;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4516;
				this.match(MySqlParser.REAL_LITERAL);
				}
				break;
			case 449:
				localctx = new MasterUidListOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4517;
				this.match(MySqlParser.IGNORE_SERVER_IDS);
				this.state = 4518;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4519;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4528;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
					{
					this.state = 4520;
					this.uid();
					this.state = 4525;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1135) {
						{
						{
						this.state = 4521;
						this.match(MySqlParser.COMMA);
						this.state = 4522;
						this.uid();
						}
						}
						this.state = 4527;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 4530;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stringMasterOption(): StringMasterOptionContext {
		let localctx: StringMasterOptionContext = new StringMasterOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 350, MySqlParser.RULE_stringMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4533;
			_la = this._input.LA(1);
			if(!(_la===107 || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 65419) !== 0) || _la===575)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public decimalMasterOption(): DecimalMasterOptionContext {
		let localctx: DecimalMasterOptionContext = new DecimalMasterOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 352, MySqlParser.RULE_decimalMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4535;
			_la = this._input.LA(1);
			if(!(((((_la - 479)) & ~0x1F) === 0 && ((1 << (_la - 479)) & 419) !== 0) || _la===576)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public boolMasterOption(): BoolMasterOptionContext {
		let localctx: BoolMasterOptionContext = new BoolMasterOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 354, MySqlParser.RULE_boolMasterOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4537;
			_la = this._input.LA(1);
			if(!(_la===108 || _la===478 || _la===488)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public channelOption(): ChannelOptionContext {
		let localctx: ChannelOptionContext = new ChannelOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 356, MySqlParser.RULE_channelOption);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4539;
			this.match(MySqlParser.FOR);
			this.state = 4540;
			this.match(MySqlParser.CHANNEL);
			this.state = 4541;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replicationFilter(): ReplicationFilterContext {
		let localctx: ReplicationFilterContext = new ReplicationFilterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 358, MySqlParser.RULE_replicationFilter);
		let _la: number;
		try {
			this.state = 4592;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 581:
				localctx = new DoDbReplicationContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4543;
				this.match(MySqlParser.REPLICATE_DO_DB);
				this.state = 4544;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4545;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4546;
				this.uidList();
				this.state = 4547;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 583:
				localctx = new IgnoreDbReplicationContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4549;
				this.match(MySqlParser.REPLICATE_IGNORE_DB);
				this.state = 4550;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4551;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4552;
				this.uidList();
				this.state = 4553;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 582:
				localctx = new DoTableReplicationContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4555;
				this.match(MySqlParser.REPLICATE_DO_TABLE);
				this.state = 4556;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4557;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4558;
				this.tables();
				this.state = 4559;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 584:
				localctx = new IgnoreTableReplicationContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4561;
				this.match(MySqlParser.REPLICATE_IGNORE_TABLE);
				this.state = 4562;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4563;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4564;
				this.tables();
				this.state = 4565;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 586:
				localctx = new WildDoTableReplicationContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4567;
				this.match(MySqlParser.REPLICATE_WILD_DO_TABLE);
				this.state = 4568;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4569;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4570;
				this.simpleStrings();
				this.state = 4571;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 587:
				localctx = new WildIgnoreTableReplicationContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4573;
				this.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE);
				this.state = 4574;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4575;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4576;
				this.simpleStrings();
				this.state = 4577;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 585:
				localctx = new RewriteDbReplicationContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4579;
				this.match(MySqlParser.REPLICATE_REWRITE_DB);
				this.state = 4580;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4581;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 4582;
				this.tablePair();
				this.state = 4587;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 4583;
					this.match(MySqlParser.COMMA);
					this.state = 4584;
					this.tablePair();
					}
					}
					this.state = 4589;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4590;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tablePair(): TablePairContext {
		let localctx: TablePairContext = new TablePairContext(this, this._ctx, this.state);
		this.enterRule(localctx, 360, MySqlParser.RULE_tablePair);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4594;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 4595;
			localctx._firstTable = this.tableName();
			this.state = 4596;
			this.match(MySqlParser.COMMA);
			this.state = 4597;
			localctx._secondTable = this.tableName();
			this.state = 4598;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public threadType(): ThreadTypeContext {
		let localctx: ThreadTypeContext = new ThreadTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 362, MySqlParser.RULE_threadType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4600;
			_la = this._input.LA(1);
			if(!(_la===462 || _la===628)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public untilOption(): UntilOptionContext {
		let localctx: UntilOptionContext = new UntilOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 364, MySqlParser.RULE_untilOption);
		let _la: number;
		try {
			this.state = 4620;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 622:
			case 624:
				localctx = new GtidsUntilOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4602;
				(localctx as GtidsUntilOptionContext)._gtids = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===622 || _la===624)) {
				    (localctx as GtidsUntilOptionContext)._gtids = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4603;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4604;
				this.gtuidSet();
				}
				break;
			case 483:
				localctx = new MasterLogUntilOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4605;
				this.match(MySqlParser.MASTER_LOG_FILE);
				this.state = 4606;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4607;
				this.match(MySqlParser.STRING_LITERAL);
				this.state = 4608;
				this.match(MySqlParser.COMMA);
				this.state = 4609;
				this.match(MySqlParser.MASTER_LOG_POS);
				this.state = 4610;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4611;
				this.decimalLiteral();
				}
				break;
			case 575:
				localctx = new RelayLogUntilOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4612;
				this.match(MySqlParser.RELAY_LOG_FILE);
				this.state = 4613;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4614;
				this.match(MySqlParser.STRING_LITERAL);
				this.state = 4615;
				this.match(MySqlParser.COMMA);
				this.state = 4616;
				this.match(MySqlParser.RELAY_LOG_POS);
				this.state = 4617;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4618;
				this.decimalLiteral();
				}
				break;
			case 623:
				localctx = new SqlGapsUntilOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4619;
				this.match(MySqlParser.SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public connectionOption(): ConnectionOptionContext {
		let localctx: ConnectionOptionContext = new ConnectionOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 366, MySqlParser.RULE_connectionOption);
		try {
			this.state = 4634;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 665:
				localctx = new UserConnectionOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4622;
				this.match(MySqlParser.USER);
				this.state = 4623;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4624;
				(localctx as UserConnectionOptionContext)._conOptUser = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 551:
				localctx = new PasswordConnectionOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4625;
				this.match(MySqlParser.PASSWORD);
				this.state = 4626;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4627;
				(localctx as PasswordConnectionOptionContext)._conOptPassword = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 391:
				localctx = new DefaultAuthConnectionOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4628;
				this.match(MySqlParser.DEFAULT_AUTH);
				this.state = 4629;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4630;
				(localctx as DefaultAuthConnectionOptionContext)._conOptDefAuth = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 555:
				localctx = new PluginDirConnectionOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4631;
				this.match(MySqlParser.PLUGIN_DIR);
				this.state = 4632;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 4633;
				(localctx as PluginDirConnectionOptionContext)._conOptPluginDir = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public gtuidSet(): GtuidSetContext {
		let localctx: GtuidSetContext = new GtuidSetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 368, MySqlParser.RULE_gtuidSet);
		let _la: number;
		try {
			this.state = 4645;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1138:
			case 1139:
			case 1140:
			case 1149:
			case 1151:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4636;
				this.uuidSet();
				this.state = 4641;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 4637;
					this.match(MySqlParser.COMMA);
					this.state = 4638;
					this.uuidSet();
					}
					}
					this.state = 4643;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 1148:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4644;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xaStartTransaction(): XaStartTransactionContext {
		let localctx: XaStartTransactionContext = new XaStartTransactionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 370, MySqlParser.RULE_xaStartTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4647;
			this.match(MySqlParser.XA);
			this.state = 4648;
			localctx._xaStart = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===344 || _la===629)) {
			    localctx._xaStart = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4649;
			this.xid();
			this.state = 4651;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===90 || _la===591) {
				{
				this.state = 4650;
				localctx._xaAction = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===90 || _la===591)) {
				    localctx._xaAction = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xaEndTransaction(): XaEndTransactionContext {
		let localctx: XaEndTransactionContext = new XaEndTransactionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 372, MySqlParser.RULE_xaEndTransaction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4653;
			this.match(MySqlParser.XA);
			this.state = 4654;
			this.match(MySqlParser.END);
			this.state = 4655;
			this.xid();
			this.state = 4661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===643) {
				{
				this.state = 4656;
				this.match(MySqlParser.SUSPEND);
				this.state = 4659;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===65) {
					{
					this.state = 4657;
					this.match(MySqlParser.FOR);
					this.state = 4658;
					this.match(MySqlParser.MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xaPrepareStatement(): XaPrepareStatementContext {
		let localctx: XaPrepareStatementContext = new XaPrepareStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 374, MySqlParser.RULE_xaPrepareStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4663;
			this.match(MySqlParser.XA);
			this.state = 4664;
			this.match(MySqlParser.PREPARE);
			this.state = 4665;
			this.xid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xaCommitWork(): XaCommitWorkContext {
		let localctx: XaCommitWorkContext = new XaCommitWorkContext(this, this._ctx, this.state);
		this.enterRule(localctx, 376, MySqlParser.RULE_xaCommitWork);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4667;
			this.match(MySqlParser.XA);
			this.state = 4668;
			this.match(MySqlParser.COMMIT);
			this.state = 4669;
			this.xid();
			this.state = 4672;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===536) {
				{
				this.state = 4670;
				this.match(MySqlParser.ONE);
				this.state = 4671;
				this.match(MySqlParser.PHASE);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xaRollbackWork(): XaRollbackWorkContext {
		let localctx: XaRollbackWorkContext = new XaRollbackWorkContext(this, this._ctx, this.state);
		this.enterRule(localctx, 378, MySqlParser.RULE_xaRollbackWork);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4674;
			this.match(MySqlParser.XA);
			this.state = 4675;
			this.match(MySqlParser.ROLLBACK);
			this.state = 4676;
			this.xid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xaRecoverWork(): XaRecoverWorkContext {
		let localctx: XaRecoverWorkContext = new XaRecoverWorkContext(this, this._ctx, this.state);
		this.enterRule(localctx, 380, MySqlParser.RULE_xaRecoverWork);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4678;
			this.match(MySqlParser.XA);
			this.state = 4679;
			this.match(MySqlParser.RECOVER);
			this.state = 4682;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===32) {
				{
				this.state = 4680;
				this.match(MySqlParser.CONVERT);
				this.state = 4681;
				this.xid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public prepareStatement(): PrepareStatementContext {
		let localctx: PrepareStatementContext = new PrepareStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 382, MySqlParser.RULE_prepareStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4684;
			this.match(MySqlParser.PREPARE);
			this.state = 4685;
			this.uid();
			this.state = 4686;
			this.match(MySqlParser.FROM);
			this.state = 4689;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1148:
				{
				this.state = 4687;
				localctx._query = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 1159:
				{
				this.state = 4688;
				localctx._variable = this.match(MySqlParser.LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public executeStatement(): ExecuteStatementContext {
		let localctx: ExecuteStatementContext = new ExecuteStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 384, MySqlParser.RULE_executeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4691;
			this.match(MySqlParser.EXECUTE);
			this.state = 4692;
			this.uid();
			this.state = 4695;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===187) {
				{
				this.state = 4693;
				this.match(MySqlParser.USING);
				this.state = 4694;
				this.userVariables();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deallocatePrepare(): DeallocatePrepareContext {
		let localctx: DeallocatePrepareContext = new DeallocatePrepareContext(this, this._ctx, this.state);
		this.enterRule(localctx, 386, MySqlParser.RULE_deallocatePrepare);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4697;
			localctx._dropFormat = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===51 || _la===390)) {
			    localctx._dropFormat = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4698;
			this.match(MySqlParser.PREPARE);
			this.state = 4699;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public routineBody(): RoutineBodyContext {
		let localctx: RoutineBodyContext = new RoutineBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 388, MySqlParser.RULE_routineBody);
		try {
			this.state = 4703;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 681, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4701;
				this.blockStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4702;
				this.sqlStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public blockStatement(): BlockStatementContext {
		let localctx: BlockStatementContext = new BlockStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 390, MySqlParser.RULE_blockStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4708;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 682, this._ctx) ) {
			case 1:
				{
				this.state = 4705;
				this.uid();
				this.state = 4706;
				this.match(MySqlParser.COLON_SYMB);
				}
				break;
			}
			this.state = 4710;
			this.match(MySqlParser.BEGIN);
			this.state = 4716;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 683, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4711;
					this.declareVariable();
					this.state = 4712;
					this.match(MySqlParser.SEMI);
					}
					}
				}
				this.state = 4718;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 683, this._ctx);
			}
			this.state = 4724;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 684, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4719;
					this.declareCondition();
					this.state = 4720;
					this.match(MySqlParser.SEMI);
					}
					}
				}
				this.state = 4726;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 684, this._ctx);
			}
			this.state = 4732;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 685, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4727;
					this.declareCursor();
					this.state = 4728;
					this.match(MySqlParser.SEMI);
					}
					}
				}
				this.state = 4734;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 685, this._ctx);
			}
			this.state = 4740;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===41) {
				{
				{
				this.state = 4735;
				this.declareHandler();
				this.state = 4736;
				this.match(MySqlParser.SEMI);
				}
				}
				this.state = 4742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4746;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 687, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4743;
					this.procedureSqlStatement();
					}
					}
				}
				this.state = 4748;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 687, this._ctx);
			}
			this.state = 4749;
			this.match(MySqlParser.END);
			this.state = 4751;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 688, this._ctx) ) {
			case 1:
				{
				this.state = 4750;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseStatement(): CaseStatementContext {
		let localctx: CaseStatementContext = new CaseStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 392, MySqlParser.RULE_caseStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4753;
			this.match(MySqlParser.CASE);
			this.state = 4756;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 689, this._ctx) ) {
			case 1:
				{
				this.state = 4754;
				this.uid();
				}
				break;
			case 2:
				{
				this.state = 4755;
				this.expression(0);
				}
				break;
			}
			this.state = 4759;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4758;
				this.caseAlternative();
				}
				}
				this.state = 4761;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===189);
			this.state = 4769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===53) {
				{
				this.state = 4763;
				this.match(MySqlParser.ELSE);
				this.state = 4765;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4764;
						this.procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4767;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 691, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 4771;
			this.match(MySqlParser.END);
			this.state = 4772;
			this.match(MySqlParser.CASE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ifStatement(): IfStatementContext {
		let localctx: IfStatementContext = new IfStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 394, MySqlParser.RULE_ifStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4774;
			this.match(MySqlParser.IF);
			this.state = 4775;
			this.expression(0);
			this.state = 4776;
			this.match(MySqlParser.THEN);
			this.state = 4778;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4777;
					localctx._procedureSqlStatement = this.procedureSqlStatement();
					localctx._thenStatements.push(localctx._procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4780;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 693, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4785;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===54) {
				{
				{
				this.state = 4782;
				this.elifAlternative();
				}
				}
				this.state = 4787;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4794;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===53) {
				{
				this.state = 4788;
				this.match(MySqlParser.ELSE);
				this.state = 4790;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4789;
						localctx._procedureSqlStatement = this.procedureSqlStatement();
						localctx._elseStatements.push(localctx._procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4792;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 695, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
			}

			this.state = 4796;
			this.match(MySqlParser.END);
			this.state = 4797;
			this.match(MySqlParser.IF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public iterateStatement(): IterateStatementContext {
		let localctx: IterateStatementContext = new IterateStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 396, MySqlParser.RULE_iterateStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4799;
			this.match(MySqlParser.ITERATE);
			this.state = 4800;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public leaveStatement(): LeaveStatementContext {
		let localctx: LeaveStatementContext = new LeaveStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 398, MySqlParser.RULE_leaveStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4802;
			this.match(MySqlParser.LEAVE);
			this.state = 4803;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public loopStatement(): LoopStatementContext {
		let localctx: LoopStatementContext = new LoopStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 400, MySqlParser.RULE_loopStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4808;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
				{
				this.state = 4805;
				this.uid();
				this.state = 4806;
				this.match(MySqlParser.COLON_SYMB);
				}
			}

			this.state = 4810;
			this.match(MySqlParser.LOOP);
			this.state = 4812;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4811;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4814;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 698, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4816;
			this.match(MySqlParser.END);
			this.state = 4817;
			this.match(MySqlParser.LOOP);
			this.state = 4819;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
				{
				this.state = 4818;
				this.uid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public repeatStatement(): RepeatStatementContext {
		let localctx: RepeatStatementContext = new RepeatStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 402, MySqlParser.RULE_repeatStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4824;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 700, this._ctx) ) {
			case 1:
				{
				this.state = 4821;
				this.uid();
				this.state = 4822;
				this.match(MySqlParser.COLON_SYMB);
				}
				break;
			}
			this.state = 4826;
			this.match(MySqlParser.REPEAT);
			this.state = 4828;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4827;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4830;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 701, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4832;
			this.match(MySqlParser.UNTIL);
			this.state = 4833;
			this.expression(0);
			this.state = 4834;
			this.match(MySqlParser.END);
			this.state = 4835;
			this.match(MySqlParser.REPEAT);
			this.state = 4837;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
				{
				this.state = 4836;
				this.uid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public returnStatement(): ReturnStatementContext {
		let localctx: ReturnStatementContext = new ReturnStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 404, MySqlParser.RULE_returnStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4839;
			this.match(MySqlParser.RETURN);
			this.state = 4840;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whileStatement(): WhileStatementContext {
		let localctx: WhileStatementContext = new WhileStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 406, MySqlParser.RULE_whileStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
				{
				this.state = 4842;
				this.uid();
				this.state = 4843;
				this.match(MySqlParser.COLON_SYMB);
				}
			}

			this.state = 4847;
			this.match(MySqlParser.WHILE);
			this.state = 4848;
			this.expression(0);
			this.state = 4849;
			this.match(MySqlParser.DO);
			this.state = 4851;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4850;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4853;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 704, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			this.state = 4855;
			this.match(MySqlParser.END);
			this.state = 4856;
			this.match(MySqlParser.WHILE);
			this.state = 4858;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1F) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1F) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1F) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1F) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1F) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1F) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1F) === 0 && ((1 << (_la - 571)) & 4294443007) !== 0) || ((((_la - 603)) & ~0x1F) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1F) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1F) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1F) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1F) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1F) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1F) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1F) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1F) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1F) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1F) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1F) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1F) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1F) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1F) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1F) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1F) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
				{
				this.state = 4857;
				this.uid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cursorStatement(): CursorStatementContext {
		let localctx: CursorStatementContext = new CursorStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 408, MySqlParser.RULE_cursorStatement);
		let _la: number;
		try {
			this.state = 4875;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 361:
				localctx = new CloseCursorContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4860;
				this.match(MySqlParser.CLOSE);
				this.state = 4861;
				this.uid();
				}
				break;
			case 64:
				localctx = new FetchCursorContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4862;
				this.match(MySqlParser.FETCH);
				this.state = 4867;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 707, this._ctx) ) {
				case 1:
					{
					this.state = 4864;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===520) {
						{
						this.state = 4863;
						this.match(MySqlParser.NEXT);
						}
					}

					this.state = 4866;
					this.match(MySqlParser.FROM);
					}
					break;
				}
				this.state = 4869;
				this.uid();
				this.state = 4870;
				this.match(MySqlParser.INTO);
				this.state = 4871;
				this.uidList();
				}
				break;
			case 539:
				localctx = new OpenCursorContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4873;
				this.match(MySqlParser.OPEN);
				this.state = 4874;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public declareVariable(): DeclareVariableContext {
		let localctx: DeclareVariableContext = new DeclareVariableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 410, MySqlParser.RULE_declareVariable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4877;
			this.match(MySqlParser.DECLARE);
			this.state = 4878;
			this.uidList();
			this.state = 4879;
			this.dataType();
			this.state = 4882;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===42) {
				{
				this.state = 4880;
				this.match(MySqlParser.DEFAULT);
				this.state = 4881;
				this.expression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public declareCondition(): DeclareConditionContext {
		let localctx: DeclareConditionContext = new DeclareConditionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 412, MySqlParser.RULE_declareCondition);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4884;
			this.match(MySqlParser.DECLARE);
			this.state = 4885;
			this.uid();
			this.state = 4886;
			this.match(MySqlParser.CONDITION);
			this.state = 4887;
			this.match(MySqlParser.FOR);
			this.state = 4894;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1138:
			case 1139:
			case 1140:
			case 1149:
			case 1151:
				{
				this.state = 4888;
				this.decimalLiteral();
				}
				break;
			case 162:
				{
				this.state = 4889;
				this.match(MySqlParser.SQLSTATE);
				this.state = 4891;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===669) {
					{
					this.state = 4890;
					this.match(MySqlParser.VALUE);
					}
				}

				this.state = 4893;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public declareCursor(): DeclareCursorContext {
		let localctx: DeclareCursorContext = new DeclareCursorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 414, MySqlParser.RULE_declareCursor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4896;
			this.match(MySqlParser.DECLARE);
			this.state = 4897;
			this.uid();
			this.state = 4898;
			this.match(MySqlParser.CURSOR);
			this.state = 4899;
			this.match(MySqlParser.FOR);
			this.state = 4900;
			this.selectStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public declareHandler(): DeclareHandlerContext {
		let localctx: DeclareHandlerContext = new DeclareHandlerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 416, MySqlParser.RULE_declareHandler);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4902;
			this.match(MySqlParser.DECLARE);
			this.state = 4903;
			localctx._handlerAction = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===31 || _la===61 || _la===179)) {
			    localctx._handlerAction = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4904;
			this.match(MySqlParser.HANDLER);
			this.state = 4905;
			this.match(MySqlParser.FOR);
			this.state = 4906;
			this.handlerConditionValue();
			this.state = 4911;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 4907;
				this.match(MySqlParser.COMMA);
				this.state = 4908;
				this.handlerConditionValue();
				}
				}
				this.state = 4913;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4914;
			this.routineBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public handlerConditionValue(): HandlerConditionValueContext {
		let localctx: HandlerConditionValueContext = new HandlerConditionValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 418, MySqlParser.RULE_handlerConditionValue);
		let _la: number;
		try {
			this.state = 4927;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1138:
			case 1139:
			case 1140:
			case 1149:
			case 1151:
				localctx = new HandlerConditionCodeContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4916;
				this.decimalLiteral();
				}
				break;
			case 162:
				localctx = new HandlerConditionStateContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4917;
				this.match(MySqlParser.SQLSTATE);
				this.state = 4919;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===669) {
					{
					this.state = 4918;
					this.match(MySqlParser.VALUE);
					}
				}

				this.state = 4921;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 11:
			case 14:
			case 18:
			case 29:
			case 35:
			case 37:
			case 39:
			case 42:
			case 48:
			case 55:
			case 57:
			case 59:
			case 73:
			case 77:
			case 79:
			case 85:
			case 94:
			case 97:
			case 117:
			case 121:
			case 124:
			case 130:
			case 140:
			case 141:
			case 148:
			case 150:
			case 158:
			case 168:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 226:
			case 234:
			case 237:
			case 239:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 365:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 371:
			case 372:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 382:
			case 383:
			case 384:
			case 385:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
			case 399:
			case 400:
			case 401:
			case 402:
			case 403:
			case 405:
			case 407:
			case 408:
			case 409:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 420:
			case 421:
			case 422:
			case 423:
			case 424:
			case 425:
			case 426:
			case 427:
			case 428:
			case 429:
			case 430:
			case 431:
			case 432:
			case 434:
			case 435:
			case 436:
			case 437:
			case 438:
			case 439:
			case 440:
			case 441:
			case 442:
			case 443:
			case 444:
			case 445:
			case 446:
			case 447:
			case 448:
			case 449:
			case 450:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			case 460:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 472:
			case 473:
			case 474:
			case 475:
			case 476:
			case 477:
			case 478:
			case 479:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 492:
			case 493:
			case 494:
			case 495:
			case 496:
			case 497:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 507:
			case 508:
			case 509:
			case 510:
			case 511:
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 518:
			case 519:
			case 520:
			case 521:
			case 523:
			case 527:
			case 528:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 534:
			case 535:
			case 536:
			case 537:
			case 538:
			case 539:
			case 540:
			case 541:
			case 542:
			case 543:
			case 544:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
			case 579:
			case 580:
			case 581:
			case 582:
			case 583:
			case 584:
			case 585:
			case 586:
			case 587:
			case 588:
			case 589:
			case 591:
			case 592:
			case 593:
			case 594:
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 616:
			case 617:
			case 618:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 624:
			case 625:
			case 626:
			case 627:
			case 628:
			case 629:
			case 630:
			case 631:
			case 632:
			case 633:
			case 634:
			case 635:
			case 636:
			case 638:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 656:
			case 657:
			case 658:
			case 659:
			case 660:
			case 661:
			case 662:
			case 663:
			case 664:
			case 665:
			case 666:
			case 667:
			case 668:
			case 669:
			case 670:
			case 671:
			case 672:
			case 673:
			case 674:
			case 675:
			case 677:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 684:
			case 685:
			case 686:
			case 687:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
			case 697:
			case 699:
			case 700:
			case 701:
			case 702:
			case 703:
			case 704:
			case 705:
			case 706:
			case 707:
			case 708:
			case 709:
			case 710:
			case 711:
			case 712:
			case 717:
			case 718:
			case 720:
			case 721:
			case 722:
			case 723:
			case 724:
			case 725:
			case 726:
			case 727:
			case 728:
			case 729:
			case 730:
			case 731:
			case 732:
			case 733:
			case 734:
			case 736:
			case 737:
			case 738:
			case 739:
			case 740:
			case 741:
			case 742:
			case 743:
			case 744:
			case 745:
			case 746:
			case 747:
			case 748:
			case 749:
			case 750:
			case 751:
			case 752:
			case 753:
			case 754:
			case 755:
			case 756:
			case 757:
			case 758:
			case 759:
			case 760:
			case 761:
			case 762:
			case 763:
			case 764:
			case 765:
			case 766:
			case 767:
			case 768:
			case 769:
			case 770:
			case 771:
			case 772:
			case 773:
			case 774:
			case 775:
			case 776:
			case 777:
			case 778:
			case 779:
			case 780:
			case 781:
			case 782:
			case 783:
			case 784:
			case 785:
			case 786:
			case 787:
			case 788:
			case 789:
			case 790:
			case 791:
			case 792:
			case 793:
			case 794:
			case 795:
			case 796:
			case 797:
			case 798:
			case 799:
			case 800:
			case 801:
			case 802:
			case 803:
			case 806:
			case 807:
			case 808:
			case 809:
			case 810:
			case 811:
			case 812:
			case 813:
			case 814:
			case 815:
			case 816:
			case 817:
			case 818:
			case 819:
			case 820:
			case 821:
			case 822:
			case 823:
			case 824:
			case 825:
			case 826:
			case 827:
			case 828:
			case 829:
			case 830:
			case 831:
			case 832:
			case 833:
			case 834:
			case 835:
			case 836:
			case 837:
			case 838:
			case 839:
			case 840:
			case 841:
			case 842:
			case 843:
			case 844:
			case 845:
			case 846:
			case 847:
			case 848:
			case 849:
			case 850:
			case 851:
			case 852:
			case 853:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			case 873:
			case 874:
			case 875:
			case 876:
			case 877:
			case 878:
			case 879:
			case 880:
			case 881:
			case 882:
			case 883:
			case 884:
			case 885:
			case 886:
			case 887:
			case 888:
			case 889:
			case 890:
			case 891:
			case 892:
			case 893:
			case 894:
			case 895:
			case 896:
			case 897:
			case 898:
			case 899:
			case 900:
			case 901:
			case 902:
			case 903:
			case 904:
			case 905:
			case 906:
			case 907:
			case 908:
			case 909:
			case 910:
			case 911:
			case 912:
			case 913:
			case 914:
			case 915:
			case 916:
			case 917:
			case 918:
			case 919:
			case 920:
			case 921:
			case 922:
			case 923:
			case 924:
			case 925:
			case 926:
			case 927:
			case 928:
			case 929:
			case 930:
			case 931:
			case 932:
			case 933:
			case 934:
			case 935:
			case 936:
			case 937:
			case 938:
			case 939:
			case 940:
			case 941:
			case 942:
			case 943:
			case 944:
			case 945:
			case 946:
			case 947:
			case 948:
			case 949:
			case 950:
			case 951:
			case 952:
			case 953:
			case 954:
			case 955:
			case 956:
			case 957:
			case 958:
			case 959:
			case 960:
			case 961:
			case 962:
			case 963:
			case 964:
			case 965:
			case 966:
			case 967:
			case 968:
			case 969:
			case 970:
			case 971:
			case 972:
			case 973:
			case 974:
			case 975:
			case 976:
			case 977:
			case 978:
			case 979:
			case 980:
			case 981:
			case 982:
			case 983:
			case 984:
			case 985:
			case 986:
			case 987:
			case 988:
			case 989:
			case 990:
			case 991:
			case 992:
			case 993:
			case 994:
			case 995:
			case 996:
			case 997:
			case 998:
			case 999:
			case 1000:
			case 1001:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
			case 1007:
			case 1008:
			case 1009:
			case 1010:
			case 1011:
			case 1012:
			case 1013:
			case 1014:
			case 1015:
			case 1016:
			case 1017:
			case 1018:
			case 1019:
			case 1020:
			case 1021:
			case 1022:
			case 1023:
			case 1024:
			case 1025:
			case 1026:
			case 1027:
			case 1028:
			case 1029:
			case 1030:
			case 1031:
			case 1032:
			case 1033:
			case 1034:
			case 1035:
			case 1036:
			case 1037:
			case 1038:
			case 1039:
			case 1040:
			case 1041:
			case 1042:
			case 1043:
			case 1044:
			case 1045:
			case 1046:
			case 1047:
			case 1048:
			case 1049:
			case 1050:
			case 1051:
			case 1052:
			case 1053:
			case 1054:
			case 1055:
			case 1056:
			case 1057:
			case 1058:
			case 1059:
			case 1060:
			case 1061:
			case 1062:
			case 1063:
			case 1064:
			case 1065:
			case 1066:
			case 1067:
			case 1068:
			case 1069:
			case 1070:
			case 1071:
			case 1072:
			case 1073:
			case 1074:
			case 1075:
			case 1076:
			case 1077:
			case 1078:
			case 1079:
			case 1080:
			case 1081:
			case 1082:
			case 1083:
			case 1084:
			case 1085:
			case 1086:
			case 1087:
			case 1088:
			case 1089:
			case 1090:
			case 1091:
			case 1092:
			case 1093:
			case 1094:
			case 1095:
			case 1096:
			case 1097:
			case 1098:
			case 1099:
			case 1100:
			case 1101:
			case 1102:
			case 1103:
			case 1104:
			case 1105:
			case 1106:
			case 1107:
			case 1123:
			case 1145:
			case 1148:
			case 1156:
				localctx = new HandlerConditionNameContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4922;
				this.uid();
				}
				break;
			case 163:
				localctx = new HandlerConditionWarningContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4923;
				this.match(MySqlParser.SQLWARNING);
				}
				break;
			case 114:
				localctx = new HandlerConditionNotfoundContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4924;
				this.match(MySqlParser.NOT);
				this.state = 4925;
				this.match(MySqlParser.FOUND);
				}
				break;
			case 161:
				localctx = new HandlerConditionExceptionContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4926;
				this.match(MySqlParser.SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public procedureSqlStatement(): ProcedureSqlStatementContext {
		let localctx: ProcedureSqlStatementContext = new ProcedureSqlStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 420, MySqlParser.RULE_procedureSqlStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4931;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 715, this._ctx) ) {
			case 1:
				{
				this.state = 4929;
				this.compoundStatement();
				}
				break;
			case 2:
				{
				this.state = 4930;
				this.sqlStatement();
				}
				break;
			}
			this.state = 4933;
			this.match(MySqlParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseAlternative(): CaseAlternativeContext {
		let localctx: CaseAlternativeContext = new CaseAlternativeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 422, MySqlParser.RULE_caseAlternative);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4935;
			this.match(MySqlParser.WHEN);
			this.state = 4938;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 716, this._ctx) ) {
			case 1:
				{
				this.state = 4936;
				this.constant();
				}
				break;
			case 2:
				{
				this.state = 4937;
				this.expression(0);
				}
				break;
			}
			this.state = 4940;
			this.match(MySqlParser.THEN);
			this.state = 4942;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4941;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4944;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 717, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public elifAlternative(): ElifAlternativeContext {
		let localctx: ElifAlternativeContext = new ElifAlternativeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 424, MySqlParser.RULE_elifAlternative);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4946;
			this.match(MySqlParser.ELSEIF);
			this.state = 4947;
			this.expression(0);
			this.state = 4948;
			this.match(MySqlParser.THEN);
			this.state = 4950;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4949;
					this.procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4952;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 718, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterUser(): AlterUserContext {
		let localctx: AlterUserContext = new AlterUserContext(this, this._ctx, this.state);
		this.enterRule(localctx, 426, MySqlParser.RULE_alterUser);
		let _la: number;
		try {
			this.state = 5027;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 733, this._ctx) ) {
			case 1:
				localctx = new AlterUserMysqlV56Context(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4954;
				this.match(MySqlParser.ALTER);
				this.state = 4955;
				this.match(MySqlParser.USER);
				this.state = 4956;
				this.userSpecification();
				this.state = 4961;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 4957;
					this.match(MySqlParser.COMMA);
					this.state = 4958;
					this.userSpecification();
					}
					}
					this.state = 4963;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				localctx = new AlterUserMysqlV80Context(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4964;
				this.match(MySqlParser.ALTER);
				this.state = 4965;
				this.match(MySqlParser.USER);
				this.state = 4967;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===77) {
					{
					this.state = 4966;
					this.ifExists();
					}
				}

				this.state = 4969;
				this.userAuthOption();
				this.state = 4974;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 4970;
					this.match(MySqlParser.COMMA);
					this.state = 4971;
					this.userAuthOption();
					}
					}
					this.state = 4976;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===142) {
					{
					this.state = 4977;
					this.match(MySqlParser.REQUIRE);
					this.state = 4989;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 529:
						{
						this.state = 4978;
						(localctx as AlterUserMysqlV80Context)._tlsNone = this.match(MySqlParser.NONE);
						}
						break;
					case 167:
					case 358:
					case 465:
					case 640:
					case 680:
						{
						this.state = 4979;
						this.tlsOption();
						this.state = 4986;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la===10 || _la===167 || _la===358 || _la===465 || _la===640 || _la===680) {
							{
							{
							this.state = 4981;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la===10) {
								{
								this.state = 4980;
								this.match(MySqlParser.AND);
								}
							}

							this.state = 4983;
							this.tlsOption();
							}
							}
							this.state = 4988;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 4999;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 727, this._ctx) ) {
				case 1:
					{
					this.state = 4993;
					this.match(MySqlParser.WITH);
					this.state = 4995;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 4994;
						this.userResourceOption();
						}
						}
						this.state = 4997;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & 51) !== 0));
					}
					break;
				}
				this.state = 5005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===332 || _la===424 || _la===551 || _la===552) {
					{
					this.state = 5003;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 424:
					case 551:
					case 552:
						{
						this.state = 5001;
						this.userPasswordOption();
						}
						break;
					case 332:
						{
						this.state = 5002;
						this.userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 5007;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5012;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 368:
					{
					this.state = 5008;
					this.match(MySqlParser.COMMENT);
					this.state = 5009;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				case 14:
					{
					this.state = 5010;
					this.match(MySqlParser.ATTRIBUTE);
					this.state = 5011;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				case -1:
				case 7:
				case 9:
				case 20:
				case 24:
				case 26:
				case 33:
				case 44:
				case 45:
				case 46:
				case 51:
				case 62:
				case 71:
				case 72:
				case 85:
				case 93:
				case 102:
				case 103:
				case 119:
				case 132:
				case 138:
				case 139:
				case 141:
				case 143:
				case 147:
				case 152:
				case 153:
				case 155:
				case 156:
				case 172:
				case 182:
				case 184:
				case 186:
				case 188:
				case 192:
				case 344:
				case 345:
				case 351:
				case 356:
				case 369:
				case 390:
				case 399:
				case 432:
				case 442:
				case 444:
				case 456:
				case 560:
				case 580:
				case 589:
				case 597:
				case 604:
				case 629:
				case 635:
				case 656:
				case 661:
				case 681:
				case 708:
				case 739:
				case 1121:
				case 1133:
				case 1136:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				localctx = new AlterUserMysqlV80Context(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5014;
				this.match(MySqlParser.ALTER);
				this.state = 5015;
				this.match(MySqlParser.USER);
				this.state = 5017;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 731, this._ctx) ) {
				case 1:
					{
					this.state = 5016;
					this.ifExists();
					}
					break;
				}
				this.state = 5021;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 732, this._ctx) ) {
				case 1:
					{
					this.state = 5019;
					this.userName();
					}
					break;
				case 2:
					{
					this.state = 5020;
					this.uid();
					}
					break;
				}
				this.state = 5023;
				this.match(MySqlParser.DEFAULT);
				this.state = 5024;
				this.match(MySqlParser.ROLE);
				this.state = 5025;
				this.roleOption();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createUser(): CreateUserContext {
		let localctx: CreateUserContext = new CreateUserContext(this, this._ctx, this.state);
		this.enterRule(localctx, 428, MySqlParser.RULE_createUser);
		let _la: number;
		try {
			this.state = 5094;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 747, this._ctx) ) {
			case 1:
				localctx = new CreateUserMysqlV56Context(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5029;
				this.match(MySqlParser.CREATE);
				this.state = 5030;
				this.match(MySqlParser.USER);
				this.state = 5031;
				this.userAuthOption();
				this.state = 5036;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5032;
					this.match(MySqlParser.COMMA);
					this.state = 5033;
					this.userAuthOption();
					}
					}
					this.state = 5038;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				localctx = new CreateUserMysqlV80Context(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5039;
				this.match(MySqlParser.CREATE);
				this.state = 5040;
				this.match(MySqlParser.USER);
				this.state = 5042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===77) {
					{
					this.state = 5041;
					this.ifNotExists();
					}
				}

				this.state = 5044;
				this.userAuthOption();
				this.state = 5049;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5045;
					this.match(MySqlParser.COMMA);
					this.state = 5046;
					this.userAuthOption();
					}
					}
					this.state = 5051;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5055;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===42) {
					{
					this.state = 5052;
					this.match(MySqlParser.DEFAULT);
					this.state = 5053;
					this.match(MySqlParser.ROLE);
					this.state = 5054;
					this.roleOption();
					}
				}

				this.state = 5071;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===142) {
					{
					this.state = 5057;
					this.match(MySqlParser.REQUIRE);
					this.state = 5069;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 529:
						{
						this.state = 5058;
						(localctx as CreateUserMysqlV80Context)._tlsNone = this.match(MySqlParser.NONE);
						}
						break;
					case 167:
					case 358:
					case 465:
					case 640:
					case 680:
						{
						this.state = 5059;
						this.tlsOption();
						this.state = 5066;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la===10 || _la===167 || _la===358 || _la===465 || _la===640 || _la===680) {
							{
							{
							this.state = 5061;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la===10) {
								{
								this.state = 5060;
								this.match(MySqlParser.AND);
								}
							}

							this.state = 5063;
							this.tlsOption();
							}
							}
							this.state = 5068;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 5079;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 743, this._ctx) ) {
				case 1:
					{
					this.state = 5073;
					this.match(MySqlParser.WITH);
					this.state = 5075;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						{
						{
						this.state = 5074;
						this.userResourceOption();
						}
						}
						this.state = 5077;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (((((_la - 498)) & ~0x1F) === 0 && ((1 << (_la - 498)) & 51) !== 0));
					}
					break;
				}
				this.state = 5085;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===332 || _la===424 || _la===551 || _la===552) {
					{
					this.state = 5083;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 424:
					case 551:
					case 552:
						{
						this.state = 5081;
						this.userPasswordOption();
						}
						break;
					case 332:
						{
						this.state = 5082;
						this.userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 5087;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5092;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 368:
					{
					this.state = 5088;
					this.match(MySqlParser.COMMENT);
					this.state = 5089;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				case 14:
					{
					this.state = 5090;
					this.match(MySqlParser.ATTRIBUTE);
					this.state = 5091;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				case -1:
				case 7:
				case 9:
				case 20:
				case 24:
				case 26:
				case 33:
				case 44:
				case 45:
				case 46:
				case 51:
				case 62:
				case 71:
				case 72:
				case 85:
				case 93:
				case 102:
				case 103:
				case 119:
				case 132:
				case 138:
				case 139:
				case 141:
				case 143:
				case 147:
				case 152:
				case 153:
				case 155:
				case 156:
				case 172:
				case 182:
				case 184:
				case 186:
				case 188:
				case 192:
				case 344:
				case 345:
				case 351:
				case 356:
				case 369:
				case 390:
				case 399:
				case 432:
				case 442:
				case 444:
				case 456:
				case 560:
				case 580:
				case 589:
				case 597:
				case 604:
				case 629:
				case 635:
				case 656:
				case 661:
				case 681:
				case 708:
				case 739:
				case 1121:
				case 1133:
				case 1136:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropUser(): DropUserContext {
		let localctx: DropUserContext = new DropUserContext(this, this._ctx, this.state);
		this.enterRule(localctx, 430, MySqlParser.RULE_dropUser);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5096;
			this.match(MySqlParser.DROP);
			this.state = 5097;
			this.match(MySqlParser.USER);
			this.state = 5099;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===77) {
				{
				this.state = 5098;
				this.ifExists();
				}
			}

			this.state = 5101;
			this.userName();
			this.state = 5106;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 5102;
				this.match(MySqlParser.COMMA);
				this.state = 5103;
				this.userName();
				}
				}
				this.state = 5108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grantStatement(): GrantStatementContext {
		let localctx: GrantStatementContext = new GrantStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 432, MySqlParser.RULE_grantStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5202;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 768, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5109;
				this.match(MySqlParser.GRANT);
				this.state = 5110;
				this.privelegeClause();
				this.state = 5115;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5111;
					this.match(MySqlParser.COMMA);
					this.state = 5112;
					this.privelegeClause();
					}
					}
					this.state = 5117;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5118;
				this.match(MySqlParser.ON);
				this.state = 5120;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 751, this._ctx) ) {
				case 1:
					{
					this.state = 5119;
					localctx._privilegeObject = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===131 || _la===172 || _la===437)) {
					    localctx._privilegeObject = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				}
				this.state = 5122;
				this.privilegeLevel();
				this.state = 5123;
				this.match(MySqlParser.TO);
				this.state = 5124;
				this.userAuthOption();
				this.state = 5129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5125;
					this.match(MySqlParser.COMMA);
					this.state = 5126;
					this.userAuthOption();
					}
					}
					this.state = 5131;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===142) {
					{
					this.state = 5132;
					this.match(MySqlParser.REQUIRE);
					this.state = 5144;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 529:
						{
						this.state = 5133;
						localctx._tlsNone = this.match(MySqlParser.NONE);
						}
						break;
					case 167:
					case 358:
					case 465:
					case 640:
					case 680:
						{
						this.state = 5134;
						this.tlsOption();
						this.state = 5141;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la===10 || _la===167 || _la===358 || _la===465 || _la===640 || _la===680) {
							{
							{
							this.state = 5136;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la===10) {
								{
								this.state = 5135;
								this.match(MySqlParser.AND);
								}
							}

							this.state = 5138;
							this.tlsOption();
							}
							}
							this.state = 5143;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				this.state = 5157;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 759, this._ctx) ) {
				case 1:
					{
					this.state = 5148;
					this.match(MySqlParser.WITH);
					this.state = 5154;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 758, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							this.state = 5152;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case 72:
								{
								this.state = 5149;
								this.match(MySqlParser.GRANT);
								this.state = 5150;
								this.match(MySqlParser.OPTION);
								}
								break;
							case 498:
							case 499:
							case 502:
							case 503:
								{
								this.state = 5151;
								this.userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
						}
						this.state = 5156;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 758, this._ctx);
					}
					}
					break;
				}
				this.state = 5165;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===12) {
					{
					this.state = 5159;
					this.match(MySqlParser.AS);
					this.state = 5160;
					this.userName();
					this.state = 5161;
					this.match(MySqlParser.WITH);
					this.state = 5162;
					this.match(MySqlParser.ROLE);
					this.state = 5163;
					this.roleOption();
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5167;
				this.match(MySqlParser.GRANT);
				this.state = 5170;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 761, this._ctx) ) {
				case 1:
					{
					this.state = 5168;
					this.userName();
					}
					break;
				case 2:
					{
					this.state = 5169;
					this.uid();
					}
					break;
				}
				this.state = 5179;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5172;
					this.match(MySqlParser.COMMA);
					this.state = 5175;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 762, this._ctx) ) {
					case 1:
						{
						this.state = 5173;
						this.userName();
						}
						break;
					case 2:
						{
						this.state = 5174;
						this.uid();
						}
						break;
					}
					}
					}
					this.state = 5181;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5182;
				this.match(MySqlParser.TO);
				this.state = 5185;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 764, this._ctx) ) {
				case 1:
					{
					this.state = 5183;
					this.userName();
					}
					break;
				case 2:
					{
					this.state = 5184;
					this.uid();
					}
					break;
				}
				this.state = 5194;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5187;
					this.match(MySqlParser.COMMA);
					this.state = 5190;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 765, this._ctx) ) {
					case 1:
						{
						this.state = 5188;
						this.userName();
						}
						break;
					case 2:
						{
						this.state = 5189;
						this.uid();
						}
						break;
					}
					}
					}
					this.state = 5196;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5200;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 767, this._ctx) ) {
				case 1:
					{
					this.state = 5197;
					this.match(MySqlParser.WITH);
					this.state = 5198;
					this.match(MySqlParser.ADMIN);
					this.state = 5199;
					this.match(MySqlParser.OPTION);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleOption(): RoleOptionContext {
		let localctx: RoleOptionContext = new RoleOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 434, MySqlParser.RULE_roleOption);
		let _la: number;
		try {
			this.state = 5226;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 772, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5204;
				this.match(MySqlParser.DEFAULT);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5205;
				this.match(MySqlParser.NONE);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5206;
				this.match(MySqlParser.ALL);
				this.state = 5216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===59) {
					{
					this.state = 5207;
					this.match(MySqlParser.EXCEPT);
					this.state = 5208;
					this.userName();
					this.state = 5213;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1135) {
						{
						{
						this.state = 5209;
						this.match(MySqlParser.COMMA);
						this.state = 5210;
						this.userName();
						}
						}
						this.state = 5215;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5218;
				this.userName();
				this.state = 5223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5219;
					this.match(MySqlParser.COMMA);
					this.state = 5220;
					this.userName();
					}
					}
					this.state = 5225;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grantProxy(): GrantProxyContext {
		let localctx: GrantProxyContext = new GrantProxyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 436, MySqlParser.RULE_grantProxy);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5228;
			this.match(MySqlParser.GRANT);
			this.state = 5229;
			this.match(MySqlParser.PROXY);
			this.state = 5230;
			this.match(MySqlParser.ON);
			this.state = 5231;
			localctx._fromFirst = this.userName();
			this.state = 5232;
			this.match(MySqlParser.TO);
			this.state = 5233;
			localctx._toFirst = this.userName();
			this.state = 5238;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 5234;
				this.match(MySqlParser.COMMA);
				this.state = 5235;
				localctx._userName = this.userName();
				localctx._toOther.push(localctx._userName);
				}
				}
				this.state = 5240;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5244;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 774, this._ctx) ) {
			case 1:
				{
				this.state = 5241;
				this.match(MySqlParser.WITH);
				this.state = 5242;
				this.match(MySqlParser.GRANT);
				this.state = 5243;
				this.match(MySqlParser.OPTION);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public renameUser(): RenameUserContext {
		let localctx: RenameUserContext = new RenameUserContext(this, this._ctx, this.state);
		this.enterRule(localctx, 438, MySqlParser.RULE_renameUser);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5246;
			this.match(MySqlParser.RENAME);
			this.state = 5247;
			this.match(MySqlParser.USER);
			this.state = 5248;
			this.renameUserClause();
			this.state = 5253;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 5249;
				this.match(MySqlParser.COMMA);
				this.state = 5250;
				this.renameUserClause();
				}
				}
				this.state = 5255;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public revokeStatement(): RevokeStatementContext {
		let localctx: RevokeStatementContext = new RevokeStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 440, MySqlParser.RULE_revokeStatement);
		let _la: number;
		try {
			this.state = 5326;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 787, this._ctx) ) {
			case 1:
				localctx = new DetailRevokeContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5256;
				this.match(MySqlParser.REVOKE);
				this.state = 5257;
				this.privelegeClause();
				this.state = 5262;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5258;
					this.match(MySqlParser.COMMA);
					this.state = 5259;
					this.privelegeClause();
					}
					}
					this.state = 5264;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5265;
				this.match(MySqlParser.ON);
				this.state = 5267;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 777, this._ctx) ) {
				case 1:
					{
					this.state = 5266;
					(localctx as DetailRevokeContext)._privilegeObject = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===131 || _la===172 || _la===437)) {
					    (localctx as DetailRevokeContext)._privilegeObject = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				}
				this.state = 5269;
				this.privilegeLevel();
				this.state = 5270;
				this.match(MySqlParser.FROM);
				this.state = 5271;
				this.userName();
				this.state = 5276;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5272;
					this.match(MySqlParser.COMMA);
					this.state = 5273;
					this.userName();
					}
					}
					this.state = 5278;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				localctx = new ShortRevokeContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5279;
				this.match(MySqlParser.REVOKE);
				this.state = 5280;
				this.match(MySqlParser.ALL);
				this.state = 5282;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===725) {
					{
					this.state = 5281;
					this.match(MySqlParser.PRIVILEGES);
					}
				}

				this.state = 5284;
				this.match(MySqlParser.COMMA);
				this.state = 5285;
				this.match(MySqlParser.GRANT);
				this.state = 5286;
				this.match(MySqlParser.OPTION);
				this.state = 5287;
				this.match(MySqlParser.FROM);
				this.state = 5288;
				this.userName();
				this.state = 5293;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5289;
					this.match(MySqlParser.COMMA);
					this.state = 5290;
					this.userName();
					}
					}
					this.state = 5295;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 3:
				localctx = new RoleRevokeContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5296;
				this.match(MySqlParser.REVOKE);
				this.state = 5299;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 781, this._ctx) ) {
				case 1:
					{
					this.state = 5297;
					this.userName();
					}
					break;
				case 2:
					{
					this.state = 5298;
					this.uid();
					}
					break;
				}
				this.state = 5308;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5301;
					this.match(MySqlParser.COMMA);
					this.state = 5304;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 782, this._ctx) ) {
					case 1:
						{
						this.state = 5302;
						this.userName();
						}
						break;
					case 2:
						{
						this.state = 5303;
						this.uid();
						}
						break;
					}
					}
					}
					this.state = 5310;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5311;
				this.match(MySqlParser.FROM);
				this.state = 5314;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 784, this._ctx) ) {
				case 1:
					{
					this.state = 5312;
					this.userName();
					}
					break;
				case 2:
					{
					this.state = 5313;
					this.uid();
					}
					break;
				}
				this.state = 5323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5316;
					this.match(MySqlParser.COMMA);
					this.state = 5319;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 785, this._ctx) ) {
					case 1:
						{
						this.state = 5317;
						this.userName();
						}
						break;
					case 2:
						{
						this.state = 5318;
						this.uid();
						}
						break;
					}
					}
					}
					this.state = 5325;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public revokeProxy(): RevokeProxyContext {
		let localctx: RevokeProxyContext = new RevokeProxyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 442, MySqlParser.RULE_revokeProxy);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5328;
			this.match(MySqlParser.REVOKE);
			this.state = 5329;
			this.match(MySqlParser.PROXY);
			this.state = 5330;
			this.match(MySqlParser.ON);
			this.state = 5331;
			localctx._onUser = this.userName();
			this.state = 5332;
			this.match(MySqlParser.FROM);
			this.state = 5333;
			localctx._fromFirst = this.userName();
			this.state = 5338;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 5334;
				this.match(MySqlParser.COMMA);
				this.state = 5335;
				localctx._userName = this.userName();
				localctx._fromOther.push(localctx._userName);
				}
				}
				this.state = 5340;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setPasswordStatement(): SetPasswordStatementContext {
		let localctx: SetPasswordStatementContext = new SetPasswordStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 444, MySqlParser.RULE_setPasswordStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5341;
			this.match(MySqlParser.SET);
			this.state = 5342;
			this.match(MySqlParser.PASSWORD);
			this.state = 5345;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===65) {
				{
				this.state = 5343;
				this.match(MySqlParser.FOR);
				this.state = 5344;
				this.userName();
				}
			}

			this.state = 5347;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 5350;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 535:
			case 551:
				{
				this.state = 5348;
				this.passwordFunctionClause();
				}
				break;
			case 1148:
				{
				this.state = 5349;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userSpecification(): UserSpecificationContext {
		let localctx: UserSpecificationContext = new UserSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 446, MySqlParser.RULE_userSpecification);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5352;
			this.userName();
			this.state = 5353;
			this.userPasswordOption();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userAuthOption(): UserAuthOptionContext {
		let localctx: UserAuthOptionContext = new UserAuthOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 448, MySqlParser.RULE_userAuthOption);
		try {
			this.state = 5380;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 791, this._ctx) ) {
			case 1:
				localctx = new HashAuthOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5355;
				this.userName();
				this.state = 5356;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 5357;
				this.match(MySqlParser.BY);
				this.state = 5358;
				this.match(MySqlParser.PASSWORD);
				this.state = 5359;
				(localctx as HashAuthOptionContext)._hashed = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 2:
				localctx = new RandomAuthOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5361;
				this.userName();
				this.state = 5362;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 5363;
				this.match(MySqlParser.BY);
				this.state = 5364;
				this.match(MySqlParser.RANDOM);
				this.state = 5365;
				this.match(MySqlParser.PASSWORD);
				this.state = 5366;
				this.authOptionClause();
				}
				break;
			case 3:
				localctx = new StringAuthOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5368;
				this.userName();
				this.state = 5369;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 5370;
				this.match(MySqlParser.BY);
				this.state = 5371;
				this.match(MySqlParser.STRING_LITERAL);
				this.state = 5372;
				this.authOptionClause();
				}
				break;
			case 4:
				localctx = new ModuleAuthOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5374;
				this.userName();
				this.state = 5375;
				this.match(MySqlParser.IDENTIFIED);
				this.state = 5376;
				this.match(MySqlParser.WITH);
				this.state = 5377;
				this.authenticationRule();
				}
				break;
			case 5:
				localctx = new SimpleAuthOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5379;
				this.userName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public authOptionClause(): AuthOptionClauseContext {
		let localctx: AuthOptionClauseContext = new AuthOptionClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 450, MySqlParser.RULE_authOptionClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5384;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 792, this._ctx) ) {
			case 1:
				{
				this.state = 5382;
				this.match(MySqlParser.REPLACE);
				this.state = 5383;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
			this.state = 5389;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 5386;
				this.match(MySqlParser.RETAIN);
				this.state = 5387;
				this.match(MySqlParser.CURRENT);
				this.state = 5388;
				this.match(MySqlParser.PASSWORD);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public authenticationRule(): AuthenticationRuleContext {
		let localctx: AuthenticationRuleContext = new AuthenticationRuleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 452, MySqlParser.RULE_authenticationRule);
		let _la: number;
		try {
			this.state = 5405;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 796, this._ctx) ) {
			case 1:
				localctx = new ModuleContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5391;
				this.authPlugin();
				this.state = 5399;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 795, this._ctx) ) {
				case 1:
					{
					this.state = 5392;
					_la = this._input.LA(1);
					if(!(_la===12 || _la===19 || _la===187)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 5396;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 1148:
						{
						this.state = 5393;
						this.match(MySqlParser.STRING_LITERAL);
						}
						break;
					case 991:
						{
						this.state = 5394;
						this.match(MySqlParser.RANDOM);
						this.state = 5395;
						this.match(MySqlParser.PASSWORD);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 5398;
					this.authOptionClause();
					}
					break;
				}
				}
				break;
			case 2:
				localctx = new PasswordModuleOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5401;
				this.authPlugin();
				this.state = 5402;
				this.match(MySqlParser.USING);
				this.state = 5403;
				this.passwordFunctionClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tlsOption(): TlsOptionContext {
		let localctx: TlsOptionContext = new TlsOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 454, MySqlParser.RULE_tlsOption);
		try {
			this.state = 5415;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 167:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5407;
				this.match(MySqlParser.SSL);
				}
				break;
			case 680:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5408;
				this.match(MySqlParser.X509);
				}
				break;
			case 358:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5409;
				this.match(MySqlParser.CIPHER);
				this.state = 5410;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 465:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5411;
				this.match(MySqlParser.ISSUER);
				this.state = 5412;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 640:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5413;
				this.match(MySqlParser.SUBJECT);
				this.state = 5414;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userResourceOption(): UserResourceOptionContext {
		let localctx: UserResourceOptionContext = new UserResourceOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 456, MySqlParser.RULE_userResourceOption);
		try {
			this.state = 5425;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 499:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5417;
				this.match(MySqlParser.MAX_QUERIES_PER_HOUR);
				this.state = 5418;
				this.decimalLiteral();
				}
				break;
			case 502:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5419;
				this.match(MySqlParser.MAX_UPDATES_PER_HOUR);
				this.state = 5420;
				this.decimalLiteral();
				}
				break;
			case 498:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5421;
				this.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR);
				this.state = 5422;
				this.decimalLiteral();
				}
				break;
			case 503:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5423;
				this.match(MySqlParser.MAX_USER_CONNECTIONS);
				this.state = 5424;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userPasswordOption(): UserPasswordOptionContext {
		let localctx: UserPasswordOptionContext = new UserPasswordOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 458, MySqlParser.RULE_userPasswordOption);
		let _la: number;
		try {
			this.state = 5465;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 804, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5427;
				this.match(MySqlParser.PASSWORD);
				this.state = 5428;
				this.match(MySqlParser.EXPIRE);
				this.state = 5435;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 42:
					{
					this.state = 5429;
					localctx._expireType = this.match(MySqlParser.DEFAULT);
					}
					break;
				case 519:
					{
					this.state = 5430;
					localctx._expireType = this.match(MySqlParser.NEVER);
					}
					break;
				case 86:
					{
					this.state = 5431;
					localctx._expireType = this.match(MySqlParser.INTERVAL);
					this.state = 5432;
					this.decimalLiteral();
					this.state = 5433;
					this.match(MySqlParser.DAY);
					}
					break;
				case -1:
				case 7:
				case 9:
				case 14:
				case 20:
				case 24:
				case 26:
				case 33:
				case 44:
				case 45:
				case 46:
				case 51:
				case 62:
				case 71:
				case 72:
				case 85:
				case 93:
				case 102:
				case 103:
				case 119:
				case 132:
				case 138:
				case 139:
				case 141:
				case 143:
				case 147:
				case 152:
				case 153:
				case 155:
				case 156:
				case 172:
				case 182:
				case 184:
				case 186:
				case 188:
				case 192:
				case 332:
				case 344:
				case 345:
				case 351:
				case 356:
				case 368:
				case 369:
				case 390:
				case 399:
				case 424:
				case 432:
				case 442:
				case 444:
				case 456:
				case 551:
				case 552:
				case 560:
				case 580:
				case 589:
				case 597:
				case 604:
				case 629:
				case 635:
				case 656:
				case 661:
				case 681:
				case 708:
				case 739:
				case 1121:
				case 1133:
				case 1135:
				case 1136:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5437;
				this.match(MySqlParser.PASSWORD);
				this.state = 5438;
				this.match(MySqlParser.HISTORY);
				this.state = 5441;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 42:
					{
					this.state = 5439;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				case 1138:
				case 1139:
				case 1140:
				case 1149:
				case 1151:
					{
					this.state = 5440;
					this.decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5443;
				this.match(MySqlParser.PASSWORD);
				this.state = 5444;
				this.match(MySqlParser.REUSE);
				this.state = 5445;
				this.match(MySqlParser.INTERVAL);
				this.state = 5450;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 42:
					{
					this.state = 5446;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				case 1138:
				case 1139:
				case 1140:
				case 1149:
				case 1151:
					{
					this.state = 5447;
					this.decimalLiteral();
					this.state = 5448;
					this.match(MySqlParser.DAY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5452;
				this.match(MySqlParser.PASSWORD);
				this.state = 5453;
				this.match(MySqlParser.REQUIRE);
				this.state = 5454;
				this.match(MySqlParser.CURRENT);
				this.state = 5456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===42 || _la===121) {
					{
					this.state = 5455;
					_la = this._input.LA(1);
					if(!(_la===42 || _la===121)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5458;
				this.match(MySqlParser.FAILED_LOGIN_ATTEMPTS);
				this.state = 5459;
				this.decimalLiteral();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5460;
				this.match(MySqlParser.PASSWORD_LOCK_TIME);
				this.state = 5463;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 1138:
				case 1139:
				case 1140:
				case 1149:
				case 1151:
					{
					this.state = 5461;
					this.decimalLiteral();
					}
					break;
				case 657:
					{
					this.state = 5462;
					this.match(MySqlParser.UNBOUNDED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userLockOption(): UserLockOptionContext {
		let localctx: UserLockOptionContext = new UserLockOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 460, MySqlParser.RULE_userLockOption);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5467;
			this.match(MySqlParser.ACCOUNT);
			this.state = 5468;
			localctx._lockType = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===103 || _la===182)) {
			    localctx._lockType = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privelegeClause(): PrivelegeClauseContext {
		let localctx: PrivelegeClauseContext = new PrivelegeClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 462, MySqlParser.RULE_privelegeClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5470;
			this.privilege();
			this.state = 5475;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1133) {
				{
				this.state = 5471;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5472;
				this.uidList();
				this.state = 5473;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privilege(): PrivilegeContext {
		let localctx: PrivilegeContext = new PrivilegeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 464, MySqlParser.RULE_privilege);
		let _la: number;
		try {
			this.state = 5570;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 810, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5477;
				this.match(MySqlParser.ALL);
				this.state = 5479;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===725) {
					{
					this.state = 5478;
					this.match(MySqlParser.PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5481;
				this.match(MySqlParser.ALTER);
				this.state = 5483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===733) {
					{
					this.state = 5482;
					this.match(MySqlParser.ROUTINE);
					}
				}

				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5485;
				this.match(MySqlParser.CREATE);
				this.state = 5493;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 649:
					{
					this.state = 5486;
					this.match(MySqlParser.TEMPORARY);
					this.state = 5487;
					this.match(MySqlParser.TABLES);
					}
					break;
				case 733:
					{
					this.state = 5488;
					this.match(MySqlParser.ROUTINE);
					}
					break;
				case 671:
					{
					this.state = 5489;
					this.match(MySqlParser.VIEW);
					}
					break;
				case 665:
					{
					this.state = 5490;
					this.match(MySqlParser.USER);
					}
					break;
				case 647:
					{
					this.state = 5491;
					this.match(MySqlParser.TABLESPACE);
					}
					break;
				case 596:
					{
					this.state = 5492;
					this.match(MySqlParser.ROLE);
					}
					break;
				case 118:
				case 1133:
				case 1135:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5495;
				this.match(MySqlParser.DELETE);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5496;
				this.match(MySqlParser.DROP);
				this.state = 5498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===596) {
					{
					this.state = 5497;
					this.match(MySqlParser.ROLE);
					}
				}

				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5500;
				this.match(MySqlParser.EVENT);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5501;
				this.match(MySqlParser.EXECUTE);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5502;
				this.match(MySqlParser.FILE);
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5503;
				this.match(MySqlParser.GRANT);
				this.state = 5504;
				this.match(MySqlParser.OPTION);
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 5505;
				this.match(MySqlParser.INDEX);
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 5506;
				this.match(MySqlParser.INSERT);
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 5507;
				this.match(MySqlParser.LOCK);
				this.state = 5508;
				this.match(MySqlParser.TABLES);
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 5509;
				this.match(MySqlParser.PROCESS);
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 5510;
				this.match(MySqlParser.PROXY);
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 5511;
				this.match(MySqlParser.REFERENCES);
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 5512;
				this.match(MySqlParser.RELOAD);
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 5513;
				this.match(MySqlParser.REPLICATION);
				this.state = 5514;
				_la = this._input.LA(1);
				if(!(_la===360 || _la===614)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 18:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 5515;
				this.match(MySqlParser.SELECT);
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 5516;
				this.match(MySqlParser.SHOW);
				this.state = 5517;
				_la = this._input.LA(1);
				if(!(_la===40 || _la===671)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 20:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 5518;
				this.match(MySqlParser.SHUTDOWN);
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 5519;
				this.match(MySqlParser.SUPER);
				}
				break;
			case 22:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 5520;
				this.match(MySqlParser.TRIGGER);
				}
				break;
			case 23:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 5521;
				this.match(MySqlParser.UPDATE);
				}
				break;
			case 24:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 5522;
				this.match(MySqlParser.USAGE);
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 5523;
				this.match(MySqlParser.APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case 26:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 5524;
				this.match(MySqlParser.AUDIT_ABORT_EXEMPT);
				}
				break;
			case 27:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 5525;
				this.match(MySqlParser.AUDIT_ADMIN);
				}
				break;
			case 28:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 5526;
				this.match(MySqlParser.AUTHENTICATION_POLICY_ADMIN);
				}
				break;
			case 29:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 5527;
				this.match(MySqlParser.BACKUP_ADMIN);
				}
				break;
			case 30:
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 5528;
				this.match(MySqlParser.BINLOG_ADMIN);
				}
				break;
			case 31:
				this.enterOuterAlt(localctx, 31);
				{
				this.state = 5529;
				this.match(MySqlParser.BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 32);
				{
				this.state = 5530;
				this.match(MySqlParser.CLONE_ADMIN);
				}
				break;
			case 33:
				this.enterOuterAlt(localctx, 33);
				{
				this.state = 5531;
				this.match(MySqlParser.CONNECTION_ADMIN);
				}
				break;
			case 34:
				this.enterOuterAlt(localctx, 34);
				{
				this.state = 5532;
				this.match(MySqlParser.ENCRYPTION_KEY_ADMIN);
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 35);
				{
				this.state = 5533;
				this.match(MySqlParser.FIREWALL_ADMIN);
				}
				break;
			case 36:
				this.enterOuterAlt(localctx, 36);
				{
				this.state = 5534;
				this.match(MySqlParser.FIREWALL_EXEMPT);
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 37);
				{
				this.state = 5535;
				this.match(MySqlParser.FIREWALL_USER);
				}
				break;
			case 38:
				this.enterOuterAlt(localctx, 38);
				{
				this.state = 5536;
				this.match(MySqlParser.FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case 39:
				this.enterOuterAlt(localctx, 39);
				{
				this.state = 5537;
				this.match(MySqlParser.FLUSH_STATUS);
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 40);
				{
				this.state = 5538;
				this.match(MySqlParser.FLUSH_TABLES);
				}
				break;
			case 41:
				this.enterOuterAlt(localctx, 41);
				{
				this.state = 5539;
				this.match(MySqlParser.FLUSH_USER_RESOURCES);
				}
				break;
			case 42:
				this.enterOuterAlt(localctx, 42);
				{
				this.state = 5540;
				this.match(MySqlParser.GROUP_REPLICATION_ADMIN);
				}
				break;
			case 43:
				this.enterOuterAlt(localctx, 43);
				{
				this.state = 5541;
				this.match(MySqlParser.INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 44);
				{
				this.state = 5542;
				this.match(MySqlParser.INNODB_REDO_LOG_ENABLE);
				}
				break;
			case 45:
				this.enterOuterAlt(localctx, 45);
				{
				this.state = 5543;
				this.match(MySqlParser.NDB_STORED_USER);
				}
				break;
			case 46:
				this.enterOuterAlt(localctx, 46);
				{
				this.state = 5544;
				this.match(MySqlParser.PASSWORDLESS_USER_ADMIN);
				}
				break;
			case 47:
				this.enterOuterAlt(localctx, 47);
				{
				this.state = 5545;
				this.match(MySqlParser.PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case 48:
				this.enterOuterAlt(localctx, 48);
				{
				this.state = 5546;
				this.match(MySqlParser.REPLICATION_APPLIER);
				}
				break;
			case 49:
				this.enterOuterAlt(localctx, 49);
				{
				this.state = 5547;
				this.match(MySqlParser.REPLICATION_SLAVE_ADMIN);
				}
				break;
			case 50:
				this.enterOuterAlt(localctx, 50);
				{
				this.state = 5548;
				this.match(MySqlParser.RESOURCE_GROUP_ADMIN);
				}
				break;
			case 51:
				this.enterOuterAlt(localctx, 51);
				{
				this.state = 5549;
				this.match(MySqlParser.RESOURCE_GROUP_USER);
				}
				break;
			case 52:
				this.enterOuterAlt(localctx, 52);
				{
				this.state = 5550;
				this.match(MySqlParser.ROLE_ADMIN);
				}
				break;
			case 53:
				this.enterOuterAlt(localctx, 53);
				{
				this.state = 5551;
				this.match(MySqlParser.SERVICE_CONNECTION_ADMIN);
				}
				break;
			case 54:
				this.enterOuterAlt(localctx, 54);
				{
				this.state = 5552;
				this.match(MySqlParser.SESSION_VARIABLES_ADMIN);
				}
				break;
			case 55:
				this.enterOuterAlt(localctx, 55);
				{
				this.state = 5553;
				this.match(MySqlParser.SET_USER_ID);
				}
				break;
			case 56:
				this.enterOuterAlt(localctx, 56);
				{
				this.state = 5554;
				this.match(MySqlParser.SKIP_QUERY_REWRITE);
				}
				break;
			case 57:
				this.enterOuterAlt(localctx, 57);
				{
				this.state = 5555;
				this.match(MySqlParser.SHOW_ROUTINE);
				}
				break;
			case 58:
				this.enterOuterAlt(localctx, 58);
				{
				this.state = 5556;
				this.match(MySqlParser.SYSTEM_USER);
				}
				break;
			case 59:
				this.enterOuterAlt(localctx, 59);
				{
				this.state = 5557;
				this.match(MySqlParser.SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case 60:
				this.enterOuterAlt(localctx, 60);
				{
				this.state = 5558;
				this.match(MySqlParser.TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case 61:
				this.enterOuterAlt(localctx, 61);
				{
				this.state = 5559;
				this.match(MySqlParser.TP_CONNECTION_ADMIN);
				}
				break;
			case 62:
				this.enterOuterAlt(localctx, 62);
				{
				this.state = 5560;
				this.match(MySqlParser.VERSION_TOKEN_ADMIN);
				}
				break;
			case 63:
				this.enterOuterAlt(localctx, 63);
				{
				this.state = 5561;
				this.match(MySqlParser.XA_RECOVER_ADMIN);
				}
				break;
			case 64:
				this.enterOuterAlt(localctx, 64);
				{
				this.state = 5562;
				this.match(MySqlParser.LOAD);
				this.state = 5563;
				this.match(MySqlParser.FROM);
				this.state = 5564;
				this.match(MySqlParser.S3);
				}
				break;
			case 65:
				this.enterOuterAlt(localctx, 65);
				{
				this.state = 5565;
				this.match(MySqlParser.SELECT);
				this.state = 5566;
				this.match(MySqlParser.INTO);
				this.state = 5567;
				this.match(MySqlParser.S3);
				}
				break;
			case 66:
				this.enterOuterAlt(localctx, 66);
				{
				this.state = 5568;
				this.match(MySqlParser.INVOKE);
				this.state = 5569;
				this.match(MySqlParser.LAMBDA);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privilegeLevel(): PrivilegeLevelContext {
		let localctx: PrivilegeLevelContext = new PrivilegeLevelContext(this, this._ctx, this.state);
		this.enterRule(localctx, 466, MySqlParser.RULE_privilegeLevel);
		try {
			this.state = 5588;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 811, this._ctx) ) {
			case 1:
				localctx = new CurrentSchemaPriviLevelContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5572;
				this.match(MySqlParser.STAR);
				}
				break;
			case 2:
				localctx = new GlobalPrivLevelContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5573;
				this.match(MySqlParser.STAR);
				this.state = 5574;
				this.match(MySqlParser.DOT);
				this.state = 5575;
				this.match(MySqlParser.STAR);
				}
				break;
			case 3:
				localctx = new DefiniteSchemaPrivLevelContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5576;
				this.uid();
				this.state = 5577;
				this.match(MySqlParser.DOT);
				this.state = 5578;
				this.match(MySqlParser.STAR);
				}
				break;
			case 4:
				localctx = new DefiniteFullTablePrivLevelContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5580;
				this.uid();
				this.state = 5581;
				this.match(MySqlParser.DOT);
				this.state = 5582;
				this.uid();
				}
				break;
			case 5:
				localctx = new DefiniteFullTablePrivLevel2Context(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5584;
				this.uid();
				this.state = 5585;
				this.dottedId();
				}
				break;
			case 6:
				localctx = new DefiniteTablePrivLevelContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5587;
				this.uid();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public renameUserClause(): RenameUserClauseContext {
		let localctx: RenameUserClauseContext = new RenameUserClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 468, MySqlParser.RULE_renameUserClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5590;
			localctx._fromFirst = this.userName();
			this.state = 5591;
			this.match(MySqlParser.TO);
			this.state = 5592;
			localctx._toFirst = this.userName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public analyzeTable(): AnalyzeTableContext {
		let localctx: AnalyzeTableContext = new AnalyzeTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 470, MySqlParser.RULE_analyzeTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5594;
			this.match(MySqlParser.ANALYZE);
			this.state = 5596;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115 || _la===474) {
				{
				this.state = 5595;
				localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===115 || _la===474)) {
				    localctx._actionOption = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 5598;
			_la = this._input.LA(1);
			if(!(_la===172 || _la===742)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5599;
			this.tables();
			this.state = 5617;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 815, this._ctx) ) {
			case 1:
				{
				this.state = 5600;
				this.match(MySqlParser.UPDATE);
				this.state = 5601;
				this.match(MySqlParser.HISTOGRAM);
				this.state = 5602;
				this.match(MySqlParser.ON);
				this.state = 5603;
				this.fullColumnName();
				this.state = 5608;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5604;
					this.match(MySqlParser.COMMA);
					this.state = 5605;
					this.fullColumnName();
					}
					}
					this.state = 5610;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5615;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 814, this._ctx) ) {
				case 1:
					{
					this.state = 5611;
					this.match(MySqlParser.WITH);
					this.state = 5612;
					this.decimalLiteral();
					this.state = 5613;
					this.match(MySqlParser.BUCKETS);
					}
					break;
				}
				}
				break;
			}
			this.state = 5630;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 817, this._ctx) ) {
			case 1:
				{
				this.state = 5619;
				this.match(MySqlParser.DROP);
				this.state = 5620;
				this.match(MySqlParser.HISTOGRAM);
				this.state = 5621;
				this.match(MySqlParser.ON);
				this.state = 5622;
				this.fullColumnName();
				this.state = 5627;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5623;
					this.match(MySqlParser.COMMA);
					this.state = 5624;
					this.fullColumnName();
					}
					}
					this.state = 5629;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public checkTable(): CheckTableContext {
		let localctx: CheckTableContext = new CheckTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 472, MySqlParser.RULE_checkTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5632;
			this.match(MySqlParser.CHECK);
			this.state = 5633;
			this.match(MySqlParser.TABLE);
			this.state = 5634;
			this.tables();
			this.state = 5638;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===65 || _la===354 || _la===422 || _la===425 || _la===504 || _la===568) {
				{
				{
				this.state = 5635;
				this.checkTableOption();
				}
				}
				this.state = 5640;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public checksumTable(): ChecksumTableContext {
		let localctx: ChecksumTableContext = new ChecksumTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 474, MySqlParser.RULE_checksumTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5641;
			this.match(MySqlParser.CHECKSUM);
			this.state = 5642;
			this.match(MySqlParser.TABLE);
			this.state = 5643;
			this.tables();
			this.state = 5645;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===422 || _la===568) {
				{
				this.state = 5644;
				localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===422 || _la===568)) {
				    localctx._actionOption = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public optimizeTable(): OptimizeTableContext {
		let localctx: OptimizeTableContext = new OptimizeTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 476, MySqlParser.RULE_optimizeTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5647;
			this.match(MySqlParser.OPTIMIZE);
			this.state = 5649;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115 || _la===474) {
				{
				this.state = 5648;
				localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===115 || _la===474)) {
				    localctx._actionOption = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 5651;
			_la = this._input.LA(1);
			if(!(_la===172 || _la===742)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5652;
			this.tables();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public repairTable(): RepairTableContext {
		let localctx: RepairTableContext = new RepairTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 478, MySqlParser.RULE_repairTable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5654;
			this.match(MySqlParser.REPAIR);
			this.state = 5656;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115 || _la===474) {
				{
				this.state = 5655;
				localctx._actionOption = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===115 || _la===474)) {
				    localctx._actionOption = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 5658;
			this.match(MySqlParser.TABLE);
			this.state = 5659;
			this.tables();
			this.state = 5661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===568) {
				{
				this.state = 5660;
				this.match(MySqlParser.QUICK);
				}
			}

			this.state = 5664;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===422) {
				{
				this.state = 5663;
				this.match(MySqlParser.EXTENDED);
				}
			}

			this.state = 5667;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===666) {
				{
				this.state = 5666;
				this.match(MySqlParser.USE_FRM);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public checkTableOption(): CheckTableOptionContext {
		let localctx: CheckTableOptionContext = new CheckTableOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 480, MySqlParser.RULE_checkTableOption);
		try {
			this.state = 5676;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 65:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5669;
				this.match(MySqlParser.FOR);
				this.state = 5670;
				this.match(MySqlParser.UPGRADE);
				}
				break;
			case 568:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5671;
				this.match(MySqlParser.QUICK);
				}
				break;
			case 425:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5672;
				this.match(MySqlParser.FAST);
				}
				break;
			case 504:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5673;
				this.match(MySqlParser.MEDIUM);
				}
				break;
			case 422:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5674;
				this.match(MySqlParser.EXTENDED);
				}
				break;
			case 354:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5675;
				this.match(MySqlParser.CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createUdfunction(): CreateUdfunctionContext {
		let localctx: CreateUdfunctionContext = new CreateUdfunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 482, MySqlParser.RULE_createUdfunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5678;
			this.match(MySqlParser.CREATE);
			this.state = 5680;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===335) {
				{
				this.state = 5679;
				this.match(MySqlParser.AGGREGATE);
				}
			}

			this.state = 5682;
			this.match(MySqlParser.FUNCTION);
			this.state = 5684;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 827, this._ctx) ) {
			case 1:
				{
				this.state = 5683;
				this.ifNotExists();
				}
				break;
			}
			this.state = 5686;
			this.uid();
			this.state = 5687;
			this.match(MySqlParser.RETURNS);
			this.state = 5688;
			localctx._returnType = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(((((_la - 206)) & ~0x1F) === 0 && ((1 << (_la - 206)) & 261) !== 0) || _la===638)) {
			    localctx._returnType = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5689;
			this.match(MySqlParser.SONAME);
			this.state = 5690;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public installPlugin(): InstallPluginContext {
		let localctx: InstallPluginContext = new InstallPluginContext(this, this._ctx, this.state);
		this.enterRule(localctx, 484, MySqlParser.RULE_installPlugin);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5692;
			this.match(MySqlParser.INSTALL);
			this.state = 5693;
			this.match(MySqlParser.PLUGIN);
			this.state = 5694;
			this.uid();
			this.state = 5695;
			this.match(MySqlParser.SONAME);
			this.state = 5696;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public uninstallPlugin(): UninstallPluginContext {
		let localctx: UninstallPluginContext = new UninstallPluginContext(this, this._ctx, this.state);
		this.enterRule(localctx, 486, MySqlParser.RULE_uninstallPlugin);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5698;
			this.match(MySqlParser.UNINSTALL);
			this.state = 5699;
			this.match(MySqlParser.PLUGIN);
			this.state = 5700;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setStatement(): SetStatementContext {
		let localctx: SetStatementContext = new SetStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 488, MySqlParser.RULE_setStatement);
		let _la: number;
		try {
			this.state = 5754;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 835, this._ctx) ) {
			case 1:
				localctx = new SetVariableContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5702;
				this.match(MySqlParser.SET);
				this.state = 5703;
				this.variableClause();
				this.state = 5704;
				_la = this._input.LA(1);
				if(!(_la===1108 || _la===1124)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5707;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 828, this._ctx) ) {
				case 1:
					{
					this.state = 5705;
					this.expression(0);
					}
					break;
				case 2:
					{
					this.state = 5706;
					this.match(MySqlParser.ON);
					}
					break;
				}
				this.state = 5718;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5709;
					this.match(MySqlParser.COMMA);
					this.state = 5710;
					this.variableClause();
					this.state = 5711;
					_la = this._input.LA(1);
					if(!(_la===1108 || _la===1124)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 5714;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 829, this._ctx) ) {
					case 1:
						{
						this.state = 5712;
						this.expression(0);
						}
						break;
					case 2:
						{
						this.state = 5713;
						this.match(MySqlParser.ON);
						}
						break;
					}
					}
					}
					this.state = 5720;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				localctx = new SetCharsetContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5721;
				this.match(MySqlParser.SET);
				this.state = 5722;
				this.charSet();
				this.state = 5725;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 226:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 1145:
				case 1148:
					{
					this.state = 5723;
					this.charsetName();
					}
					break;
				case 42:
					{
					this.state = 5724;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				localctx = new SetNamesContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5727;
				this.match(MySqlParser.SET);
				this.state = 5728;
				this.match(MySqlParser.NAMES);
				this.state = 5735;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 226:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 1145:
				case 1148:
					{
					this.state = 5729;
					this.charsetName();
					this.state = 5732;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===27) {
						{
						this.state = 5730;
						this.match(MySqlParser.COLLATE);
						this.state = 5731;
						this.collationName();
						}
					}

					}
					break;
				case 42:
					{
					this.state = 5734;
					this.match(MySqlParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				localctx = new SetPasswordContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5737;
				this.setPasswordStatement();
				}
				break;
			case 5:
				localctx = new SetTransactionContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5738;
				this.setTransactionStatement();
				}
				break;
			case 6:
				localctx = new SetAutocommitContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5739;
				this.setAutocommitStatement();
				}
				break;
			case 7:
				localctx = new SetNewValueInsideTriggerContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5740;
				this.match(MySqlParser.SET);
				this.state = 5741;
				this.fullId();
				this.state = 5742;
				_la = this._input.LA(1);
				if(!(_la===1108 || _la===1124)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5743;
				this.expression(0);
				this.state = 5751;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5744;
					this.match(MySqlParser.COMMA);
					this.state = 5745;
					this.fullId();
					this.state = 5746;
					_la = this._input.LA(1);
					if(!(_la===1108 || _la===1124)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 5747;
					this.expression(0);
					}
					}
					this.state = 5753;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showStatement(): ShowStatementContext {
		let localctx: ShowStatementContext = new ShowStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 490, MySqlParser.RULE_showStatement);
		let _la: number;
		try {
			this.state = 5909;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 858, this._ctx) ) {
			case 1:
				localctx = new ShowMasterLogsContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5756;
				this.match(MySqlParser.SHOW);
				this.state = 5757;
				(localctx as ShowMasterLogsContext)._logFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===226 || _la===477)) {
				    (localctx as ShowMasterLogsContext)._logFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5758;
				this.match(MySqlParser.LOGS);
				}
				break;
			case 2:
				localctx = new ShowLogEventsContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5759;
				this.match(MySqlParser.SHOW);
				this.state = 5760;
				(localctx as ShowLogEventsContext)._logFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===345 || _la===577)) {
				    (localctx as ShowLogEventsContext)._logFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5761;
				this.match(MySqlParser.EVENTS);
				this.state = 5764;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===80) {
					{
					this.state = 5762;
					this.match(MySqlParser.IN);
					this.state = 5763;
					(localctx as ShowLogEventsContext)._filename = this.match(MySqlParser.STRING_LITERAL);
					}
				}

				this.state = 5768;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===68) {
					{
					this.state = 5766;
					this.match(MySqlParser.FROM);
					this.state = 5767;
					(localctx as ShowLogEventsContext)._fromPosition = this.decimalLiteral();
					}
				}

				this.state = 5777;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===99) {
					{
					this.state = 5770;
					this.match(MySqlParser.LIMIT);
					this.state = 5774;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 838, this._ctx) ) {
					case 1:
						{
						this.state = 5771;
						(localctx as ShowLogEventsContext)._offset = this.decimalLiteral();
						this.state = 5772;
						this.match(MySqlParser.COMMA);
						}
						break;
					}
					this.state = 5776;
					(localctx as ShowLogEventsContext)._rowCount = this.decimalLiteral();
					}
				}

				}
				break;
			case 3:
				localctx = new ShowObjectFilterContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5779;
				this.match(MySqlParser.SHOW);
				this.state = 5780;
				this.showCommonEntity();
				this.state = 5782;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===98 || _la===190) {
					{
					this.state = 5781;
					this.showFilter();
					}
				}

				}
				break;
			case 4:
				localctx = new ShowColumnsContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5784;
				this.match(MySqlParser.SHOW);
				this.state = 5786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===436) {
					{
					this.state = 5785;
					this.match(MySqlParser.FULL);
					}
				}

				this.state = 5788;
				(localctx as ShowColumnsContext)._columnsFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===365 || _la===427)) {
				    (localctx as ShowColumnsContext)._columnsFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5789;
				(localctx as ShowColumnsContext)._tableFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===68 || _la===80)) {
				    (localctx as ShowColumnsContext)._tableFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5790;
				this.tableName();
				this.state = 5793;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===68 || _la===80) {
					{
					this.state = 5791;
					(localctx as ShowColumnsContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===68 || _la===80)) {
					    (localctx as ShowColumnsContext)._schemaFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 5792;
					this.uid();
					}
				}

				this.state = 5796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===98 || _la===190) {
					{
					this.state = 5795;
					this.showFilter();
					}
				}

				}
				break;
			case 5:
				localctx = new ShowCreateDbContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5798;
				this.match(MySqlParser.SHOW);
				this.state = 5799;
				this.match(MySqlParser.CREATE);
				this.state = 5800;
				(localctx as ShowCreateDbContext)._schemaFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===39 || _la===150)) {
				    (localctx as ShowCreateDbContext)._schemaFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5802;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 844, this._ctx) ) {
				case 1:
					{
					this.state = 5801;
					this.ifNotExists();
					}
					break;
				}
				this.state = 5804;
				this.uid();
				}
				break;
			case 6:
				localctx = new ShowCreateFullIdObjectContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5805;
				this.match(MySqlParser.SHOW);
				this.state = 5806;
				this.match(MySqlParser.CREATE);
				this.state = 5807;
				(localctx as ShowCreateFullIdObjectContext)._namedEntity = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===131 || _la===172 || _la===177 || _la===415 || _la===437 || _la===671)) {
				    (localctx as ShowCreateFullIdObjectContext)._namedEntity = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5808;
				this.fullId();
				}
				break;
			case 7:
				localctx = new ShowCreateUserContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5809;
				this.match(MySqlParser.SHOW);
				this.state = 5810;
				this.match(MySqlParser.CREATE);
				this.state = 5811;
				this.match(MySqlParser.USER);
				this.state = 5812;
				this.userName();
				}
				break;
			case 8:
				localctx = new ShowEngineContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5813;
				this.match(MySqlParser.SHOW);
				this.state = 5814;
				this.match(MySqlParser.ENGINE);
				this.state = 5815;
				this.engineName();
				this.state = 5816;
				(localctx as ShowEngineContext)._engineOption = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===513 || _la===634)) {
				    (localctx as ShowEngineContext)._engineOption = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 9:
				localctx = new ShowGlobalInfoContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5818;
				this.match(MySqlParser.SHOW);
				this.state = 5819;
				this.showGlobalInfoClause();
				}
				break;
			case 10:
				localctx = new ShowErrorsContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 5820;
				this.match(MySqlParser.SHOW);
				this.state = 5821;
				(localctx as ShowErrorsContext)._errorFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===412 || _la===675)) {
				    (localctx as ShowErrorsContext)._errorFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5829;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===99) {
					{
					this.state = 5822;
					this.match(MySqlParser.LIMIT);
					this.state = 5826;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 845, this._ctx) ) {
					case 1:
						{
						this.state = 5823;
						(localctx as ShowErrorsContext)._offset = this.decimalLiteral();
						this.state = 5824;
						this.match(MySqlParser.COMMA);
						}
						break;
					}
					this.state = 5828;
					(localctx as ShowErrorsContext)._rowCount = this.decimalLiteral();
					}
				}

				}
				break;
			case 11:
				localctx = new ShowCountErrorsContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 5831;
				this.match(MySqlParser.SHOW);
				this.state = 5832;
				this.match(MySqlParser.COUNT);
				this.state = 5833;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 5834;
				this.match(MySqlParser.STAR);
				this.state = 5835;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 5836;
				(localctx as ShowCountErrorsContext)._errorFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===412 || _la===675)) {
				    (localctx as ShowCountErrorsContext)._errorFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 12:
				localctx = new ShowSchemaFilterContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 5837;
				this.match(MySqlParser.SHOW);
				this.state = 5838;
				this.showSchemaEntity();
				this.state = 5841;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===68 || _la===80) {
					{
					this.state = 5839;
					(localctx as ShowSchemaFilterContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===68 || _la===80)) {
					    (localctx as ShowSchemaFilterContext)._schemaFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 5840;
					this.uid();
					}
				}

				this.state = 5844;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===98 || _la===190) {
					{
					this.state = 5843;
					this.showFilter();
					}
				}

				}
				break;
			case 13:
				localctx = new ShowRoutineContext(this, localctx);
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 5846;
				this.match(MySqlParser.SHOW);
				this.state = 5847;
				(localctx as ShowRoutineContext)._routine = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===131 || _la===437)) {
				    (localctx as ShowRoutineContext)._routine = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5848;
				this.match(MySqlParser.CODE);
				this.state = 5849;
				this.fullId();
				}
				break;
			case 14:
				localctx = new ShowGrantsContext(this, localctx);
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 5850;
				this.match(MySqlParser.SHOW);
				this.state = 5851;
				this.match(MySqlParser.GRANTS);
				this.state = 5854;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===65) {
					{
					this.state = 5852;
					this.match(MySqlParser.FOR);
					this.state = 5853;
					this.userName();
					}
				}

				}
				break;
			case 15:
				localctx = new ShowIndexesContext(this, localctx);
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 5856;
				this.match(MySqlParser.SHOW);
				this.state = 5857;
				(localctx as ShowIndexesContext)._indexFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===81 || _la===92 || _la===452)) {
				    (localctx as ShowIndexesContext)._indexFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5858;
				(localctx as ShowIndexesContext)._tableFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===68 || _la===80)) {
				    (localctx as ShowIndexesContext)._tableFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5859;
				this.tableName();
				this.state = 5862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===68 || _la===80) {
					{
					this.state = 5860;
					(localctx as ShowIndexesContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===68 || _la===80)) {
					    (localctx as ShowIndexesContext)._schemaFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 5861;
					this.uid();
					}
				}

				this.state = 5866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===190) {
					{
					this.state = 5864;
					this.match(MySqlParser.WHERE);
					this.state = 5865;
					this.expression(0);
					}
				}

				}
				break;
			case 16:
				localctx = new ShowOpenTablesContext(this, localctx);
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 5868;
				this.match(MySqlParser.SHOW);
				this.state = 5869;
				this.match(MySqlParser.OPEN);
				this.state = 5870;
				this.match(MySqlParser.TABLES);
				this.state = 5873;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===68 || _la===80) {
					{
					this.state = 5871;
					(localctx as ShowOpenTablesContext)._schemaFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===68 || _la===80)) {
					    (localctx as ShowOpenTablesContext)._schemaFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 5872;
					this.uid();
					}
				}

				this.state = 5876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===98 || _la===190) {
					{
					this.state = 5875;
					this.showFilter();
					}
				}

				}
				break;
			case 17:
				localctx = new ShowProfileContext(this, localctx);
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 5878;
				this.match(MySqlParser.SHOW);
				this.state = 5879;
				this.match(MySqlParser.PROFILE);
				this.state = 5880;
				this.showProfileType();
				this.state = 5885;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 5881;
					this.match(MySqlParser.COMMA);
					this.state = 5882;
					this.showProfileType();
					}
					}
					this.state = 5887;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5891;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===65) {
					{
					this.state = 5888;
					this.match(MySqlParser.FOR);
					this.state = 5889;
					this.match(MySqlParser.QUERY);
					this.state = 5890;
					(localctx as ShowProfileContext)._queryCount = this.decimalLiteral();
					}
				}

				{
				this.state = 5893;
				this.match(MySqlParser.LIMIT);
				this.state = 5897;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 856, this._ctx) ) {
				case 1:
					{
					this.state = 5894;
					(localctx as ShowProfileContext)._offset = this.decimalLiteral();
					this.state = 5895;
					this.match(MySqlParser.COMMA);
					}
					break;
				}
				this.state = 5899;
				(localctx as ShowProfileContext)._rowCount = this.decimalLiteral();
				}
				}
				break;
			case 18:
				localctx = new ShowSlaveStatusContext(this, localctx);
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 5901;
				this.match(MySqlParser.SHOW);
				this.state = 5902;
				this.match(MySqlParser.SLAVE);
				this.state = 5903;
				this.match(MySqlParser.STATUS);
				this.state = 5907;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===65) {
					{
					this.state = 5904;
					this.match(MySqlParser.FOR);
					this.state = 5905;
					this.match(MySqlParser.CHANNEL);
					this.state = 5906;
					this.match(MySqlParser.STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public variableClause(): VariableClauseContext {
		let localctx: VariableClauseContext = new VariableClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 492, MySqlParser.RULE_variableClause);
		let _la: number;
		try {
			this.state = 5921;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1159:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5911;
				this.match(MySqlParser.LOCAL_ID);
				}
				break;
			case 1160:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5912;
				this.match(MySqlParser.GLOBAL_ID);
				}
				break;
			case 11:
			case 14:
			case 18:
			case 29:
			case 35:
			case 37:
			case 39:
			case 42:
			case 48:
			case 55:
			case 57:
			case 59:
			case 73:
			case 77:
			case 79:
			case 85:
			case 94:
			case 97:
			case 117:
			case 121:
			case 124:
			case 130:
			case 140:
			case 141:
			case 148:
			case 150:
			case 158:
			case 168:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 226:
			case 234:
			case 237:
			case 239:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 365:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 371:
			case 372:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 382:
			case 383:
			case 384:
			case 385:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
			case 399:
			case 400:
			case 401:
			case 402:
			case 403:
			case 405:
			case 407:
			case 408:
			case 409:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 420:
			case 421:
			case 422:
			case 423:
			case 424:
			case 425:
			case 426:
			case 427:
			case 428:
			case 429:
			case 430:
			case 431:
			case 432:
			case 434:
			case 435:
			case 436:
			case 437:
			case 438:
			case 439:
			case 440:
			case 441:
			case 442:
			case 443:
			case 444:
			case 445:
			case 446:
			case 447:
			case 448:
			case 449:
			case 450:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			case 460:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 472:
			case 473:
			case 474:
			case 475:
			case 476:
			case 477:
			case 478:
			case 479:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 492:
			case 493:
			case 494:
			case 495:
			case 496:
			case 497:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 507:
			case 508:
			case 509:
			case 510:
			case 511:
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 518:
			case 519:
			case 520:
			case 521:
			case 523:
			case 527:
			case 528:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 534:
			case 535:
			case 536:
			case 537:
			case 538:
			case 539:
			case 540:
			case 541:
			case 542:
			case 543:
			case 544:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
			case 579:
			case 580:
			case 581:
			case 582:
			case 583:
			case 584:
			case 585:
			case 586:
			case 587:
			case 588:
			case 589:
			case 591:
			case 592:
			case 593:
			case 594:
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 616:
			case 617:
			case 618:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 624:
			case 625:
			case 626:
			case 627:
			case 628:
			case 629:
			case 630:
			case 631:
			case 632:
			case 633:
			case 634:
			case 635:
			case 636:
			case 638:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 656:
			case 657:
			case 658:
			case 659:
			case 660:
			case 661:
			case 662:
			case 663:
			case 664:
			case 665:
			case 666:
			case 667:
			case 668:
			case 669:
			case 670:
			case 671:
			case 672:
			case 673:
			case 674:
			case 675:
			case 677:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 684:
			case 685:
			case 686:
			case 687:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
			case 697:
			case 699:
			case 700:
			case 701:
			case 702:
			case 703:
			case 704:
			case 705:
			case 706:
			case 707:
			case 708:
			case 709:
			case 710:
			case 711:
			case 712:
			case 717:
			case 718:
			case 720:
			case 721:
			case 722:
			case 723:
			case 724:
			case 725:
			case 726:
			case 727:
			case 728:
			case 729:
			case 730:
			case 731:
			case 732:
			case 733:
			case 734:
			case 736:
			case 737:
			case 738:
			case 739:
			case 740:
			case 741:
			case 742:
			case 743:
			case 744:
			case 745:
			case 746:
			case 747:
			case 748:
			case 749:
			case 750:
			case 751:
			case 752:
			case 753:
			case 754:
			case 755:
			case 756:
			case 757:
			case 758:
			case 759:
			case 760:
			case 761:
			case 762:
			case 763:
			case 764:
			case 765:
			case 766:
			case 767:
			case 768:
			case 769:
			case 770:
			case 771:
			case 772:
			case 773:
			case 774:
			case 775:
			case 776:
			case 777:
			case 778:
			case 779:
			case 780:
			case 781:
			case 782:
			case 783:
			case 784:
			case 785:
			case 786:
			case 787:
			case 788:
			case 789:
			case 790:
			case 791:
			case 792:
			case 793:
			case 794:
			case 795:
			case 796:
			case 797:
			case 798:
			case 799:
			case 800:
			case 801:
			case 802:
			case 803:
			case 806:
			case 807:
			case 808:
			case 809:
			case 810:
			case 811:
			case 812:
			case 813:
			case 814:
			case 815:
			case 816:
			case 817:
			case 818:
			case 819:
			case 820:
			case 821:
			case 822:
			case 823:
			case 824:
			case 825:
			case 826:
			case 827:
			case 828:
			case 829:
			case 830:
			case 831:
			case 832:
			case 833:
			case 834:
			case 835:
			case 836:
			case 837:
			case 838:
			case 839:
			case 840:
			case 841:
			case 842:
			case 843:
			case 844:
			case 845:
			case 846:
			case 847:
			case 848:
			case 849:
			case 850:
			case 851:
			case 852:
			case 853:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			case 873:
			case 874:
			case 875:
			case 876:
			case 877:
			case 878:
			case 879:
			case 880:
			case 881:
			case 882:
			case 883:
			case 884:
			case 885:
			case 886:
			case 887:
			case 888:
			case 889:
			case 890:
			case 891:
			case 892:
			case 893:
			case 894:
			case 895:
			case 896:
			case 897:
			case 898:
			case 899:
			case 900:
			case 901:
			case 902:
			case 903:
			case 904:
			case 905:
			case 906:
			case 907:
			case 908:
			case 909:
			case 910:
			case 911:
			case 912:
			case 913:
			case 914:
			case 915:
			case 916:
			case 917:
			case 918:
			case 919:
			case 920:
			case 921:
			case 922:
			case 923:
			case 924:
			case 925:
			case 926:
			case 927:
			case 928:
			case 929:
			case 930:
			case 931:
			case 932:
			case 933:
			case 934:
			case 935:
			case 936:
			case 937:
			case 938:
			case 939:
			case 940:
			case 941:
			case 942:
			case 943:
			case 944:
			case 945:
			case 946:
			case 947:
			case 948:
			case 949:
			case 950:
			case 951:
			case 952:
			case 953:
			case 954:
			case 955:
			case 956:
			case 957:
			case 958:
			case 959:
			case 960:
			case 961:
			case 962:
			case 963:
			case 964:
			case 965:
			case 966:
			case 967:
			case 968:
			case 969:
			case 970:
			case 971:
			case 972:
			case 973:
			case 974:
			case 975:
			case 976:
			case 977:
			case 978:
			case 979:
			case 980:
			case 981:
			case 982:
			case 983:
			case 984:
			case 985:
			case 986:
			case 987:
			case 988:
			case 989:
			case 990:
			case 991:
			case 992:
			case 993:
			case 994:
			case 995:
			case 996:
			case 997:
			case 998:
			case 999:
			case 1000:
			case 1001:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
			case 1007:
			case 1008:
			case 1009:
			case 1010:
			case 1011:
			case 1012:
			case 1013:
			case 1014:
			case 1015:
			case 1016:
			case 1017:
			case 1018:
			case 1019:
			case 1020:
			case 1021:
			case 1022:
			case 1023:
			case 1024:
			case 1025:
			case 1026:
			case 1027:
			case 1028:
			case 1029:
			case 1030:
			case 1031:
			case 1032:
			case 1033:
			case 1034:
			case 1035:
			case 1036:
			case 1037:
			case 1038:
			case 1039:
			case 1040:
			case 1041:
			case 1042:
			case 1043:
			case 1044:
			case 1045:
			case 1046:
			case 1047:
			case 1048:
			case 1049:
			case 1050:
			case 1051:
			case 1052:
			case 1053:
			case 1054:
			case 1055:
			case 1056:
			case 1057:
			case 1058:
			case 1059:
			case 1060:
			case 1061:
			case 1062:
			case 1063:
			case 1064:
			case 1065:
			case 1066:
			case 1067:
			case 1068:
			case 1069:
			case 1070:
			case 1071:
			case 1072:
			case 1073:
			case 1074:
			case 1075:
			case 1076:
			case 1077:
			case 1078:
			case 1079:
			case 1080:
			case 1081:
			case 1082:
			case 1083:
			case 1084:
			case 1085:
			case 1086:
			case 1087:
			case 1088:
			case 1089:
			case 1090:
			case 1091:
			case 1092:
			case 1093:
			case 1094:
			case 1095:
			case 1096:
			case 1097:
			case 1098:
			case 1099:
			case 1100:
			case 1101:
			case 1102:
			case 1103:
			case 1104:
			case 1105:
			case 1106:
			case 1107:
			case 1123:
			case 1137:
			case 1145:
			case 1148:
			case 1156:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5918;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 860, this._ctx) ) {
				case 1:
					{
					this.state = 5915;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===1137) {
						{
						this.state = 5913;
						this.match(MySqlParser.AT_SIGN);
						this.state = 5914;
						this.match(MySqlParser.AT_SIGN);
						}
					}

					this.state = 5917;
					_la = this._input.LA(1);
					if(!(_la===439 || _la===474 || _la===609)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				}
				this.state = 5920;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showCommonEntity(): ShowCommonEntityContext {
		let localctx: ShowCommonEntityContext = new ShowCommonEntityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 494, MySqlParser.RULE_showCommonEntity);
		let _la: number;
		try {
			this.state = 5936;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 25:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5923;
				this.match(MySqlParser.CHARACTER);
				this.state = 5924;
				this.match(MySqlParser.SET);
				}
				break;
			case 844:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5925;
				this.match(MySqlParser.COLLATION);
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5926;
				this.match(MySqlParser.DATABASES);
				}
				break;
			case 151:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5927;
				this.match(MySqlParser.SCHEMAS);
				}
				break;
			case 437:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5928;
				this.match(MySqlParser.FUNCTION);
				this.state = 5929;
				this.match(MySqlParser.STATUS);
				}
				break;
			case 131:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5930;
				this.match(MySqlParser.PROCEDURE);
				this.state = 5931;
				this.match(MySqlParser.STATUS);
				}
				break;
			case 439:
			case 609:
			case 634:
			case 670:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5933;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===439 || _la===609) {
					{
					this.state = 5932;
					_la = this._input.LA(1);
					if(!(_la===439 || _la===609)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 5935;
				_la = this._input.LA(1);
				if(!(_la===634 || _la===670)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showFilter(): ShowFilterContext {
		let localctx: ShowFilterContext = new ShowFilterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 496, MySqlParser.RULE_showFilter);
		try {
			this.state = 5942;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 98:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5938;
				this.match(MySqlParser.LIKE);
				this.state = 5939;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 190:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5940;
				this.match(MySqlParser.WHERE);
				this.state = 5941;
				this.expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showGlobalInfoClause(): ShowGlobalInfoClauseContext {
		let localctx: ShowGlobalInfoClauseContext = new ShowGlobalInfoClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 498, MySqlParser.RULE_showGlobalInfoClause);
		let _la: number;
		try {
			this.state = 5961;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 410:
			case 636:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5945;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===636) {
					{
					this.state = 5944;
					this.match(MySqlParser.STORAGE);
					}
				}

				this.state = 5947;
				this.match(MySqlParser.ENGINES);
				}
				break;
			case 477:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5948;
				this.match(MySqlParser.MASTER);
				this.state = 5949;
				this.match(MySqlParser.STATUS);
				}
				break;
			case 556:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5950;
				this.match(MySqlParser.PLUGINS);
				}
				break;
			case 725:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5951;
				this.match(MySqlParser.PRIVILEGES);
				}
				break;
			case 436:
			case 563:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5953;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===436) {
					{
					this.state = 5952;
					this.match(MySqlParser.FULL);
					}
				}

				this.state = 5955;
				this.match(MySqlParser.PROCESSLIST);
				}
				break;
			case 565:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5956;
				this.match(MySqlParser.PROFILES);
				}
				break;
			case 614:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5957;
				this.match(MySqlParser.SLAVE);
				this.state = 5958;
				this.match(MySqlParser.HOSTS);
				}
				break;
			case 339:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5959;
				this.match(MySqlParser.AUTHORS);
				}
				break;
			case 383:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5960;
				this.match(MySqlParser.CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showSchemaEntity(): ShowSchemaEntityContext {
		let localctx: ShowSchemaEntityContext = new ShowSchemaEntityContext(this, this._ctx, this.state);
		this.enterRule(localctx, 500, MySqlParser.RULE_showSchemaEntity);
		let _la: number;
		try {
			this.state = 5971;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 416:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5963;
				this.match(MySqlParser.EVENTS);
				}
				break;
			case 172:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5964;
				this.match(MySqlParser.TABLE);
				this.state = 5965;
				this.match(MySqlParser.STATUS);
				}
				break;
			case 436:
			case 742:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5967;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===436) {
					{
					this.state = 5966;
					this.match(MySqlParser.FULL);
					}
				}

				this.state = 5969;
				this.match(MySqlParser.TABLES);
				}
				break;
			case 655:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5970;
				this.match(MySqlParser.TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showProfileType(): ShowProfileTypeContext {
		let localctx: ShowProfileTypeContext = new ShowProfileTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 502, MySqlParser.RULE_showProfileType);
		try {
			this.state = 5985;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 6:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5973;
				this.match(MySqlParser.ALL);
				}
				break;
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5974;
				this.match(MySqlParser.BLOCK);
				this.state = 5975;
				this.match(MySqlParser.IO);
				}
				break;
			case 382:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 5976;
				this.match(MySqlParser.CONTEXT);
				this.state = 5977;
				this.match(MySqlParser.SWITCHES);
				}
				break;
			case 385:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 5978;
				this.match(MySqlParser.CPU);
				}
				break;
			case 463:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 5979;
				this.match(MySqlParser.IPC);
				}
				break;
			case 792:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 5980;
				this.match(MySqlParser.MEMORY);
				}
				break;
			case 544:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 5981;
				this.match(MySqlParser.PAGE);
				this.state = 5982;
				this.match(MySqlParser.FAULTS);
				}
				break;
			case 621:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 5983;
				this.match(MySqlParser.SOURCE);
				}
				break;
			case 644:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 5984;
				this.match(MySqlParser.SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public binlogStatement(): BinlogStatementContext {
		let localctx: BinlogStatementContext = new BinlogStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 504, MySqlParser.RULE_binlogStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5987;
			this.match(MySqlParser.BINLOG);
			this.state = 5988;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cacheIndexStatement(): CacheIndexStatementContext {
		let localctx: CacheIndexStatementContext = new CacheIndexStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 506, MySqlParser.RULE_cacheIndexStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5990;
			this.match(MySqlParser.CACHE);
			this.state = 5991;
			this.match(MySqlParser.INDEX);
			this.state = 5992;
			this.tableIndexes();
			this.state = 5997;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 5993;
				this.match(MySqlParser.COMMA);
				this.state = 5994;
				this.tableIndexes();
				}
				}
				this.state = 5999;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6007;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 6000;
				this.match(MySqlParser.PARTITION);
				this.state = 6001;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6004;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1145:
				case 1148:
				case 1156:
					{
					this.state = 6002;
					this.uidList();
					}
					break;
				case 6:
					{
					this.state = 6003;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6006;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 6009;
			this.match(MySqlParser.IN);
			this.state = 6010;
			localctx._schema = this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public flushStatement(): FlushStatementContext {
		let localctx: FlushStatementContext = new FlushStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 508, MySqlParser.RULE_flushStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6012;
			this.match(MySqlParser.FLUSH);
			this.state = 6014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===115 || _la===474) {
				{
				this.state = 6013;
				localctx._flushFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===115 || _la===474)) {
				    localctx._flushFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 6016;
			this.flushOption();
			this.state = 6021;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6017;
				this.match(MySqlParser.COMMA);
				this.state = 6018;
				this.flushOption();
				}
				}
				this.state = 6023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public killStatement(): KillStatementContext {
		let localctx: KillStatementContext = new KillStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 510, MySqlParser.RULE_killStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6024;
			this.match(MySqlParser.KILL);
			this.state = 6026;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 876, this._ctx) ) {
			case 1:
				{
				this.state = 6025;
				localctx._connectionFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===376 || _la===567)) {
				    localctx._connectionFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
			this.state = 6028;
			this.expression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public loadIndexIntoCache(): LoadIndexIntoCacheContext {
		let localctx: LoadIndexIntoCacheContext = new LoadIndexIntoCacheContext(this, this._ctx, this.state);
		this.enterRule(localctx, 512, MySqlParser.RULE_loadIndexIntoCache);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6030;
			this.match(MySqlParser.LOAD);
			this.state = 6031;
			this.match(MySqlParser.INDEX);
			this.state = 6032;
			this.match(MySqlParser.INTO);
			this.state = 6033;
			this.match(MySqlParser.CACHE);
			this.state = 6034;
			this.loadedTableIndexes();
			this.state = 6039;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6035;
				this.match(MySqlParser.COMMA);
				this.state = 6036;
				this.loadedTableIndexes();
				}
				}
				this.state = 6041;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resetStatement(): ResetStatementContext {
		let localctx: ResetStatementContext = new ResetStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 514, MySqlParser.RULE_resetStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6042;
			this.match(MySqlParser.RESET);
			this.state = 6043;
			this.match(MySqlParser.QUERY);
			this.state = 6044;
			this.match(MySqlParser.CACHE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public shutdownStatement(): ShutdownStatementContext {
		let localctx: ShutdownStatementContext = new ShutdownStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 516, MySqlParser.RULE_shutdownStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6046;
			this.match(MySqlParser.SHUTDOWN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableIndexes(): TableIndexesContext {
		let localctx: TableIndexesContext = new TableIndexesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 518, MySqlParser.RULE_tableIndexes);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6048;
			this.tableName();
			this.state = 6056;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===81 || _la===91 || _la===1133) {
				{
				this.state = 6050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===81 || _la===91) {
					{
					this.state = 6049;
					localctx._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===81 || _la===91)) {
					    localctx._indexFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 6052;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6053;
				this.uidList();
				this.state = 6054;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public flushOption(): FlushOptionContext {
		let localctx: FlushOptionContext = new FlushOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 520, MySqlParser.RULE_flushOption);
		let _la: number;
		try {
			this.state = 6090;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 886, this._ctx) ) {
			case 1:
				localctx = new SimpleFlushOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6076;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 394:
					{
					this.state = 6058;
					this.match(MySqlParser.DES_KEY_FILE);
					}
					break;
				case 447:
					{
					this.state = 6059;
					this.match(MySqlParser.HOSTS);
					}
					break;
				case 226:
				case 409:
				case 411:
				case 438:
				case 476:
				case 574:
				case 615:
					{
					this.state = 6061;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===226 || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & 536870917) !== 0) || _la===574 || _la===615) {
						{
						this.state = 6060;
						_la = this._input.LA(1);
						if(!(_la===226 || ((((_la - 409)) & ~0x1F) === 0 && ((1 << (_la - 409)) & 536870917) !== 0) || _la===574 || _la===615)) {
						this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
					}

					this.state = 6063;
					this.match(MySqlParser.LOGS);
					}
					break;
				case 540:
					{
					this.state = 6064;
					this.match(MySqlParser.OPTIMIZER_COSTS);
					}
					break;
				case 725:
					{
					this.state = 6065;
					this.match(MySqlParser.PRIVILEGES);
					}
					break;
				case 567:
					{
					this.state = 6066;
					this.match(MySqlParser.QUERY);
					this.state = 6067;
					this.match(MySqlParser.CACHE);
					}
					break;
				case 634:
					{
					this.state = 6068;
					this.match(MySqlParser.STATUS);
					}
					break;
				case 667:
					{
					this.state = 6069;
					this.match(MySqlParser.USER_RESOURCES);
					}
					break;
				case 742:
					{
					this.state = 6070;
					this.match(MySqlParser.TABLES);
					this.state = 6074;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 881, this._ctx) ) {
					case 1:
						{
						this.state = 6071;
						this.match(MySqlParser.WITH);
						this.state = 6072;
						this.match(MySqlParser.READ);
						this.state = 6073;
						this.match(MySqlParser.LOCK);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				localctx = new ChannelFlushOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6078;
				this.match(MySqlParser.RELAY);
				this.state = 6079;
				this.match(MySqlParser.LOGS);
				this.state = 6081;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===65) {
					{
					this.state = 6080;
					this.channelOption();
					}
				}

				}
				break;
			case 3:
				localctx = new TableFlushOptionContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6083;
				_la = this._input.LA(1);
				if(!(_la===172 || _la===742)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6085;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 884, this._ctx) ) {
				case 1:
					{
					this.state = 6084;
					this.tables();
					}
					break;
				}
				this.state = 6088;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 885, this._ctx) ) {
				case 1:
					{
					this.state = 6087;
					this.flushTableOption();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public flushTableOption(): FlushTableOptionContext {
		let localctx: FlushTableOptionContext = new FlushTableOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 522, MySqlParser.RULE_flushTableOption);
		try {
			this.state = 6097;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 192:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6092;
				this.match(MySqlParser.WITH);
				this.state = 6093;
				this.match(MySqlParser.READ);
				this.state = 6094;
				this.match(MySqlParser.LOCK);
				}
				break;
			case 65:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6095;
				this.match(MySqlParser.FOR);
				this.state = 6096;
				this.match(MySqlParser.EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public loadedTableIndexes(): LoadedTableIndexesContext {
		let localctx: LoadedTableIndexesContext = new LoadedTableIndexesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 524, MySqlParser.RULE_loadedTableIndexes);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6099;
			this.tableName();
			this.state = 6107;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 6100;
				this.match(MySqlParser.PARTITION);
				this.state = 6101;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6104;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1145:
				case 1148:
				case 1156:
					{
					this.state = 6102;
					localctx._partitionList = this.uidList();
					}
					break;
				case 6:
					{
					this.state = 6103;
					this.match(MySqlParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6106;
				this.match(MySqlParser.RR_BRACKET);
				}
			}

			this.state = 6116;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 891, this._ctx) ) {
			case 1:
				{
				this.state = 6110;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===81 || _la===91) {
					{
					this.state = 6109;
					localctx._indexFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===81 || _la===91)) {
					    localctx._indexFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				this.state = 6112;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6113;
				localctx._indexList = this.uidList();
				this.state = 6114;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
			this.state = 6120;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===78) {
				{
				this.state = 6118;
				this.match(MySqlParser.IGNORE);
				this.state = 6119;
				this.match(MySqlParser.LEAVES);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleDescribeStatement(): SimpleDescribeStatementContext {
		let localctx: SimpleDescribeStatementContext = new SimpleDescribeStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 526, MySqlParser.RULE_simpleDescribeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6122;
			localctx._command = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & 131075) !== 0))) {
			    localctx._command = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 6123;
			this.tableName();
			this.state = 6126;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 893, this._ctx) ) {
			case 1:
				{
				this.state = 6124;
				localctx._column = this.uid();
				}
				break;
			case 2:
				{
				this.state = 6125;
				localctx._pattern = this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullDescribeStatement(): FullDescribeStatementContext {
		let localctx: FullDescribeStatementContext = new FullDescribeStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 528, MySqlParser.RULE_fullDescribeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6128;
			localctx._command = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & 131075) !== 0))) {
			    localctx._command = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 6132;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===422 || _la===550 || _la===885) {
				{
				this.state = 6129;
				localctx._formatType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===422 || _la===550 || _la===885)) {
				    localctx._formatType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6130;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 6131;
				localctx._formatValue = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===466 || _la===652)) {
				    localctx._formatValue = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 6134;
			this.describeObjectClause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public helpStatement(): HelpStatementContext {
		let localctx: HelpStatementContext = new HelpStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 530, MySqlParser.RULE_helpStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6136;
			this.match(MySqlParser.HELP);
			this.state = 6137;
			this.match(MySqlParser.STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public useStatement(): UseStatementContext {
		let localctx: UseStatementContext = new UseStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 532, MySqlParser.RULE_useStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6139;
			this.match(MySqlParser.USE);
			this.state = 6140;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public signalStatement(): SignalStatementContext {
		let localctx: SignalStatementContext = new SignalStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 534, MySqlParser.RULE_signalStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6142;
			this.match(MySqlParser.SIGNAL);
			this.state = 6150;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 162:
				{
				{
				this.state = 6143;
				this.match(MySqlParser.SQLSTATE);
				this.state = 6145;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===669) {
					{
					this.state = 6144;
					this.match(MySqlParser.VALUE);
					}
				}

				this.state = 6147;
				this.stringLiteral();
				}
				}
				break;
			case 1156:
				{
				this.state = 6148;
				this.match(MySqlParser.ID);
				}
				break;
			case 1157:
				{
				this.state = 6149;
				this.match(MySqlParser.REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6161;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 898, this._ctx) ) {
			case 1:
				{
				this.state = 6152;
				this.match(MySqlParser.SET);
				this.state = 6153;
				this.signalConditionInformation();
				this.state = 6158;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 6154;
					this.match(MySqlParser.COMMA);
					this.state = 6155;
					this.signalConditionInformation();
					}
					}
					this.state = 6160;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resignalStatement(): ResignalStatementContext {
		let localctx: ResignalStatementContext = new ResignalStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 536, MySqlParser.RULE_resignalStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6163;
			this.match(MySqlParser.RESIGNAL);
			this.state = 6171;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 162:
				{
				{
				this.state = 6164;
				this.match(MySqlParser.SQLSTATE);
				this.state = 6166;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===669) {
					{
					this.state = 6165;
					this.match(MySqlParser.VALUE);
					}
				}

				this.state = 6168;
				this.stringLiteral();
				}
				}
				break;
			case 1156:
				{
				this.state = 6169;
				this.match(MySqlParser.ID);
				}
				break;
			case 1157:
				{
				this.state = 6170;
				this.match(MySqlParser.REVERSE_QUOTE_ID);
				}
				break;
			case -1:
			case 7:
			case 9:
			case 20:
			case 24:
			case 26:
			case 33:
			case 44:
			case 45:
			case 46:
			case 51:
			case 62:
			case 71:
			case 72:
			case 85:
			case 93:
			case 102:
			case 103:
			case 119:
			case 132:
			case 138:
			case 139:
			case 141:
			case 143:
			case 147:
			case 152:
			case 153:
			case 155:
			case 156:
			case 172:
			case 182:
			case 184:
			case 186:
			case 188:
			case 192:
			case 344:
			case 345:
			case 351:
			case 356:
			case 369:
			case 390:
			case 399:
			case 432:
			case 442:
			case 444:
			case 456:
			case 560:
			case 580:
			case 589:
			case 597:
			case 604:
			case 629:
			case 635:
			case 656:
			case 661:
			case 681:
			case 708:
			case 739:
			case 1121:
			case 1133:
			case 1136:
				break;
			default:
				break;
			}
			this.state = 6182;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 902, this._ctx) ) {
			case 1:
				{
				this.state = 6173;
				this.match(MySqlParser.SET);
				this.state = 6174;
				this.signalConditionInformation();
				this.state = 6179;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 6175;
					this.match(MySqlParser.COMMA);
					this.state = 6176;
					this.signalConditionInformation();
					}
					}
					this.state = 6181;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public signalConditionInformation(): SignalConditionInformationContext {
		let localctx: SignalConditionInformationContext = new SignalConditionInformationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 538, MySqlParser.RULE_signalConditionInformation);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6184;
			_la = this._input.LA(1);
			if(!(((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 272105729) !== 0) || _la===507 || _la===515 || _la===639 || _la===646 || _la===836 || _la===1005)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 6185;
			this.match(MySqlParser.EQUAL_SYMBOL);
			this.state = 6190;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1147:
			case 1148:
			case 1154:
				{
				this.state = 6186;
				this.stringLiteral();
				}
				break;
			case 1149:
				{
				this.state = 6187;
				this.match(MySqlParser.DECIMAL_LITERAL);
				}
				break;
			case 1159:
			case 1160:
				{
				this.state = 6188;
				this.mysqlVariable();
				}
				break;
			case 11:
			case 14:
			case 18:
			case 29:
			case 35:
			case 37:
			case 39:
			case 42:
			case 48:
			case 55:
			case 57:
			case 59:
			case 73:
			case 77:
			case 79:
			case 85:
			case 94:
			case 97:
			case 117:
			case 121:
			case 124:
			case 130:
			case 140:
			case 141:
			case 148:
			case 150:
			case 158:
			case 168:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 226:
			case 234:
			case 237:
			case 239:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 365:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 371:
			case 372:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 382:
			case 383:
			case 384:
			case 385:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
			case 399:
			case 400:
			case 401:
			case 402:
			case 403:
			case 405:
			case 407:
			case 408:
			case 409:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 420:
			case 421:
			case 422:
			case 423:
			case 424:
			case 425:
			case 426:
			case 427:
			case 428:
			case 429:
			case 430:
			case 431:
			case 432:
			case 434:
			case 435:
			case 436:
			case 437:
			case 438:
			case 439:
			case 440:
			case 441:
			case 442:
			case 443:
			case 444:
			case 445:
			case 446:
			case 447:
			case 448:
			case 449:
			case 450:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			case 460:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 472:
			case 473:
			case 474:
			case 475:
			case 476:
			case 477:
			case 478:
			case 479:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 492:
			case 493:
			case 494:
			case 495:
			case 496:
			case 497:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 507:
			case 508:
			case 509:
			case 510:
			case 511:
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 518:
			case 519:
			case 520:
			case 521:
			case 523:
			case 527:
			case 528:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 534:
			case 535:
			case 536:
			case 537:
			case 538:
			case 539:
			case 540:
			case 541:
			case 542:
			case 543:
			case 544:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
			case 579:
			case 580:
			case 581:
			case 582:
			case 583:
			case 584:
			case 585:
			case 586:
			case 587:
			case 588:
			case 589:
			case 591:
			case 592:
			case 593:
			case 594:
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 616:
			case 617:
			case 618:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 624:
			case 625:
			case 626:
			case 627:
			case 628:
			case 629:
			case 630:
			case 631:
			case 632:
			case 633:
			case 634:
			case 635:
			case 636:
			case 638:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 656:
			case 657:
			case 658:
			case 659:
			case 660:
			case 661:
			case 662:
			case 663:
			case 664:
			case 665:
			case 666:
			case 667:
			case 668:
			case 669:
			case 670:
			case 671:
			case 672:
			case 673:
			case 674:
			case 675:
			case 677:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 684:
			case 685:
			case 686:
			case 687:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
			case 697:
			case 699:
			case 700:
			case 701:
			case 702:
			case 703:
			case 704:
			case 705:
			case 706:
			case 707:
			case 708:
			case 709:
			case 710:
			case 711:
			case 712:
			case 717:
			case 718:
			case 720:
			case 721:
			case 722:
			case 723:
			case 724:
			case 725:
			case 726:
			case 727:
			case 728:
			case 729:
			case 730:
			case 731:
			case 732:
			case 733:
			case 734:
			case 736:
			case 737:
			case 738:
			case 739:
			case 740:
			case 741:
			case 742:
			case 743:
			case 744:
			case 745:
			case 746:
			case 747:
			case 748:
			case 749:
			case 750:
			case 751:
			case 752:
			case 753:
			case 754:
			case 755:
			case 756:
			case 757:
			case 758:
			case 759:
			case 760:
			case 761:
			case 762:
			case 763:
			case 764:
			case 765:
			case 766:
			case 767:
			case 768:
			case 769:
			case 770:
			case 771:
			case 772:
			case 773:
			case 774:
			case 775:
			case 776:
			case 777:
			case 778:
			case 779:
			case 780:
			case 781:
			case 782:
			case 783:
			case 784:
			case 785:
			case 786:
			case 787:
			case 788:
			case 789:
			case 790:
			case 791:
			case 792:
			case 793:
			case 794:
			case 795:
			case 796:
			case 797:
			case 798:
			case 799:
			case 800:
			case 801:
			case 802:
			case 803:
			case 806:
			case 807:
			case 808:
			case 809:
			case 810:
			case 811:
			case 812:
			case 813:
			case 814:
			case 815:
			case 816:
			case 817:
			case 818:
			case 819:
			case 820:
			case 821:
			case 822:
			case 823:
			case 824:
			case 825:
			case 826:
			case 827:
			case 828:
			case 829:
			case 830:
			case 831:
			case 832:
			case 833:
			case 834:
			case 835:
			case 836:
			case 837:
			case 838:
			case 839:
			case 840:
			case 841:
			case 842:
			case 843:
			case 844:
			case 845:
			case 846:
			case 847:
			case 848:
			case 849:
			case 850:
			case 851:
			case 852:
			case 853:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			case 873:
			case 874:
			case 875:
			case 876:
			case 877:
			case 878:
			case 879:
			case 880:
			case 881:
			case 882:
			case 883:
			case 884:
			case 885:
			case 886:
			case 887:
			case 888:
			case 889:
			case 890:
			case 891:
			case 892:
			case 893:
			case 894:
			case 895:
			case 896:
			case 897:
			case 898:
			case 899:
			case 900:
			case 901:
			case 902:
			case 903:
			case 904:
			case 905:
			case 906:
			case 907:
			case 908:
			case 909:
			case 910:
			case 911:
			case 912:
			case 913:
			case 914:
			case 915:
			case 916:
			case 917:
			case 918:
			case 919:
			case 920:
			case 921:
			case 922:
			case 923:
			case 924:
			case 925:
			case 926:
			case 927:
			case 928:
			case 929:
			case 930:
			case 931:
			case 932:
			case 933:
			case 934:
			case 935:
			case 936:
			case 937:
			case 938:
			case 939:
			case 940:
			case 941:
			case 942:
			case 943:
			case 944:
			case 945:
			case 946:
			case 947:
			case 948:
			case 949:
			case 950:
			case 951:
			case 952:
			case 953:
			case 954:
			case 955:
			case 956:
			case 957:
			case 958:
			case 959:
			case 960:
			case 961:
			case 962:
			case 963:
			case 964:
			case 965:
			case 966:
			case 967:
			case 968:
			case 969:
			case 970:
			case 971:
			case 972:
			case 973:
			case 974:
			case 975:
			case 976:
			case 977:
			case 978:
			case 979:
			case 980:
			case 981:
			case 982:
			case 983:
			case 984:
			case 985:
			case 986:
			case 987:
			case 988:
			case 989:
			case 990:
			case 991:
			case 992:
			case 993:
			case 994:
			case 995:
			case 996:
			case 997:
			case 998:
			case 999:
			case 1000:
			case 1001:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
			case 1007:
			case 1008:
			case 1009:
			case 1010:
			case 1011:
			case 1012:
			case 1013:
			case 1014:
			case 1015:
			case 1016:
			case 1017:
			case 1018:
			case 1019:
			case 1020:
			case 1021:
			case 1022:
			case 1023:
			case 1024:
			case 1025:
			case 1026:
			case 1027:
			case 1028:
			case 1029:
			case 1030:
			case 1031:
			case 1032:
			case 1033:
			case 1034:
			case 1035:
			case 1036:
			case 1037:
			case 1038:
			case 1039:
			case 1040:
			case 1041:
			case 1042:
			case 1043:
			case 1044:
			case 1045:
			case 1046:
			case 1047:
			case 1048:
			case 1049:
			case 1050:
			case 1051:
			case 1052:
			case 1053:
			case 1054:
			case 1055:
			case 1056:
			case 1057:
			case 1058:
			case 1059:
			case 1060:
			case 1061:
			case 1062:
			case 1063:
			case 1064:
			case 1065:
			case 1066:
			case 1067:
			case 1068:
			case 1069:
			case 1070:
			case 1071:
			case 1072:
			case 1073:
			case 1074:
			case 1075:
			case 1076:
			case 1077:
			case 1078:
			case 1079:
			case 1080:
			case 1081:
			case 1082:
			case 1083:
			case 1084:
			case 1085:
			case 1086:
			case 1087:
			case 1088:
			case 1089:
			case 1090:
			case 1091:
			case 1092:
			case 1093:
			case 1094:
			case 1095:
			case 1096:
			case 1097:
			case 1098:
			case 1099:
			case 1100:
			case 1101:
			case 1102:
			case 1103:
			case 1104:
			case 1105:
			case 1106:
			case 1107:
			case 1123:
			case 1156:
				{
				this.state = 6189;
				this.simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public withStatement(): WithStatementContext {
		let localctx: WithStatementContext = new WithStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 540, MySqlParser.RULE_withStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6192;
			this.match(MySqlParser.WITH);
			this.state = 6194;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 904, this._ctx) ) {
			case 1:
				{
				this.state = 6193;
				this.match(MySqlParser.RECURSIVE);
				}
				break;
			}
			this.state = 6196;
			this.commonTableExpressions();
			this.state = 6201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6197;
				this.match(MySqlParser.COMMA);
				this.state = 6198;
				this.commonTableExpressions();
				}
				}
				this.state = 6203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableStatement(): TableStatementContext {
		let localctx: TableStatementContext = new TableStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 542, MySqlParser.RULE_tableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6204;
			this.match(MySqlParser.TABLE);
			this.state = 6205;
			this.tableName();
			this.state = 6207;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===124) {
				{
				this.state = 6206;
				this.orderByClause();
				}
			}

			this.state = 6210;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===99) {
				{
				this.state = 6209;
				this.limitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public diagnosticsStatement(): DiagnosticsStatementContext {
		let localctx: DiagnosticsStatementContext = new DiagnosticsStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 544, MySqlParser.RULE_diagnosticsStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6212;
			this.match(MySqlParser.GET);
			this.state = 6214;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===35 || _la===168) {
				{
				this.state = 6213;
				_la = this._input.LA(1);
				if(!(_la===35 || _la===168)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			this.state = 6216;
			this.match(MySqlParser.DIAGNOSTICS);
			this.state = 6248;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 912, this._ctx) ) {
			case 1:
				{
				{
				this.state = 6217;
				this.variableClause();
				this.state = 6218;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 6219;
				_la = this._input.LA(1);
				if(!(_la===117 || _la===996)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6227;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 6220;
					this.match(MySqlParser.COMMA);
					this.state = 6221;
					this.variableClause();
					this.state = 6222;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 6223;
					_la = this._input.LA(1);
					if(!(_la===117 || _la===996)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					}
					this.state = 6229;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				this.state = 6230;
				this.match(MySqlParser.CONDITION);
				this.state = 6233;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 1138:
				case 1139:
				case 1140:
				case 1149:
				case 1151:
					{
					this.state = 6231;
					this.decimalLiteral();
					}
					break;
				case 11:
				case 14:
				case 18:
				case 29:
				case 35:
				case 37:
				case 39:
				case 42:
				case 48:
				case 55:
				case 57:
				case 59:
				case 73:
				case 77:
				case 79:
				case 85:
				case 94:
				case 97:
				case 117:
				case 121:
				case 124:
				case 130:
				case 140:
				case 141:
				case 148:
				case 150:
				case 158:
				case 168:
				case 217:
				case 218:
				case 219:
				case 220:
				case 221:
				case 226:
				case 234:
				case 237:
				case 239:
				case 251:
				case 252:
				case 253:
				case 254:
				case 255:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 327:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 340:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 360:
				case 361:
				case 362:
				case 363:
				case 364:
				case 365:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 399:
				case 400:
				case 401:
				case 402:
				case 403:
				case 405:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 415:
				case 416:
				case 417:
				case 418:
				case 419:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 430:
				case 431:
				case 432:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 447:
				case 448:
				case 449:
				case 450:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 478:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 486:
				case 487:
				case 488:
				case 489:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 497:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 513:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 523:
				case 527:
				case 528:
				case 529:
				case 530:
				case 531:
				case 532:
				case 533:
				case 534:
				case 535:
				case 536:
				case 537:
				case 538:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 558:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 570:
				case 571:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 582:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 616:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 638:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 644:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 663:
				case 664:
				case 665:
				case 666:
				case 667:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 697:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 717:
				case 718:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 744:
				case 745:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 755:
				case 756:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 786:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 809:
				case 810:
				case 811:
				case 812:
				case 813:
				case 814:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 823:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 839:
				case 840:
				case 841:
				case 842:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 866:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 874:
				case 875:
				case 876:
				case 877:
				case 878:
				case 879:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 887:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 898:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 943:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				case 963:
				case 964:
				case 965:
				case 966:
				case 967:
				case 968:
				case 969:
				case 970:
				case 971:
				case 972:
				case 973:
				case 974:
				case 975:
				case 976:
				case 977:
				case 978:
				case 979:
				case 980:
				case 981:
				case 982:
				case 983:
				case 984:
				case 985:
				case 986:
				case 987:
				case 988:
				case 989:
				case 990:
				case 991:
				case 992:
				case 993:
				case 994:
				case 995:
				case 996:
				case 997:
				case 998:
				case 999:
				case 1000:
				case 1001:
				case 1002:
				case 1003:
				case 1004:
				case 1005:
				case 1006:
				case 1007:
				case 1008:
				case 1009:
				case 1010:
				case 1011:
				case 1012:
				case 1013:
				case 1014:
				case 1015:
				case 1016:
				case 1017:
				case 1018:
				case 1019:
				case 1020:
				case 1021:
				case 1022:
				case 1023:
				case 1024:
				case 1025:
				case 1026:
				case 1027:
				case 1028:
				case 1029:
				case 1030:
				case 1031:
				case 1032:
				case 1033:
				case 1034:
				case 1035:
				case 1036:
				case 1037:
				case 1038:
				case 1039:
				case 1040:
				case 1041:
				case 1042:
				case 1043:
				case 1044:
				case 1045:
				case 1046:
				case 1047:
				case 1048:
				case 1049:
				case 1050:
				case 1051:
				case 1052:
				case 1053:
				case 1054:
				case 1055:
				case 1056:
				case 1057:
				case 1058:
				case 1059:
				case 1060:
				case 1061:
				case 1062:
				case 1063:
				case 1064:
				case 1065:
				case 1066:
				case 1067:
				case 1068:
				case 1069:
				case 1070:
				case 1071:
				case 1072:
				case 1073:
				case 1074:
				case 1075:
				case 1076:
				case 1077:
				case 1078:
				case 1079:
				case 1080:
				case 1081:
				case 1082:
				case 1083:
				case 1084:
				case 1085:
				case 1086:
				case 1087:
				case 1088:
				case 1089:
				case 1090:
				case 1091:
				case 1092:
				case 1093:
				case 1094:
				case 1095:
				case 1096:
				case 1097:
				case 1098:
				case 1099:
				case 1100:
				case 1101:
				case 1102:
				case 1103:
				case 1104:
				case 1105:
				case 1106:
				case 1107:
				case 1123:
				case 1137:
				case 1145:
				case 1148:
				case 1156:
				case 1159:
				case 1160:
					{
					this.state = 6232;
					this.variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6235;
				this.variableClause();
				this.state = 6236;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 6237;
				this.diagnosticsConditionInformationName();
				this.state = 6245;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 6238;
					this.match(MySqlParser.COMMA);
					this.state = 6239;
					this.variableClause();
					this.state = 6240;
					this.match(MySqlParser.EQUAL_SYMBOL);
					this.state = 6241;
					this.diagnosticsConditionInformationName();
					}
					}
					this.state = 6247;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public diagnosticsConditionInformationName(): DiagnosticsConditionInformationNameContext {
		let localctx: DiagnosticsConditionInformationNameContext = new DiagnosticsConditionInformationNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 546, MySqlParser.RULE_diagnosticsConditionInformationName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6250;
			_la = this._input.LA(1);
			if(!(((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 272105729) !== 0) || _la===507 || _la===515 || _la===592 || _la===639 || _la===646 || _la===836 || _la===1005)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public describeObjectClause(): DescribeObjectClauseContext {
		let localctx: DescribeObjectClauseContext = new DescribeObjectClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 548, MySqlParser.RULE_describeObjectClause);
		try {
			this.state = 6262;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 44:
			case 85:
			case 141:
			case 152:
			case 184:
			case 1133:
				localctx = new DescribeStatementsContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6257;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 152:
				case 1133:
					{
					this.state = 6252;
					this.selectStatement();
					}
					break;
				case 44:
					{
					this.state = 6253;
					this.deleteStatement();
					}
					break;
				case 85:
					{
					this.state = 6254;
					this.insertStatement();
					}
					break;
				case 141:
					{
					this.state = 6255;
					this.replaceStatement();
					}
					break;
				case 184:
					{
					this.state = 6256;
					this.updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 65:
				localctx = new DescribeConnectionContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6259;
				this.match(MySqlParser.FOR);
				this.state = 6260;
				this.match(MySqlParser.CONNECTION);
				this.state = 6261;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullId(): FullIdContext {
		let localctx: FullIdContext = new FullIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 550, MySqlParser.RULE_fullId);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6264;
			this.uid();
			this.state = 6268;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 915, this._ctx) ) {
			case 1:
				{
				this.state = 6265;
				this.match(MySqlParser.DOT_ID);
				}
				break;
			case 2:
				{
				this.state = 6266;
				this.match(MySqlParser.DOT);
				this.state = 6267;
				this.uid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableName(): TableNameContext {
		let localctx: TableNameContext = new TableNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 552, MySqlParser.RULE_tableName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6270;
			this.fullId();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public roleName(): RoleNameContext {
		let localctx: RoleNameContext = new RoleNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 554, MySqlParser.RULE_roleName);
		try {
			this.state = 6274;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 916, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6272;
				this.userName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6273;
				this.uid();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullColumnName(): FullColumnNameContext {
		let localctx: FullColumnNameContext = new FullColumnNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 556, MySqlParser.RULE_fullColumnName);
		try {
			this.state = 6290;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 921, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6276;
				this.uid();
				this.state = 6281;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 918, this._ctx) ) {
				case 1:
					{
					this.state = 6277;
					this.dottedId();
					this.state = 6279;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 917, this._ctx) ) {
					case 1:
						{
						this.state = 6278;
						this.dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6284;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 919, this._ctx) ) {
				case 1:
					{
					this.state = 6283;
					this.matchWildcard();
					}
					break;
				}
				this.state = 6286;
				this.dottedId();
				this.state = 6288;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 920, this._ctx) ) {
				case 1:
					{
					this.state = 6287;
					this.dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexColumnName(): IndexColumnNameContext {
		let localctx: IndexColumnNameContext = new IndexColumnNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 558, MySqlParser.RULE_indexColumnName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6303;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 924, this._ctx) ) {
			case 1:
				{
				this.state = 6294;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 922, this._ctx) ) {
				case 1:
					{
					this.state = 6292;
					this.uid();
					}
					break;
				case 2:
					{
					this.state = 6293;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				}
				this.state = 6300;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1133) {
					{
					this.state = 6296;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 6297;
					this.decimalLiteral();
					this.state = 6298;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				this.state = 6302;
				this.expression(0);
				}
				break;
			}
			this.state = 6306;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===13 || _la===45) {
				{
				this.state = 6305;
				localctx._sortType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===13 || _la===45)) {
				    localctx._sortType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleUserName(): SimpleUserNameContext {
		let localctx: SimpleUserNameContext = new SimpleUserNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 560, MySqlParser.RULE_simpleUserName);
		try {
			this.state = 6312;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 926, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6308;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6309;
				this.match(MySqlParser.ID);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6310;
				this.match(MySqlParser.ADMIN);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6311;
				this.keywordsCanBeId();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public hostName(): HostNameContext {
		let localctx: HostNameContext = new HostNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 562, MySqlParser.RULE_hostName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6314;
			_la = this._input.LA(1);
			if(!(((((_la - 1137)) & ~0x1F) === 0 && ((1 << (_la - 1137)) & 6291457) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userName(): UserNameContext {
		let localctx: UserNameContext = new UserNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 564, MySqlParser.RULE_userName);
		try {
			this.state = 6321;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 927, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6316;
				this.simpleUserName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6317;
				this.simpleUserName();
				this.state = 6318;
				this.hostName();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6320;
				this.currentUserExpression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public mysqlVariable(): MysqlVariableContext {
		let localctx: MysqlVariableContext = new MysqlVariableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 566, MySqlParser.RULE_mysqlVariable);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6323;
			_la = this._input.LA(1);
			if(!(_la===1159 || _la===1160)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charsetName(): CharsetNameContext {
		let localctx: CharsetNameContext = new CharsetNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 568, MySqlParser.RULE_charsetName);
		try {
			this.state = 6329;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 928, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6325;
				this.match(MySqlParser.BINARY);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6326;
				this.charsetNameBase();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6327;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6328;
				this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public collationName(): CollationNameContext {
		let localctx: CollationNameContext = new CollationNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 570, MySqlParser.RULE_collationName);
		try {
			this.state = 6333;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 929, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6331;
				this.uid();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6332;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public engineName(): EngineNameContext {
		let localctx: EngineNameContext = new EngineNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 572, MySqlParser.RULE_engineName);
		try {
			this.state = 6338;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 375:
			case 787:
			case 788:
			case 789:
			case 790:
			case 791:
			case 792:
			case 793:
			case 794:
			case 795:
			case 796:
			case 797:
			case 798:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6335;
				this.engineNameBase();
				}
				break;
			case 1156:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6336;
				this.match(MySqlParser.ID);
				}
				break;
			case 1148:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6337;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public engineNameBase(): EngineNameBaseContext {
		let localctx: EngineNameBaseContext = new EngineNameBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 574, MySqlParser.RULE_engineNameBase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6340;
			_la = this._input.LA(1);
			if(!(_la===375 || ((((_la - 787)) & ~0x1F) === 0 && ((1 << (_la - 787)) & 4095) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public uuidSet(): UuidSetContext {
		let localctx: UuidSetContext = new UuidSetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 576, MySqlParser.RULE_uuidSet);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6342;
			this.decimalLiteral();
			this.state = 6343;
			this.match(MySqlParser.MINUS);
			this.state = 6344;
			this.decimalLiteral();
			this.state = 6345;
			this.match(MySqlParser.MINUS);
			this.state = 6346;
			this.decimalLiteral();
			this.state = 6347;
			this.match(MySqlParser.MINUS);
			this.state = 6348;
			this.decimalLiteral();
			this.state = 6349;
			this.match(MySqlParser.MINUS);
			this.state = 6350;
			this.decimalLiteral();
			this.state = 6356;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6351;
				this.match(MySqlParser.COLON_SYMB);
				this.state = 6352;
				this.decimalLiteral();
				this.state = 6353;
				this.match(MySqlParser.MINUS);
				this.state = 6354;
				this.decimalLiteral();
				}
				}
				this.state = 6358;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===1144);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xid(): XidContext {
		let localctx: XidContext = new XidContext(this, this._ctx, this.state);
		this.enterRule(localctx, 578, MySqlParser.RULE_xid);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6360;
			localctx._globalTableUid = this.xuidStringId();
			this.state = 6367;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1135) {
				{
				this.state = 6361;
				this.match(MySqlParser.COMMA);
				this.state = 6362;
				localctx._qualifier = this.xuidStringId();
				this.state = 6365;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1135) {
					{
					this.state = 6363;
					this.match(MySqlParser.COMMA);
					this.state = 6364;
					localctx._idFormat = this.decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public xuidStringId(): XuidStringIdContext {
		let localctx: XuidStringIdContext = new XuidStringIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 580, MySqlParser.RULE_xuidStringId);
		let _la: number;
		try {
			this.state = 6376;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1148:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6369;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			case 1153:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6370;
				this.match(MySqlParser.BIT_STRING);
				}
				break;
			case 1150:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6371;
					this.match(MySqlParser.HEXADECIMAL_LITERAL);
					}
					}
					this.state = 6374;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===1150);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public authPlugin(): AuthPluginContext {
		let localctx: AuthPluginContext = new AuthPluginContext(this, this._ctx, this.state);
		this.enterRule(localctx, 582, MySqlParser.RULE_authPlugin);
		try {
			this.state = 6380;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 936, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6378;
				this.uid();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6379;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public uid(): UidContext {
		let localctx: UidContext = new UidContext(this, this._ctx, this.state);
		this.enterRule(localctx, 584, MySqlParser.RULE_uid);
		try {
			this.state = 6385;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 11:
			case 14:
			case 18:
			case 29:
			case 35:
			case 37:
			case 39:
			case 42:
			case 48:
			case 55:
			case 57:
			case 59:
			case 73:
			case 77:
			case 79:
			case 85:
			case 94:
			case 97:
			case 117:
			case 121:
			case 124:
			case 130:
			case 140:
			case 141:
			case 148:
			case 150:
			case 158:
			case 168:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 226:
			case 234:
			case 237:
			case 239:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 365:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 371:
			case 372:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 382:
			case 383:
			case 384:
			case 385:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
			case 399:
			case 400:
			case 401:
			case 402:
			case 403:
			case 405:
			case 407:
			case 408:
			case 409:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 420:
			case 421:
			case 422:
			case 423:
			case 424:
			case 425:
			case 426:
			case 427:
			case 428:
			case 429:
			case 430:
			case 431:
			case 432:
			case 434:
			case 435:
			case 436:
			case 437:
			case 438:
			case 439:
			case 440:
			case 441:
			case 442:
			case 443:
			case 444:
			case 445:
			case 446:
			case 447:
			case 448:
			case 449:
			case 450:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			case 460:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 472:
			case 473:
			case 474:
			case 475:
			case 476:
			case 477:
			case 478:
			case 479:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 492:
			case 493:
			case 494:
			case 495:
			case 496:
			case 497:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 507:
			case 508:
			case 509:
			case 510:
			case 511:
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 518:
			case 519:
			case 520:
			case 521:
			case 523:
			case 527:
			case 528:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 534:
			case 535:
			case 536:
			case 537:
			case 538:
			case 539:
			case 540:
			case 541:
			case 542:
			case 543:
			case 544:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
			case 579:
			case 580:
			case 581:
			case 582:
			case 583:
			case 584:
			case 585:
			case 586:
			case 587:
			case 588:
			case 589:
			case 591:
			case 592:
			case 593:
			case 594:
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 616:
			case 617:
			case 618:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 624:
			case 625:
			case 626:
			case 627:
			case 628:
			case 629:
			case 630:
			case 631:
			case 632:
			case 633:
			case 634:
			case 635:
			case 636:
			case 638:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 656:
			case 657:
			case 658:
			case 659:
			case 660:
			case 661:
			case 662:
			case 663:
			case 664:
			case 665:
			case 666:
			case 667:
			case 668:
			case 669:
			case 670:
			case 671:
			case 672:
			case 673:
			case 674:
			case 675:
			case 677:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 684:
			case 685:
			case 686:
			case 687:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
			case 697:
			case 699:
			case 700:
			case 701:
			case 702:
			case 703:
			case 704:
			case 705:
			case 706:
			case 707:
			case 708:
			case 709:
			case 710:
			case 711:
			case 712:
			case 717:
			case 718:
			case 720:
			case 721:
			case 722:
			case 723:
			case 724:
			case 725:
			case 726:
			case 727:
			case 728:
			case 729:
			case 730:
			case 731:
			case 732:
			case 733:
			case 734:
			case 736:
			case 737:
			case 738:
			case 739:
			case 740:
			case 741:
			case 742:
			case 743:
			case 744:
			case 745:
			case 746:
			case 747:
			case 748:
			case 749:
			case 750:
			case 751:
			case 752:
			case 753:
			case 754:
			case 755:
			case 756:
			case 757:
			case 758:
			case 759:
			case 760:
			case 761:
			case 762:
			case 763:
			case 764:
			case 765:
			case 766:
			case 767:
			case 768:
			case 769:
			case 770:
			case 771:
			case 772:
			case 773:
			case 774:
			case 775:
			case 776:
			case 777:
			case 778:
			case 779:
			case 780:
			case 781:
			case 782:
			case 783:
			case 784:
			case 785:
			case 786:
			case 787:
			case 788:
			case 789:
			case 790:
			case 791:
			case 792:
			case 793:
			case 794:
			case 795:
			case 796:
			case 797:
			case 798:
			case 799:
			case 800:
			case 801:
			case 802:
			case 803:
			case 806:
			case 807:
			case 808:
			case 809:
			case 810:
			case 811:
			case 812:
			case 813:
			case 814:
			case 815:
			case 816:
			case 817:
			case 818:
			case 819:
			case 820:
			case 821:
			case 822:
			case 823:
			case 824:
			case 825:
			case 826:
			case 827:
			case 828:
			case 829:
			case 830:
			case 831:
			case 832:
			case 833:
			case 834:
			case 835:
			case 836:
			case 837:
			case 838:
			case 839:
			case 840:
			case 841:
			case 842:
			case 843:
			case 844:
			case 845:
			case 846:
			case 847:
			case 848:
			case 849:
			case 850:
			case 851:
			case 852:
			case 853:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			case 873:
			case 874:
			case 875:
			case 876:
			case 877:
			case 878:
			case 879:
			case 880:
			case 881:
			case 882:
			case 883:
			case 884:
			case 885:
			case 886:
			case 887:
			case 888:
			case 889:
			case 890:
			case 891:
			case 892:
			case 893:
			case 894:
			case 895:
			case 896:
			case 897:
			case 898:
			case 899:
			case 900:
			case 901:
			case 902:
			case 903:
			case 904:
			case 905:
			case 906:
			case 907:
			case 908:
			case 909:
			case 910:
			case 911:
			case 912:
			case 913:
			case 914:
			case 915:
			case 916:
			case 917:
			case 918:
			case 919:
			case 920:
			case 921:
			case 922:
			case 923:
			case 924:
			case 925:
			case 926:
			case 927:
			case 928:
			case 929:
			case 930:
			case 931:
			case 932:
			case 933:
			case 934:
			case 935:
			case 936:
			case 937:
			case 938:
			case 939:
			case 940:
			case 941:
			case 942:
			case 943:
			case 944:
			case 945:
			case 946:
			case 947:
			case 948:
			case 949:
			case 950:
			case 951:
			case 952:
			case 953:
			case 954:
			case 955:
			case 956:
			case 957:
			case 958:
			case 959:
			case 960:
			case 961:
			case 962:
			case 963:
			case 964:
			case 965:
			case 966:
			case 967:
			case 968:
			case 969:
			case 970:
			case 971:
			case 972:
			case 973:
			case 974:
			case 975:
			case 976:
			case 977:
			case 978:
			case 979:
			case 980:
			case 981:
			case 982:
			case 983:
			case 984:
			case 985:
			case 986:
			case 987:
			case 988:
			case 989:
			case 990:
			case 991:
			case 992:
			case 993:
			case 994:
			case 995:
			case 996:
			case 997:
			case 998:
			case 999:
			case 1000:
			case 1001:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
			case 1007:
			case 1008:
			case 1009:
			case 1010:
			case 1011:
			case 1012:
			case 1013:
			case 1014:
			case 1015:
			case 1016:
			case 1017:
			case 1018:
			case 1019:
			case 1020:
			case 1021:
			case 1022:
			case 1023:
			case 1024:
			case 1025:
			case 1026:
			case 1027:
			case 1028:
			case 1029:
			case 1030:
			case 1031:
			case 1032:
			case 1033:
			case 1034:
			case 1035:
			case 1036:
			case 1037:
			case 1038:
			case 1039:
			case 1040:
			case 1041:
			case 1042:
			case 1043:
			case 1044:
			case 1045:
			case 1046:
			case 1047:
			case 1048:
			case 1049:
			case 1050:
			case 1051:
			case 1052:
			case 1053:
			case 1054:
			case 1055:
			case 1056:
			case 1057:
			case 1058:
			case 1059:
			case 1060:
			case 1061:
			case 1062:
			case 1063:
			case 1064:
			case 1065:
			case 1066:
			case 1067:
			case 1068:
			case 1069:
			case 1070:
			case 1071:
			case 1072:
			case 1073:
			case 1074:
			case 1075:
			case 1076:
			case 1077:
			case 1078:
			case 1079:
			case 1080:
			case 1081:
			case 1082:
			case 1083:
			case 1084:
			case 1085:
			case 1086:
			case 1087:
			case 1088:
			case 1089:
			case 1090:
			case 1091:
			case 1092:
			case 1093:
			case 1094:
			case 1095:
			case 1096:
			case 1097:
			case 1098:
			case 1099:
			case 1100:
			case 1101:
			case 1102:
			case 1103:
			case 1104:
			case 1105:
			case 1106:
			case 1107:
			case 1123:
			case 1156:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6382;
				this.simpleId();
				}
				break;
			case 1145:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6383;
				this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			case 1148:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6384;
				this.match(MySqlParser.STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleId(): SimpleIdContext {
		let localctx: SimpleIdContext = new SimpleIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 586, MySqlParser.RULE_simpleId);
		try {
			this.state = 6396;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 938, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6387;
				this.match(MySqlParser.ID);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6388;
				this.charsetNameBase();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6389;
				this.transactionLevelBase();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6390;
				this.engineNameBase();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6391;
				this.privilegesBase();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6392;
				this.intervalTypeBase();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 6393;
				this.dataTypeBase();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 6394;
				this.keywordsCanBeId();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 6395;
				this.scalarFunctionName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dottedId(): DottedIdContext {
		let localctx: DottedIdContext = new DottedIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 588, MySqlParser.RULE_dottedId);
		try {
			this.state = 6401;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1155:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6398;
				this.match(MySqlParser.DOT_ID);
				}
				break;
			case 1132:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6399;
				this.match(MySqlParser.DOT);
				this.state = 6400;
				this.uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public decimalLiteral(): DecimalLiteralContext {
		let localctx: DecimalLiteralContext = new DecimalLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 590, MySqlParser.RULE_decimalLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6403;
			_la = this._input.LA(1);
			if(!(((((_la - 1138)) & ~0x1F) === 0 && ((1 << (_la - 1138)) & 10247) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fileSizeLiteral(): FileSizeLiteralContext {
		let localctx: FileSizeLiteralContext = new FileSizeLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 592, MySqlParser.RULE_fileSizeLiteral);
		try {
			this.state = 6407;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1146:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6405;
				this.match(MySqlParser.FILESIZE_LITERAL);
				}
				break;
			case 1138:
			case 1139:
			case 1140:
			case 1149:
			case 1151:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6406;
				this.decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stringLiteral(): StringLiteralContext {
		let localctx: StringLiteralContext = new StringLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 594, MySqlParser.RULE_stringLiteral);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6432;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 947, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6414;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 1148:
				case 1154:
					{
					this.state = 6410;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===1154) {
						{
						this.state = 6409;
						this.match(MySqlParser.STRING_CHARSET_NAME);
						}
					}

					this.state = 6412;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				case 1147:
					{
					this.state = 6413;
					this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6417;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 6416;
						this.match(MySqlParser.STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 6419;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 943, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6426;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 1148:
				case 1154:
					{
					this.state = 6422;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===1154) {
						{
						this.state = 6421;
						this.match(MySqlParser.STRING_CHARSET_NAME);
						}
					}

					this.state = 6424;
					this.match(MySqlParser.STRING_LITERAL);
					}
					break;
				case 1147:
					{
					this.state = 6425;
					this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 6430;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 946, this._ctx) ) {
				case 1:
					{
					this.state = 6428;
					this.match(MySqlParser.COLLATE);
					this.state = 6429;
					this.collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanLiteral(): BooleanLiteralContext {
		let localctx: BooleanLiteralContext = new BooleanLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 596, MySqlParser.RULE_booleanLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6434;
			_la = this._input.LA(1);
			if(!(_la===63 || _la===178)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public hexadecimalLiteral(): HexadecimalLiteralContext {
		let localctx: HexadecimalLiteralContext = new HexadecimalLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 598, MySqlParser.RULE_hexadecimalLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6437;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1154) {
				{
				this.state = 6436;
				this.match(MySqlParser.STRING_CHARSET_NAME);
				}
			}

			this.state = 6439;
			this.match(MySqlParser.HEXADECIMAL_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullNotnull(): NullNotnullContext {
		let localctx: NullNotnullContext = new NullNotnullContext(this, this._ctx, this.state);
		this.enterRule(localctx, 600, MySqlParser.RULE_nullNotnull);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6442;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===114) {
				{
				this.state = 6441;
				this.match(MySqlParser.NOT);
				}
			}

			this.state = 6444;
			_la = this._input.LA(1);
			if(!(_la===116 || _la===1152)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constant(): ConstantContext {
		let localctx: ConstantContext = new ConstantContext(this, this._ctx, this.state);
		this.enterRule(localctx, 602, MySqlParser.RULE_constant);
		let _la: number;
		try {
			this.state = 6458;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 951, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6446;
				this.stringLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6447;
				this.decimalLiteral();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6448;
				this.match(MySqlParser.MINUS);
				this.state = 6449;
				this.decimalLiteral();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6450;
				this.hexadecimalLiteral();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6451;
				this.booleanLiteral();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6452;
				this.match(MySqlParser.REAL_LITERAL);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 6453;
				this.match(MySqlParser.BIT_STRING);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 6455;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===114) {
					{
					this.state = 6454;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 6457;
				localctx._nullLiteral = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===116 || _la===1152)) {
				    localctx._nullLiteral = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dataType(): DataTypeContext {
		let localctx: DataTypeContext = new DataTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 604, MySqlParser.RULE_dataType);
		let _la: number;
		try {
			let _alt: number;
			this.state = 6586;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 980, this._ctx) ) {
			case 1:
				localctx = new StringDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6460;
				(localctx as StringDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===25 || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & 31239) !== 0) || _la===518)) {
				    (localctx as StringDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6462;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===238) {
					{
					this.state = 6461;
					this.match(MySqlParser.VARYING);
					}
				}

				this.state = 6465;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 953, this._ctx) ) {
				case 1:
					{
					this.state = 6464;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 6468;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 954, this._ctx) ) {
				case 1:
					{
					this.state = 6467;
					this.match(MySqlParser.BINARY);
					}
					break;
				}
				this.state = 6473;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 955, this._ctx) ) {
				case 1:
					{
					this.state = 6470;
					this.charSet();
					this.state = 6471;
					this.charsetName();
					}
					break;
				}
				this.state = 6478;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 956, this._ctx) ) {
				case 1:
					{
					this.state = 6475;
					this.match(MySqlParser.COLLATE);
					this.state = 6476;
					this.collationName();
					}
					break;
				case 2:
					{
					this.state = 6477;
					this.match(MySqlParser.BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				localctx = new NationalVaryingStringDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6480;
				this.match(MySqlParser.NATIONAL);
				this.state = 6481;
				(localctx as NationalVaryingStringDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===25 || _la===222)) {
				    (localctx as NationalVaryingStringDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6482;
				this.match(MySqlParser.VARYING);
				this.state = 6484;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 957, this._ctx) ) {
				case 1:
					{
					this.state = 6483;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 6487;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 958, this._ctx) ) {
				case 1:
					{
					this.state = 6486;
					this.match(MySqlParser.BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				localctx = new NationalStringDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6489;
				this.match(MySqlParser.NATIONAL);
				this.state = 6490;
				(localctx as NationalStringDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===25 || _la===222 || _la===223)) {
				    (localctx as NationalStringDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6492;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 959, this._ctx) ) {
				case 1:
					{
					this.state = 6491;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 6495;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 960, this._ctx) ) {
				case 1:
					{
					this.state = 6494;
					this.match(MySqlParser.BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				localctx = new NationalStringDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6497;
				this.match(MySqlParser.NCHAR);
				this.state = 6498;
				(localctx as NationalStringDataTypeContext)._typeName = this.match(MySqlParser.VARCHAR);
				this.state = 6500;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 961, this._ctx) ) {
				case 1:
					{
					this.state = 6499;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 6503;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 962, this._ctx) ) {
				case 1:
					{
					this.state = 6502;
					this.match(MySqlParser.BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				localctx = new DimensionDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6505;
				(localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & 4095) !== 0))) {
				    (localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6507;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 963, this._ctx) ) {
				case 1:
					{
					this.state = 6506;
					this.lengthOneDimension();
					}
					break;
				}
				this.state = 6512;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 964, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6509;
						_la = this._input.LA(1);
						if(!(_la===183 || _la===195 || _la===612)) {
						this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
						}
					}
					this.state = 6514;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 964, this._ctx);
				}
				}
				break;
			case 6:
				localctx = new DimensionDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6515;
				(localctx as DimensionDataTypeContext)._typeName = this.match(MySqlParser.REAL);
				this.state = 6517;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 965, this._ctx) ) {
				case 1:
					{
					this.state = 6516;
					this.lengthTwoDimension();
					}
					break;
				}
				this.state = 6522;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 966, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6519;
						_la = this._input.LA(1);
						if(!(_la===183 || _la===195 || _la===612)) {
						this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
						}
					}
					this.state = 6524;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 966, this._ctx);
				}
				}
				break;
			case 7:
				localctx = new DimensionDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 6525;
				(localctx as DimensionDataTypeContext)._typeName = this.match(MySqlParser.DOUBLE);
				this.state = 6527;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===210) {
					{
					this.state = 6526;
					this.match(MySqlParser.PRECISION);
					}
				}

				this.state = 6530;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 968, this._ctx) ) {
				case 1:
					{
					this.state = 6529;
					this.lengthTwoDimension();
					}
					break;
				}
				this.state = 6535;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 969, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6532;
						_la = this._input.LA(1);
						if(!(_la===183 || _la===195 || _la===612)) {
						this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
						}
					}
					this.state = 6537;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 969, this._ctx);
				}
				}
				break;
			case 8:
				localctx = new DimensionDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 6538;
				(localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(((((_la - 211)) & ~0x1F) === 0 && ((1 << (_la - 211)) & 63) !== 0) || _la===431)) {
				    (localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6540;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 970, this._ctx) ) {
				case 1:
					{
					this.state = 6539;
					this.lengthTwoOptionalDimension();
					}
					break;
				}
				this.state = 6545;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 971, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 6542;
						_la = this._input.LA(1);
						if(!(_la===183 || _la===195 || _la===612)) {
						this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
						}
					}
					this.state = 6547;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 971, this._ctx);
				}
				}
				break;
			case 9:
				localctx = new SimpleDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 6548;
				(localctx as SimpleDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 4237313) !== 0) || _la===348 || _la===349)) {
				    (localctx as SimpleDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 10:
				localctx = new DimensionDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 6549;
				(localctx as DimensionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(((((_la - 218)) & ~0x1F) === 0 && ((1 << (_la - 218)) & 2831) !== 0) || _la===346)) {
				    (localctx as DimensionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6551;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 972, this._ctx) ) {
				case 1:
					{
					this.state = 6550;
					this.lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				localctx = new CollectionDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 6553;
				(localctx as CollectionDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===153 || _la===237)) {
				    (localctx as CollectionDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6554;
				this.collectionOptions();
				this.state = 6556;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 973, this._ctx) ) {
				case 1:
					{
					this.state = 6555;
					this.match(MySqlParser.BINARY);
					}
					break;
				}
				this.state = 6561;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 974, this._ctx) ) {
				case 1:
					{
					this.state = 6558;
					this.charSet();
					this.state = 6559;
					this.charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				localctx = new SpatialDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 6563;
				(localctx as SpatialDataTypeContext)._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===466 || ((((_la - 803)) & ~0x1F) === 0 && ((1 << (_la - 803)) & 511) !== 0))) {
				    (localctx as SpatialDataTypeContext)._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6566;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 975, this._ctx) ) {
				case 1:
					{
					this.state = 6564;
					this.match(MySqlParser.SRID);
					this.state = 6565;
					this.decimalLiteral();
					}
					break;
				}
				}
				break;
			case 13:
				localctx = new LongVarcharDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 6568;
				(localctx as LongVarcharDataTypeContext)._typeName = this.match(MySqlParser.LONG);
				this.state = 6570;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===223) {
					{
					this.state = 6569;
					this.match(MySqlParser.VARCHAR);
					}
				}

				this.state = 6573;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 977, this._ctx) ) {
				case 1:
					{
					this.state = 6572;
					this.match(MySqlParser.BINARY);
					}
					break;
				}
				this.state = 6578;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 978, this._ctx) ) {
				case 1:
					{
					this.state = 6575;
					this.charSet();
					this.state = 6576;
					this.charsetName();
					}
					break;
				}
				this.state = 6582;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 979, this._ctx) ) {
				case 1:
					{
					this.state = 6580;
					this.match(MySqlParser.COLLATE);
					this.state = 6581;
					this.collationName();
					}
					break;
				}
				}
				break;
			case 14:
				localctx = new LongVarbinaryDataTypeContext(this, localctx);
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 6584;
				this.match(MySqlParser.LONG);
				this.state = 6585;
				this.match(MySqlParser.VARBINARY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public collectionOptions(): CollectionOptionsContext {
		let localctx: CollectionOptionsContext = new CollectionOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 606, MySqlParser.RULE_collectionOptions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6588;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 6589;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 6594;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6590;
				this.match(MySqlParser.COMMA);
				this.state = 6591;
				this.match(MySqlParser.STRING_LITERAL);
				}
				}
				this.state = 6596;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6597;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public convertedDataType(): ConvertedDataTypeContext {
		let localctx: ConvertedDataTypeContext = new ConvertedDataTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 608, MySqlParser.RULE_convertedDataType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6621;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 211:
			case 226:
			case 518:
				{
				this.state = 6599;
				localctx._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===211 || _la===226 || _la===518)) {
				    localctx._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1133) {
					{
					this.state = 6600;
					this.lengthOneDimension();
					}
				}

				}
				break;
			case 222:
				{
				this.state = 6603;
				localctx._typeName = this.match(MySqlParser.CHAR);
				this.state = 6605;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1133) {
					{
					this.state = 6604;
					this.lengthOneDimension();
					}
				}

				this.state = 6610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===25 || _la===222 || _la===841) {
					{
					this.state = 6607;
					this.charSet();
					this.state = 6608;
					this.charsetName();
					}
				}

				}
				break;
			case 200:
			case 206:
			case 209:
			case 217:
			case 218:
			case 220:
			case 221:
			case 466:
				{
				this.state = 6612;
				localctx._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 3539521) !== 0) || _la===466)) {
				    localctx._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 214:
			case 215:
				{
				this.state = 6613;
				localctx._typeName = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===214 || _la===215)) {
				    localctx._typeName = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6615;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1133) {
					{
					this.state = 6614;
					this.lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case 183:
			case 612:
				{
				this.state = 6617;
				_la = this._input.LA(1);
				if(!(_la===183 || _la===612)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6619;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===200 || _la===206) {
					{
					this.state = 6618;
					_la = this._input.LA(1);
					if(!(_la===200 || _la===206)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 6624;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===11) {
				{
				this.state = 6623;
				this.match(MySqlParser.ARRAY);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lengthOneDimension(): LengthOneDimensionContext {
		let localctx: LengthOneDimensionContext = new LengthOneDimensionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 610, MySqlParser.RULE_lengthOneDimension);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6626;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 6627;
			this.decimalLiteral();
			this.state = 6628;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lengthTwoDimension(): LengthTwoDimensionContext {
		let localctx: LengthTwoDimensionContext = new LengthTwoDimensionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 612, MySqlParser.RULE_lengthTwoDimension);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6630;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 6631;
			this.decimalLiteral();
			this.state = 6632;
			this.match(MySqlParser.COMMA);
			this.state = 6633;
			this.decimalLiteral();
			this.state = 6634;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext {
		let localctx: LengthTwoOptionalDimensionContext = new LengthTwoOptionalDimensionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 614, MySqlParser.RULE_lengthTwoOptionalDimension);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6636;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 6637;
			this.decimalLiteral();
			this.state = 6640;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===1135) {
				{
				this.state = 6638;
				this.match(MySqlParser.COMMA);
				this.state = 6639;
				this.decimalLiteral();
				}
			}

			this.state = 6642;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public uidList(): UidListContext {
		let localctx: UidListContext = new UidListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 616, MySqlParser.RULE_uidList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6644;
			this.uid();
			this.state = 6649;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 990, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6645;
					this.match(MySqlParser.COMMA);
					this.state = 6646;
					this.uid();
					}
					}
				}
				this.state = 6651;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 990, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fullColumnNameList(): FullColumnNameListContext {
		let localctx: FullColumnNameListContext = new FullColumnNameListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 618, MySqlParser.RULE_fullColumnNameList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6652;
			this.fullColumnName();
			this.state = 6657;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6653;
				this.match(MySqlParser.COMMA);
				this.state = 6654;
				this.fullColumnName();
				}
				}
				this.state = 6659;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tables(): TablesContext {
		let localctx: TablesContext = new TablesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 620, MySqlParser.RULE_tables);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6660;
			this.tableName();
			this.state = 6665;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 992, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 6661;
					this.match(MySqlParser.COMMA);
					this.state = 6662;
					this.tableName();
					}
					}
				}
				this.state = 6667;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 992, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public indexColumnNames(): IndexColumnNamesContext {
		let localctx: IndexColumnNamesContext = new IndexColumnNamesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 622, MySqlParser.RULE_indexColumnNames);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6668;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 6669;
			this.indexColumnName();
			this.state = 6674;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6670;
				this.match(MySqlParser.COMMA);
				this.state = 6671;
				this.indexColumnName();
				}
				}
				this.state = 6676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6677;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expressions(): ExpressionsContext {
		let localctx: ExpressionsContext = new ExpressionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 624, MySqlParser.RULE_expressions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6679;
			this.expression(0);
			this.state = 6684;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6680;
				this.match(MySqlParser.COMMA);
				this.state = 6681;
				this.expression(0);
				}
				}
				this.state = 6686;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expressionsWithDefaults(): ExpressionsWithDefaultsContext {
		let localctx: ExpressionsWithDefaultsContext = new ExpressionsWithDefaultsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 626, MySqlParser.RULE_expressionsWithDefaults);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6687;
			this.expressionOrDefault();
			this.state = 6692;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6688;
				this.match(MySqlParser.COMMA);
				this.state = 6689;
				this.expressionOrDefault();
				}
				}
				this.state = 6694;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constants(): ConstantsContext {
		let localctx: ConstantsContext = new ConstantsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 628, MySqlParser.RULE_constants);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6695;
			this.constant();
			this.state = 6700;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6696;
				this.match(MySqlParser.COMMA);
				this.state = 6697;
				this.constant();
				}
				}
				this.state = 6702;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public simpleStrings(): SimpleStringsContext {
		let localctx: SimpleStringsContext = new SimpleStringsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 630, MySqlParser.RULE_simpleStrings);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6703;
			this.match(MySqlParser.STRING_LITERAL);
			this.state = 6708;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6704;
				this.match(MySqlParser.COMMA);
				this.state = 6705;
				this.match(MySqlParser.STRING_LITERAL);
				}
				}
				this.state = 6710;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public userVariables(): UserVariablesContext {
		let localctx: UserVariablesContext = new UserVariablesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 632, MySqlParser.RULE_userVariables);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6711;
			this.match(MySqlParser.LOCAL_ID);
			this.state = 6716;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 6712;
				this.match(MySqlParser.COMMA);
				this.state = 6713;
				this.match(MySqlParser.LOCAL_ID);
				}
				}
				this.state = 6718;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public defaultValue(): DefaultValueContext {
		let localctx: DefaultValueContext = new DefaultValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 634, MySqlParser.RULE_defaultValue);
		try {
			this.state = 6745;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1001, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6719;
				this.match(MySqlParser.NULL_LITERAL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6720;
				this.match(MySqlParser.CAST);
				this.state = 6721;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6722;
				this.expression(0);
				this.state = 6723;
				this.match(MySqlParser.AS);
				this.state = 6724;
				this.convertedDataType();
				this.state = 6725;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6728;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 999, this._ctx) ) {
				case 1:
					{
					this.state = 6727;
					this.unaryOperator();
					}
					break;
				}
				this.state = 6730;
				this.constant();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6731;
				this.currentTimestamp();
				this.state = 6735;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1000, this._ctx) ) {
				case 1:
					{
					this.state = 6732;
					this.match(MySqlParser.ON);
					this.state = 6733;
					this.match(MySqlParser.UPDATE);
					this.state = 6734;
					this.currentTimestamp();
					}
					break;
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6737;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6738;
				this.expression(0);
				this.state = 6739;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6741;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6742;
				this.fullId();
				this.state = 6743;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public currentTimestamp(): CurrentTimestampContext {
		let localctx: CurrentTimestampContext = new CurrentTimestampContext(this, this._ctx, this.state);
		this.enterRule(localctx, 636, MySqlParser.RULE_currentTimestamp);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6761;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 315:
			case 316:
			case 322:
				{
				this.state = 6747;
				_la = this._input.LA(1);
				if(!(((((_la - 315)) & ~0x1F) === 0 && ((1 << (_la - 315)) & 131) !== 0))) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6753;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1003, this._ctx) ) {
				case 1:
					{
					this.state = 6748;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 6750;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 1138)) & ~0x1F) === 0 && ((1 << (_la - 1138)) & 10247) !== 0)) {
						{
						this.state = 6749;
						this.decimalLiteral();
						}
					}

					this.state = 6752;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 323:
				{
				this.state = 6755;
				this.match(MySqlParser.NOW);
				this.state = 6756;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6758;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 1138)) & ~0x1F) === 0 && ((1 << (_la - 1138)) & 10247) !== 0)) {
					{
					this.state = 6757;
					this.decimalLiteral();
					}
				}

				this.state = 6760;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expressionOrDefault(): ExpressionOrDefaultContext {
		let localctx: ExpressionOrDefaultContext = new ExpressionOrDefaultContext(this, this._ctx, this.state);
		this.enterRule(localctx, 638, MySqlParser.RULE_expressionOrDefault);
		try {
			this.state = 6765;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1006, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6763;
				this.expression(0);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6764;
				this.match(MySqlParser.DEFAULT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ifExists(): IfExistsContext {
		let localctx: IfExistsContext = new IfExistsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 640, MySqlParser.RULE_ifExists);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6767;
			this.match(MySqlParser.IF);
			this.state = 6768;
			this.match(MySqlParser.EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ifNotExists(): IfNotExistsContext {
		let localctx: IfNotExistsContext = new IfNotExistsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 642, MySqlParser.RULE_ifNotExists);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6770;
			this.match(MySqlParser.IF);
			this.state = 6771;
			this.match(MySqlParser.NOT);
			this.state = 6772;
			this.match(MySqlParser.EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orReplace(): OrReplaceContext {
		let localctx: OrReplaceContext = new OrReplaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 644, MySqlParser.RULE_orReplace);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6774;
			this.match(MySqlParser.OR);
			this.state = 6775;
			this.match(MySqlParser.REPLACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public waitNowaitClause(): WaitNowaitClauseContext {
		let localctx: WaitNowaitClauseContext = new WaitNowaitClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 646, MySqlParser.RULE_waitNowaitClause);
		try {
			this.state = 6780;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 674:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6777;
				this.match(MySqlParser.WAIT);
				this.state = 6778;
				this.decimalLiteral();
				}
				break;
			case 527:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6779;
				this.match(MySqlParser.NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionCall(): FunctionCallContext {
		let localctx: FunctionCallContext = new FunctionCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 648, MySqlParser.RULE_functionCall);
		try {
			this.state = 6800;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1010, this._ctx) ) {
			case 1:
				localctx = new SpecificFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6782;
				this.specificFunction();
				}
				break;
			case 2:
				localctx = new AggregateFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6783;
				this.aggregateWindowedFunction();
				}
				break;
			case 3:
				localctx = new NonAggregateFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6784;
				this.nonAggregateWindowedFunction();
				}
				break;
			case 4:
				localctx = new ScalarFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6785;
				this.scalarFunctionName();
				this.state = 6786;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6788;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1008, this._ctx) ) {
				case 1:
					{
					this.state = 6787;
					this.functionArgs();
					}
					break;
				}
				this.state = 6790;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 5:
				localctx = new UdfFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6792;
				this.fullId();
				this.state = 6793;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6795;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1009, this._ctx) ) {
				case 1:
					{
					this.state = 6794;
					this.functionArgs();
					}
					break;
				}
				this.state = 6797;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 6:
				localctx = new PasswordFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6799;
				this.passwordFunctionClause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public specificFunction(): SpecificFunctionContext {
		let localctx: SpecificFunctionContext = new SpecificFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 650, MySqlParser.RULE_specificFunction);
		let _la: number;
		try {
			this.state = 6981;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1034, this._ctx) ) {
			case 1:
				localctx = new SimpleFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6802;
				_la = this._input.LA(1);
				if(!(_la===150 || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & 262159) !== 0))) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6805;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1011, this._ctx) ) {
				case 1:
					{
					this.state = 6803;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 6804;
					this.match(MySqlParser.RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				localctx = new CurrentUserContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6807;
				this.currentUserExpression();
				}
				break;
			case 3:
				localctx = new DataTypeFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 6808;
				this.match(MySqlParser.CONVERT);
				this.state = 6809;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6810;
				this.expression(0);
				this.state = 6811;
				(localctx as DataTypeFunctionCallContext)._separator = this.match(MySqlParser.COMMA);
				this.state = 6812;
				this.convertedDataType();
				this.state = 6813;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 4:
				localctx = new DataTypeFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 6815;
				this.match(MySqlParser.CONVERT);
				this.state = 6816;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6817;
				this.expression(0);
				this.state = 6818;
				this.match(MySqlParser.USING);
				this.state = 6819;
				this.charsetName();
				this.state = 6820;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 5:
				localctx = new DataTypeFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 6822;
				this.match(MySqlParser.CAST);
				this.state = 6823;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6824;
				this.expression(0);
				this.state = 6825;
				this.match(MySqlParser.AS);
				this.state = 6826;
				this.convertedDataType();
				this.state = 6827;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 6:
				localctx = new ValuesFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 6829;
				this.match(MySqlParser.VALUES);
				this.state = 6830;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6831;
				this.fullColumnName();
				this.state = 6832;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 7:
				localctx = new CaseExpressionFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 6834;
				this.match(MySqlParser.CASE);
				this.state = 6835;
				this.expression(0);
				this.state = 6837;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6836;
					this.caseFuncAlternative();
					}
					}
					this.state = 6839;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===189);
				this.state = 6843;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===53) {
					{
					this.state = 6841;
					this.match(MySqlParser.ELSE);
					this.state = 6842;
					(localctx as CaseExpressionFunctionCallContext)._elseArg = this.functionArg();
					}
				}

				this.state = 6845;
				this.match(MySqlParser.END);
				}
				break;
			case 8:
				localctx = new CaseFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 6847;
				this.match(MySqlParser.CASE);
				this.state = 6849;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 6848;
					this.caseFuncAlternative();
					}
					}
					this.state = 6851;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===189);
				this.state = 6855;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===53) {
					{
					this.state = 6853;
					this.match(MySqlParser.ELSE);
					this.state = 6854;
					(localctx as CaseFunctionCallContext)._elseArg = this.functionArg();
					}
				}

				this.state = 6857;
				this.match(MySqlParser.END);
				}
				break;
			case 9:
				localctx = new CharFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 6859;
				this.match(MySqlParser.CHAR);
				this.state = 6860;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6861;
				this.functionArgs();
				this.state = 6864;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===187) {
					{
					this.state = 6862;
					this.match(MySqlParser.USING);
					this.state = 6863;
					this.charsetName();
					}
				}

				this.state = 6866;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 10:
				localctx = new PositionFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 6868;
				this.match(MySqlParser.POSITION);
				this.state = 6869;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6872;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1017, this._ctx) ) {
				case 1:
					{
					this.state = 6870;
					(localctx as PositionFunctionCallContext)._positionString = this.stringLiteral();
					}
					break;
				case 2:
					{
					this.state = 6871;
					(localctx as PositionFunctionCallContext)._positionExpression = this.expression(0);
					}
					break;
				}
				this.state = 6874;
				this.match(MySqlParser.IN);
				this.state = 6877;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1018, this._ctx) ) {
				case 1:
					{
					this.state = 6875;
					(localctx as PositionFunctionCallContext)._inString = this.stringLiteral();
					}
					break;
				case 2:
					{
					this.state = 6876;
					(localctx as PositionFunctionCallContext)._inExpression = this.expression(0);
					}
					break;
				}
				this.state = 6879;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 11:
				localctx = new SubstrFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 6881;
				_la = this._input.LA(1);
				if(!(_la===325 || _la===326)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6882;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6885;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1019, this._ctx) ) {
				case 1:
					{
					this.state = 6883;
					(localctx as SubstrFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;
				case 2:
					{
					this.state = 6884;
					(localctx as SubstrFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 6887;
				this.match(MySqlParser.FROM);
				this.state = 6890;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1020, this._ctx) ) {
				case 1:
					{
					this.state = 6888;
					(localctx as SubstrFunctionCallContext)._fromDecimal = this.decimalLiteral();
					}
					break;
				case 2:
					{
					this.state = 6889;
					(localctx as SubstrFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 6897;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===65) {
					{
					this.state = 6892;
					this.match(MySqlParser.FOR);
					this.state = 6895;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1021, this._ctx) ) {
					case 1:
						{
						this.state = 6893;
						(localctx as SubstrFunctionCallContext)._forDecimal = this.decimalLiteral();
						}
						break;
					case 2:
						{
						this.state = 6894;
						(localctx as SubstrFunctionCallContext)._forExpression = this.expression(0);
						}
						break;
					}
					}
				}

				this.state = 6899;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 12:
				localctx = new TrimFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 6901;
				this.match(MySqlParser.TRIM);
				this.state = 6902;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6903;
				(localctx as TrimFunctionCallContext)._positioinForm = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===17 || _la===95 || _la===176)) {
				    (localctx as TrimFunctionCallContext)._positioinForm = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6906;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1023, this._ctx) ) {
				case 1:
					{
					this.state = 6904;
					(localctx as TrimFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;
				case 2:
					{
					this.state = 6905;
					(localctx as TrimFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 6908;
				this.match(MySqlParser.FROM);
				this.state = 6911;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1024, this._ctx) ) {
				case 1:
					{
					this.state = 6909;
					(localctx as TrimFunctionCallContext)._fromString = this.stringLiteral();
					}
					break;
				case 2:
					{
					this.state = 6910;
					(localctx as TrimFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 6913;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 13:
				localctx = new TrimFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 6915;
				this.match(MySqlParser.TRIM);
				this.state = 6916;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6919;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1025, this._ctx) ) {
				case 1:
					{
					this.state = 6917;
					(localctx as TrimFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;
				case 2:
					{
					this.state = 6918;
					(localctx as TrimFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 6921;
				this.match(MySqlParser.FROM);
				this.state = 6924;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1026, this._ctx) ) {
				case 1:
					{
					this.state = 6922;
					(localctx as TrimFunctionCallContext)._fromString = this.stringLiteral();
					}
					break;
				case 2:
					{
					this.state = 6923;
					(localctx as TrimFunctionCallContext)._fromExpression = this.expression(0);
					}
					break;
				}
				this.state = 6926;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 14:
				localctx = new WeightFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 6928;
				this.match(MySqlParser.WEIGHT_STRING);
				this.state = 6929;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6932;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1027, this._ctx) ) {
				case 1:
					{
					this.state = 6930;
					this.stringLiteral();
					}
					break;
				case 2:
					{
					this.state = 6931;
					this.expression(0);
					}
					break;
				}
				this.state = 6940;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===12) {
					{
					this.state = 6934;
					this.match(MySqlParser.AS);
					this.state = 6935;
					(localctx as WeightFunctionCallContext)._stringFormat = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===222 || _la===226)) {
					    (localctx as WeightFunctionCallContext)._stringFormat = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 6936;
					this.match(MySqlParser.LR_BRACKET);
					this.state = 6937;
					this.decimalLiteral();
					this.state = 6938;
					this.match(MySqlParser.RR_BRACKET);
					}
				}

				this.state = 6943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===472) {
					{
					this.state = 6942;
					this.levelsInWeightString();
					}
				}

				this.state = 6945;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 15:
				localctx = new ExtractFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 6947;
				this.match(MySqlParser.EXTRACT);
				this.state = 6948;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6949;
				this.intervalType();
				this.state = 6950;
				this.match(MySqlParser.FROM);
				this.state = 6953;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1030, this._ctx) ) {
				case 1:
					{
					this.state = 6951;
					(localctx as ExtractFunctionCallContext)._sourceString = this.stringLiteral();
					}
					break;
				case 2:
					{
					this.state = 6952;
					(localctx as ExtractFunctionCallContext)._sourceExpression = this.expression(0);
					}
					break;
				}
				this.state = 6955;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 16:
				localctx = new GetFormatFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 6957;
				this.match(MySqlParser.GET_FORMAT);
				this.state = 6958;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6959;
				(localctx as GetFormatFunctionCallContext)._datetimeFormat = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 11) !== 0))) {
				    (localctx as GetFormatFunctionCallContext)._datetimeFormat = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 6960;
				this.match(MySqlParser.COMMA);
				this.state = 6961;
				this.stringLiteral();
				this.state = 6962;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 17:
				localctx = new JsonValueFunctionCallContext(this, localctx);
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 6964;
				this.match(MySqlParser.JSON_VALUE);
				this.state = 6965;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 6966;
				this.expression(0);
				this.state = 6967;
				this.match(MySqlParser.COMMA);
				this.state = 6968;
				this.expression(0);
				this.state = 6971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===593) {
					{
					this.state = 6969;
					this.match(MySqlParser.RETURNING);
					this.state = 6970;
					this.convertedDataType();
					}
				}

				this.state = 6974;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1032, this._ctx) ) {
				case 1:
					{
					this.state = 6973;
					this.jsonOnEmpty();
					}
					break;
				}
				this.state = 6977;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===42 || _la===116 || _la===411) {
					{
					this.state = 6976;
					this.jsonOnError();
					}
				}

				this.state = 6979;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseFuncAlternative(): CaseFuncAlternativeContext {
		let localctx: CaseFuncAlternativeContext = new CaseFuncAlternativeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 652, MySqlParser.RULE_caseFuncAlternative);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 6983;
			this.match(MySqlParser.WHEN);
			this.state = 6984;
			localctx._condition = this.functionArg();
			this.state = 6985;
			this.match(MySqlParser.THEN);
			this.state = 6986;
			localctx._consequent = this.functionArg();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public levelsInWeightString(): LevelsInWeightStringContext {
		let localctx: LevelsInWeightStringContext = new LevelsInWeightStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 654, MySqlParser.RULE_levelsInWeightString);
		let _la: number;
		try {
			this.state = 7002;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1036, this._ctx) ) {
			case 1:
				localctx = new LevelWeightListContext(this, localctx);
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 6988;
				this.match(MySqlParser.LEVEL);
				this.state = 6989;
				this.levelInWeightListElement();
				this.state = 6994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 6990;
					this.match(MySqlParser.COMMA);
					this.state = 6991;
					this.levelInWeightListElement();
					}
					}
					this.state = 6996;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				localctx = new LevelWeightRangeContext(this, localctx);
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 6997;
				this.match(MySqlParser.LEVEL);
				this.state = 6998;
				(localctx as LevelWeightRangeContext)._firstLevel = this.decimalLiteral();
				this.state = 6999;
				this.match(MySqlParser.MINUS);
				this.state = 7000;
				(localctx as LevelWeightRangeContext)._lastLevel = this.decimalLiteral();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public levelInWeightListElement(): LevelInWeightListElementContext {
		let localctx: LevelInWeightListElementContext = new LevelInWeightListElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 656, MySqlParser.RULE_levelInWeightListElement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7004;
			this.decimalLiteral();
			this.state = 7006;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===13 || _la===45 || _la===994) {
				{
				this.state = 7005;
				localctx._orderType = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===13 || _la===45 || _la===994)) {
				    localctx._orderType = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public aggregateWindowedFunction(): AggregateWindowedFunctionContext {
		let localctx: AggregateWindowedFunctionContext = new AggregateWindowedFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 658, MySqlParser.RULE_aggregateWindowedFunction);
		let _la: number;
		try {
			this.state = 7067;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 286:
			case 298:
			case 299:
			case 309:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7008;
				_la = this._input.LA(1);
				if(!(((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & 8400897) !== 0))) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7009;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7011;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1038, this._ctx) ) {
				case 1:
					{
					this.state = 7010;
					localctx._aggregator = this._input.LT(1);
					_la = this._input.LA(1);
					if(!(_la===6 || _la===49)) {
					    localctx._aggregator = this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
					break;
				}
				this.state = 7013;
				this.functionArg();
				this.state = 7014;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 7016;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1039, this._ctx) ) {
				case 1:
					{
					this.state = 7015;
					this.overClause();
					}
					break;
				}
				}
				break;
			case 290:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7018;
				this.match(MySqlParser.COUNT);
				this.state = 7019;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7027;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1041, this._ctx) ) {
				case 1:
					{
					this.state = 7020;
					localctx._starArg = this.match(MySqlParser.STAR);
					}
					break;
				case 2:
					{
					this.state = 7022;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1040, this._ctx) ) {
					case 1:
						{
						this.state = 7021;
						localctx._aggregator = this.match(MySqlParser.ALL);
						}
						break;
					}
					this.state = 7024;
					this.functionArg();
					}
					break;
				case 3:
					{
					this.state = 7025;
					localctx._aggregator = this.match(MySqlParser.DISTINCT);
					this.state = 7026;
					this.functionArgs();
					}
					break;
				}
				this.state = 7029;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 7031;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1042, this._ctx) ) {
				case 1:
					{
					this.state = 7030;
					this.overClause();
					}
					break;
				}
				}
				break;
			case 287:
			case 288:
			case 289:
			case 305:
			case 306:
			case 307:
			case 308:
			case 310:
			case 311:
			case 312:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7033;
				_la = this._input.LA(1);
				if(!(((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & 62652423) !== 0))) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7034;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7036;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1043, this._ctx) ) {
				case 1:
					{
					this.state = 7035;
					localctx._aggregator = this.match(MySqlParser.ALL);
					}
					break;
				}
				this.state = 7038;
				this.functionArg();
				this.state = 7039;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 7041;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1044, this._ctx) ) {
				case 1:
					{
					this.state = 7040;
					this.overClause();
					}
					break;
				}
				}
				break;
			case 294:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7043;
				this.match(MySqlParser.GROUP_CONCAT);
				this.state = 7044;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7046;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1045, this._ctx) ) {
				case 1:
					{
					this.state = 7045;
					localctx._aggregator = this.match(MySqlParser.DISTINCT);
					}
					break;
				}
				this.state = 7048;
				this.functionArgs();
				this.state = 7059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===124) {
					{
					this.state = 7049;
					this.match(MySqlParser.ORDER);
					this.state = 7050;
					this.match(MySqlParser.BY);
					this.state = 7051;
					this.orderByExpression();
					this.state = 7056;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===1135) {
						{
						{
						this.state = 7052;
						this.match(MySqlParser.COMMA);
						this.state = 7053;
						this.orderByExpression();
						}
						}
						this.state = 7058;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 7063;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===154) {
					{
					this.state = 7061;
					this.match(MySqlParser.SEPARATOR);
					this.state = 7062;
					localctx._separator = this.match(MySqlParser.STRING_LITERAL);
					}
				}

				this.state = 7065;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonAggregateWindowedFunction(): NonAggregateWindowedFunctionContext {
		let localctx: NonAggregateWindowedFunctionContext = new NonAggregateWindowedFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 660, MySqlParser.RULE_nonAggregateWindowedFunction);
		let _la: number;
		try {
			this.state = 7107;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 295:
			case 297:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7069;
				_la = this._input.LA(1);
				if(!(_la===295 || _la===297)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7070;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7071;
				this.expression(0);
				this.state = 7074;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1050, this._ctx) ) {
				case 1:
					{
					this.state = 7072;
					this.match(MySqlParser.COMMA);
					this.state = 7073;
					this.decimalLiteral();
					}
					break;
				}
				this.state = 7078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===1135) {
					{
					this.state = 7076;
					this.match(MySqlParser.COMMA);
					this.state = 7077;
					this.decimalLiteral();
					}
				}

				this.state = 7080;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 7081;
				this.overClause();
				}
				break;
			case 293:
			case 296:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7083;
				_la = this._input.LA(1);
				if(!(_la===293 || _la===296)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7084;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7085;
				this.expression(0);
				this.state = 7086;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 7087;
				this.overClause();
				}
				break;
			case 291:
			case 292:
			case 302:
			case 303:
			case 304:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7089;
				_la = this._input.LA(1);
				if(!(((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & 14339) !== 0))) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7090;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7091;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 7092;
				this.overClause();
				}
				break;
			case 301:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7093;
				this.match(MySqlParser.NTH_VALUE);
				this.state = 7094;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7095;
				this.expression(0);
				this.state = 7096;
				this.match(MySqlParser.COMMA);
				this.state = 7097;
				this.decimalLiteral();
				this.state = 7098;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 7099;
				this.overClause();
				}
				break;
			case 300:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 7101;
				this.match(MySqlParser.NTILE);
				this.state = 7102;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7103;
				this.decimalLiteral();
				this.state = 7104;
				this.match(MySqlParser.RR_BRACKET);
				this.state = 7105;
				this.overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public overClause(): OverClauseContext {
		let localctx: OverClauseContext = new OverClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 662, MySqlParser.RULE_overClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7109;
			this.match(MySqlParser.OVER);
			this.state = 7115;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1133:
				{
				this.state = 7110;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7111;
				this.windowSpec();
				this.state = 7112;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 11:
			case 14:
			case 18:
			case 29:
			case 35:
			case 37:
			case 39:
			case 42:
			case 48:
			case 55:
			case 57:
			case 59:
			case 73:
			case 77:
			case 79:
			case 85:
			case 94:
			case 97:
			case 117:
			case 121:
			case 124:
			case 130:
			case 140:
			case 141:
			case 148:
			case 150:
			case 158:
			case 168:
			case 217:
			case 218:
			case 219:
			case 220:
			case 221:
			case 226:
			case 234:
			case 237:
			case 239:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 288:
			case 289:
			case 290:
			case 291:
			case 292:
			case 293:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 305:
			case 306:
			case 307:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 315:
			case 316:
			case 317:
			case 318:
			case 319:
			case 320:
			case 322:
			case 323:
			case 324:
			case 325:
			case 326:
			case 327:
			case 328:
			case 329:
			case 330:
			case 331:
			case 332:
			case 333:
			case 334:
			case 335:
			case 336:
			case 337:
			case 338:
			case 339:
			case 340:
			case 341:
			case 342:
			case 343:
			case 344:
			case 345:
			case 346:
			case 347:
			case 348:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 354:
			case 355:
			case 356:
			case 357:
			case 358:
			case 359:
			case 360:
			case 361:
			case 362:
			case 363:
			case 364:
			case 365:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 371:
			case 372:
			case 373:
			case 374:
			case 375:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 382:
			case 383:
			case 384:
			case 385:
			case 387:
			case 388:
			case 389:
			case 390:
			case 391:
			case 392:
			case 393:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
			case 399:
			case 400:
			case 401:
			case 402:
			case 403:
			case 405:
			case 407:
			case 408:
			case 409:
			case 410:
			case 411:
			case 412:
			case 413:
			case 414:
			case 415:
			case 416:
			case 417:
			case 418:
			case 419:
			case 420:
			case 421:
			case 422:
			case 423:
			case 424:
			case 425:
			case 426:
			case 427:
			case 428:
			case 429:
			case 430:
			case 431:
			case 432:
			case 434:
			case 435:
			case 436:
			case 437:
			case 438:
			case 439:
			case 440:
			case 441:
			case 442:
			case 443:
			case 444:
			case 445:
			case 446:
			case 447:
			case 448:
			case 449:
			case 450:
			case 452:
			case 453:
			case 454:
			case 455:
			case 456:
			case 457:
			case 458:
			case 459:
			case 460:
			case 461:
			case 462:
			case 463:
			case 464:
			case 465:
			case 466:
			case 467:
			case 468:
			case 469:
			case 470:
			case 471:
			case 472:
			case 473:
			case 474:
			case 475:
			case 476:
			case 477:
			case 478:
			case 479:
			case 480:
			case 481:
			case 482:
			case 483:
			case 484:
			case 485:
			case 486:
			case 487:
			case 488:
			case 489:
			case 490:
			case 491:
			case 492:
			case 493:
			case 494:
			case 495:
			case 496:
			case 497:
			case 498:
			case 499:
			case 500:
			case 501:
			case 502:
			case 503:
			case 504:
			case 505:
			case 506:
			case 507:
			case 508:
			case 509:
			case 510:
			case 511:
			case 512:
			case 513:
			case 514:
			case 515:
			case 516:
			case 517:
			case 518:
			case 519:
			case 520:
			case 521:
			case 523:
			case 527:
			case 528:
			case 529:
			case 530:
			case 531:
			case 532:
			case 533:
			case 534:
			case 535:
			case 536:
			case 537:
			case 538:
			case 539:
			case 540:
			case 541:
			case 542:
			case 543:
			case 544:
			case 547:
			case 548:
			case 549:
			case 550:
			case 551:
			case 552:
			case 553:
			case 554:
			case 555:
			case 556:
			case 557:
			case 558:
			case 560:
			case 561:
			case 562:
			case 563:
			case 564:
			case 565:
			case 566:
			case 567:
			case 568:
			case 569:
			case 570:
			case 571:
			case 572:
			case 573:
			case 574:
			case 575:
			case 576:
			case 577:
			case 578:
			case 579:
			case 580:
			case 581:
			case 582:
			case 583:
			case 584:
			case 585:
			case 586:
			case 587:
			case 588:
			case 589:
			case 591:
			case 592:
			case 593:
			case 594:
			case 595:
			case 596:
			case 597:
			case 598:
			case 599:
			case 600:
			case 601:
			case 602:
			case 603:
			case 604:
			case 605:
			case 606:
			case 608:
			case 609:
			case 610:
			case 611:
			case 612:
			case 613:
			case 614:
			case 615:
			case 616:
			case 617:
			case 618:
			case 619:
			case 620:
			case 621:
			case 622:
			case 623:
			case 624:
			case 625:
			case 626:
			case 627:
			case 628:
			case 629:
			case 630:
			case 631:
			case 632:
			case 633:
			case 634:
			case 635:
			case 636:
			case 638:
			case 639:
			case 640:
			case 641:
			case 642:
			case 643:
			case 644:
			case 645:
			case 646:
			case 647:
			case 648:
			case 649:
			case 650:
			case 651:
			case 652:
			case 653:
			case 654:
			case 655:
			case 656:
			case 657:
			case 658:
			case 659:
			case 660:
			case 661:
			case 662:
			case 663:
			case 664:
			case 665:
			case 666:
			case 667:
			case 668:
			case 669:
			case 670:
			case 671:
			case 672:
			case 673:
			case 674:
			case 675:
			case 677:
			case 678:
			case 679:
			case 680:
			case 681:
			case 682:
			case 684:
			case 685:
			case 686:
			case 687:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
			case 697:
			case 699:
			case 700:
			case 701:
			case 702:
			case 703:
			case 704:
			case 705:
			case 706:
			case 707:
			case 708:
			case 709:
			case 710:
			case 711:
			case 712:
			case 717:
			case 718:
			case 720:
			case 721:
			case 722:
			case 723:
			case 724:
			case 725:
			case 726:
			case 727:
			case 728:
			case 729:
			case 730:
			case 731:
			case 732:
			case 733:
			case 734:
			case 736:
			case 737:
			case 738:
			case 739:
			case 740:
			case 741:
			case 742:
			case 743:
			case 744:
			case 745:
			case 746:
			case 747:
			case 748:
			case 749:
			case 750:
			case 751:
			case 752:
			case 753:
			case 754:
			case 755:
			case 756:
			case 757:
			case 758:
			case 759:
			case 760:
			case 761:
			case 762:
			case 763:
			case 764:
			case 765:
			case 766:
			case 767:
			case 768:
			case 769:
			case 770:
			case 771:
			case 772:
			case 773:
			case 774:
			case 775:
			case 776:
			case 777:
			case 778:
			case 779:
			case 780:
			case 781:
			case 782:
			case 783:
			case 784:
			case 785:
			case 786:
			case 787:
			case 788:
			case 789:
			case 790:
			case 791:
			case 792:
			case 793:
			case 794:
			case 795:
			case 796:
			case 797:
			case 798:
			case 799:
			case 800:
			case 801:
			case 802:
			case 803:
			case 806:
			case 807:
			case 808:
			case 809:
			case 810:
			case 811:
			case 812:
			case 813:
			case 814:
			case 815:
			case 816:
			case 817:
			case 818:
			case 819:
			case 820:
			case 821:
			case 822:
			case 823:
			case 824:
			case 825:
			case 826:
			case 827:
			case 828:
			case 829:
			case 830:
			case 831:
			case 832:
			case 833:
			case 834:
			case 835:
			case 836:
			case 837:
			case 838:
			case 839:
			case 840:
			case 841:
			case 842:
			case 843:
			case 844:
			case 845:
			case 846:
			case 847:
			case 848:
			case 849:
			case 850:
			case 851:
			case 852:
			case 853:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			case 873:
			case 874:
			case 875:
			case 876:
			case 877:
			case 878:
			case 879:
			case 880:
			case 881:
			case 882:
			case 883:
			case 884:
			case 885:
			case 886:
			case 887:
			case 888:
			case 889:
			case 890:
			case 891:
			case 892:
			case 893:
			case 894:
			case 895:
			case 896:
			case 897:
			case 898:
			case 899:
			case 900:
			case 901:
			case 902:
			case 903:
			case 904:
			case 905:
			case 906:
			case 907:
			case 908:
			case 909:
			case 910:
			case 911:
			case 912:
			case 913:
			case 914:
			case 915:
			case 916:
			case 917:
			case 918:
			case 919:
			case 920:
			case 921:
			case 922:
			case 923:
			case 924:
			case 925:
			case 926:
			case 927:
			case 928:
			case 929:
			case 930:
			case 931:
			case 932:
			case 933:
			case 934:
			case 935:
			case 936:
			case 937:
			case 938:
			case 939:
			case 940:
			case 941:
			case 942:
			case 943:
			case 944:
			case 945:
			case 946:
			case 947:
			case 948:
			case 949:
			case 950:
			case 951:
			case 952:
			case 953:
			case 954:
			case 955:
			case 956:
			case 957:
			case 958:
			case 959:
			case 960:
			case 961:
			case 962:
			case 963:
			case 964:
			case 965:
			case 966:
			case 967:
			case 968:
			case 969:
			case 970:
			case 971:
			case 972:
			case 973:
			case 974:
			case 975:
			case 976:
			case 977:
			case 978:
			case 979:
			case 980:
			case 981:
			case 982:
			case 983:
			case 984:
			case 985:
			case 986:
			case 987:
			case 988:
			case 989:
			case 990:
			case 991:
			case 992:
			case 993:
			case 994:
			case 995:
			case 996:
			case 997:
			case 998:
			case 999:
			case 1000:
			case 1001:
			case 1002:
			case 1003:
			case 1004:
			case 1005:
			case 1006:
			case 1007:
			case 1008:
			case 1009:
			case 1010:
			case 1011:
			case 1012:
			case 1013:
			case 1014:
			case 1015:
			case 1016:
			case 1017:
			case 1018:
			case 1019:
			case 1020:
			case 1021:
			case 1022:
			case 1023:
			case 1024:
			case 1025:
			case 1026:
			case 1027:
			case 1028:
			case 1029:
			case 1030:
			case 1031:
			case 1032:
			case 1033:
			case 1034:
			case 1035:
			case 1036:
			case 1037:
			case 1038:
			case 1039:
			case 1040:
			case 1041:
			case 1042:
			case 1043:
			case 1044:
			case 1045:
			case 1046:
			case 1047:
			case 1048:
			case 1049:
			case 1050:
			case 1051:
			case 1052:
			case 1053:
			case 1054:
			case 1055:
			case 1056:
			case 1057:
			case 1058:
			case 1059:
			case 1060:
			case 1061:
			case 1062:
			case 1063:
			case 1064:
			case 1065:
			case 1066:
			case 1067:
			case 1068:
			case 1069:
			case 1070:
			case 1071:
			case 1072:
			case 1073:
			case 1074:
			case 1075:
			case 1076:
			case 1077:
			case 1078:
			case 1079:
			case 1080:
			case 1081:
			case 1082:
			case 1083:
			case 1084:
			case 1085:
			case 1086:
			case 1087:
			case 1088:
			case 1089:
			case 1090:
			case 1091:
			case 1092:
			case 1093:
			case 1094:
			case 1095:
			case 1096:
			case 1097:
			case 1098:
			case 1099:
			case 1100:
			case 1101:
			case 1102:
			case 1103:
			case 1104:
			case 1105:
			case 1106:
			case 1107:
			case 1123:
			case 1145:
			case 1148:
			case 1156:
				{
				this.state = 7114;
				this.windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowSpec(): WindowSpecContext {
		let localctx: WindowSpecContext = new WindowSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 664, MySqlParser.RULE_windowSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7118;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1054, this._ctx) ) {
			case 1:
				{
				this.state = 7117;
				this.windowName();
				}
				break;
			}
			this.state = 7121;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 7120;
				this.partitionClause();
				}
			}

			this.state = 7124;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===124) {
				{
				this.state = 7123;
				this.orderByClause();
				}
			}

			this.state = 7127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===133 || _la===601) {
				{
				this.state = 7126;
				this.frameClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public windowName(): WindowNameContext {
		let localctx: WindowNameContext = new WindowNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 666, MySqlParser.RULE_windowName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7129;
			this.uid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public frameClause(): FrameClauseContext {
		let localctx: FrameClauseContext = new FrameClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 668, MySqlParser.RULE_frameClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7131;
			this.frameUnits();
			this.state = 7132;
			this.frameExtent();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public frameUnits(): FrameUnitsContext {
		let localctx: FrameUnitsContext = new FrameUnitsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 670, MySqlParser.RULE_frameUnits);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7134;
			_la = this._input.LA(1);
			if(!(_la===133 || _la===601)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public frameExtent(): FrameExtentContext {
		let localctx: FrameExtentContext = new FrameExtentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 672, MySqlParser.RULE_frameExtent);
		try {
			this.state = 7138;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1058, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7136;
				this.frameRange();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7137;
				this.frameBetween();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public frameBetween(): FrameBetweenContext {
		let localctx: FrameBetweenContext = new FrameBetweenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 674, MySqlParser.RULE_frameBetween);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7140;
			this.match(MySqlParser.BETWEEN);
			this.state = 7141;
			this.frameRange();
			this.state = 7142;
			this.match(MySqlParser.AND);
			this.state = 7143;
			this.frameRange();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public frameRange(): FrameRangeContext {
		let localctx: FrameRangeContext = new FrameRangeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 676, MySqlParser.RULE_frameRange);
		let _la: number;
		try {
			this.state = 7152;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1059, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7145;
				this.match(MySqlParser.CURRENT);
				this.state = 7146;
				this.match(MySqlParser.ROW);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7147;
				this.match(MySqlParser.UNBOUNDED);
				this.state = 7148;
				_la = this._input.LA(1);
				if(!(_la===433 || _la===559)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7149;
				this.expression(0);
				this.state = 7150;
				_la = this._input.LA(1);
				if(!(_la===433 || _la===559)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionClause(): PartitionClauseContext {
		let localctx: PartitionClauseContext = new PartitionClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 678, MySqlParser.RULE_partitionClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7154;
			this.match(MySqlParser.PARTITION);
			this.state = 7155;
			this.match(MySqlParser.BY);
			this.state = 7156;
			this.expression(0);
			this.state = 7161;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 7157;
				this.match(MySqlParser.COMMA);
				this.state = 7158;
				this.expression(0);
				}
				}
				this.state = 7163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public scalarFunctionName(): ScalarFunctionNameContext {
		let localctx: ScalarFunctionNameContext = new ScalarFunctionNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 680, MySqlParser.RULE_scalarFunctionName);
		try {
			this.state = 7188;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 39:
			case 97:
			case 148:
			case 150:
			case 217:
			case 218:
			case 219:
			case 221:
			case 251:
			case 252:
			case 253:
			case 254:
			case 255:
			case 256:
			case 257:
			case 258:
			case 259:
			case 260:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 273:
			case 274:
			case 275:
			case 276:
			case 277:
			case 278:
			case 279:
			case 280:
			case 281:
			case 282:
			case 290:
			case 291:
			case 292:
			case 293:
			case 295:
			case 296:
			case 297:
			case 300:
			case 301:
			case 302:
			case 303:
			case 304:
			case 324:
			case 459:
			case 673:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
			case 694:
			case 695:
			case 696:
			case 736:
			case 803:
			case 806:
			case 807:
			case 808:
			case 809:
			case 810:
			case 811:
			case 812:
			case 813:
			case 814:
			case 815:
			case 816:
			case 817:
			case 818:
			case 819:
			case 820:
			case 821:
			case 822:
			case 823:
			case 824:
			case 825:
			case 826:
			case 827:
			case 828:
			case 829:
			case 830:
			case 831:
			case 832:
			case 833:
			case 834:
			case 835:
			case 837:
			case 838:
			case 839:
			case 840:
			case 841:
			case 842:
			case 843:
			case 844:
			case 845:
			case 846:
			case 847:
			case 848:
			case 849:
			case 850:
			case 851:
			case 852:
			case 853:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			case 873:
			case 874:
			case 876:
			case 877:
			case 878:
			case 879:
			case 880:
			case 881:
			case 882:
			case 883:
			case 884:
			case 885:
			case 886:
			case 887:
			case 888:
			case 889:
			case 890:
			case 891:
			case 892:
			case 893:
			case 894:
			case 895:
			case 896:
			case 897:
			case 898:
			case 899:
			case 900:
			case 901:
			case 902:
			case 903:
			case 904:
			case 905:
			case 906:
			case 907:
			case 908:
			case 909:
			case 910:
			case 911:
			case 912:
			case 913:
			case 914:
			case 915:
			case 916:
			case 917:
			case 918:
			case 919:
			case 920:
			case 921:
			case 922:
			case 923:
			case 924:
			case 925:
			case 926:
			case 927:
			case 928:
			case 929:
			case 930:
			case 931:
			case 932:
			case 933:
			case 934:
			case 935:
			case 936:
			case 937:
			case 938:
			case 939:
			case 940:
			case 941:
			case 942:
			case 943:
			case 944:
			case 945:
			case 946:
			case 947:
			case 948:
			case 949:
			case 950:
			case 951:
			case 952:
			case 953:
			case 954:
			case 955:
			case 956:
			case 957:
			case 958:
			case 959:
			case 960:
			case 961:
			case 962:
			case 963:
			case 964:
			case 965:
			case 966:
			case 967:
			case 968:
			case 969:
			case 970:
			case 971:
			case 972:
			case 973:
			case 974:
			case 975:
			case 976:
			case 977:
			case 978:
			case 979:
			case 980:
			case 981:
			case 982:
			case 983:
			case 984:
			case 985:
			case 986:
			case 987:
			case 988:
			case 989:
			case 990:
			case 991:
			case 992:
			case 993:
			case 994:
			case 995:
			case 996:
			case 997:
			case 998:
			case 999:
			case 1001:
			case 1002:
			case 1003:
			case 1004:
			case 1006:
			case 1007:
			case 1008:
			case 1009:
			case 1010:
			case 1011:
			case 1012:
			case 1013:
			case 1014:
			case 1015:
			case 1016:
			case 1017:
			case 1018:
			case 1019:
			case 1020:
			case 1021:
			case 1022:
			case 1023:
			case 1024:
			case 1025:
			case 1026:
			case 1027:
			case 1028:
			case 1029:
			case 1030:
			case 1031:
			case 1032:
			case 1033:
			case 1034:
			case 1035:
			case 1036:
			case 1037:
			case 1038:
			case 1039:
			case 1040:
			case 1041:
			case 1042:
			case 1043:
			case 1044:
			case 1045:
			case 1046:
			case 1047:
			case 1048:
			case 1049:
			case 1050:
			case 1051:
			case 1052:
			case 1053:
			case 1054:
			case 1055:
			case 1056:
			case 1057:
			case 1058:
			case 1059:
			case 1060:
			case 1061:
			case 1062:
			case 1063:
			case 1064:
			case 1065:
			case 1066:
			case 1067:
			case 1068:
			case 1069:
			case 1070:
			case 1071:
			case 1072:
			case 1073:
			case 1074:
			case 1075:
			case 1076:
			case 1077:
			case 1078:
			case 1079:
			case 1080:
			case 1081:
			case 1082:
			case 1083:
			case 1084:
			case 1085:
			case 1086:
			case 1087:
			case 1089:
			case 1090:
			case 1091:
			case 1092:
			case 1093:
			case 1094:
			case 1095:
			case 1096:
			case 1097:
			case 1098:
			case 1099:
			case 1100:
			case 1101:
			case 1102:
			case 1103:
			case 1104:
			case 1105:
			case 1106:
			case 1107:
			case 1123:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7164;
				this.functionNameBase();
				}
				break;
			case 747:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7165;
				this.match(MySqlParser.ASCII);
				}
				break;
			case 317:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7166;
				this.match(MySqlParser.CURDATE);
				}
				break;
			case 313:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7167;
				this.match(MySqlParser.CURRENT_DATE);
				}
				break;
			case 314:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 7168;
				this.match(MySqlParser.CURRENT_TIME);
				}
				break;
			case 315:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 7169;
				this.match(MySqlParser.CURRENT_TIMESTAMP);
				}
				break;
			case 318:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 7170;
				this.match(MySqlParser.CURTIME);
				}
				break;
			case 319:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 7171;
				this.match(MySqlParser.DATE_ADD);
				}
				break;
			case 320:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 7172;
				this.match(MySqlParser.DATE_SUB);
				}
				break;
			case 77:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 7173;
				this.match(MySqlParser.IF);
				}
				break;
			case 85:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 7174;
				this.match(MySqlParser.INSERT);
				}
				break;
			case 316:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 7175;
				this.match(MySqlParser.LOCALTIME);
				}
				break;
			case 322:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 7176;
				this.match(MySqlParser.LOCALTIMESTAMP);
				}
				break;
			case 508:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 7177;
				this.match(MySqlParser.MID);
				}
				break;
			case 323:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 7178;
				this.match(MySqlParser.NOW);
				}
				break;
			case 140:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 7179;
				this.match(MySqlParser.REPEAT);
				}
				break;
			case 141:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 7180;
				this.match(MySqlParser.REPLACE);
				}
				break;
			case 325:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 7181;
				this.match(MySqlParser.SUBSTR);
				}
				break;
			case 326:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 7182;
				this.match(MySqlParser.SUBSTRING);
				}
				break;
			case 327:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 7183;
				this.match(MySqlParser.SYSDATE);
				}
				break;
			case 328:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 7184;
				this.match(MySqlParser.TRIM);
				}
				break;
			case 329:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 7185;
				this.match(MySqlParser.UTC_DATE);
				}
				break;
			case 330:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 7186;
				this.match(MySqlParser.UTC_TIME);
				}
				break;
			case 331:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 7187;
				this.match(MySqlParser.UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		let localctx: PasswordFunctionClauseContext = new PasswordFunctionClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 682, MySqlParser.RULE_passwordFunctionClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7190;
			localctx._functionName = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===535 || _la===551)) {
			    localctx._functionName = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 7191;
			this.match(MySqlParser.LR_BRACKET);
			this.state = 7192;
			this.functionArg();
			this.state = 7193;
			this.match(MySqlParser.RR_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionArgs(): FunctionArgsContext {
		let localctx: FunctionArgsContext = new FunctionArgsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 684, MySqlParser.RULE_functionArgs);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7199;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1062, this._ctx) ) {
			case 1:
				{
				this.state = 7195;
				this.constant();
				}
				break;
			case 2:
				{
				this.state = 7196;
				this.fullColumnName();
				}
				break;
			case 3:
				{
				this.state = 7197;
				this.functionCall();
				}
				break;
			case 4:
				{
				this.state = 7198;
				this.expression(0);
				}
				break;
			}
			this.state = 7210;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===1135) {
				{
				{
				this.state = 7201;
				this.match(MySqlParser.COMMA);
				this.state = 7206;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 1063, this._ctx) ) {
				case 1:
					{
					this.state = 7202;
					this.constant();
					}
					break;
				case 2:
					{
					this.state = 7203;
					this.fullColumnName();
					}
					break;
				case 3:
					{
					this.state = 7204;
					this.functionCall();
					}
					break;
				case 4:
					{
					this.state = 7205;
					this.expression(0);
					}
					break;
				}
				}
				}
				this.state = 7212;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionArg(): FunctionArgContext {
		let localctx: FunctionArgContext = new FunctionArgContext(this, this._ctx, this.state);
		this.enterRule(localctx, 686, MySqlParser.RULE_functionArg);
		try {
			this.state = 7217;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1065, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7213;
				this.constant();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7214;
				this.fullColumnName();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7215;
				this.functionCall();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7216;
				this.expression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public expression(): ExpressionContext;
	public expression(_p: number): ExpressionContext;
	// @RuleVersion(0)
	public expression(_p?: number): ExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: ExpressionContext = new ExpressionContext(this, this._ctx, _parentState);
		let _prevctx: ExpressionContext = localctx;
		let _startState: number = 688;
		this.enterRecursionRule(localctx, 688, MySqlParser.RULE_expression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7230;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1067, this._ctx) ) {
			case 1:
				{
				localctx = new NotExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;

				this.state = 7220;
				(localctx as NotExpressionContext)._notOperator = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===114 || _la===1127)) {
				    (localctx as NotExpressionContext)._notOperator = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 7221;
				this.expression(4);
				}
				break;
			case 2:
				{
				localctx = new IsExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7222;
				this.predicate(0);
				this.state = 7223;
				this.match(MySqlParser.IS);
				this.state = 7225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===114) {
					{
					this.state = 7224;
					this.match(MySqlParser.NOT);
					}
				}

				this.state = 7227;
				(localctx as IsExpressionContext)._testValue = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===63 || _la===178 || _la===662)) {
				    (localctx as IsExpressionContext)._testValue = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 3:
				{
				localctx = new PredicateExpressionContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7229;
				this.predicate(0);
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 7238;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1068, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					{
					localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
					this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expression);
					this.state = 7232;
					if (!(this.precpred(this._ctx, 3))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
					}
					this.state = 7233;
					this.logicalOperator();
					this.state = 7234;
					this.expression(4);
					}
					}
				}
				this.state = 7240;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1068, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	public predicate(): PredicateContext;
	public predicate(_p: number): PredicateContext;
	// @RuleVersion(0)
	public predicate(_p?: number): PredicateContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: PredicateContext = new PredicateContext(this, this._ctx, _parentState);
		let _prevctx: PredicateContext = localctx;
		let _startState: number = 690;
		this.enterRecursionRule(localctx, 690, MySqlParser.RULE_predicate, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			{
			localctx = new ExpressionAtomPredicateContext(this, localctx);
			this._ctx = localctx;
			_prevctx = localctx;

			this.state = 7242;
			this.expressionAtom(0);
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 7308;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1076, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 7306;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1075, this._ctx) ) {
					case 1:
						{
						localctx = new BinaryComparisonPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
						(localctx as BinaryComparisonPredicateContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 7244;
						if (!(this.precpred(this._ctx, 8))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
						}
						this.state = 7245;
						this.comparisonOperator();
						this.state = 7246;
						(localctx as BinaryComparisonPredicateContext)._right = this.predicate(9);
						}
						break;
					case 2:
						{
						localctx = new BetweenPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 7248;
						if (!(this.precpred(this._ctx, 6))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
						}
						this.state = 7250;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===114) {
							{
							this.state = 7249;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 7252;
						this.match(MySqlParser.BETWEEN);
						this.state = 7253;
						this.predicate(0);
						this.state = 7254;
						this.match(MySqlParser.AND);
						this.state = 7255;
						this.predicate(7);
						}
						break;
					case 3:
						{
						localctx = new SoundsLikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 7257;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 7258;
						this.match(MySqlParser.SOUNDS);
						this.state = 7259;
						this.match(MySqlParser.LIKE);
						this.state = 7260;
						this.predicate(6);
						}
						break;
					case 4:
						{
						localctx = new RegexpPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 7261;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 7263;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===114) {
							{
							this.state = 7262;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 7265;
						(localctx as RegexpPredicateContext)._regex = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===137 || _la===149)) {
						    (localctx as RegexpPredicateContext)._regex = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 7266;
						this.predicate(4);
						}
						break;
					case 5:
						{
						localctx = new InPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 7267;
						if (!(this.precpred(this._ctx, 10))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
						}
						this.state = 7269;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===114) {
							{
							this.state = 7268;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 7271;
						this.match(MySqlParser.IN);
						this.state = 7272;
						this.match(MySqlParser.LR_BRACKET);
						this.state = 7275;
						this._errHandler.sync(this);
						switch ( this._interp.adaptivePredict(this._input, 1072, this._ctx) ) {
						case 1:
							{
							this.state = 7273;
							this.selectStatement();
							}
							break;
						case 2:
							{
							this.state = 7274;
							this.expressions();
							}
							break;
						}
						this.state = 7277;
						this.match(MySqlParser.RR_BRACKET);
						}
						break;
					case 6:
						{
						localctx = new IsNullPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 7279;
						if (!(this.precpred(this._ctx, 9))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
						}
						this.state = 7280;
						this.match(MySqlParser.IS);
						this.state = 7281;
						this.nullNotnull();
						}
						break;
					case 7:
						{
						localctx = new SubqueryComparisonPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 7282;
						if (!(this.precpred(this._ctx, 7))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
						}
						this.state = 7283;
						this.comparisonOperator();
						this.state = 7284;
						(localctx as SubqueryComparisonPredicateContext)._quantifier = this._input.LT(1);
						_la = this._input.LA(1);
						if(!(_la===6 || _la===337 || _la===618)) {
						    (localctx as SubqueryComparisonPredicateContext)._quantifier = this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						this.state = 7285;
						this.match(MySqlParser.LR_BRACKET);
						this.state = 7286;
						this.selectStatement();
						this.state = 7287;
						this.match(MySqlParser.RR_BRACKET);
						}
						break;
					case 8:
						{
						localctx = new LikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 7289;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 7291;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la===114) {
							{
							this.state = 7290;
							this.match(MySqlParser.NOT);
							}
						}

						this.state = 7293;
						this.match(MySqlParser.LIKE);
						this.state = 7294;
						this.predicate(0);
						this.state = 7297;
						this._errHandler.sync(this);
						switch ( this._interp.adaptivePredict(this._input, 1074, this._ctx) ) {
						case 1:
							{
							this.state = 7295;
							this.match(MySqlParser.ESCAPE);
							this.state = 7296;
							this.match(MySqlParser.STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						localctx = new JsonMemberOfPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
						this.state = 7299;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 7300;
						this.match(MySqlParser.MEMBER);
						this.state = 7301;
						this.match(MySqlParser.OF);
						this.state = 7302;
						this.match(MySqlParser.LR_BRACKET);
						this.state = 7303;
						this.predicate(0);
						this.state = 7304;
						this.match(MySqlParser.RR_BRACKET);
						}
						break;
					}
					}
				}
				this.state = 7310;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1076, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	public expressionAtom(): ExpressionAtomContext;
	public expressionAtom(_p: number): ExpressionAtomContext;
	// @RuleVersion(0)
	public expressionAtom(_p?: number): ExpressionAtomContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let localctx: ExpressionAtomContext = new ExpressionAtomContext(this, this._ctx, _parentState);
		let _prevctx: ExpressionAtomContext = localctx;
		let _startState: number = 692;
		this.enterRecursionRule(localctx, 692, MySqlParser.RULE_expressionAtom, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7359;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1079, this._ctx) ) {
			case 1:
				{
				localctx = new ConstantExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;

				this.state = 7312;
				this.constant();
				}
				break;
			case 2:
				{
				localctx = new FullColumnNameExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7313;
				this.fullColumnName();
				}
				break;
			case 3:
				{
				localctx = new FunctionCallExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7314;
				this.functionCall();
				}
				break;
			case 4:
				{
				localctx = new MysqlVariableExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7315;
				this.mysqlVariable();
				}
				break;
			case 5:
				{
				localctx = new UnaryExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7316;
				this.unaryOperator();
				this.state = 7317;
				this.expressionAtom(12);
				}
				break;
			case 6:
				{
				localctx = new BinaryExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7319;
				this.match(MySqlParser.BINARY);
				this.state = 7320;
				this.expressionAtom(11);
				}
				break;
			case 7:
				{
				localctx = new VariableAssignExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7321;
				this.match(MySqlParser.LOCAL_ID);
				this.state = 7322;
				this.match(MySqlParser.VAR_ASSIGN);
				this.state = 7323;
				this.expressionAtom(10);
				}
				break;
			case 8:
				{
				localctx = new NestedExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7324;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7325;
				this.expression(0);
				this.state = 7330;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===1135) {
					{
					{
					this.state = 7326;
					this.match(MySqlParser.COMMA);
					this.state = 7327;
					this.expression(0);
					}
					}
					this.state = 7332;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 7333;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 9:
				{
				localctx = new NestedRowExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7335;
				this.match(MySqlParser.ROW);
				this.state = 7336;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7337;
				this.expression(0);
				this.state = 7340;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 7338;
					this.match(MySqlParser.COMMA);
					this.state = 7339;
					this.expression(0);
					}
					}
					this.state = 7342;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===1135);
				this.state = 7344;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 10:
				{
				localctx = new ExistsExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7346;
				this.match(MySqlParser.EXISTS);
				this.state = 7347;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7348;
				this.selectStatement();
				this.state = 7349;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 11:
				{
				localctx = new SubqueryExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7351;
				this.match(MySqlParser.LR_BRACKET);
				this.state = 7352;
				this.selectStatement();
				this.state = 7353;
				this.match(MySqlParser.RR_BRACKET);
				}
				break;
			case 12:
				{
				localctx = new IntervalExpressionAtomContext(this, localctx);
				this._ctx = localctx;
				_prevctx = localctx;
				this.state = 7355;
				this.match(MySqlParser.INTERVAL);
				this.state = 7356;
				this.expression(0);
				this.state = 7357;
				this.intervalType();
				}
				break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 7382;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 1081, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					{
					this.state = 7380;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 1080, this._ctx) ) {
					case 1:
						{
						localctx = new BitExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
						(localctx as BitExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 7361;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 7362;
						this.bitOperator();
						this.state = 7363;
						(localctx as BitExpressionAtomContext)._right = this.expressionAtom(5);
						}
						break;
					case 2:
						{
						localctx = new MathExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
						(localctx as MathExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 7365;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 7366;
						this.multOperator();
						this.state = 7367;
						(localctx as MathExpressionAtomContext)._right = this.expressionAtom(4);
						}
						break;
					case 3:
						{
						localctx = new MathExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
						(localctx as MathExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 7369;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 7370;
						this.addOperator();
						this.state = 7371;
						(localctx as MathExpressionAtomContext)._right = this.expressionAtom(3);
						}
						break;
					case 4:
						{
						localctx = new JsonExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
						(localctx as JsonExpressionAtomContext)._left = _prevctx;
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 7373;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 7374;
						this.jsonOperator();
						this.state = 7375;
						(localctx as JsonExpressionAtomContext)._right = this.expressionAtom(2);
						}
						break;
					case 5:
						{
						localctx = new CollateExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
						this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
						this.state = 7377;
						if (!(this.precpred(this._ctx, 14))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 14)");
						}
						this.state = 7378;
						this.match(MySqlParser.COLLATE);
						this.state = 7379;
						this.collationName();
						}
						break;
					}
					}
				}
				this.state = 7384;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1081, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unaryOperator(): UnaryOperatorContext {
		let localctx: UnaryOperatorContext = new UnaryOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 694, MySqlParser.RULE_unaryOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7385;
			_la = this._input.LA(1);
			if(!(_la===114 || ((((_la - 1120)) & ~0x1F) === 0 && ((1 << (_la - 1120)) & 387) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comparisonOperator(): ComparisonOperatorContext {
		let localctx: ComparisonOperatorContext = new ComparisonOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 696, MySqlParser.RULE_comparisonOperator);
		try {
			this.state = 7401;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1082, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7387;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7388;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7389;
				this.match(MySqlParser.LESS_SYMBOL);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7390;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 7391;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 7392;
				this.match(MySqlParser.GREATER_SYMBOL);
				this.state = 7393;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 7394;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 7395;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 7396;
				this.match(MySqlParser.EXCLAMATION_SYMBOL);
				this.state = 7397;
				this.match(MySqlParser.EQUAL_SYMBOL);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 7398;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 7399;
				this.match(MySqlParser.EQUAL_SYMBOL);
				this.state = 7400;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public logicalOperator(): LogicalOperatorContext {
		let localctx: LogicalOperatorContext = new LogicalOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 698, MySqlParser.RULE_logicalOperator);
		try {
			this.state = 7410;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 10:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7403;
				this.match(MySqlParser.AND);
				}
				break;
			case 1130:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7404;
				this.match(MySqlParser.BIT_AND_OP);
				this.state = 7405;
				this.match(MySqlParser.BIT_AND_OP);
				}
				break;
			case 194:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7406;
				this.match(MySqlParser.XOR);
				}
				break;
			case 123:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7407;
				this.match(MySqlParser.OR);
				}
				break;
			case 1129:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 7408;
				this.match(MySqlParser.BIT_OR_OP);
				this.state = 7409;
				this.match(MySqlParser.BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public bitOperator(): BitOperatorContext {
		let localctx: BitOperatorContext = new BitOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 700, MySqlParser.RULE_bitOperator);
		try {
			this.state = 7419;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1126:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7412;
				this.match(MySqlParser.LESS_SYMBOL);
				this.state = 7413;
				this.match(MySqlParser.LESS_SYMBOL);
				}
				break;
			case 1125:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7414;
				this.match(MySqlParser.GREATER_SYMBOL);
				this.state = 7415;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			case 1130:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 7416;
				this.match(MySqlParser.BIT_AND_OP);
				}
				break;
			case 1131:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 7417;
				this.match(MySqlParser.BIT_XOR_OP);
				}
				break;
			case 1129:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 7418;
				this.match(MySqlParser.BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public multOperator(): MultOperatorContext {
		let localctx: MultOperatorContext = new MultOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 702, MySqlParser.RULE_multOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7421;
			_la = this._input.LA(1);
			if(!(((((_la - 1117)) & ~0x1F) === 0 && ((1 << (_la - 1117)) & 103) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public addOperator(): AddOperatorContext {
		let localctx: AddOperatorContext = new AddOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 704, MySqlParser.RULE_addOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7423;
			_la = this._input.LA(1);
			if(!(_la===1120 || _la===1121)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public jsonOperator(): JsonOperatorContext {
		let localctx: JsonOperatorContext = new JsonOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 706, MySqlParser.RULE_jsonOperator);
		try {
			this.state = 7430;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 1085, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 7425;
				this.match(MySqlParser.MINUS);
				this.state = 7426;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 7427;
				this.match(MySqlParser.MINUS);
				this.state = 7428;
				this.match(MySqlParser.GREATER_SYMBOL);
				this.state = 7429;
				this.match(MySqlParser.GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charsetNameBase(): CharsetNameBaseContext {
		let localctx: CharsetNameBaseContext = new CharsetNameBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 708, MySqlParser.RULE_charsetNameBase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7432;
			_la = this._input.LA(1);
			if(!(_la===226 || ((((_la - 746)) & ~0x1F) === 0 && ((1 << (_la - 746)) & 4294967295) !== 0) || ((((_la - 778)) & ~0x1F) === 0 && ((1 << (_la - 778)) & 511) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionLevelBase(): TransactionLevelBaseContext {
		let localctx: TransactionLevelBaseContext = new TransactionLevelBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 710, MySqlParser.RULE_transactionLevelBase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7434;
			_la = this._input.LA(1);
			if(!(((((_la - 799)) & ~0x1F) === 0 && ((1 << (_la - 799)) & 15) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privilegesBase(): PrivilegesBaseContext {
		let localctx: PrivilegesBaseContext = new PrivilegesBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 712, MySqlParser.RULE_privilegesBase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7436;
			_la = this._input.LA(1);
			if(!(((((_la - 708)) & ~0x1F) === 0 && ((1 << (_la - 708)) & 2181955587) !== 0) || _la===740 || _la===742)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public intervalTypeBase(): IntervalTypeBaseContext {
		let localctx: IntervalTypeBaseContext = new IntervalTypeBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 714, MySqlParser.RULE_intervalTypeBase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7438;
			_la = this._input.LA(1);
			if(!(((((_la - 689)) & ~0x1F) === 0 && ((1 << (_la - 689)) & 255) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dataTypeBase(): DataTypeBaseContext {
		let localctx: DataTypeBaseContext = new DataTypeBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 716, MySqlParser.RULE_dataTypeBase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7440;
			_la = this._input.LA(1);
			if(!(((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 1179679) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keywordsCanBeId(): KeywordsCanBeIdContext {
		let localctx: KeywordsCanBeIdContext = new KeywordsCanBeIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 718, MySqlParser.RULE_keywordsCanBeId);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7442;
			_la = this._input.LA(1);
			if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 22028421) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 2097217) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & 8337) !== 0) || _la===158 || _la===168 || _la===239 || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 1069648127) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 4294967295) !== 0) || ((((_la - 364)) & ~0x1F) === 0 && ((1 << (_la - 364)) & 4290772991) !== 0) || ((((_la - 396)) & ~0x1F) === 0 && ((1 << (_la - 396)) & 4294966015) !== 0) || ((((_la - 428)) & ~0x1F) === 0 && ((1 << (_la - 428)) & 2139095007) !== 0) || ((((_la - 460)) & ~0x1F) === 0 && ((1 << (_la - 460)) & 4294967295) !== 0) || ((((_la - 492)) & ~0x1F) === 0 && ((1 << (_la - 492)) & 3221225471) !== 0) || ((((_la - 527)) & ~0x1F) === 0 && ((1 << (_la - 527)) & 4294180863) !== 0) || ((((_la - 560)) & ~0x1F) === 0 && ((1 << (_la - 560)) & 3221225471) !== 0) || ((((_la - 592)) & ~0x1F) === 0 && ((1 << (_la - 592)) & 4294934527) !== 0) || ((((_la - 624)) & ~0x1F) === 0 && ((1 << (_la - 624)) & 4294959103) !== 0) || ((((_la - 656)) & ~0x1F) === 0 && ((1 << (_la - 656)) & 4159569919) !== 0) || ((((_la - 688)) & ~0x1F) === 0 && ((1 << (_la - 688)) & 1641019905) !== 0) || ((((_la - 720)) & ~0x1F) === 0 && ((1 << (_la - 720)) & 61300511) !== 0) || _la===792 || _la===836 || _la===875 || _la===1000 || _la===1005 || _la===1088)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionNameBase(): FunctionNameBaseContext {
		let localctx: FunctionNameBaseContext = new FunctionNameBaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 720, MySqlParser.RULE_functionNameBase);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 7444;
			_la = this._input.LA(1);
			if(!(_la===39 || _la===97 || _la===148 || _la===150 || ((((_la - 217)) & ~0x1F) === 0 && ((1 << (_la - 217)) & 23) !== 0) || ((((_la - 251)) & ~0x1F) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 31983) !== 0) || _la===324 || _la===459 || ((((_la - 673)) & ~0x1F) === 0 && ((1 << (_la - 673)) & 16711681) !== 0) || _la===736 || ((((_la - 803)) & ~0x1F) === 0 && ((1 << (_la - 803)) & 4294967289) !== 0) || ((((_la - 835)) & ~0x1F) === 0 && ((1 << (_la - 835)) & 4294967293) !== 0) || ((((_la - 867)) & ~0x1F) === 0 && ((1 << (_la - 867)) & 4294967039) !== 0) || ((((_la - 899)) & ~0x1F) === 0 && ((1 << (_la - 899)) & 4294967295) !== 0) || ((((_la - 931)) & ~0x1F) === 0 && ((1 << (_la - 931)) & 4294967295) !== 0) || ((((_la - 963)) & ~0x1F) === 0 && ((1 << (_la - 963)) & 4294967295) !== 0) || ((((_la - 995)) & ~0x1F) === 0 && ((1 << (_la - 995)) & 4294966239) !== 0) || ((((_la - 1027)) & ~0x1F) === 0 && ((1 << (_la - 1027)) & 4294967295) !== 0) || ((((_la - 1059)) & ~0x1F) === 0 && ((1 << (_la - 1059)) & 3758096383) !== 0) || ((((_la - 1091)) & ~0x1F) === 0 && ((1 << (_la - 1091)) & 131071) !== 0) || _la===1123)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 344:
			return this.expression_sempred(localctx as ExpressionContext, predIndex);
		case 345:
			return this.predicate_sempred(localctx as PredicateContext, predIndex);
		case 346:
			return this.expressionAtom_sempred(localctx as ExpressionAtomContext, predIndex);
		}
		return true;
	}
	private expression_sempred(localctx: ExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}
	private predicate_sempred(localctx: PredicateContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.precpred(this._ctx, 8);
		case 2:
			return this.precpred(this._ctx, 6);
		case 3:
			return this.precpred(this._ctx, 5);
		case 4:
			return this.precpred(this._ctx, 3);
		case 5:
			return this.precpred(this._ctx, 10);
		case 6:
			return this.precpred(this._ctx, 9);
		case 7:
			return this.precpred(this._ctx, 7);
		case 8:
			return this.precpred(this._ctx, 4);
		case 9:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private expressionAtom_sempred(localctx: ExpressionAtomContext, predIndex: number): boolean {
		switch (predIndex) {
		case 10:
			return this.precpred(this._ctx, 4);
		case 11:
			return this.precpred(this._ctx, 3);
		case 12:
			return this.precpred(this._ctx, 2);
		case 13:
			return this.precpred(this._ctx, 1);
		case 14:
			return this.precpred(this._ctx, 14);
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,1,1161,7447,2,0,7,
	0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,
	9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,
	2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,
	24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,
	7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,
	38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
	2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,
	53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,
	7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,
	67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,
	2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,
	82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,
	7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,
	96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,
	103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,
	109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,
	115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,
	121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,
	127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,
	133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,
	139,7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,
	145,7,145,2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,
	151,7,151,2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,
	157,7,157,2,158,7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,
	163,7,163,2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,
	169,7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,
	175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,
	181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,
	187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,
	193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,
	199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,
	205,7,205,2,206,7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,
	211,7,211,2,212,7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,
	217,7,217,2,218,7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,
	223,7,223,2,224,7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,
	229,7,229,2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,
	235,7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,
	241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,
	247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,
	253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,
	259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,
	265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,
	271,7,271,2,272,7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,
	277,7,277,2,278,7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,
	283,7,283,2,284,7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,
	289,7,289,2,290,7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,
	295,7,295,2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,
	301,7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,
	307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,
	313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,
	319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,
	325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,
	331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,
	337,7,337,2,338,7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,
	343,7,343,2,344,7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,
	349,7,349,2,350,7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,
	355,7,355,2,356,7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,1,
	0,3,0,724,8,0,1,0,1,0,3,0,728,8,0,1,0,1,0,1,1,1,1,1,1,3,1,735,8,1,1,1,3,
	1,738,8,1,1,1,5,1,741,8,1,10,1,12,1,744,9,1,1,1,1,1,1,1,3,1,749,8,1,1,1,
	3,1,752,8,1,1,1,3,1,755,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,764,8,2,1,3,
	1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
	1,4,1,4,1,4,3,4,806,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
	1,5,3,5,821,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,832,8,6,1,7,1,7,
	1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,849,8,7,1,8,1,8,
	1,8,3,8,854,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,
	869,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,896,8,
	10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,905,8,11,1,12,1,12,1,12,3,12,
	910,8,12,1,12,1,12,5,12,914,8,12,10,12,12,12,917,9,12,1,13,1,13,3,13,921,
	8,13,1,13,1,13,3,13,925,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,934,
	8,13,1,13,3,13,937,8,13,1,13,3,13,940,8,13,1,13,1,13,3,13,944,8,13,1,13,
	1,13,1,13,1,14,1,14,3,14,951,8,14,1,14,3,14,954,8,14,1,14,1,14,1,14,3,14,
	959,8,14,1,14,1,14,1,14,1,14,5,14,965,8,14,10,14,12,14,968,9,14,1,14,1,
	14,3,14,972,8,14,1,14,1,14,1,14,3,14,977,8,14,1,14,5,14,980,8,14,10,14,
	12,14,983,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,994,8,
	15,1,15,3,15,997,8,15,1,15,1,15,3,15,1001,8,15,1,15,3,15,1004,8,15,1,15,
	1,15,3,15,1008,8,15,1,15,3,15,1011,8,15,1,15,1,15,3,15,1015,8,15,1,15,3,
	15,1018,8,15,1,15,3,15,1021,8,15,1,15,1,15,3,15,1025,8,15,1,15,3,15,1028,
	8,15,1,15,1,15,3,15,1032,8,15,1,15,1,15,1,16,1,16,3,16,1038,8,16,1,16,1,
	16,1,16,1,16,3,16,1044,8,16,1,16,1,16,5,16,1048,8,16,10,16,12,16,1051,9,
	16,1,16,1,16,5,16,1055,8,16,10,16,12,16,1058,9,16,1,16,1,16,1,17,1,17,3,
	17,1064,8,17,1,17,3,17,1067,8,17,1,17,1,17,3,17,1071,8,17,1,17,1,17,1,17,
	3,17,1076,8,17,1,17,1,17,5,17,1080,8,17,10,17,12,17,1083,9,17,1,17,1,17,
	1,17,1,17,5,17,1089,8,17,10,17,12,17,1092,9,17,1,17,1,17,3,17,1096,8,17,
	1,18,1,18,1,18,3,18,1101,8,18,1,18,1,18,1,18,5,18,1106,8,18,10,18,12,18,
	1109,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,
	19,1123,8,19,10,19,12,19,1126,9,19,1,19,1,19,1,20,1,20,3,20,1132,8,20,1,
	20,1,20,3,20,1136,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,1146,
	8,20,1,20,1,20,3,20,1150,8,20,1,20,1,20,3,20,1154,8,20,1,20,1,20,3,20,1158,
	8,20,1,20,1,20,3,20,1162,8,20,1,20,5,20,1165,8,20,10,20,12,20,1168,9,20,
	3,20,1170,8,20,1,20,3,20,1173,8,20,1,20,3,20,1176,8,20,1,20,3,20,1179,8,
	20,1,20,1,20,1,20,1,20,3,20,1185,8,20,1,20,1,20,3,20,1189,8,20,1,20,1,20,
	1,20,1,20,3,20,1195,8,20,1,20,5,20,1198,8,20,10,20,12,20,1201,9,20,3,20,
	1203,8,20,1,20,3,20,1206,8,20,3,20,1208,8,20,1,21,1,21,1,21,1,21,1,21,1,
	21,1,21,1,21,1,21,3,21,1219,8,21,1,21,1,21,3,21,1223,8,21,1,21,3,21,1226,
	8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,1240,
	8,22,1,22,3,22,1243,8,22,1,22,1,22,3,22,1247,8,22,1,22,3,22,1250,8,22,1,
	22,1,22,3,22,1254,8,22,1,22,3,22,1257,8,22,1,22,1,22,3,22,1261,8,22,1,22,
	3,22,1264,8,22,1,22,1,22,3,22,1268,8,22,1,22,3,22,1271,8,22,1,22,3,22,1274,
	8,22,1,22,1,22,3,22,1278,8,22,1,22,3,22,1281,8,22,1,22,1,22,3,22,1285,8,
	22,1,22,1,22,1,23,1,23,3,23,1291,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
	1,23,1,23,1,23,1,23,3,23,1304,8,23,1,23,1,23,1,24,1,24,3,24,1310,8,24,1,
	24,1,24,1,25,1,25,1,25,1,25,1,25,5,25,1319,8,25,10,25,12,25,1322,9,25,1,
	25,1,25,3,25,1326,8,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,1334,8,25,1,26,
	1,26,1,27,1,27,1,28,1,28,3,28,1342,8,28,1,28,1,28,1,28,3,28,1347,8,28,1,
	28,3,28,1350,8,28,1,28,1,28,1,28,3,28,1355,8,28,1,28,1,28,1,28,1,28,1,28,
	1,28,3,28,1363,8,28,1,28,1,28,1,28,3,28,1368,8,28,1,28,1,28,1,28,1,28,3,
	28,1374,8,28,1,28,1,28,1,28,3,28,1379,8,28,1,28,1,28,3,28,1383,8,28,3,28,
	1385,8,28,1,29,3,29,1388,8,29,1,29,1,29,3,29,1392,8,29,1,29,1,29,3,29,1396,
	8,29,1,29,3,29,1399,8,29,1,29,1,29,3,29,1403,8,29,1,29,1,29,3,29,1407,8,
	29,1,29,1,29,3,29,1411,8,29,1,29,1,29,1,29,1,29,3,29,1417,8,29,1,29,3,29,
	1420,8,29,1,30,1,30,1,30,1,30,1,30,3,30,1427,8,30,1,31,1,31,1,31,3,31,1432,
	8,31,1,32,1,32,1,32,1,32,3,32,1438,8,32,1,33,1,33,1,33,5,33,1443,8,33,10,
	33,12,33,1446,9,33,1,33,1,33,1,33,3,33,1451,8,33,1,33,1,33,1,33,1,33,5,
	33,1457,8,33,10,33,12,33,1460,9,33,3,33,1462,8,33,1,33,1,33,1,33,5,33,1467,
	8,33,10,33,12,33,1470,9,33,3,33,1472,8,33,3,33,1474,8,33,1,34,1,34,1,34,
	1,34,3,34,1480,8,34,1,35,1,35,1,35,1,35,3,35,1486,8,35,1,35,1,35,1,36,1,
	36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1503,8,36,
	1,37,1,37,1,37,1,37,1,37,3,37,1510,8,37,1,38,1,38,1,38,1,39,1,39,3,39,1517,
	8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1529,8,39,1,
	39,1,39,1,39,3,39,1534,8,39,1,39,3,39,1537,8,39,1,40,3,40,1540,8,40,1,40,
	1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,3,42,1553,8,42,1,42,1,
	42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1566,8,42,1,42,1,42,
	1,42,3,42,1571,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
	43,1,43,1,43,1,43,3,43,1587,8,43,1,44,1,44,1,44,1,44,5,44,1593,8,44,10,
	44,12,44,1596,9,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,3,45,1605,8,45,1,
	45,3,45,1608,8,45,1,45,3,45,1611,8,45,1,46,1,46,5,46,1615,8,46,10,46,12,
	46,1618,9,46,1,46,3,46,1621,8,46,1,46,3,46,1624,8,46,1,47,1,47,1,47,1,47,
	1,47,1,47,1,47,1,47,1,47,3,47,1635,8,47,1,47,3,47,1638,8,47,1,47,1,47,1,
	47,3,47,1643,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
	3,47,1656,8,47,1,47,1,47,1,47,1,47,1,47,3,47,1663,8,47,1,47,1,47,1,47,1,
	47,1,47,3,47,1670,8,47,3,47,1672,8,47,1,47,1,47,1,47,1,47,1,47,3,47,1679,
	8,47,1,48,1,48,3,48,1683,8,48,3,48,1685,8,48,1,48,1,48,1,48,3,48,1690,8,
	48,1,48,3,48,1693,8,48,1,48,1,48,5,48,1697,8,48,10,48,12,48,1700,9,48,1,
	48,1,48,3,48,1704,8,48,3,48,1706,8,48,1,48,1,48,3,48,1710,8,48,1,48,3,48,
	1713,8,48,1,48,3,48,1716,8,48,1,48,1,48,5,48,1720,8,48,10,48,12,48,1723,
	9,48,1,48,1,48,3,48,1727,8,48,3,48,1729,8,48,1,48,1,48,1,48,3,48,1734,8,
	48,1,48,1,48,1,48,1,48,1,48,3,48,1741,8,48,3,48,1743,8,48,1,48,1,48,1,48,
	1,48,1,48,3,48,1750,8,48,1,49,1,49,1,49,3,49,1755,8,49,1,49,1,49,3,49,1759,
	8,49,1,49,3,49,1762,8,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1770,8,50,1,
	50,1,50,1,50,1,50,1,50,1,50,3,50,1778,8,50,3,50,1780,8,50,1,51,1,51,1,51,
	1,51,1,51,1,51,1,51,1,51,3,51,1790,8,51,1,52,1,52,3,52,1794,8,52,1,52,3,
	52,1797,8,52,1,52,1,52,5,52,1801,8,52,10,52,12,52,1804,9,52,1,52,1,52,3,
	52,1808,8,52,1,52,3,52,1811,8,52,1,52,1,52,5,52,1815,8,52,10,52,12,52,1818,
	9,52,3,52,1820,8,52,1,53,1,53,3,53,1824,8,53,1,53,3,53,1827,8,53,1,53,1,
	53,3,53,1831,8,53,1,53,1,53,1,53,3,53,1836,8,53,1,53,1,53,1,53,3,53,1841,
	8,53,1,53,1,53,1,53,3,53,1846,8,53,1,53,1,53,3,53,1850,8,53,1,53,1,53,3,
	53,1854,8,53,1,53,1,53,3,53,1858,8,53,1,53,1,53,3,53,1862,8,53,1,53,1,53,
	3,53,1866,8,53,1,53,1,53,3,53,1870,8,53,1,53,1,53,1,53,3,53,1875,8,53,1,
	53,1,53,1,53,3,53,1880,8,53,1,53,1,53,1,53,3,53,1885,8,53,1,53,1,53,1,53,
	1,53,3,53,1891,8,53,1,53,1,53,1,53,3,53,1896,8,53,1,53,1,53,1,53,3,53,1901,
	8,53,1,53,1,53,1,53,3,53,1906,8,53,1,53,1,53,1,53,3,53,1911,8,53,1,53,1,
	53,1,53,3,53,1916,8,53,1,53,1,53,1,53,1,53,3,53,1922,8,53,1,53,1,53,1,53,
	3,53,1927,8,53,1,53,1,53,1,53,3,53,1932,8,53,1,53,1,53,1,53,3,53,1937,8,
	53,1,53,1,53,1,53,3,53,1942,8,53,1,53,1,53,1,53,3,53,1947,8,53,1,53,1,53,
	1,53,3,53,1952,8,53,1,53,1,53,1,53,3,53,1957,8,53,1,53,1,53,1,53,1,53,1,
	53,3,53,1964,8,53,1,53,1,53,1,53,3,53,1969,8,53,1,53,1,53,1,53,3,53,1974,
	8,53,1,53,1,53,1,53,3,53,1979,8,53,1,53,1,53,3,53,1983,8,53,1,53,1,53,1,
	53,3,53,1988,8,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1996,8,53,1,53,1,53,
	1,53,3,53,2001,8,53,1,53,1,53,1,53,1,53,3,53,2007,8,53,1,54,1,54,1,55,1,
	55,1,55,1,56,1,56,1,56,1,56,1,56,3,56,2019,8,56,1,56,1,56,1,56,1,56,1,56,
	3,56,2026,8,56,3,56,2028,8,56,1,56,1,56,1,56,1,56,5,56,2034,8,56,10,56,
	12,56,2037,9,56,1,56,1,56,3,56,2041,8,56,1,57,3,57,2044,8,57,1,57,1,57,
	1,57,1,57,1,57,1,57,3,57,2052,8,57,1,57,1,57,1,57,1,57,3,57,2058,8,57,1,
	57,1,57,3,57,2062,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
	1,57,3,57,2075,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,
	57,2087,8,57,3,57,2089,8,57,1,58,3,58,2092,8,58,1,58,1,58,1,58,1,58,1,58,
	1,58,3,58,2100,8,58,1,58,1,58,1,58,1,58,3,58,2106,8,58,1,58,1,58,1,58,1,
	58,3,58,2112,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2123,
	8,59,10,59,12,59,2126,9,59,1,59,1,59,5,59,2130,8,59,10,59,12,59,2133,9,
	59,1,59,1,59,1,59,1,59,5,59,2139,8,59,10,59,12,59,2142,9,59,1,59,1,59,3,
	59,2146,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2155,8,59,10,59,12,
	59,2158,9,59,1,59,1,59,1,59,1,59,5,59,2164,8,59,10,59,12,59,2167,9,59,1,
	59,1,59,3,59,2171,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2181,
	8,59,10,59,12,59,2184,9,59,1,59,1,59,5,59,2188,8,59,10,59,12,59,2191,9,
	59,1,59,1,59,1,59,1,59,5,59,2197,8,59,10,59,12,59,2200,9,59,1,59,1,59,3,
	59,2204,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2214,8,59,10,
	59,12,59,2217,9,59,1,59,1,59,5,59,2221,8,59,10,59,12,59,2224,9,59,1,59,
	1,59,1,59,1,59,5,59,2230,8,59,10,59,12,59,2233,9,59,1,59,1,59,3,59,2237,
	8,59,1,59,1,59,1,59,5,59,2242,8,59,10,59,12,59,2245,9,59,1,59,1,59,1,59,
	1,59,5,59,2251,8,59,10,59,12,59,2254,9,59,1,59,1,59,3,59,2258,8,59,3,59,
	2260,8,59,1,60,1,60,1,60,3,60,2265,8,60,1,61,1,61,1,61,1,61,4,61,2271,8,
	61,11,61,12,61,2272,1,61,1,61,1,62,1,62,1,62,5,62,2280,8,62,10,62,12,62,
	2283,9,62,1,63,3,63,2286,8,63,1,63,3,63,2289,8,63,1,63,1,63,3,63,2293,8,
	63,1,63,1,63,1,63,3,63,2298,8,63,1,63,1,63,1,63,1,63,3,63,2304,8,63,1,63,
	1,63,1,63,1,63,3,63,2310,8,63,1,63,1,63,1,63,3,63,2315,8,63,1,63,1,63,1,
	63,3,63,2320,8,63,1,63,1,63,1,63,3,63,2325,8,63,1,63,1,63,1,63,3,63,2330,
	8,63,1,63,3,63,2333,8,63,1,64,1,64,1,64,3,64,2338,8,64,1,64,4,64,2341,8,
	64,11,64,12,64,2342,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2353,8,
	64,1,65,1,65,3,65,2357,8,65,1,65,1,65,1,65,1,65,1,65,3,65,2364,8,65,1,65,
	1,65,1,65,3,65,2369,8,65,1,65,3,65,2372,8,65,1,65,1,65,1,65,3,65,2377,8,
	65,1,65,3,65,2380,8,65,1,65,1,65,3,65,2384,8,65,1,65,1,65,3,65,2388,8,65,
	1,66,1,66,1,66,1,66,5,66,2394,8,66,10,66,12,66,2397,9,66,1,67,1,67,1,67,
	1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,2415,
	8,68,1,68,3,68,2418,8,68,1,68,3,68,2421,8,68,1,68,1,68,3,68,2425,8,68,1,
	68,1,68,1,69,1,69,1,69,1,69,5,69,2433,8,69,10,69,12,69,2436,9,69,1,70,1,
	70,1,70,1,70,1,70,1,70,1,70,1,70,5,70,2446,8,70,10,70,12,70,2449,9,70,1,
	70,1,70,1,71,1,71,3,71,2455,8,71,1,71,3,71,2458,8,71,1,71,1,71,1,71,3,71,
	2463,8,71,1,71,1,71,1,71,5,71,2468,8,71,10,71,12,71,2471,9,71,3,71,2473,
	8,71,1,71,3,71,2476,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,
	72,2487,8,72,1,72,3,72,2490,8,72,1,72,1,72,3,72,2494,8,72,1,72,1,72,1,73,
	1,73,1,73,1,73,3,73,2502,8,73,1,73,3,73,2505,8,73,1,73,1,73,1,73,3,73,2510,
	8,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2518,8,73,1,73,1,73,1,73,1,73,3,
	73,2524,8,73,1,73,1,73,3,73,2528,8,73,1,74,1,74,3,74,2532,8,74,1,74,5,74,
	2535,8,74,10,74,12,74,2538,9,74,1,74,1,74,3,74,2542,8,74,1,74,1,74,1,74,
	1,74,1,74,3,74,2549,8,74,1,74,1,74,3,74,2553,8,74,1,74,1,74,1,74,1,74,1,
	74,1,74,1,74,5,74,2562,8,74,10,74,12,74,2565,9,74,1,74,1,74,1,74,1,74,1,
	74,3,74,2572,8,74,1,74,3,74,2575,8,74,1,74,1,74,5,74,2579,8,74,10,74,12,
	74,2582,9,74,1,74,1,74,1,74,3,74,2587,8,74,3,74,2589,8,74,1,74,1,74,1,74,
	3,74,2594,8,74,1,74,3,74,2597,8,74,1,74,1,74,5,74,2601,8,74,10,74,12,74,
	2604,9,74,1,74,1,74,1,74,3,74,2609,8,74,3,74,2611,8,74,1,74,1,74,3,74,2615,
	8,74,1,74,3,74,2618,8,74,1,74,3,74,2621,8,74,1,74,1,74,5,74,2625,8,74,10,
	74,12,74,2628,9,74,1,74,1,74,1,74,3,74,2633,8,74,1,74,3,74,2636,8,74,1,
	74,1,74,5,74,2640,8,74,10,74,12,74,2643,9,74,1,74,1,74,1,74,3,74,2648,8,
	74,3,74,2650,8,74,1,74,1,74,1,74,3,74,2655,8,74,1,74,1,74,1,74,1,74,1,74,
	1,74,3,74,2663,8,74,3,74,2665,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,
	74,2674,8,74,1,74,3,74,2677,8,74,1,74,3,74,2680,8,74,1,74,1,74,1,74,3,74,
	2685,8,74,3,74,2687,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2696,8,
	74,1,74,3,74,2699,8,74,1,74,3,74,2702,8,74,1,74,1,74,1,74,3,74,2707,8,74,
	3,74,2709,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2718,8,74,1,74,1,
	74,1,74,3,74,2723,8,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2731,8,74,1,74,
	1,74,3,74,2735,8,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2743,8,74,1,74,1,
	74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2753,8,74,1,74,1,74,1,74,3,74,2758,
	8,74,1,74,1,74,1,74,1,74,1,74,3,74,2765,8,74,1,74,1,74,3,74,2769,8,74,1,
	74,1,74,3,74,2773,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
	1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2792,8,74,1,74,1,74,1,74,1,74,1,
	74,1,74,1,74,1,74,3,74,2802,8,74,1,74,1,74,1,74,1,74,3,74,2808,8,74,1,74,
	1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,
	74,2825,8,74,1,74,1,74,3,74,2829,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
	1,74,3,74,2839,8,74,1,74,1,74,1,74,3,74,2844,8,74,1,74,3,74,2847,8,74,1,
	74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2856,8,74,1,74,1,74,1,74,1,74,1,74,
	1,74,1,74,1,74,1,74,3,74,2867,8,74,1,74,1,74,1,74,1,74,5,74,2873,8,74,10,
	74,12,74,2876,9,74,1,74,1,74,1,74,3,74,2881,8,74,1,75,1,75,1,75,1,75,1,
	75,1,75,5,75,2889,8,75,10,75,12,75,2892,9,75,1,75,1,75,1,75,1,75,1,75,1,
	75,1,75,1,75,1,75,3,75,2903,8,75,1,75,1,75,1,75,1,75,1,75,3,75,2910,8,75,
	1,75,1,75,1,75,1,75,1,75,3,75,2917,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
	75,1,75,1,75,1,75,1,75,5,75,2930,8,75,10,75,12,75,2933,9,75,1,75,1,75,1,
	75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,2945,8,75,1,75,1,75,1,75,1,75,
	3,75,2951,8,75,1,75,1,75,1,75,1,75,3,75,2957,8,75,1,75,1,75,1,75,1,75,3,
	75,2963,8,75,1,75,1,75,1,75,1,75,3,75,2969,8,75,1,75,1,75,1,75,1,75,3,75,
	2975,8,75,1,75,1,75,1,75,1,75,3,75,2981,8,75,1,76,1,76,1,76,3,76,2986,8,
	76,1,76,1,76,1,77,1,77,1,77,3,77,2993,8,77,1,77,1,77,1,78,1,78,1,78,3,78,
	3000,8,78,1,78,1,78,1,78,1,78,1,78,3,78,3007,8,78,1,78,1,78,1,78,3,78,3012,
	8,78,1,78,5,78,3015,8,78,10,78,12,78,3018,9,78,1,79,1,79,1,79,1,79,1,79,
	1,79,1,79,1,79,1,80,1,80,1,80,3,80,3031,8,80,1,80,1,80,1,81,1,81,1,81,3,
	81,3038,8,81,1,81,1,81,1,82,1,82,1,82,3,82,3045,8,82,1,82,1,82,1,83,1,83,
	3,83,3051,8,83,1,83,1,83,3,83,3055,8,83,1,83,1,83,3,83,3059,8,83,1,84,1,
	84,1,84,1,84,1,84,3,84,3066,8,84,1,84,3,84,3069,8,84,1,85,1,85,1,85,3,85,
	3074,8,85,1,85,1,85,1,86,1,86,1,86,3,86,3081,8,86,1,86,1,86,1,86,5,86,3086,
	8,86,10,86,12,86,3089,9,86,1,86,3,86,3092,8,86,1,87,1,87,1,87,3,87,3097,
	8,87,1,87,1,87,1,87,5,87,3102,8,87,10,87,12,87,3105,9,87,1,88,1,88,1,88,
	1,88,1,88,1,88,1,88,1,88,5,88,3115,8,88,10,88,12,88,3118,9,88,3,88,3120,
	8,88,1,88,1,88,1,88,3,88,3125,8,88,1,88,1,88,1,88,3,88,3130,8,88,5,88,3132,
	8,88,10,88,12,88,3135,9,88,1,88,1,88,1,88,3,88,3140,8,88,1,89,1,89,1,89,
	1,89,1,89,5,89,3147,8,89,10,89,12,89,3150,9,89,1,90,1,90,1,90,1,90,1,91,
	1,91,3,91,3158,8,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,3,92,3167,8,92,1,
	92,3,92,3170,8,92,1,93,1,93,3,93,3174,8,93,1,94,1,94,1,94,1,95,1,95,1,95,
	1,95,3,95,3183,8,95,1,96,1,96,3,96,3187,8,96,1,96,3,96,3190,8,96,1,96,3,
	96,3193,8,96,1,96,1,96,1,96,1,96,3,96,3199,8,96,1,96,3,96,3202,8,96,1,96,
	1,96,3,96,3206,8,96,1,96,3,96,3209,8,96,1,96,1,96,3,96,3213,8,96,1,96,3,
	96,3216,8,96,1,96,1,96,1,96,1,96,5,96,3222,8,96,10,96,12,96,3225,9,96,3,
	96,3227,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,3236,8,96,10,96,12,
	96,3239,9,96,3,96,3241,8,96,1,97,1,97,1,97,3,97,3246,8,97,1,97,3,97,3249,
	8,97,1,97,1,97,1,97,3,97,3254,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
	97,3,97,3264,8,97,1,97,1,97,1,97,3,97,3269,8,97,1,97,1,97,4,97,3273,8,97,
	11,97,12,97,3274,3,97,3277,8,97,1,97,1,97,4,97,3281,8,97,11,97,12,97,3282,
	3,97,3285,8,97,1,97,1,97,1,97,1,97,3,97,3291,8,97,1,97,1,97,1,97,1,97,5,
	97,3297,8,97,10,97,12,97,3300,9,97,1,97,1,97,3,97,3304,8,97,1,97,1,97,1,
	97,1,97,5,97,3310,8,97,10,97,12,97,3313,9,97,3,97,3315,8,97,1,98,1,98,1,
	98,3,98,3320,8,98,1,98,3,98,3323,8,98,1,98,1,98,1,98,3,98,3328,8,98,1,98,
	1,98,1,98,1,98,1,98,1,98,3,98,3336,8,98,1,98,1,98,1,98,1,98,1,98,1,98,3,
	98,3344,8,98,1,98,1,98,1,98,1,98,3,98,3350,8,98,1,98,1,98,1,98,1,98,5,98,
	3356,8,98,10,98,12,98,3359,9,98,1,98,1,98,3,98,3363,8,98,1,98,1,98,1,98,
	1,98,5,98,3369,8,98,10,98,12,98,3372,9,98,3,98,3374,8,98,1,99,1,99,3,99,
	3378,8,99,1,99,3,99,3381,8,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,3389,8,
	99,1,99,1,99,1,99,1,99,3,99,3395,8,99,1,99,1,99,1,99,1,99,1,99,5,99,3402,
	8,99,10,99,12,99,3405,9,99,3,99,3407,8,99,1,100,1,100,3,100,3411,8,100,
	1,100,1,100,3,100,3415,8,100,1,100,1,100,3,100,3419,8,100,1,100,4,100,3422,
	8,100,11,100,12,100,3423,1,100,1,100,3,100,3428,8,100,1,100,1,100,3,100,
	3432,8,100,3,100,3434,8,100,1,100,3,100,3437,8,100,1,100,3,100,3440,8,100,
	1,100,3,100,3443,8,100,1,100,1,100,4,100,3447,8,100,11,100,12,100,3448,
	1,100,1,100,3,100,3453,8,100,1,100,3,100,3456,8,100,1,100,3,100,3459,8,
	100,1,100,3,100,3462,8,100,1,100,3,100,3465,8,100,1,100,1,100,1,100,4,100,
	3470,8,100,11,100,12,100,3471,3,100,3474,8,100,1,101,1,101,3,101,3478,8,
	101,1,102,1,102,1,102,3,102,3483,8,102,1,102,1,102,1,102,1,102,3,102,3489,
	8,102,1,102,5,102,3492,8,102,10,102,12,102,3495,9,102,1,103,1,103,1,103,
	1,103,3,103,3501,8,103,1,103,1,103,1,103,1,103,3,103,3507,8,103,1,103,5,
	103,3510,8,103,10,103,12,103,3513,9,103,3,103,3515,8,103,1,104,1,104,1,
	104,1,104,3,104,3521,8,104,1,105,1,105,3,105,3525,8,105,1,106,1,106,1,106,
	1,106,1,106,1,106,3,106,3533,8,106,1,107,1,107,3,107,3537,8,107,1,107,3,
	107,3540,8,107,1,107,3,107,3543,8,107,1,107,1,107,1,107,3,107,3548,8,107,
	1,107,3,107,3551,8,107,1,107,1,107,1,107,1,107,1,107,3,107,3558,8,107,1,
	107,1,107,3,107,3562,8,107,1,107,3,107,3565,8,107,1,107,1,107,3,107,3569,
	8,107,1,108,1,108,3,108,3573,8,108,1,108,3,108,3576,8,108,1,108,3,108,3579,
	8,108,1,108,1,108,1,108,3,108,3584,8,108,1,108,1,108,1,108,1,108,3,108,
	3590,8,108,5,108,3592,8,108,10,108,12,108,3595,9,108,1,108,1,108,1,108,
	1,108,1,108,1,108,1,108,3,108,3604,8,108,1,108,1,108,1,108,1,108,3,108,
	3610,8,108,5,108,3612,8,108,10,108,12,108,3615,9,108,1,108,1,108,1,108,
	3,108,3620,8,108,1,108,1,108,3,108,3624,8,108,1,109,1,109,1,109,1,109,3,
	109,3630,8,109,1,109,3,109,3633,8,109,1,110,1,110,1,110,1,110,1,110,1,110,
	1,110,1,110,1,110,1,110,3,110,3645,8,110,1,110,1,110,3,110,3649,8,110,1,
	110,1,110,3,110,3653,8,110,1,111,1,111,1,111,1,111,1,111,1,111,3,111,3661,
	8,111,1,111,1,111,3,111,3665,8,111,1,112,1,112,1,112,1,112,1,113,1,113,
	3,113,3673,8,113,1,113,3,113,3676,8,113,1,113,1,113,3,113,3680,8,113,1,
	113,3,113,3683,8,113,1,113,1,113,1,113,1,113,5,113,3689,8,113,10,113,12,
	113,3692,9,113,1,113,1,113,3,113,3696,8,113,1,113,3,113,3699,8,113,1,113,
	3,113,3702,8,113,1,114,1,114,3,114,3706,8,114,1,114,3,114,3709,8,114,1,
	114,1,114,1,114,1,114,1,114,5,114,3716,8,114,10,114,12,114,3719,9,114,1,
	114,1,114,3,114,3723,8,114,1,115,1,115,1,115,1,115,1,115,5,115,3730,8,115,
	10,115,12,115,3733,9,115,1,116,1,116,3,116,3737,8,116,1,117,1,117,1,117,
	5,117,3742,8,117,10,117,12,117,3745,9,117,1,118,1,118,5,118,3749,8,118,
	10,118,12,118,3752,9,118,1,118,1,118,1,118,5,118,3757,8,118,10,118,12,118,
	3760,9,118,1,118,1,118,1,118,3,118,3765,8,118,1,119,1,119,1,119,1,119,1,
	119,1,119,3,119,3773,8,119,1,119,3,119,3776,8,119,1,119,3,119,3779,8,119,
	1,119,1,119,1,119,5,119,3784,8,119,10,119,12,119,3787,9,119,3,119,3789,
	8,119,1,119,1,119,1,119,1,119,1,119,3,119,3796,8,119,1,119,3,119,3799,8,
	119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,3807,8,119,1,120,1,120,1,
	120,1,120,3,120,3813,8,120,1,120,1,120,1,120,1,120,1,121,1,121,1,121,1,
	121,1,121,3,121,3824,8,121,1,122,3,122,3827,8,122,1,122,1,122,3,122,3831,
	8,122,1,122,1,122,5,122,3835,8,122,10,122,12,122,3838,9,122,1,122,1,122,
	1,122,1,122,5,122,3844,8,122,10,122,12,122,3847,9,122,1,122,1,122,3,122,
	3851,8,122,1,122,1,122,3,122,3855,8,122,1,122,1,122,5,122,3859,8,122,10,
	122,12,122,3862,9,122,1,122,1,122,1,122,3,122,3867,8,122,3,122,3869,8,122,
	1,122,1,122,3,122,3873,8,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
	3,123,3882,8,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,
	3892,8,124,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,3902,8,
	125,1,126,1,126,5,126,3906,8,126,10,126,12,126,3909,9,126,1,126,1,126,3,
	126,3913,8,126,1,126,1,126,3,126,3917,8,126,1,126,3,126,3920,8,126,1,126,
	3,126,3923,8,126,1,126,3,126,3926,8,126,1,126,3,126,3929,8,126,1,126,1,
	126,5,126,3933,8,126,10,126,12,126,3936,9,126,1,126,1,126,1,126,3,126,3941,
	8,126,1,126,3,126,3944,8,126,1,126,3,126,3947,8,126,1,126,3,126,3950,8,
	126,1,126,3,126,3953,8,126,1,126,3,126,3956,8,126,3,126,3958,8,126,1,127,
	1,127,5,127,3962,8,127,10,127,12,127,3965,9,127,1,127,1,127,1,127,3,127,
	3970,8,127,1,127,3,127,3973,8,127,1,127,3,127,3976,8,127,1,127,3,127,3979,
	8,127,1,127,3,127,3982,8,127,1,127,3,127,3985,8,127,1,128,1,128,3,128,3989,
	8,128,1,128,1,128,1,129,1,129,3,129,3995,8,129,1,129,1,129,3,129,3999,8,
	129,1,130,1,130,1,130,1,130,1,130,1,130,3,130,4007,8,130,1,130,1,130,3,
	130,4011,8,130,1,130,3,130,4014,8,130,3,130,4016,8,130,1,131,1,131,1,131,
	1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,4029,8,131,1,131,
	3,131,4032,8,131,1,132,1,132,1,132,5,132,4037,8,132,10,132,12,132,4040,
	9,132,1,133,1,133,1,133,1,133,1,133,1,133,1,133,3,133,4049,8,133,1,133,
	3,133,4052,8,133,1,133,1,133,1,133,3,133,4057,8,133,3,133,4059,8,133,1,
	133,1,133,3,133,4063,8,133,1,133,1,133,1,133,1,133,1,133,1,133,3,133,4071,
	8,133,1,134,1,134,1,134,1,134,3,134,4077,8,134,1,134,1,134,1,134,1,135,
	1,135,1,135,1,135,3,135,4086,8,135,1,135,1,135,1,135,1,136,1,136,1,136,
	1,136,1,136,1,136,1,136,1,136,3,136,4099,8,136,1,137,1,137,3,137,4103,8,
	137,1,137,1,137,5,137,4107,8,137,10,137,12,137,4110,9,137,1,138,1,138,1,
	138,1,138,1,138,1,138,3,138,4118,8,138,1,138,3,138,4121,8,138,1,138,1,138,
	3,138,4125,8,138,1,138,3,138,4128,8,138,1,138,1,138,3,138,4132,8,138,1,
	138,1,138,3,138,4136,8,138,1,138,3,138,4139,8,138,3,138,4141,8,138,1,139,
	1,139,1,139,1,139,5,139,4147,8,139,10,139,12,139,4150,9,139,1,139,1,139,
	1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,4161,8,139,1,139,1,139,
	4,139,4165,8,139,11,139,12,139,4166,3,139,4169,8,139,1,139,1,139,4,139,
	4173,8,139,11,139,12,139,4174,3,139,4177,8,139,3,139,4179,8,139,1,140,1,
	140,1,140,1,140,3,140,4185,8,140,1,140,1,140,1,140,1,140,1,140,1,140,3,
	140,4193,8,140,1,141,1,141,1,141,1,141,1,141,1,141,3,141,4201,8,141,1,142,
	1,142,3,142,4205,8,142,1,142,1,142,3,142,4209,8,142,1,143,1,143,1,143,1,
	143,1,143,5,143,4216,8,143,10,143,12,143,4219,9,143,1,143,1,143,3,143,4223,
	8,143,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,
	1,145,1,145,1,145,1,145,1,145,5,145,4241,8,145,10,145,12,145,4244,9,145,
	1,146,1,146,3,146,4248,8,146,1,147,1,147,1,147,1,147,3,147,4254,8,147,1,
	147,1,147,1,147,1,147,1,147,3,147,4261,8,147,1,148,1,148,1,148,3,148,4266,
	8,148,1,149,1,149,1,149,1,149,1,149,5,149,4273,8,149,10,149,12,149,4276,
	9,149,3,149,4278,8,149,1,150,1,150,3,150,4282,8,150,1,151,1,151,3,151,4286,
	8,151,1,151,1,151,3,151,4290,8,151,1,151,3,151,4293,8,151,1,151,3,151,4296,
	8,151,1,151,3,151,4299,8,151,1,152,1,152,3,152,4303,8,152,1,152,1,152,3,
	152,4307,8,152,1,152,3,152,4310,8,152,1,152,3,152,4313,8,152,1,152,3,152,
	4316,8,152,1,153,1,153,1,153,1,154,1,154,3,154,4323,8,154,1,154,1,154,3,
	154,4327,8,154,1,154,1,154,1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,
	156,1,156,5,156,4340,8,156,10,156,12,156,4343,9,156,1,156,3,156,4346,8,
	156,1,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,159,1,159,3,159,4358,
	8,159,1,159,1,159,1,159,1,159,5,159,4364,8,159,10,159,12,159,4367,9,159,
	1,160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,4376,8,160,1,161,1,161,
	3,161,4380,8,161,1,161,3,161,4383,8,161,1,161,1,161,1,162,1,162,3,162,4389,
	8,162,1,162,3,162,4392,8,162,1,162,3,162,4395,8,162,1,163,1,163,1,163,1,
	163,1,163,1,163,1,163,3,163,4404,8,163,1,164,1,164,1,164,1,164,1,164,1,
	164,1,164,3,164,4413,8,164,1,165,1,165,1,165,1,165,1,165,1,165,5,165,4421,
	8,165,10,165,12,165,4424,9,165,1,165,3,165,4427,8,165,1,166,1,166,1,166,
	1,166,1,166,1,166,5,166,4435,8,166,10,166,12,166,4438,9,166,1,167,1,167,
	1,167,1,167,1,167,1,167,1,167,3,167,4447,8,167,1,168,1,168,1,168,1,169,
	1,169,1,169,3,169,4455,8,169,1,169,3,169,4458,8,169,1,170,1,170,1,170,1,
	170,1,170,5,170,4465,8,170,10,170,12,170,4468,9,170,3,170,4470,8,170,1,
	170,1,170,3,170,4474,8,170,1,170,5,170,4477,8,170,10,170,12,170,4480,9,
	170,1,170,3,170,4483,8,170,1,171,1,171,1,171,1,171,1,171,5,171,4490,8,171,
	10,171,12,171,4493,9,171,3,171,4495,8,171,1,172,1,172,1,172,1,173,1,173,
	1,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
	1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,5,174,4524,
	8,174,10,174,12,174,4527,9,174,3,174,4529,8,174,1,174,3,174,4532,8,174,
	1,175,1,175,1,176,1,176,1,177,1,177,1,178,1,178,1,178,1,178,1,179,1,179,
	1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
	1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
	1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
	1,179,1,179,1,179,1,179,5,179,4586,8,179,10,179,12,179,4589,9,179,1,179,
	1,179,3,179,4593,8,179,1,180,1,180,1,180,1,180,1,180,1,180,1,181,1,181,
	1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
	1,182,1,182,1,182,1,182,1,182,1,182,3,182,4621,8,182,1,183,1,183,1,183,
	1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,4635,8,183,
	1,184,1,184,1,184,5,184,4640,8,184,10,184,12,184,4643,9,184,1,184,3,184,
	4646,8,184,1,185,1,185,1,185,1,185,3,185,4652,8,185,1,186,1,186,1,186,1,
	186,1,186,1,186,3,186,4660,8,186,3,186,4662,8,186,1,187,1,187,1,187,1,187,
	1,188,1,188,1,188,1,188,1,188,3,188,4673,8,188,1,189,1,189,1,189,1,189,
	1,190,1,190,1,190,1,190,3,190,4683,8,190,1,191,1,191,1,191,1,191,1,191,
	3,191,4690,8,191,1,192,1,192,1,192,1,192,3,192,4696,8,192,1,193,1,193,1,
	193,1,193,1,194,1,194,3,194,4704,8,194,1,195,1,195,1,195,3,195,4709,8,195,
	1,195,1,195,1,195,1,195,5,195,4715,8,195,10,195,12,195,4718,9,195,1,195,
	1,195,1,195,5,195,4723,8,195,10,195,12,195,4726,9,195,1,195,1,195,1,195,
	5,195,4731,8,195,10,195,12,195,4734,9,195,1,195,1,195,1,195,5,195,4739,
	8,195,10,195,12,195,4742,9,195,1,195,5,195,4745,8,195,10,195,12,195,4748,
	9,195,1,195,1,195,3,195,4752,8,195,1,196,1,196,1,196,3,196,4757,8,196,1,
	196,4,196,4760,8,196,11,196,12,196,4761,1,196,1,196,4,196,4766,8,196,11,
	196,12,196,4767,3,196,4770,8,196,1,196,1,196,1,196,1,197,1,197,1,197,1,
	197,4,197,4779,8,197,11,197,12,197,4780,1,197,5,197,4784,8,197,10,197,12,
	197,4787,9,197,1,197,1,197,4,197,4791,8,197,11,197,12,197,4792,3,197,4795,
	8,197,1,197,1,197,1,197,1,198,1,198,1,198,1,199,1,199,1,199,1,200,1,200,
	1,200,3,200,4809,8,200,1,200,1,200,4,200,4813,8,200,11,200,12,200,4814,
	1,200,1,200,1,200,3,200,4820,8,200,1,201,1,201,1,201,3,201,4825,8,201,1,
	201,1,201,4,201,4829,8,201,11,201,12,201,4830,1,201,1,201,1,201,1,201,1,
	201,3,201,4838,8,201,1,202,1,202,1,202,1,203,1,203,1,203,3,203,4846,8,203,
	1,203,1,203,1,203,1,203,4,203,4852,8,203,11,203,12,203,4853,1,203,1,203,
	1,203,3,203,4859,8,203,1,204,1,204,1,204,1,204,3,204,4865,8,204,1,204,3,
	204,4868,8,204,1,204,1,204,1,204,1,204,1,204,1,204,3,204,4876,8,204,1,205,
	1,205,1,205,1,205,1,205,3,205,4883,8,205,1,206,1,206,1,206,1,206,1,206,
	1,206,1,206,3,206,4892,8,206,1,206,3,206,4895,8,206,1,207,1,207,1,207,1,
	207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,1,208,1,208,5,208,4910,8,
	208,10,208,12,208,4913,9,208,1,208,1,208,1,209,1,209,1,209,3,209,4920,8,
	209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,4928,8,209,1,210,1,210,3,
	210,4932,8,210,1,210,1,210,1,211,1,211,1,211,3,211,4939,8,211,1,211,1,211,
	4,211,4943,8,211,11,211,12,211,4944,1,212,1,212,1,212,1,212,4,212,4951,
	8,212,11,212,12,212,4952,1,213,1,213,1,213,1,213,1,213,5,213,4960,8,213,
	10,213,12,213,4963,9,213,1,213,1,213,1,213,3,213,4968,8,213,1,213,1,213,
	1,213,5,213,4973,8,213,10,213,12,213,4976,9,213,1,213,1,213,1,213,1,213,
	3,213,4982,8,213,1,213,5,213,4985,8,213,10,213,12,213,4988,9,213,3,213,
	4990,8,213,3,213,4992,8,213,1,213,1,213,4,213,4996,8,213,11,213,12,213,
	4997,3,213,5000,8,213,1,213,1,213,5,213,5004,8,213,10,213,12,213,5007,9,
	213,1,213,1,213,1,213,1,213,3,213,5013,8,213,1,213,1,213,1,213,3,213,5018,
	8,213,1,213,1,213,3,213,5022,8,213,1,213,1,213,1,213,1,213,3,213,5028,8,
	213,1,214,1,214,1,214,1,214,1,214,5,214,5035,8,214,10,214,12,214,5038,9,
	214,1,214,1,214,1,214,3,214,5043,8,214,1,214,1,214,1,214,5,214,5048,8,214,
	10,214,12,214,5051,9,214,1,214,1,214,1,214,3,214,5056,8,214,1,214,1,214,
	1,214,1,214,3,214,5062,8,214,1,214,5,214,5065,8,214,10,214,12,214,5068,
	9,214,3,214,5070,8,214,3,214,5072,8,214,1,214,1,214,4,214,5076,8,214,11,
	214,12,214,5077,3,214,5080,8,214,1,214,1,214,5,214,5084,8,214,10,214,12,
	214,5087,9,214,1,214,1,214,1,214,1,214,3,214,5093,8,214,3,214,5095,8,214,
	1,215,1,215,1,215,3,215,5100,8,215,1,215,1,215,1,215,5,215,5105,8,215,10,
	215,12,215,5108,9,215,1,216,1,216,1,216,1,216,5,216,5114,8,216,10,216,12,
	216,5117,9,216,1,216,1,216,3,216,5121,8,216,1,216,1,216,1,216,1,216,1,216,
	5,216,5128,8,216,10,216,12,216,5131,9,216,1,216,1,216,1,216,1,216,3,216,
	5137,8,216,1,216,5,216,5140,8,216,10,216,12,216,5143,9,216,3,216,5145,8,
	216,3,216,5147,8,216,1,216,1,216,1,216,1,216,5,216,5153,8,216,10,216,12,
	216,5156,9,216,3,216,5158,8,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,
	5166,8,216,1,216,1,216,1,216,3,216,5171,8,216,1,216,1,216,1,216,3,216,5176,
	8,216,5,216,5178,8,216,10,216,12,216,5181,9,216,1,216,1,216,1,216,3,216,
	5186,8,216,1,216,1,216,1,216,3,216,5191,8,216,5,216,5193,8,216,10,216,12,
	216,5196,9,216,1,216,1,216,1,216,3,216,5201,8,216,3,216,5203,8,216,1,217,
	1,217,1,217,1,217,1,217,1,217,1,217,5,217,5212,8,217,10,217,12,217,5215,
	9,217,3,217,5217,8,217,1,217,1,217,1,217,5,217,5222,8,217,10,217,12,217,
	5225,9,217,3,217,5227,8,217,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,
	218,5,218,5237,8,218,10,218,12,218,5240,9,218,1,218,1,218,1,218,3,218,5245,
	8,218,1,219,1,219,1,219,1,219,1,219,5,219,5252,8,219,10,219,12,219,5255,
	9,219,1,220,1,220,1,220,1,220,5,220,5261,8,220,10,220,12,220,5264,9,220,
	1,220,1,220,3,220,5268,8,220,1,220,1,220,1,220,1,220,1,220,5,220,5275,8,
	220,10,220,12,220,5278,9,220,1,220,1,220,1,220,3,220,5283,8,220,1,220,1,
	220,1,220,1,220,1,220,1,220,1,220,5,220,5292,8,220,10,220,12,220,5295,9,
	220,1,220,1,220,1,220,3,220,5300,8,220,1,220,1,220,1,220,3,220,5305,8,220,
	5,220,5307,8,220,10,220,12,220,5310,9,220,1,220,1,220,1,220,3,220,5315,
	8,220,1,220,1,220,1,220,3,220,5320,8,220,5,220,5322,8,220,10,220,12,220,
	5325,9,220,3,220,5327,8,220,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,
	221,5,221,5337,8,221,10,221,12,221,5340,9,221,1,222,1,222,1,222,1,222,3,
	222,5346,8,222,1,222,1,222,1,222,3,222,5351,8,222,1,223,1,223,1,223,1,224,
	1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
	1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
	3,224,5381,8,224,1,225,1,225,3,225,5385,8,225,1,225,1,225,1,225,3,225,5390,
	8,225,1,226,1,226,1,226,1,226,1,226,3,226,5397,8,226,1,226,3,226,5400,8,
	226,1,226,1,226,1,226,1,226,3,226,5406,8,226,1,227,1,227,1,227,1,227,1,
	227,1,227,1,227,1,227,3,227,5416,8,227,1,228,1,228,1,228,1,228,1,228,1,
	228,1,228,1,228,3,228,5426,8,228,1,229,1,229,1,229,1,229,1,229,1,229,1,
	229,1,229,3,229,5436,8,229,1,229,1,229,1,229,1,229,3,229,5442,8,229,1,229,
	1,229,1,229,1,229,1,229,1,229,1,229,3,229,5451,8,229,1,229,1,229,1,229,
	1,229,3,229,5457,8,229,1,229,1,229,1,229,1,229,1,229,3,229,5464,8,229,3,
	229,5466,8,229,1,230,1,230,1,230,1,231,1,231,1,231,1,231,1,231,3,231,5476,
	8,231,1,232,1,232,3,232,5480,8,232,1,232,1,232,3,232,5484,8,232,1,232,1,
	232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,5494,8,232,1,232,1,232,1,
	232,3,232,5499,8,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,
	232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,
	232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,
	232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,
	232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,
	232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,
	232,1,232,3,232,5571,8,232,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,
	233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,5589,8,233,1,
	234,1,234,1,234,1,234,1,235,1,235,3,235,5597,8,235,1,235,1,235,1,235,1,
	235,1,235,1,235,1,235,1,235,5,235,5607,8,235,10,235,12,235,5610,9,235,1,
	235,1,235,1,235,1,235,3,235,5616,8,235,3,235,5618,8,235,1,235,1,235,1,235,
	1,235,1,235,1,235,5,235,5626,8,235,10,235,12,235,5629,9,235,3,235,5631,
	8,235,1,236,1,236,1,236,1,236,5,236,5637,8,236,10,236,12,236,5640,9,236,
	1,237,1,237,1,237,1,237,3,237,5646,8,237,1,238,1,238,3,238,5650,8,238,1,
	238,1,238,1,238,1,239,1,239,3,239,5657,8,239,1,239,1,239,1,239,3,239,5662,
	8,239,1,239,3,239,5665,8,239,1,239,3,239,5668,8,239,1,240,1,240,1,240,1,
	240,1,240,1,240,1,240,3,240,5677,8,240,1,241,1,241,3,241,5681,8,241,1,241,
	1,241,3,241,5685,8,241,1,241,1,241,1,241,1,241,1,241,1,241,1,242,1,242,
	1,242,1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,244,1,244,1,244,1,244,
	1,244,3,244,5708,8,244,1,244,1,244,1,244,1,244,1,244,3,244,5715,8,244,5,
	244,5717,8,244,10,244,12,244,5720,9,244,1,244,1,244,1,244,1,244,3,244,5726,
	8,244,1,244,1,244,1,244,1,244,1,244,3,244,5733,8,244,1,244,3,244,5736,8,
	244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,
	244,5,244,5750,8,244,10,244,12,244,5753,9,244,3,244,5755,8,244,1,245,1,
	245,1,245,1,245,1,245,1,245,1,245,1,245,3,245,5765,8,245,1,245,1,245,3,
	245,5769,8,245,1,245,1,245,1,245,1,245,3,245,5775,8,245,1,245,3,245,5778,
	8,245,1,245,1,245,1,245,3,245,5783,8,245,1,245,1,245,3,245,5787,8,245,1,
	245,1,245,1,245,1,245,1,245,3,245,5794,8,245,1,245,3,245,5797,8,245,1,245,
	1,245,1,245,1,245,3,245,5803,8,245,1,245,1,245,1,245,1,245,1,245,1,245,
	1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
	1,245,1,245,1,245,1,245,3,245,5827,8,245,1,245,3,245,5830,8,245,1,245,1,
	245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,3,245,5842,8,245,1,
	245,3,245,5845,8,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,3,
	245,5855,8,245,1,245,1,245,1,245,1,245,1,245,1,245,3,245,5863,8,245,1,245,
	1,245,3,245,5867,8,245,1,245,1,245,1,245,1,245,1,245,3,245,5874,8,245,1,
	245,3,245,5877,8,245,1,245,1,245,1,245,1,245,1,245,5,245,5884,8,245,10,
	245,12,245,5887,9,245,1,245,1,245,1,245,3,245,5892,8,245,1,245,1,245,1,
	245,1,245,3,245,5898,8,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,
	245,3,245,5908,8,245,3,245,5910,8,245,1,246,1,246,1,246,1,246,3,246,5916,
	8,246,1,246,3,246,5919,8,246,1,246,3,246,5922,8,246,1,247,1,247,1,247,1,
	247,1,247,1,247,1,247,1,247,1,247,1,247,3,247,5934,8,247,1,247,3,247,5937,
	8,247,1,248,1,248,1,248,1,248,3,248,5943,8,248,1,249,3,249,5946,8,249,1,
	249,1,249,1,249,1,249,1,249,1,249,3,249,5954,8,249,1,249,1,249,1,249,1,
	249,1,249,1,249,3,249,5962,8,249,1,250,1,250,1,250,1,250,3,250,5968,8,250,
	1,250,1,250,3,250,5972,8,250,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
	1,251,1,251,1,251,1,251,1,251,3,251,5986,8,251,1,252,1,252,1,252,1,253,
	1,253,1,253,1,253,1,253,5,253,5996,8,253,10,253,12,253,5999,9,253,1,253,
	1,253,1,253,1,253,3,253,6005,8,253,1,253,3,253,6008,8,253,1,253,1,253,1,
	253,1,254,1,254,3,254,6015,8,254,1,254,1,254,1,254,5,254,6020,8,254,10,
	254,12,254,6023,9,254,1,255,1,255,3,255,6027,8,255,1,255,1,255,1,256,1,
	256,1,256,1,256,1,256,1,256,1,256,5,256,6038,8,256,10,256,12,256,6041,9,
	256,1,257,1,257,1,257,1,257,1,258,1,258,1,259,1,259,3,259,6051,8,259,1,
	259,1,259,1,259,1,259,3,259,6057,8,259,1,260,1,260,1,260,3,260,6062,8,260,
	1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,3,260,
	6075,8,260,3,260,6077,8,260,1,260,1,260,1,260,3,260,6082,8,260,1,260,1,
	260,3,260,6086,8,260,1,260,3,260,6089,8,260,3,260,6091,8,260,1,261,1,261,
	1,261,1,261,1,261,3,261,6098,8,261,1,262,1,262,1,262,1,262,1,262,3,262,
	6105,8,262,1,262,3,262,6108,8,262,1,262,3,262,6111,8,262,1,262,1,262,1,
	262,1,262,3,262,6117,8,262,1,262,1,262,3,262,6121,8,262,1,263,1,263,1,263,
	1,263,3,263,6127,8,263,1,264,1,264,1,264,1,264,3,264,6133,8,264,1,264,1,
	264,1,265,1,265,1,265,1,266,1,266,1,266,1,267,1,267,1,267,3,267,6146,8,
	267,1,267,1,267,1,267,3,267,6151,8,267,1,267,1,267,1,267,1,267,5,267,6157,
	8,267,10,267,12,267,6160,9,267,3,267,6162,8,267,1,268,1,268,1,268,3,268,
	6167,8,268,1,268,1,268,1,268,3,268,6172,8,268,1,268,1,268,1,268,1,268,5,
	268,6178,8,268,10,268,12,268,6181,9,268,3,268,6183,8,268,1,269,1,269,1,
	269,1,269,1,269,1,269,3,269,6191,8,269,1,270,1,270,3,270,6195,8,270,1,270,
	1,270,1,270,5,270,6200,8,270,10,270,12,270,6203,9,270,1,271,1,271,1,271,
	3,271,6208,8,271,1,271,3,271,6211,8,271,1,272,1,272,3,272,6215,8,272,1,
	272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,5,272,6226,8,272,10,
	272,12,272,6229,9,272,1,272,1,272,1,272,3,272,6234,8,272,1,272,1,272,1,
	272,1,272,1,272,1,272,1,272,1,272,5,272,6244,8,272,10,272,12,272,6247,9,
	272,3,272,6249,8,272,1,273,1,273,1,274,1,274,1,274,1,274,1,274,3,274,6258,
	8,274,1,274,1,274,1,274,3,274,6263,8,274,1,275,1,275,1,275,1,275,3,275,
	6269,8,275,1,276,1,276,1,277,1,277,3,277,6275,8,277,1,278,1,278,1,278,3,
	278,6280,8,278,3,278,6282,8,278,1,278,3,278,6285,8,278,1,278,1,278,3,278,
	6289,8,278,3,278,6291,8,278,1,279,1,279,3,279,6295,8,279,1,279,1,279,1,
	279,1,279,3,279,6301,8,279,1,279,3,279,6304,8,279,1,279,3,279,6307,8,279,
	1,280,1,280,1,280,1,280,3,280,6313,8,280,1,281,1,281,1,282,1,282,1,282,
	1,282,1,282,3,282,6322,8,282,1,283,1,283,1,284,1,284,1,284,1,284,3,284,
	6330,8,284,1,285,1,285,3,285,6334,8,285,1,286,1,286,1,286,3,286,6339,8,
	286,1,287,1,287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,
	288,1,288,1,288,1,288,1,288,4,288,6357,8,288,11,288,12,288,6358,1,289,1,
	289,1,289,1,289,1,289,3,289,6366,8,289,3,289,6368,8,289,1,290,1,290,1,290,
	4,290,6373,8,290,11,290,12,290,6374,3,290,6377,8,290,1,291,1,291,3,291,
	6381,8,291,1,292,1,292,1,292,3,292,6386,8,292,1,293,1,293,1,293,1,293,1,
	293,1,293,1,293,1,293,1,293,3,293,6397,8,293,1,294,1,294,1,294,3,294,6402,
	8,294,1,295,1,295,1,296,1,296,3,296,6408,8,296,1,297,3,297,6411,8,297,1,
	297,1,297,3,297,6415,8,297,1,297,4,297,6418,8,297,11,297,12,297,6419,1,
	297,3,297,6423,8,297,1,297,1,297,3,297,6427,8,297,1,297,1,297,3,297,6431,
	8,297,3,297,6433,8,297,1,298,1,298,1,299,3,299,6438,8,299,1,299,1,299,1,
	300,3,300,6443,8,300,1,300,1,300,1,301,1,301,1,301,1,301,1,301,1,301,1,
	301,1,301,1,301,3,301,6456,8,301,1,301,3,301,6459,8,301,1,302,1,302,3,302,
	6463,8,302,1,302,3,302,6466,8,302,1,302,3,302,6469,8,302,1,302,1,302,1,
	302,3,302,6474,8,302,1,302,1,302,1,302,3,302,6479,8,302,1,302,1,302,1,302,
	1,302,3,302,6485,8,302,1,302,3,302,6488,8,302,1,302,1,302,1,302,3,302,6493,
	8,302,1,302,3,302,6496,8,302,1,302,1,302,1,302,3,302,6501,8,302,1,302,3,
	302,6504,8,302,1,302,1,302,3,302,6508,8,302,1,302,5,302,6511,8,302,10,302,
	12,302,6514,9,302,1,302,1,302,3,302,6518,8,302,1,302,5,302,6521,8,302,10,
	302,12,302,6524,9,302,1,302,1,302,3,302,6528,8,302,1,302,3,302,6531,8,302,
	1,302,5,302,6534,8,302,10,302,12,302,6537,9,302,1,302,1,302,3,302,6541,
	8,302,1,302,5,302,6544,8,302,10,302,12,302,6547,9,302,1,302,1,302,1,302,
	3,302,6552,8,302,1,302,1,302,1,302,3,302,6557,8,302,1,302,1,302,1,302,3,
	302,6562,8,302,1,302,1,302,1,302,3,302,6567,8,302,1,302,1,302,3,302,6571,
	8,302,1,302,3,302,6574,8,302,1,302,1,302,1,302,3,302,6579,8,302,1,302,1,
	302,3,302,6583,8,302,1,302,1,302,3,302,6587,8,302,1,303,1,303,1,303,1,303,
	5,303,6593,8,303,10,303,12,303,6596,9,303,1,303,1,303,1,304,1,304,3,304,
	6602,8,304,1,304,1,304,3,304,6606,8,304,1,304,1,304,1,304,3,304,6611,8,
	304,1,304,1,304,1,304,3,304,6616,8,304,1,304,1,304,3,304,6620,8,304,3,304,
	6622,8,304,1,304,3,304,6625,8,304,1,305,1,305,1,305,1,305,1,306,1,306,1,
	306,1,306,1,306,1,306,1,307,1,307,1,307,1,307,3,307,6641,8,307,1,307,1,
	307,1,308,1,308,1,308,5,308,6648,8,308,10,308,12,308,6651,9,308,1,309,1,
	309,1,309,5,309,6656,8,309,10,309,12,309,6659,9,309,1,310,1,310,1,310,5,
	310,6664,8,310,10,310,12,310,6667,9,310,1,311,1,311,1,311,1,311,5,311,6673,
	8,311,10,311,12,311,6676,9,311,1,311,1,311,1,312,1,312,1,312,5,312,6683,
	8,312,10,312,12,312,6686,9,312,1,313,1,313,1,313,5,313,6691,8,313,10,313,
	12,313,6694,9,313,1,314,1,314,1,314,5,314,6699,8,314,10,314,12,314,6702,
	9,314,1,315,1,315,1,315,5,315,6707,8,315,10,315,12,315,6710,9,315,1,316,
	1,316,1,316,5,316,6715,8,316,10,316,12,316,6718,9,316,1,317,1,317,1,317,
	1,317,1,317,1,317,1,317,1,317,1,317,3,317,6729,8,317,1,317,1,317,1,317,
	1,317,1,317,3,317,6736,8,317,1,317,1,317,1,317,1,317,1,317,1,317,1,317,
	1,317,3,317,6746,8,317,1,318,1,318,1,318,3,318,6751,8,318,1,318,3,318,6754,
	8,318,1,318,1,318,1,318,3,318,6759,8,318,1,318,3,318,6762,8,318,1,319,1,
	319,3,319,6766,8,319,1,320,1,320,1,320,1,321,1,321,1,321,1,321,1,322,1,
	322,1,322,1,323,1,323,1,323,3,323,6781,8,323,1,324,1,324,1,324,1,324,1,
	324,1,324,3,324,6789,8,324,1,324,1,324,1,324,1,324,1,324,3,324,6796,8,324,
	1,324,1,324,1,324,3,324,6801,8,324,1,325,1,325,1,325,3,325,6806,8,325,1,
	325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,
	325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,
	325,1,325,1,325,1,325,1,325,1,325,4,325,6838,8,325,11,325,12,325,6839,1,
	325,1,325,3,325,6844,8,325,1,325,1,325,1,325,1,325,4,325,6850,8,325,11,
	325,12,325,6851,1,325,1,325,3,325,6856,8,325,1,325,1,325,1,325,1,325,1,
	325,1,325,1,325,3,325,6865,8,325,1,325,1,325,1,325,1,325,1,325,1,325,3,
	325,6873,8,325,1,325,1,325,1,325,3,325,6878,8,325,1,325,1,325,1,325,1,325,
	1,325,1,325,3,325,6886,8,325,1,325,1,325,1,325,3,325,6891,8,325,1,325,1,
	325,1,325,3,325,6896,8,325,3,325,6898,8,325,1,325,1,325,1,325,1,325,1,325,
	1,325,1,325,3,325,6907,8,325,1,325,1,325,1,325,3,325,6912,8,325,1,325,1,
	325,1,325,1,325,1,325,1,325,3,325,6920,8,325,1,325,1,325,1,325,3,325,6925,
	8,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,6933,8,325,1,325,1,325,
	1,325,1,325,1,325,1,325,3,325,6941,8,325,1,325,3,325,6944,8,325,1,325,1,
	325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,6954,8,325,1,325,1,325,1,
	325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,
	325,1,325,3,325,6972,8,325,1,325,3,325,6975,8,325,1,325,3,325,6978,8,325,
	1,325,1,325,3,325,6982,8,325,1,326,1,326,1,326,1,326,1,326,1,327,1,327,
	1,327,1,327,5,327,6993,8,327,10,327,12,327,6996,9,327,1,327,1,327,1,327,
	1,327,1,327,3,327,7003,8,327,1,328,1,328,3,328,7007,8,328,1,329,1,329,1,
	329,3,329,7012,8,329,1,329,1,329,1,329,3,329,7017,8,329,1,329,1,329,1,329,
	1,329,3,329,7023,8,329,1,329,1,329,1,329,3,329,7028,8,329,1,329,1,329,3,
	329,7032,8,329,1,329,1,329,1,329,3,329,7037,8,329,1,329,1,329,1,329,3,329,
	7042,8,329,1,329,1,329,1,329,3,329,7047,8,329,1,329,1,329,1,329,1,329,1,
	329,1,329,5,329,7055,8,329,10,329,12,329,7058,9,329,3,329,7060,8,329,1,
	329,1,329,3,329,7064,8,329,1,329,1,329,3,329,7068,8,329,1,330,1,330,1,330,
	1,330,1,330,3,330,7075,8,330,1,330,1,330,3,330,7079,8,330,1,330,1,330,1,
	330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,
	330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,
	330,3,330,7108,8,330,1,331,1,331,1,331,1,331,1,331,1,331,3,331,7116,8,331,
	1,332,3,332,7119,8,332,1,332,3,332,7122,8,332,1,332,3,332,7125,8,332,1,
	332,3,332,7128,8,332,1,333,1,333,1,334,1,334,1,334,1,335,1,335,1,336,1,
	336,3,336,7139,8,336,1,337,1,337,1,337,1,337,1,337,1,338,1,338,1,338,1,
	338,1,338,1,338,1,338,3,338,7153,8,338,1,339,1,339,1,339,1,339,1,339,5,
	339,7160,8,339,10,339,12,339,7163,9,339,1,340,1,340,1,340,1,340,1,340,1,
	340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,
	340,1,340,1,340,1,340,1,340,1,340,1,340,3,340,7189,8,340,1,341,1,341,1,
	341,1,341,1,341,1,342,1,342,1,342,1,342,3,342,7200,8,342,1,342,1,342,1,
	342,1,342,1,342,3,342,7207,8,342,5,342,7209,8,342,10,342,12,342,7212,9,
	342,1,343,1,343,1,343,1,343,3,343,7218,8,343,1,344,1,344,1,344,1,344,1,
	344,1,344,3,344,7226,8,344,1,344,1,344,1,344,3,344,7231,8,344,1,344,1,344,
	1,344,1,344,5,344,7237,8,344,10,344,12,344,7240,9,344,1,345,1,345,1,345,
	1,345,1,345,1,345,1,345,1,345,1,345,3,345,7251,8,345,1,345,1,345,1,345,
	1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,3,345,7264,8,345,1,345,
	1,345,1,345,1,345,3,345,7270,8,345,1,345,1,345,1,345,1,345,3,345,7276,8,
	345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,
	345,1,345,1,345,3,345,7292,8,345,1,345,1,345,1,345,1,345,3,345,7298,8,345,
	1,345,1,345,1,345,1,345,1,345,1,345,1,345,5,345,7307,8,345,10,345,12,345,
	7310,9,345,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,
	1,346,1,346,1,346,1,346,1,346,1,346,1,346,5,346,7329,8,346,10,346,12,346,
	7332,9,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,4,346,7341,8,346,11,
	346,12,346,7342,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,
	346,1,346,1,346,1,346,1,346,1,346,3,346,7360,8,346,1,346,1,346,1,346,1,
	346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,
	346,1,346,1,346,1,346,5,346,7381,8,346,10,346,12,346,7384,9,346,1,347,1,
	347,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,
	348,1,348,1,348,3,348,7402,8,348,1,349,1,349,1,349,1,349,1,349,1,349,1,
	349,3,349,7411,8,349,1,350,1,350,1,350,1,350,1,350,1,350,1,350,3,350,7420,
	8,350,1,351,1,351,1,352,1,352,1,353,1,353,1,353,1,353,1,353,3,353,7431,
	8,353,1,354,1,354,1,355,1,355,1,356,1,356,1,357,1,357,1,358,1,358,1,359,
	1,359,1,360,1,360,1,360,0,3,688,690,692,361,0,2,4,6,8,10,12,14,16,18,20,
	22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
	70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
	114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
	150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
	186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
	222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
	258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
	294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,
	330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,
	366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,
	402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,
	438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,
	474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,
	510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,
	546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,
	582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,
	618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,
	654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,
	690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,0,144,2,
	0,39,39,150,150,2,0,531,531,537,537,3,0,69,69,159,159,181,181,3,0,42,42,
	384,384,454,454,4,0,42,42,419,419,529,529,611,611,2,0,514,514,1148,1148,
	2,0,78,78,141,141,2,0,15,15,334,334,3,0,44,44,85,85,184,184,2,0,434,434,
	558,558,3,0,506,506,650,650,658,658,2,0,392,392,460,460,2,0,352,352,474,
	474,2,0,42,42,1138,1139,2,0,350,350,443,443,2,0,459,459,673,673,3,0,80,
	80,84,84,125,125,3,0,42,42,402,402,431,431,3,0,42,42,398,398,792,792,2,
	0,637,637,672,672,2,0,81,81,91,91,3,0,436,436,548,548,613,613,2,0,69,69,
	159,159,1,0,356,357,1,0,1138,1139,2,0,1148,1148,1156,1156,2,0,81,81,388,
	388,2,0,545,545,1148,1148,2,0,546,546,1148,1148,3,0,430,430,469,469,521,
	521,7,0,42,42,370,370,372,372,402,402,431,431,573,573,1156,1156,2,0,514,
	514,530,530,1,0,1139,1140,2,0,5,5,51,51,4,0,42,42,384,384,454,454,458,458,
	2,0,26,26,30,30,2,0,12,12,175,175,2,0,192,192,677,677,2,0,21,21,144,144,
	3,0,43,43,75,75,106,106,2,0,106,106,374,374,2,0,365,365,427,427,2,0,101,
	101,601,601,2,0,43,43,106,106,2,0,6,6,49,49,2,0,188,188,669,669,4,0,430,
	430,469,469,520,520,562,562,2,0,430,430,520,520,2,0,13,13,45,45,3,0,66,
	66,78,78,186,186,2,0,34,34,83,83,2,0,97,97,148,148,2,0,6,6,49,50,1,0,626,
	627,2,0,172,172,742,742,2,0,439,439,609,609,2,0,226,226,477,477,5,0,107,
	107,482,483,485,485,489,497,575,575,4,0,479,480,484,484,486,487,576,576,
	3,0,108,108,478,478,488,488,2,0,462,462,628,628,2,0,622,622,624,624,2,0,
	344,344,629,629,2,0,90,90,591,591,2,0,51,51,390,390,3,0,31,31,61,61,179,
	179,3,0,131,131,172,172,437,437,3,0,12,12,19,19,187,187,2,0,42,42,121,121,
	2,0,103,103,182,182,2,0,360,360,614,614,2,0,40,40,671,671,2,0,115,115,474,
	474,2,0,422,422,568,568,4,0,206,206,208,208,214,214,638,638,2,0,1108,1108,
	1124,1124,2,0,345,345,577,577,2,0,68,68,80,80,6,0,131,131,172,172,177,177,
	415,415,437,437,671,671,2,0,513,513,634,634,2,0,412,412,675,675,2,0,131,
	131,437,437,3,0,81,81,92,92,452,452,3,0,439,439,474,474,609,609,2,0,634,
	634,670,670,2,0,376,376,567,567,6,0,226,226,409,409,411,411,438,438,574,
	574,615,615,2,0,45,46,62,62,3,0,422,422,550,550,885,885,2,0,466,466,652,
	652,10,0,359,359,367,367,378,380,387,387,507,507,515,515,639,639,646,646,
	836,836,1005,1005,2,0,35,35,168,168,2,0,117,117,996,996,11,0,359,359,367,
	367,378,380,387,387,507,507,515,515,592,592,639,639,646,646,836,836,1005,
	1005,2,0,1137,1137,1158,1159,1,0,1159,1160,2,0,375,375,787,798,3,0,1138,
	1140,1149,1149,1151,1151,2,0,63,63,178,178,2,0,116,116,1152,1152,5,0,25,
	25,222,224,231,231,233,236,518,518,2,0,25,25,222,222,2,0,25,25,222,223,
	1,0,196,207,3,0,183,183,195,195,612,612,2,0,211,216,431,431,6,0,217,217,
	228,228,230,230,232,232,239,239,348,349,4,0,218,221,226,227,229,229,346,
	346,2,0,153,153,237,237,2,0,466,466,803,811,3,0,211,211,226,226,518,518,
	6,0,200,200,206,206,209,209,217,218,220,221,466,466,1,0,214,215,2,0,183,
	183,612,612,2,0,200,200,206,206,2,0,315,316,322,322,3,0,150,150,313,316,
	331,331,1,0,325,326,3,0,17,17,95,95,176,176,2,0,222,222,226,226,2,0,217,
	218,220,220,3,0,13,13,45,45,994,994,3,0,286,286,298,299,309,309,3,0,287,
	289,305,308,310,312,2,0,295,295,297,297,2,0,293,293,296,296,2,0,291,292,
	302,304,2,0,133,133,601,601,2,0,433,433,559,559,2,0,535,535,551,551,2,0,
	114,114,1127,1127,3,0,63,63,178,178,662,662,2,0,137,137,149,149,3,0,6,6,
	337,337,618,618,3,0,114,114,1120,1121,1127,1128,2,0,1117,1119,1122,1123,
	1,0,1120,1121,2,0,226,226,746,786,1,0,799,802,5,0,708,709,725,727,733,733,
	739,740,742,742,1,0,689,696,3,0,217,221,234,234,237,237,58,0,11,11,14,14,
	18,18,29,29,35,35,37,37,42,42,48,48,55,55,57,57,59,59,73,73,79,79,94,94,
	117,117,121,121,124,124,130,130,158,158,168,168,239,239,283,290,294,294,
	298,299,305,312,332,385,387,403,405,405,407,432,434,450,452,458,460,521,
	523,523,527,544,547,558,560,589,591,606,608,636,638,672,674,675,677,682,
	684,688,697,697,699,707,710,712,717,718,720,724,728,732,734,734,736,738,
	741,741,743,745,792,792,836,836,875,875,1000,1000,1005,1005,1088,1088,23,
	0,39,39,97,97,148,148,150,150,217,219,221,221,251,282,290,293,295,297,300,
	304,324,324,459,459,673,673,689,696,736,736,803,803,806,835,837,874,876,
	999,1001,1004,1006,1087,1089,1107,1123,1123,8767,0,723,1,0,0,0,2,742,1,
	0,0,0,4,763,1,0,0,0,6,765,1,0,0,0,8,805,1,0,0,0,10,820,1,0,0,0,12,831,1,
	0,0,0,14,848,1,0,0,0,16,853,1,0,0,0,18,868,1,0,0,0,20,895,1,0,0,0,22,904,
	1,0,0,0,24,906,1,0,0,0,26,918,1,0,0,0,28,948,1,0,0,0,30,984,1,0,0,0,32,
	1035,1,0,0,0,34,1061,1,0,0,0,36,1097,1,0,0,0,38,1110,1,0,0,0,40,1207,1,
	0,0,0,42,1209,1,0,0,0,44,1227,1,0,0,0,46,1288,1,0,0,0,48,1307,1,0,0,0,50,
	1313,1,0,0,0,52,1335,1,0,0,0,54,1337,1,0,0,0,56,1339,1,0,0,0,58,1419,1,
	0,0,0,60,1426,1,0,0,0,62,1428,1,0,0,0,64,1433,1,0,0,0,66,1473,1,0,0,0,68,
	1479,1,0,0,0,70,1481,1,0,0,0,72,1502,1,0,0,0,74,1509,1,0,0,0,76,1511,1,
	0,0,0,78,1536,1,0,0,0,80,1539,1,0,0,0,82,1544,1,0,0,0,84,1570,1,0,0,0,86,
	1586,1,0,0,0,88,1588,1,0,0,0,90,1610,1,0,0,0,92,1612,1,0,0,0,94,1678,1,
	0,0,0,96,1749,1,0,0,0,98,1751,1,0,0,0,100,1779,1,0,0,0,102,1789,1,0,0,0,
	104,1819,1,0,0,0,106,2006,1,0,0,0,108,2008,1,0,0,0,110,2010,1,0,0,0,112,
	2013,1,0,0,0,114,2088,1,0,0,0,116,2111,1,0,0,0,118,2259,1,0,0,0,120,2264,
	1,0,0,0,122,2266,1,0,0,0,124,2276,1,0,0,0,126,2332,1,0,0,0,128,2352,1,0,
	0,0,130,2354,1,0,0,0,132,2389,1,0,0,0,134,2398,1,0,0,0,136,2405,1,0,0,0,
	138,2428,1,0,0,0,140,2437,1,0,0,0,142,2452,1,0,0,0,144,2477,1,0,0,0,146,
	2497,1,0,0,0,148,2880,1,0,0,0,150,2980,1,0,0,0,152,2982,1,0,0,0,154,2989,
	1,0,0,0,156,2996,1,0,0,0,158,3019,1,0,0,0,160,3027,1,0,0,0,162,3034,1,0,
	0,0,164,3041,1,0,0,0,166,3048,1,0,0,0,168,3060,1,0,0,0,170,3070,1,0,0,0,
	172,3077,1,0,0,0,174,3093,1,0,0,0,176,3139,1,0,0,0,178,3141,1,0,0,0,180,
	3151,1,0,0,0,182,3155,1,0,0,0,184,3161,1,0,0,0,186,3173,1,0,0,0,188,3175,
	1,0,0,0,190,3182,1,0,0,0,192,3184,1,0,0,0,194,3242,1,0,0,0,196,3316,1,0,
	0,0,198,3375,1,0,0,0,200,3473,1,0,0,0,202,3477,1,0,0,0,204,3479,1,0,0,0,
	206,3514,1,0,0,0,208,3516,1,0,0,0,210,3524,1,0,0,0,212,3532,1,0,0,0,214,
	3534,1,0,0,0,216,3570,1,0,0,0,218,3625,1,0,0,0,220,3634,1,0,0,0,222,3654,
	1,0,0,0,224,3666,1,0,0,0,226,3670,1,0,0,0,228,3703,1,0,0,0,230,3724,1,0,
	0,0,232,3734,1,0,0,0,234,3738,1,0,0,0,236,3764,1,0,0,0,238,3806,1,0,0,0,
	240,3808,1,0,0,0,242,3823,1,0,0,0,244,3872,1,0,0,0,246,3881,1,0,0,0,248,
	3891,1,0,0,0,250,3901,1,0,0,0,252,3957,1,0,0,0,254,3959,1,0,0,0,256,3986,
	1,0,0,0,258,3992,1,0,0,0,260,4000,1,0,0,0,262,4017,1,0,0,0,264,4033,1,0,
	0,0,266,4070,1,0,0,0,268,4076,1,0,0,0,270,4085,1,0,0,0,272,4098,1,0,0,0,
	274,4102,1,0,0,0,276,4140,1,0,0,0,278,4178,1,0,0,0,280,4192,1,0,0,0,282,
	4200,1,0,0,0,284,4204,1,0,0,0,286,4210,1,0,0,0,288,4224,1,0,0,0,290,4227,
	1,0,0,0,292,4245,1,0,0,0,294,4249,1,0,0,0,296,4265,1,0,0,0,298,4267,1,0,
	0,0,300,4279,1,0,0,0,302,4283,1,0,0,0,304,4300,1,0,0,0,306,4317,1,0,0,0,
	308,4320,1,0,0,0,310,4330,1,0,0,0,312,4334,1,0,0,0,314,4347,1,0,0,0,316,
	4350,1,0,0,0,318,4355,1,0,0,0,320,4375,1,0,0,0,322,4377,1,0,0,0,324,4394,
	1,0,0,0,326,4403,1,0,0,0,328,4412,1,0,0,0,330,4414,1,0,0,0,332,4428,1,0,
	0,0,334,4439,1,0,0,0,336,4448,1,0,0,0,338,4451,1,0,0,0,340,4459,1,0,0,0,
	342,4484,1,0,0,0,344,4496,1,0,0,0,346,4499,1,0,0,0,348,4531,1,0,0,0,350,
	4533,1,0,0,0,352,4535,1,0,0,0,354,4537,1,0,0,0,356,4539,1,0,0,0,358,4592,
	1,0,0,0,360,4594,1,0,0,0,362,4600,1,0,0,0,364,4620,1,0,0,0,366,4634,1,0,
	0,0,368,4645,1,0,0,0,370,4647,1,0,0,0,372,4653,1,0,0,0,374,4663,1,0,0,0,
	376,4667,1,0,0,0,378,4674,1,0,0,0,380,4678,1,0,0,0,382,4684,1,0,0,0,384,
	4691,1,0,0,0,386,4697,1,0,0,0,388,4703,1,0,0,0,390,4708,1,0,0,0,392,4753,
	1,0,0,0,394,4774,1,0,0,0,396,4799,1,0,0,0,398,4802,1,0,0,0,400,4808,1,0,
	0,0,402,4824,1,0,0,0,404,4839,1,0,0,0,406,4845,1,0,0,0,408,4875,1,0,0,0,
	410,4877,1,0,0,0,412,4884,1,0,0,0,414,4896,1,0,0,0,416,4902,1,0,0,0,418,
	4927,1,0,0,0,420,4931,1,0,0,0,422,4935,1,0,0,0,424,4946,1,0,0,0,426,5027,
	1,0,0,0,428,5094,1,0,0,0,430,5096,1,0,0,0,432,5202,1,0,0,0,434,5226,1,0,
	0,0,436,5228,1,0,0,0,438,5246,1,0,0,0,440,5326,1,0,0,0,442,5328,1,0,0,0,
	444,5341,1,0,0,0,446,5352,1,0,0,0,448,5380,1,0,0,0,450,5384,1,0,0,0,452,
	5405,1,0,0,0,454,5415,1,0,0,0,456,5425,1,0,0,0,458,5465,1,0,0,0,460,5467,
	1,0,0,0,462,5470,1,0,0,0,464,5570,1,0,0,0,466,5588,1,0,0,0,468,5590,1,0,
	0,0,470,5594,1,0,0,0,472,5632,1,0,0,0,474,5641,1,0,0,0,476,5647,1,0,0,0,
	478,5654,1,0,0,0,480,5676,1,0,0,0,482,5678,1,0,0,0,484,5692,1,0,0,0,486,
	5698,1,0,0,0,488,5754,1,0,0,0,490,5909,1,0,0,0,492,5921,1,0,0,0,494,5936,
	1,0,0,0,496,5942,1,0,0,0,498,5961,1,0,0,0,500,5971,1,0,0,0,502,5985,1,0,
	0,0,504,5987,1,0,0,0,506,5990,1,0,0,0,508,6012,1,0,0,0,510,6024,1,0,0,0,
	512,6030,1,0,0,0,514,6042,1,0,0,0,516,6046,1,0,0,0,518,6048,1,0,0,0,520,
	6090,1,0,0,0,522,6097,1,0,0,0,524,6099,1,0,0,0,526,6122,1,0,0,0,528,6128,
	1,0,0,0,530,6136,1,0,0,0,532,6139,1,0,0,0,534,6142,1,0,0,0,536,6163,1,0,
	0,0,538,6184,1,0,0,0,540,6192,1,0,0,0,542,6204,1,0,0,0,544,6212,1,0,0,0,
	546,6250,1,0,0,0,548,6262,1,0,0,0,550,6264,1,0,0,0,552,6270,1,0,0,0,554,
	6274,1,0,0,0,556,6290,1,0,0,0,558,6303,1,0,0,0,560,6312,1,0,0,0,562,6314,
	1,0,0,0,564,6321,1,0,0,0,566,6323,1,0,0,0,568,6329,1,0,0,0,570,6333,1,0,
	0,0,572,6338,1,0,0,0,574,6340,1,0,0,0,576,6342,1,0,0,0,578,6360,1,0,0,0,
	580,6376,1,0,0,0,582,6380,1,0,0,0,584,6385,1,0,0,0,586,6396,1,0,0,0,588,
	6401,1,0,0,0,590,6403,1,0,0,0,592,6407,1,0,0,0,594,6432,1,0,0,0,596,6434,
	1,0,0,0,598,6437,1,0,0,0,600,6442,1,0,0,0,602,6458,1,0,0,0,604,6586,1,0,
	0,0,606,6588,1,0,0,0,608,6621,1,0,0,0,610,6626,1,0,0,0,612,6630,1,0,0,0,
	614,6636,1,0,0,0,616,6644,1,0,0,0,618,6652,1,0,0,0,620,6660,1,0,0,0,622,
	6668,1,0,0,0,624,6679,1,0,0,0,626,6687,1,0,0,0,628,6695,1,0,0,0,630,6703,
	1,0,0,0,632,6711,1,0,0,0,634,6745,1,0,0,0,636,6761,1,0,0,0,638,6765,1,0,
	0,0,640,6767,1,0,0,0,642,6770,1,0,0,0,644,6774,1,0,0,0,646,6780,1,0,0,0,
	648,6800,1,0,0,0,650,6981,1,0,0,0,652,6983,1,0,0,0,654,7002,1,0,0,0,656,
	7004,1,0,0,0,658,7067,1,0,0,0,660,7107,1,0,0,0,662,7109,1,0,0,0,664,7118,
	1,0,0,0,666,7129,1,0,0,0,668,7131,1,0,0,0,670,7134,1,0,0,0,672,7138,1,0,
	0,0,674,7140,1,0,0,0,676,7152,1,0,0,0,678,7154,1,0,0,0,680,7188,1,0,0,0,
	682,7190,1,0,0,0,684,7199,1,0,0,0,686,7217,1,0,0,0,688,7230,1,0,0,0,690,
	7241,1,0,0,0,692,7359,1,0,0,0,694,7385,1,0,0,0,696,7401,1,0,0,0,698,7410,
	1,0,0,0,700,7419,1,0,0,0,702,7421,1,0,0,0,704,7423,1,0,0,0,706,7430,1,0,
	0,0,708,7432,1,0,0,0,710,7434,1,0,0,0,712,7436,1,0,0,0,714,7438,1,0,0,0,
	716,7440,1,0,0,0,718,7442,1,0,0,0,720,7444,1,0,0,0,722,724,3,2,1,0,723,
	722,1,0,0,0,723,724,1,0,0,0,724,727,1,0,0,0,725,726,5,1121,0,0,726,728,
	5,1121,0,0,727,725,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,730,5,0,
	0,1,730,1,1,0,0,0,731,734,3,4,2,0,732,733,5,1121,0,0,733,735,5,1121,0,0,
	734,732,1,0,0,0,734,735,1,0,0,0,735,737,1,0,0,0,736,738,5,1136,0,0,737,
	736,1,0,0,0,737,738,1,0,0,0,738,741,1,0,0,0,739,741,3,6,3,0,740,731,1,0,
	0,0,740,739,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,
	754,1,0,0,0,744,742,1,0,0,0,745,751,3,4,2,0,746,747,5,1121,0,0,747,749,
	5,1121,0,0,748,746,1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,752,5,1136,
	0,0,751,748,1,0,0,0,751,752,1,0,0,0,752,755,1,0,0,0,753,755,3,6,3,0,754,
	745,1,0,0,0,754,753,1,0,0,0,755,3,1,0,0,0,756,764,3,8,4,0,757,764,3,10,
	5,0,758,764,3,12,6,0,759,764,3,14,7,0,760,764,3,16,8,0,761,764,3,20,10,
	0,762,764,3,22,11,0,763,756,1,0,0,0,763,757,1,0,0,0,763,758,1,0,0,0,763,
	759,1,0,0,0,763,760,1,0,0,0,763,761,1,0,0,0,763,762,1,0,0,0,764,5,1,0,0,
	0,765,766,5,1136,0,0,766,7,1,0,0,0,767,806,3,24,12,0,768,806,3,26,13,0,
	769,806,3,28,14,0,770,806,3,30,15,0,771,806,3,32,16,0,772,806,3,34,17,0,
	773,806,3,38,19,0,774,806,3,40,20,0,775,806,3,42,21,0,776,806,3,44,22,0,
	777,806,3,46,23,0,778,806,3,56,28,0,779,806,3,36,18,0,780,806,3,128,64,
	0,781,806,3,130,65,0,782,806,3,132,66,0,783,806,3,134,67,0,784,806,3,136,
	68,0,785,806,3,138,69,0,786,806,3,140,70,0,787,806,3,142,71,0,788,806,3,
	144,72,0,789,806,3,146,73,0,790,806,3,152,76,0,791,806,3,154,77,0,792,806,
	3,156,78,0,793,806,3,158,79,0,794,806,3,160,80,0,795,806,3,162,81,0,796,
	806,3,164,82,0,797,806,3,166,83,0,798,806,3,168,84,0,799,806,3,170,85,0,
	800,806,3,172,86,0,801,806,3,174,87,0,802,806,3,176,88,0,803,806,3,178,
	89,0,804,806,3,182,91,0,805,767,1,0,0,0,805,768,1,0,0,0,805,769,1,0,0,0,
	805,770,1,0,0,0,805,771,1,0,0,0,805,772,1,0,0,0,805,773,1,0,0,0,805,774,
	1,0,0,0,805,775,1,0,0,0,805,776,1,0,0,0,805,777,1,0,0,0,805,778,1,0,0,0,
	805,779,1,0,0,0,805,780,1,0,0,0,805,781,1,0,0,0,805,782,1,0,0,0,805,783,
	1,0,0,0,805,784,1,0,0,0,805,785,1,0,0,0,805,786,1,0,0,0,805,787,1,0,0,0,
	805,788,1,0,0,0,805,789,1,0,0,0,805,790,1,0,0,0,805,791,1,0,0,0,805,792,
	1,0,0,0,805,793,1,0,0,0,805,794,1,0,0,0,805,795,1,0,0,0,805,796,1,0,0,0,
	805,797,1,0,0,0,805,798,1,0,0,0,805,799,1,0,0,0,805,800,1,0,0,0,805,801,
	1,0,0,0,805,802,1,0,0,0,805,803,1,0,0,0,805,804,1,0,0,0,806,9,1,0,0,0,807,
	821,3,200,100,0,808,821,3,192,96,0,809,821,3,202,101,0,810,821,3,186,93,
	0,811,821,3,198,99,0,812,821,3,184,92,0,813,821,3,194,97,0,814,821,3,196,
	98,0,815,821,3,188,94,0,816,821,3,190,95,0,817,821,3,204,102,0,818,821,
	3,540,270,0,819,821,3,542,271,0,820,807,1,0,0,0,820,808,1,0,0,0,820,809,
	1,0,0,0,820,810,1,0,0,0,820,811,1,0,0,0,820,812,1,0,0,0,820,813,1,0,0,0,
	820,814,1,0,0,0,820,815,1,0,0,0,820,816,1,0,0,0,820,817,1,0,0,0,820,818,
	1,0,0,0,820,819,1,0,0,0,821,11,1,0,0,0,822,832,3,298,149,0,823,832,3,300,
	150,0,824,832,3,302,151,0,825,832,3,304,152,0,826,832,3,306,153,0,827,832,
	3,308,154,0,828,832,3,310,155,0,829,832,3,312,156,0,830,832,3,314,157,0,
	831,822,1,0,0,0,831,823,1,0,0,0,831,824,1,0,0,0,831,825,1,0,0,0,831,826,
	1,0,0,0,831,827,1,0,0,0,831,828,1,0,0,0,831,829,1,0,0,0,831,830,1,0,0,0,
	832,13,1,0,0,0,833,849,3,330,165,0,834,849,3,332,166,0,835,849,3,334,167,
	0,836,849,3,336,168,0,837,849,3,338,169,0,838,849,3,340,170,0,839,849,3,
	342,171,0,840,849,3,344,172,0,841,849,3,346,173,0,842,849,3,370,185,0,843,
	849,3,372,186,0,844,849,3,374,187,0,845,849,3,376,188,0,846,849,3,378,189,
	0,847,849,3,380,190,0,848,833,1,0,0,0,848,834,1,0,0,0,848,835,1,0,0,0,848,
	836,1,0,0,0,848,837,1,0,0,0,848,838,1,0,0,0,848,839,1,0,0,0,848,840,1,0,
	0,0,848,841,1,0,0,0,848,842,1,0,0,0,848,843,1,0,0,0,848,844,1,0,0,0,848,
	845,1,0,0,0,848,846,1,0,0,0,848,847,1,0,0,0,849,15,1,0,0,0,850,854,3,382,
	191,0,851,854,3,384,192,0,852,854,3,386,193,0,853,850,1,0,0,0,853,851,1,
	0,0,0,853,852,1,0,0,0,854,17,1,0,0,0,855,869,3,390,195,0,856,869,3,392,
	196,0,857,869,3,394,197,0,858,869,3,398,199,0,859,869,3,400,200,0,860,869,
	3,402,201,0,861,869,3,406,203,0,862,869,3,396,198,0,863,869,3,404,202,0,
	864,869,3,408,204,0,865,866,3,540,270,0,866,867,3,10,5,0,867,869,1,0,0,
	0,868,855,1,0,0,0,868,856,1,0,0,0,868,857,1,0,0,0,868,858,1,0,0,0,868,859,
	1,0,0,0,868,860,1,0,0,0,868,861,1,0,0,0,868,862,1,0,0,0,868,863,1,0,0,0,
	868,864,1,0,0,0,868,865,1,0,0,0,869,19,1,0,0,0,870,896,3,426,213,0,871,
	896,3,428,214,0,872,896,3,430,215,0,873,896,3,432,216,0,874,896,3,436,218,
	0,875,896,3,438,219,0,876,896,3,440,220,0,877,896,3,442,221,0,878,896,3,
	470,235,0,879,896,3,472,236,0,880,896,3,474,237,0,881,896,3,476,238,0,882,
	896,3,478,239,0,883,896,3,482,241,0,884,896,3,484,242,0,885,896,3,486,243,
	0,886,896,3,488,244,0,887,896,3,490,245,0,888,896,3,504,252,0,889,896,3,
	506,253,0,890,896,3,508,254,0,891,896,3,510,255,0,892,896,3,512,256,0,893,
	896,3,514,257,0,894,896,3,516,258,0,895,870,1,0,0,0,895,871,1,0,0,0,895,
	872,1,0,0,0,895,873,1,0,0,0,895,874,1,0,0,0,895,875,1,0,0,0,895,876,1,0,
	0,0,895,877,1,0,0,0,895,878,1,0,0,0,895,879,1,0,0,0,895,880,1,0,0,0,895,
	881,1,0,0,0,895,882,1,0,0,0,895,883,1,0,0,0,895,884,1,0,0,0,895,885,1,0,
	0,0,895,886,1,0,0,0,895,887,1,0,0,0,895,888,1,0,0,0,895,889,1,0,0,0,895,
	890,1,0,0,0,895,891,1,0,0,0,895,892,1,0,0,0,895,893,1,0,0,0,895,894,1,0,
	0,0,896,21,1,0,0,0,897,905,3,526,263,0,898,905,3,528,264,0,899,905,3,530,
	265,0,900,905,3,532,266,0,901,905,3,534,267,0,902,905,3,536,268,0,903,905,
	3,544,272,0,904,897,1,0,0,0,904,898,1,0,0,0,904,899,1,0,0,0,904,900,1,0,
	0,0,904,901,1,0,0,0,904,902,1,0,0,0,904,903,1,0,0,0,905,23,1,0,0,0,906,
	907,5,33,0,0,907,909,7,0,0,0,908,910,3,642,321,0,909,908,1,0,0,0,909,910,
	1,0,0,0,910,911,1,0,0,0,911,915,3,584,292,0,912,914,3,58,29,0,913,912,1,
	0,0,0,914,917,1,0,0,0,915,913,1,0,0,0,915,916,1,0,0,0,916,25,1,0,0,0,917,
	915,1,0,0,0,918,920,5,33,0,0,919,921,3,64,32,0,920,919,1,0,0,0,920,921,
	1,0,0,0,921,922,1,0,0,0,922,924,5,415,0,0,923,925,3,642,321,0,924,923,1,
	0,0,0,924,925,1,0,0,0,925,926,1,0,0,0,926,927,3,550,275,0,927,928,5,118,
	0,0,928,929,5,605,0,0,929,936,3,66,33,0,930,931,5,118,0,0,931,933,5,371,
	0,0,932,934,5,114,0,0,933,932,1,0,0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,
	937,5,561,0,0,936,930,1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,0,938,940,3,
	74,37,0,939,938,1,0,0,0,939,940,1,0,0,0,940,943,1,0,0,0,941,942,5,368,0,
	0,942,944,5,1148,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,
	946,5,399,0,0,946,947,3,388,194,0,947,27,1,0,0,0,948,950,5,33,0,0,949,951,
	7,1,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,954,7,2,0,0,
	953,952,1,0,0,0,953,954,1,0,0,0,954,955,1,0,0,0,955,956,5,81,0,0,956,958,
	3,584,292,0,957,959,3,76,38,0,958,957,1,0,0,0,958,959,1,0,0,0,959,960,1,
	0,0,0,960,961,5,118,0,0,961,962,3,552,276,0,962,966,3,622,311,0,963,965,
	3,78,39,0,964,963,1,0,0,0,965,968,1,0,0,0,966,964,1,0,0,0,966,967,1,0,0,
	0,967,981,1,0,0,0,968,966,1,0,0,0,969,971,5,336,0,0,970,972,5,1124,0,0,
	971,970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,980,7,3,0,0,974,976,
	5,103,0,0,975,977,5,1124,0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,978,1,
	0,0,0,978,980,7,4,0,0,979,969,1,0,0,0,979,974,1,0,0,0,980,983,1,0,0,0,981,
	979,1,0,0,0,981,982,1,0,0,0,982,29,1,0,0,0,983,981,1,0,0,0,984,985,5,33,
	0,0,985,986,5,475,0,0,986,987,5,73,0,0,987,988,3,584,292,0,988,989,5,5,
	0,0,989,990,5,659,0,0,990,996,5,1148,0,0,991,993,5,453,0,0,992,994,5,1124,
	0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,997,3,592,296,0,
	996,991,1,0,0,0,996,997,1,0,0,0,997,1003,1,0,0,0,998,1000,5,660,0,0,999,
	1001,5,1124,0,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,
	1004,3,592,296,0,1003,998,1,0,0,0,1003,1004,1,0,0,0,1004,1010,1,0,0,0,1005,
	1007,5,572,0,0,1006,1008,5,1124,0,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,
	1008,1009,1,0,0,0,1009,1011,3,592,296,0,1010,1005,1,0,0,0,1010,1011,1,0,
	0,0,1011,1017,1,0,0,0,1012,1014,5,528,0,0,1013,1015,5,1124,0,0,1014,1013,
	1,0,0,0,1014,1015,1,0,0,0,1015,1016,1,0,0,0,1016,1018,3,584,292,0,1017,
	1012,1,0,0,0,1017,1018,1,0,0,0,1018,1020,1,0,0,0,1019,1021,5,674,0,0,1020,
	1019,1,0,0,0,1020,1021,1,0,0,0,1021,1027,1,0,0,0,1022,1024,5,368,0,0,1023,
	1025,5,1124,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,
	1028,5,1148,0,0,1027,1022,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,
	1031,5,409,0,0,1030,1032,5,1124,0,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,
	1032,1033,1,0,0,0,1033,1034,3,572,286,0,1034,31,1,0,0,0,1035,1037,5,33,
	0,0,1036,1038,3,64,32,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,1039,1,
	0,0,0,1039,1040,5,131,0,0,1040,1041,3,550,275,0,1041,1043,5,1133,0,0,1042,
	1044,3,80,40,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1049,1,0,0,0,1045,
	1046,5,1135,0,0,1046,1048,3,80,40,0,1047,1045,1,0,0,0,1048,1051,1,0,0,0,
	1049,1047,1,0,0,0,1049,1050,1,0,0,0,1050,1052,1,0,0,0,1051,1049,1,0,0,0,
	1052,1056,5,1134,0,0,1053,1055,3,84,42,0,1054,1053,1,0,0,0,1055,1058,1,
	0,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,0,1057,1059,1,0,0,0,1058,1056,1,
	0,0,0,1059,1060,3,388,194,0,1060,33,1,0,0,0,1061,1063,5,33,0,0,1062,1064,
	3,64,32,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1066,1,0,0,0,1065,1067,
	5,335,0,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1070,
	5,437,0,0,1069,1071,3,642,321,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,
	1072,1,0,0,0,1072,1073,3,550,275,0,1073,1075,5,1133,0,0,1074,1076,3,82,
	41,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,1076,1081,1,0,0,0,1077,1078,5,
	1135,0,0,1078,1080,3,82,41,0,1079,1077,1,0,0,0,1080,1083,1,0,0,0,1081,1079,
	1,0,0,0,1081,1082,1,0,0,0,1082,1084,1,0,0,0,1083,1081,1,0,0,0,1084,1085,
	5,1134,0,0,1085,1086,5,594,0,0,1086,1090,3,604,302,0,1087,1089,3,84,42,
	0,1088,1087,1,0,0,0,1089,1092,1,0,0,0,1090,1088,1,0,0,0,1090,1091,1,0,0,
	0,1091,1095,1,0,0,0,1092,1090,1,0,0,0,1093,1096,3,388,194,0,1094,1096,3,
	404,202,0,1095,1093,1,0,0,0,1095,1094,1,0,0,0,1096,35,1,0,0,0,1097,1098,
	5,33,0,0,1098,1100,5,596,0,0,1099,1101,3,642,321,0,1100,1099,1,0,0,0,1100,
	1101,1,0,0,0,1101,1102,1,0,0,0,1102,1107,3,554,277,0,1103,1104,5,1135,0,
	0,1104,1106,3,554,277,0,1105,1103,1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,
	0,0,0,1107,1108,1,0,0,0,1108,37,1,0,0,0,1109,1107,1,0,0,0,1110,1111,5,33,
	0,0,1111,1112,5,608,0,0,1112,1113,3,584,292,0,1113,1114,5,67,0,0,1114,1115,
	5,388,0,0,1115,1116,5,679,0,0,1116,1117,7,5,0,0,1117,1118,5,541,0,0,1118,
	1119,5,1133,0,0,1119,1124,3,86,43,0,1120,1121,5,1135,0,0,1121,1123,3,86,
	43,0,1122,1120,1,0,0,0,1123,1126,1,0,0,0,1124,1122,1,0,0,0,1124,1125,1,
	0,0,0,1125,1127,1,0,0,0,1126,1124,1,0,0,0,1127,1128,5,1134,0,0,1128,39,
	1,0,0,0,1129,1131,5,33,0,0,1130,1132,5,649,0,0,1131,1130,1,0,0,0,1131,1132,
	1,0,0,0,1132,1133,1,0,0,0,1133,1135,5,172,0,0,1134,1136,3,642,321,0,1135,
	1134,1,0,0,0,1135,1136,1,0,0,0,1136,1137,1,0,0,0,1137,1145,3,552,276,0,
	1138,1139,5,98,0,0,1139,1146,3,552,276,0,1140,1141,5,1133,0,0,1141,1142,
	5,98,0,0,1142,1143,3,552,276,0,1143,1144,5,1134,0,0,1144,1146,1,0,0,0,1145,
	1138,1,0,0,0,1145,1140,1,0,0,0,1146,1208,1,0,0,0,1147,1149,5,33,0,0,1148,
	1150,5,649,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,1151,1,0,0,0,1151,
	1153,5,172,0,0,1152,1154,3,642,321,0,1153,1152,1,0,0,0,1153,1154,1,0,0,
	0,1154,1155,1,0,0,0,1155,1157,3,552,276,0,1156,1158,3,88,44,0,1157,1156,
	1,0,0,0,1157,1158,1,0,0,0,1158,1169,1,0,0,0,1159,1166,3,106,53,0,1160,1162,
	5,1135,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,1165,
	3,106,53,0,1164,1161,1,0,0,0,1165,1168,1,0,0,0,1166,1164,1,0,0,0,1166,1167,
	1,0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,0,1169,1159,1,0,0,0,1169,1170,
	1,0,0,0,1170,1172,1,0,0,0,1171,1173,3,112,56,0,1172,1171,1,0,0,0,1172,1173,
	1,0,0,0,1173,1175,1,0,0,0,1174,1176,7,6,0,0,1175,1174,1,0,0,0,1175,1176,
	1,0,0,0,1176,1178,1,0,0,0,1177,1179,5,12,0,0,1178,1177,1,0,0,0,1178,1179,
	1,0,0,0,1179,1180,1,0,0,0,1180,1181,3,200,100,0,1181,1208,1,0,0,0,1182,
	1184,5,33,0,0,1183,1185,5,649,0,0,1184,1183,1,0,0,0,1184,1185,1,0,0,0,1185,
	1186,1,0,0,0,1186,1188,5,172,0,0,1187,1189,3,642,321,0,1188,1187,1,0,0,
	0,1188,1189,1,0,0,0,1189,1190,1,0,0,0,1190,1191,3,552,276,0,1191,1202,3,
	88,44,0,1192,1199,3,106,53,0,1193,1195,5,1135,0,0,1194,1193,1,0,0,0,1194,
	1195,1,0,0,0,1195,1196,1,0,0,0,1196,1198,3,106,53,0,1197,1194,1,0,0,0,1198,
	1201,1,0,0,0,1199,1197,1,0,0,0,1199,1200,1,0,0,0,1200,1203,1,0,0,0,1201,
	1199,1,0,0,0,1202,1192,1,0,0,0,1202,1203,1,0,0,0,1203,1205,1,0,0,0,1204,
	1206,3,112,56,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1208,1,0,0,0,1207,
	1129,1,0,0,0,1207,1147,1,0,0,0,1207,1182,1,0,0,0,1208,41,1,0,0,0,1209,1210,
	5,33,0,0,1210,1211,5,647,0,0,1211,1212,3,584,292,0,1212,1213,5,5,0,0,1213,
	1214,5,389,0,0,1214,1218,5,1148,0,0,1215,1216,5,428,0,0,1216,1217,5,1124,
	0,0,1217,1219,3,592,296,0,1218,1215,1,0,0,0,1218,1219,1,0,0,0,1219,1225,
	1,0,0,0,1220,1222,5,409,0,0,1221,1223,5,1124,0,0,1222,1221,1,0,0,0,1222,
	1223,1,0,0,0,1223,1224,1,0,0,0,1224,1226,3,572,286,0,1225,1220,1,0,0,0,
	1225,1226,1,0,0,0,1226,43,1,0,0,0,1227,1228,5,33,0,0,1228,1229,5,647,0,
	0,1229,1230,3,584,292,0,1230,1231,5,5,0,0,1231,1232,5,389,0,0,1232,1233,
	5,1148,0,0,1233,1234,5,186,0,0,1234,1235,5,475,0,0,1235,1236,5,73,0,0,1236,
	1242,3,584,292,0,1237,1239,5,423,0,0,1238,1240,5,1124,0,0,1239,1238,1,0,
	0,0,1239,1240,1,0,0,0,1240,1241,1,0,0,0,1241,1243,3,592,296,0,1242,1237,
	1,0,0,0,1242,1243,1,0,0,0,1243,1249,1,0,0,0,1244,1246,5,453,0,0,1245,1247,
	5,1124,0,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,1248,1,0,0,0,1248,1250,
	3,592,296,0,1249,1244,1,0,0,0,1249,1250,1,0,0,0,1250,1256,1,0,0,0,1251,
	1253,5,341,0,0,1252,1254,5,1124,0,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,
	1254,1255,1,0,0,0,1255,1257,3,592,296,0,1256,1251,1,0,0,0,1256,1257,1,0,
	0,0,1257,1263,1,0,0,0,1258,1260,5,501,0,0,1259,1261,5,1124,0,0,1260,1259,
	1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,1262,1264,3,592,296,0,1263,
	1258,1,0,0,0,1263,1264,1,0,0,0,1264,1270,1,0,0,0,1265,1267,5,528,0,0,1266,
	1268,5,1124,0,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,
	1271,3,584,292,0,1270,1265,1,0,0,0,1270,1271,1,0,0,0,1271,1273,1,0,0,0,
	1272,1274,5,674,0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1280,1,0,0,
	0,1275,1277,5,368,0,0,1276,1278,5,1124,0,0,1277,1276,1,0,0,0,1277,1278,
	1,0,0,0,1278,1279,1,0,0,0,1279,1281,5,1148,0,0,1280,1275,1,0,0,0,1280,1281,
	1,0,0,0,1281,1282,1,0,0,0,1282,1284,5,409,0,0,1283,1285,5,1124,0,0,1284,
	1283,1,0,0,0,1284,1285,1,0,0,0,1285,1286,1,0,0,0,1286,1287,3,572,286,0,
	1287,45,1,0,0,0,1288,1290,5,33,0,0,1289,1291,3,64,32,0,1290,1289,1,0,0,
	0,1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1293,5,177,0,0,1293,1294,3,550,
	275,0,1294,1295,7,7,0,0,1295,1296,7,8,0,0,1296,1297,5,118,0,0,1297,1298,
	3,552,276,0,1298,1299,5,65,0,0,1299,1300,5,52,0,0,1300,1303,5,600,0,0,1301,
	1302,7,9,0,0,1302,1304,3,550,275,0,1303,1301,1,0,0,0,1303,1304,1,0,0,0,
	1304,1305,1,0,0,0,1305,1306,3,388,194,0,1306,47,1,0,0,0,1307,1309,5,192,
	0,0,1308,1310,5,571,0,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,
	0,0,0,1311,1312,3,50,25,0,1312,49,1,0,0,0,1313,1325,3,52,26,0,1314,1315,
	5,1133,0,0,1315,1320,3,54,27,0,1316,1317,5,1135,0,0,1317,1319,3,54,27,0,
	1318,1316,1,0,0,0,1319,1322,1,0,0,0,1320,1318,1,0,0,0,1320,1321,1,0,0,0,
	1321,1323,1,0,0,0,1322,1320,1,0,0,0,1323,1324,5,1134,0,0,1324,1326,1,0,
	0,0,1325,1314,1,0,0,0,1325,1326,1,0,0,0,1326,1327,1,0,0,0,1327,1328,5,12,
	0,0,1328,1329,5,1133,0,0,1329,1330,3,10,5,0,1330,1333,5,1134,0,0,1331,1332,
	5,1135,0,0,1332,1334,3,50,25,0,1333,1331,1,0,0,0,1333,1334,1,0,0,0,1334,
	51,1,0,0,0,1335,1336,3,584,292,0,1336,53,1,0,0,0,1337,1338,3,584,292,0,
	1338,55,1,0,0,0,1339,1341,5,33,0,0,1340,1342,3,644,322,0,1341,1340,1,0,
	0,0,1341,1342,1,0,0,0,1342,1346,1,0,0,0,1343,1344,5,336,0,0,1344,1345,5,
	1124,0,0,1345,1347,7,10,0,0,1346,1343,1,0,0,0,1346,1347,1,0,0,0,1347,1349,
	1,0,0,0,1348,1350,3,64,32,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,1354,
	1,0,0,0,1351,1352,5,160,0,0,1352,1353,5,606,0,0,1353,1355,7,11,0,0,1354,
	1351,1,0,0,0,1354,1355,1,0,0,0,1355,1356,1,0,0,0,1356,1357,5,671,0,0,1357,
	1362,3,550,275,0,1358,1359,5,1133,0,0,1359,1360,3,616,308,0,1360,1361,5,
	1134,0,0,1361,1363,1,0,0,0,1362,1358,1,0,0,0,1362,1363,1,0,0,0,1363,1364,
	1,0,0,0,1364,1384,5,12,0,0,1365,1367,5,1133,0,0,1366,1368,3,48,24,0,1367,
	1366,1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,0,1369,1370,3,200,100,0,
	1370,1371,5,1134,0,0,1371,1385,1,0,0,0,1372,1374,3,48,24,0,1373,1372,1,
	0,0,0,1373,1374,1,0,0,0,1374,1375,1,0,0,0,1375,1382,3,200,100,0,1376,1378,
	5,192,0,0,1377,1379,7,12,0,0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,1379,1380,
	1,0,0,0,1380,1381,5,26,0,0,1381,1383,5,120,0,0,1382,1376,1,0,0,0,1382,1383,
	1,0,0,0,1383,1385,1,0,0,0,1384,1365,1,0,0,0,1384,1373,1,0,0,0,1385,57,1,
	0,0,0,1386,1388,5,42,0,0,1387,1386,1,0,0,0,1387,1388,1,0,0,0,1388,1389,
	1,0,0,0,1389,1391,3,60,30,0,1390,1392,5,1124,0,0,1391,1390,1,0,0,0,1391,
	1392,1,0,0,0,1392,1395,1,0,0,0,1393,1396,3,568,284,0,1394,1396,5,42,0,0,
	1395,1393,1,0,0,0,1395,1394,1,0,0,0,1396,1420,1,0,0,0,1397,1399,5,42,0,
	0,1398,1397,1,0,0,0,1398,1399,1,0,0,0,1399,1400,1,0,0,0,1400,1402,5,27,
	0,0,1401,1403,5,1124,0,0,1402,1401,1,0,0,0,1402,1403,1,0,0,0,1403,1404,
	1,0,0,0,1404,1420,3,570,285,0,1405,1407,5,42,0,0,1406,1405,1,0,0,0,1406,
	1407,1,0,0,0,1407,1408,1,0,0,0,1408,1410,5,405,0,0,1409,1411,5,1124,0,0,
	1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,0,1412,1420,5,1148,
	0,0,1413,1414,5,134,0,0,1414,1416,5,538,0,0,1415,1417,5,1124,0,0,1416,1415,
	1,0,0,0,1416,1417,1,0,0,0,1417,1418,1,0,0,0,1418,1420,7,13,0,0,1419,1387,
	1,0,0,0,1419,1398,1,0,0,0,1419,1406,1,0,0,0,1419,1413,1,0,0,0,1420,59,1,
	0,0,0,1421,1422,5,25,0,0,1422,1427,5,153,0,0,1423,1427,5,841,0,0,1424,1425,
	5,222,0,0,1425,1427,5,153,0,0,1426,1421,1,0,0,0,1426,1423,1,0,0,0,1426,
	1424,1,0,0,0,1427,61,1,0,0,0,1428,1431,5,37,0,0,1429,1430,5,1133,0,0,1430,
	1432,5,1134,0,0,1431,1429,1,0,0,0,1431,1432,1,0,0,0,1432,63,1,0,0,0,1433,
	1434,5,392,0,0,1434,1437,5,1124,0,0,1435,1438,3,564,282,0,1436,1438,3,62,
	31,0,1437,1435,1,0,0,0,1437,1436,1,0,0,0,1438,65,1,0,0,0,1439,1440,5,338,
	0,0,1440,1444,3,68,34,0,1441,1443,3,70,35,0,1442,1441,1,0,0,0,1443,1446,
	1,0,0,0,1444,1442,1,0,0,0,1444,1445,1,0,0,0,1445,1474,1,0,0,0,1446,1444,
	1,0,0,0,1447,1450,5,417,0,0,1448,1451,3,590,295,0,1449,1451,3,688,344,0,
	1450,1448,1,0,0,0,1450,1449,1,0,0,0,1451,1452,1,0,0,0,1452,1461,3,72,36,
	0,1453,1454,5,630,0,0,1454,1458,3,68,34,0,1455,1457,3,70,35,0,1456,1455,
	1,0,0,0,1457,1460,1,0,0,0,1458,1456,1,0,0,0,1458,1459,1,0,0,0,1459,1462,
	1,0,0,0,1460,1458,1,0,0,0,1461,1453,1,0,0,0,1461,1462,1,0,0,0,1462,1471,
	1,0,0,0,1463,1464,5,408,0,0,1464,1468,3,68,34,0,1465,1467,3,70,35,0,1466,
	1465,1,0,0,0,1467,1470,1,0,0,0,1468,1466,1,0,0,0,1468,1469,1,0,0,0,1469,
	1472,1,0,0,0,1470,1468,1,0,0,0,1471,1463,1,0,0,0,1471,1472,1,0,0,0,1472,
	1474,1,0,0,0,1473,1439,1,0,0,0,1473,1447,1,0,0,0,1474,67,1,0,0,0,1475,1480,
	5,315,0,0,1476,1480,3,594,297,0,1477,1480,3,590,295,0,1478,1480,3,688,344,
	0,1479,1475,1,0,0,0,1479,1476,1,0,0,0,1479,1477,1,0,0,0,1479,1478,1,0,0,
	0,1480,69,1,0,0,0,1481,1482,5,1120,0,0,1482,1485,5,86,0,0,1483,1486,3,590,
	295,0,1484,1486,3,688,344,0,1485,1483,1,0,0,0,1485,1484,1,0,0,0,1486,1487,
	1,0,0,0,1487,1488,3,72,36,0,1488,71,1,0,0,0,1489,1503,3,714,357,0,1490,
	1503,5,221,0,0,1491,1503,5,240,0,0,1492,1503,5,241,0,0,1493,1503,5,242,
	0,0,1494,1503,5,243,0,0,1495,1503,5,244,0,0,1496,1503,5,245,0,0,1497,1503,
	5,246,0,0,1498,1503,5,247,0,0,1499,1503,5,248,0,0,1500,1503,5,249,0,0,1501,
	1503,5,250,0,0,1502,1489,1,0,0,0,1502,1490,1,0,0,0,1502,1491,1,0,0,0,1502,
	1492,1,0,0,0,1502,1493,1,0,0,0,1502,1494,1,0,0,0,1502,1495,1,0,0,0,1502,
	1496,1,0,0,0,1502,1497,1,0,0,0,1502,1498,1,0,0,0,1502,1499,1,0,0,0,1502,
	1500,1,0,0,0,1502,1501,1,0,0,0,1503,73,1,0,0,0,1504,1510,5,403,0,0,1505,
	1510,5,396,0,0,1506,1507,5,396,0,0,1507,1508,5,118,0,0,1508,1510,5,614,
	0,0,1509,1504,1,0,0,0,1509,1505,1,0,0,0,1509,1506,1,0,0,0,1510,75,1,0,0,
	0,1511,1512,5,187,0,0,1512,1513,7,14,0,0,1513,77,1,0,0,0,1514,1516,5,467,
	0,0,1515,1517,5,1124,0,0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,1517,1518,
	1,0,0,0,1518,1537,3,592,296,0,1519,1537,3,76,38,0,1520,1521,5,192,0,0,1521,
	1522,5,547,0,0,1522,1537,3,584,292,0,1523,1524,5,368,0,0,1524,1537,5,1148,
	0,0,1525,1537,7,15,0,0,1526,1528,5,875,0,0,1527,1529,5,1124,0,0,1528,1527,
	1,0,0,0,1528,1529,1,0,0,0,1529,1530,1,0,0,0,1530,1537,5,1148,0,0,1531,1533,
	5,1000,0,0,1532,1534,5,1124,0,0,1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,
	1535,1,0,0,0,1535,1537,5,1148,0,0,1536,1514,1,0,0,0,1536,1519,1,0,0,0,1536,
	1520,1,0,0,0,1536,1523,1,0,0,0,1536,1525,1,0,0,0,1536,1526,1,0,0,0,1536,
	1531,1,0,0,0,1537,79,1,0,0,0,1538,1540,7,16,0,0,1539,1538,1,0,0,0,1539,
	1540,1,0,0,0,1540,1541,1,0,0,0,1541,1542,3,584,292,0,1542,1543,3,604,302,
	0,1543,81,1,0,0,0,1544,1545,3,584,292,0,1545,1546,3,604,302,0,1546,83,1,
	0,0,0,1547,1548,5,368,0,0,1548,1571,5,1148,0,0,1549,1550,5,468,0,0,1550,
	1571,5,160,0,0,1551,1553,5,114,0,0,1552,1551,1,0,0,0,1552,1553,1,0,0,0,
	1553,1554,1,0,0,0,1554,1571,5,47,0,0,1555,1556,5,381,0,0,1556,1566,5,160,
	0,0,1557,1558,5,521,0,0,1558,1566,5,160,0,0,1559,1560,5,135,0,0,1560,1561,
	5,160,0,0,1561,1566,5,388,0,0,1562,1563,5,112,0,0,1563,1564,5,160,0,0,1564,
	1566,5,388,0,0,1565,1555,1,0,0,0,1565,1557,1,0,0,0,1565,1559,1,0,0,0,1565,
	1562,1,0,0,0,1566,1571,1,0,0,0,1567,1568,5,160,0,0,1568,1569,5,606,0,0,
	1569,1571,7,11,0,0,1570,1547,1,0,0,0,1570,1549,1,0,0,0,1570,1552,1,0,0,
	0,1570,1565,1,0,0,0,1570,1567,1,0,0,0,1571,85,1,0,0,0,1572,1573,5,446,0,
	0,1573,1587,5,1148,0,0,1574,1575,5,39,0,0,1575,1587,5,1148,0,0,1576,1577,
	5,665,0,0,1577,1587,5,1148,0,0,1578,1579,5,551,0,0,1579,1587,5,1148,0,0,
	1580,1581,5,617,0,0,1581,1587,5,1148,0,0,1582,1583,5,542,0,0,1583,1587,
	5,1148,0,0,1584,1585,5,557,0,0,1585,1587,3,590,295,0,1586,1572,1,0,0,0,
	1586,1574,1,0,0,0,1586,1576,1,0,0,0,1586,1578,1,0,0,0,1586,1580,1,0,0,0,
	1586,1582,1,0,0,0,1586,1584,1,0,0,0,1587,87,1,0,0,0,1588,1589,5,1133,0,
	0,1589,1594,3,90,45,0,1590,1591,5,1135,0,0,1591,1593,3,90,45,0,1592,1590,
	1,0,0,0,1593,1596,1,0,0,0,1594,1592,1,0,0,0,1594,1595,1,0,0,0,1595,1597,
	1,0,0,0,1596,1594,1,0,0,0,1597,1598,5,1134,0,0,1598,89,1,0,0,0,1599,1600,
	3,556,278,0,1600,1601,3,92,46,0,1601,1611,1,0,0,0,1602,1604,3,96,48,0,1603,
	1605,5,114,0,0,1604,1603,1,0,0,0,1604,1605,1,0,0,0,1605,1607,1,0,0,0,1606,
	1608,5,57,0,0,1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,1611,1,0,0,0,1609,
	1611,3,104,52,0,1610,1599,1,0,0,0,1610,1602,1,0,0,0,1610,1609,1,0,0,0,1611,
	91,1,0,0,0,1612,1616,3,604,302,0,1613,1615,3,94,47,0,1614,1613,1,0,0,0,
	1615,1618,1,0,0,0,1616,1614,1,0,0,0,1616,1617,1,0,0,0,1617,1620,1,0,0,0,
	1618,1616,1,0,0,0,1619,1621,5,114,0,0,1620,1619,1,0,0,0,1620,1621,1,0,0,
	0,1621,1623,1,0,0,0,1622,1624,5,57,0,0,1623,1622,1,0,0,0,1623,1624,1,0,
	0,0,1624,93,1,0,0,0,1625,1679,3,600,300,0,1626,1627,5,42,0,0,1627,1679,
	3,634,317,0,1628,1679,5,673,0,0,1629,1679,5,459,0,0,1630,1635,5,342,0,0,
	1631,1632,5,118,0,0,1632,1633,5,184,0,0,1633,1635,3,636,318,0,1634,1630,
	1,0,0,0,1634,1631,1,0,0,0,1635,1679,1,0,0,0,1636,1638,5,130,0,0,1637,1636,
	1,0,0,0,1637,1638,1,0,0,0,1638,1639,1,0,0,0,1639,1679,5,91,0,0,1640,1642,
	5,181,0,0,1641,1643,5,91,0,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1679,
	1,0,0,0,1644,1645,5,368,0,0,1645,1679,5,1148,0,0,1646,1647,5,366,0,0,1647,
	1679,7,17,0,0,1648,1649,5,636,0,0,1649,1679,7,18,0,0,1650,1679,3,98,49,
	0,1651,1652,5,27,0,0,1652,1679,3,570,285,0,1653,1654,5,70,0,0,1654,1656,
	5,8,0,0,1655,1653,1,0,0,0,1655,1656,1,0,0,0,1656,1657,1,0,0,0,1657,1658,
	5,12,0,0,1658,1659,5,1133,0,0,1659,1660,3,688,344,0,1660,1662,5,1134,0,
	0,1661,1663,7,19,0,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,1679,1,0,
	0,0,1664,1665,5,239,0,0,1665,1666,5,42,0,0,1666,1679,5,669,0,0,1667,1669,
	5,30,0,0,1668,1670,3,584,292,0,1669,1668,1,0,0,0,1669,1670,1,0,0,0,1670,
	1672,1,0,0,0,1671,1667,1,0,0,0,1671,1672,1,0,0,0,1672,1673,1,0,0,0,1673,
	1674,5,26,0,0,1674,1675,5,1133,0,0,1675,1676,3,688,344,0,1676,1677,5,1134,
	0,0,1677,1679,1,0,0,0,1678,1625,1,0,0,0,1678,1626,1,0,0,0,1678,1628,1,0,
	0,0,1678,1629,1,0,0,0,1678,1634,1,0,0,0,1678,1637,1,0,0,0,1678,1640,1,0,
	0,0,1678,1644,1,0,0,0,1678,1646,1,0,0,0,1678,1648,1,0,0,0,1678,1650,1,0,
	0,0,1678,1651,1,0,0,0,1678,1655,1,0,0,0,1678,1664,1,0,0,0,1678,1671,1,0,
	0,0,1679,95,1,0,0,0,1680,1682,5,30,0,0,1681,1683,3,584,292,0,1682,1681,
	1,0,0,0,1682,1683,1,0,0,0,1683,1685,1,0,0,0,1684,1680,1,0,0,0,1684,1685,
	1,0,0,0,1685,1686,1,0,0,0,1686,1687,5,130,0,0,1687,1689,5,91,0,0,1688,1690,
	3,584,292,0,1689,1688,1,0,0,0,1689,1690,1,0,0,0,1690,1692,1,0,0,0,1691,
	1693,3,76,38,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,1694,1,0,0,0,1694,
	1698,3,622,311,0,1695,1697,3,78,39,0,1696,1695,1,0,0,0,1697,1700,1,0,0,
	0,1698,1696,1,0,0,0,1698,1699,1,0,0,0,1699,1750,1,0,0,0,1700,1698,1,0,0,
	0,1701,1703,5,30,0,0,1702,1704,3,584,292,0,1703,1702,1,0,0,0,1703,1704,
	1,0,0,0,1704,1706,1,0,0,0,1705,1701,1,0,0,0,1705,1706,1,0,0,0,1706,1707,
	1,0,0,0,1707,1709,5,181,0,0,1708,1710,7,20,0,0,1709,1708,1,0,0,0,1709,1710,
	1,0,0,0,1710,1712,1,0,0,0,1711,1713,3,584,292,0,1712,1711,1,0,0,0,1712,
	1713,1,0,0,0,1713,1715,1,0,0,0,1714,1716,3,76,38,0,1715,1714,1,0,0,0,1715,
	1716,1,0,0,0,1716,1717,1,0,0,0,1717,1721,3,622,311,0,1718,1720,3,78,39,
	0,1719,1718,1,0,0,0,1720,1723,1,0,0,0,1721,1719,1,0,0,0,1721,1722,1,0,0,
	0,1722,1750,1,0,0,0,1723,1721,1,0,0,0,1724,1726,5,30,0,0,1725,1727,3,584,
	292,0,1726,1725,1,0,0,0,1726,1727,1,0,0,0,1727,1729,1,0,0,0,1728,1724,1,
	0,0,0,1728,1729,1,0,0,0,1729,1730,1,0,0,0,1730,1731,5,67,0,0,1731,1733,
	5,91,0,0,1732,1734,3,584,292,0,1733,1732,1,0,0,0,1733,1734,1,0,0,0,1734,
	1735,1,0,0,0,1735,1736,3,622,311,0,1736,1737,3,98,49,0,1737,1750,1,0,0,
	0,1738,1740,5,30,0,0,1739,1741,3,584,292,0,1740,1739,1,0,0,0,1740,1741,
	1,0,0,0,1741,1743,1,0,0,0,1742,1738,1,0,0,0,1742,1743,1,0,0,0,1743,1744,
	1,0,0,0,1744,1745,5,26,0,0,1745,1746,5,1133,0,0,1746,1747,3,688,344,0,1747,
	1748,5,1134,0,0,1748,1750,1,0,0,0,1749,1684,1,0,0,0,1749,1705,1,0,0,0,1749,
	1728,1,0,0,0,1749,1742,1,0,0,0,1750,97,1,0,0,0,1751,1752,5,136,0,0,1752,
	1754,3,552,276,0,1753,1755,3,622,311,0,1754,1753,1,0,0,0,1754,1755,1,0,
	0,0,1755,1758,1,0,0,0,1756,1757,5,109,0,0,1757,1759,7,21,0,0,1758,1756,
	1,0,0,0,1758,1759,1,0,0,0,1759,1761,1,0,0,0,1760,1762,3,100,50,0,1761,1760,
	1,0,0,0,1761,1762,1,0,0,0,1762,99,1,0,0,0,1763,1764,5,118,0,0,1764,1765,
	5,44,0,0,1765,1769,3,102,51,0,1766,1767,5,118,0,0,1767,1768,5,184,0,0,1768,
	1770,3,102,51,0,1769,1766,1,0,0,0,1769,1770,1,0,0,0,1770,1780,1,0,0,0,1771,
	1772,5,118,0,0,1772,1773,5,184,0,0,1773,1777,3,102,51,0,1774,1775,5,118,
	0,0,1775,1776,5,44,0,0,1776,1778,3,102,51,0,1777,1774,1,0,0,0,1777,1778,
	1,0,0,0,1778,1780,1,0,0,0,1779,1763,1,0,0,0,1779,1771,1,0,0,0,1780,101,
	1,0,0,0,1781,1790,5,144,0,0,1782,1790,5,21,0,0,1783,1784,5,153,0,0,1784,
	1790,5,116,0,0,1785,1786,5,521,0,0,1786,1790,5,333,0,0,1787,1788,5,153,
	0,0,1788,1790,5,42,0,0,1789,1781,1,0,0,0,1789,1782,1,0,0,0,1789,1783,1,
	0,0,0,1789,1785,1,0,0,0,1789,1787,1,0,0,0,1790,103,1,0,0,0,1791,1793,7,
	20,0,0,1792,1794,3,584,292,0,1793,1792,1,0,0,0,1793,1794,1,0,0,0,1794,1796,
	1,0,0,0,1795,1797,3,76,38,0,1796,1795,1,0,0,0,1796,1797,1,0,0,0,1797,1798,
	1,0,0,0,1798,1802,3,622,311,0,1799,1801,3,78,39,0,1800,1799,1,0,0,0,1801,
	1804,1,0,0,0,1802,1800,1,0,0,0,1802,1803,1,0,0,0,1803,1820,1,0,0,0,1804,
	1802,1,0,0,0,1805,1807,7,22,0,0,1806,1808,7,20,0,0,1807,1806,1,0,0,0,1807,
	1808,1,0,0,0,1808,1810,1,0,0,0,1809,1811,3,584,292,0,1810,1809,1,0,0,0,
	1810,1811,1,0,0,0,1811,1812,1,0,0,0,1812,1816,3,622,311,0,1813,1815,3,78,
	39,0,1814,1813,1,0,0,0,1815,1818,1,0,0,0,1816,1814,1,0,0,0,1816,1817,1,
	0,0,0,1817,1820,1,0,0,0,1818,1816,1,0,0,0,1819,1791,1,0,0,0,1819,1805,1,
	0,0,0,1820,105,1,0,0,0,1821,1823,5,409,0,0,1822,1824,5,1124,0,0,1823,1822,
	1,0,0,0,1823,1824,1,0,0,0,1824,1826,1,0,0,0,1825,1827,3,572,286,0,1826,
	1825,1,0,0,0,1826,1827,1,0,0,0,1827,2007,1,0,0,0,1828,1830,5,875,0,0,1829,
	1831,5,1124,0,0,1830,1829,1,0,0,0,1830,1831,1,0,0,0,1831,1832,1,0,0,0,1832,
	2007,5,1148,0,0,1833,1835,5,341,0,0,1834,1836,5,1124,0,0,1835,1834,1,0,
	0,0,1835,1836,1,0,0,0,1836,1837,1,0,0,0,1837,2007,3,590,295,0,1838,1840,
	5,342,0,0,1839,1841,5,1124,0,0,1840,1839,1,0,0,0,1840,1841,1,0,0,0,1841,
	1842,1,0,0,0,1842,2007,3,590,295,0,1843,1845,5,343,0,0,1844,1846,5,1124,
	0,0,1845,1844,1,0,0,0,1845,1846,1,0,0,0,1846,1847,1,0,0,0,1847,2007,3,590,
	295,0,1848,1850,5,42,0,0,1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,1851,
	1,0,0,0,1851,1853,3,60,30,0,1852,1854,5,1124,0,0,1853,1852,1,0,0,0,1853,
	1854,1,0,0,0,1854,1857,1,0,0,0,1855,1858,3,568,284,0,1856,1858,5,42,0,0,
	1857,1855,1,0,0,0,1857,1856,1,0,0,0,1858,2007,1,0,0,0,1859,1861,7,23,0,
	0,1860,1862,5,1124,0,0,1861,1860,1,0,0,0,1861,1862,1,0,0,0,1862,1863,1,
	0,0,0,1863,2007,7,24,0,0,1864,1866,5,42,0,0,1865,1864,1,0,0,0,1865,1866,
	1,0,0,0,1866,1867,1,0,0,0,1867,1869,5,27,0,0,1868,1870,5,1124,0,0,1869,
	1868,1,0,0,0,1869,1870,1,0,0,0,1870,1871,1,0,0,0,1871,2007,3,570,285,0,
	1872,1874,5,368,0,0,1873,1875,5,1124,0,0,1874,1873,1,0,0,0,1874,1875,1,
	0,0,0,1875,1876,1,0,0,0,1876,2007,5,1148,0,0,1877,1879,5,373,0,0,1878,1880,
	5,1124,0,0,1879,1878,1,0,0,0,1879,1880,1,0,0,0,1880,1881,1,0,0,0,1881,2007,
	7,25,0,0,1882,1884,5,376,0,0,1883,1885,5,1124,0,0,1884,1883,1,0,0,0,1884,
	1885,1,0,0,0,1885,1886,1,0,0,0,1886,2007,5,1148,0,0,1887,1888,7,26,0,0,
	1888,1890,5,395,0,0,1889,1891,5,1124,0,0,1890,1889,1,0,0,0,1890,1891,1,
	0,0,0,1891,1892,1,0,0,0,1892,2007,5,1148,0,0,1893,1895,5,393,0,0,1894,1896,
	5,1124,0,0,1895,1894,1,0,0,0,1895,1896,1,0,0,0,1896,1897,1,0,0,0,1897,2007,
	7,24,0,0,1898,1900,5,405,0,0,1899,1901,5,1124,0,0,1900,1899,1,0,0,0,1900,
	1901,1,0,0,0,1901,1902,1,0,0,0,1902,2007,5,1148,0,0,1903,1905,7,27,0,0,
	1904,1906,5,1124,0,0,1905,1904,1,0,0,0,1905,1906,1,0,0,0,1906,1907,1,0,
	0,0,1907,2007,7,24,0,0,1908,1910,7,28,0,0,1909,1911,5,1124,0,0,1910,1909,
	1,0,0,0,1910,1911,1,0,0,0,1911,1912,1,0,0,0,1912,2007,3,590,295,0,1913,
	1915,5,406,0,0,1914,1916,5,1124,0,0,1915,1914,1,0,0,0,1915,1916,1,0,0,0,
	1916,1917,1,0,0,0,1917,2007,3,590,295,0,1918,1919,5,81,0,0,1919,1921,5,
	395,0,0,1920,1922,5,1124,0,0,1921,1920,1,0,0,0,1921,1922,1,0,0,0,1922,1923,
	1,0,0,0,1923,2007,5,1148,0,0,1924,1926,5,455,0,0,1925,1927,5,1124,0,0,1926,
	1925,1,0,0,0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,1928,2007,7,29,0,0,1929,
	1931,5,467,0,0,1930,1932,5,1124,0,0,1931,1930,1,0,0,0,1931,1932,1,0,0,0,
	1932,1933,1,0,0,0,1933,2007,3,592,296,0,1934,1936,5,500,0,0,1935,1937,5,
	1124,0,0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,1938,1,0,0,0,1938,2007,
	3,590,295,0,1939,1941,5,510,0,0,1940,1942,5,1124,0,0,1941,1940,1,0,0,0,
	1941,1942,1,0,0,0,1942,1943,1,0,0,0,1943,2007,3,590,295,0,1944,1946,5,543,
	0,0,1945,1947,5,1124,0,0,1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,1948,
	1,0,0,0,1948,2007,7,13,0,0,1949,1951,5,551,0,0,1950,1952,5,1124,0,0,1951,
	1950,1,0,0,0,1951,1952,1,0,0,0,1952,1953,1,0,0,0,1953,2007,5,1148,0,0,1954,
	1956,5,602,0,0,1955,1957,5,1124,0,0,1956,1955,1,0,0,0,1956,1957,1,0,0,0,
	1957,1958,1,0,0,0,1958,2007,7,30,0,0,1959,1960,5,629,0,0,1960,2007,5,653,
	0,0,1961,1963,5,1000,0,0,1962,1964,5,1124,0,0,1963,1962,1,0,0,0,1963,1964,
	1,0,0,0,1964,1965,1,0,0,0,1965,2007,5,1148,0,0,1966,1968,5,631,0,0,1967,
	1969,5,1124,0,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,1970,1,0,0,0,1970,
	2007,7,13,0,0,1971,1973,5,632,0,0,1972,1974,5,1124,0,0,1973,1972,1,0,0,
	0,1973,1974,1,0,0,0,1974,1975,1,0,0,0,1975,2007,7,13,0,0,1976,1978,5,633,
	0,0,1977,1979,5,1124,0,0,1978,1977,1,0,0,0,1978,1979,1,0,0,0,1979,1982,
	1,0,0,0,1980,1983,5,42,0,0,1981,1983,3,590,295,0,1982,1980,1,0,0,0,1982,
	1981,1,0,0,0,1983,2007,1,0,0,0,1984,1985,5,647,0,0,1985,1987,3,584,292,
	0,1986,1988,3,110,55,0,1987,1986,1,0,0,0,1987,1988,1,0,0,0,1988,2007,1,
	0,0,0,1989,1990,5,648,0,0,1990,1991,5,1124,0,0,1991,2007,3,108,54,0,1992,
	2007,3,110,55,0,1993,1995,5,654,0,0,1994,1996,5,1124,0,0,1995,1994,1,0,
	0,0,1995,1996,1,0,0,0,1996,1997,1,0,0,0,1997,2007,7,24,0,0,1998,2000,5,
	180,0,0,1999,2001,5,1124,0,0,2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,2002,
	1,0,0,0,2002,2003,5,1133,0,0,2003,2004,3,620,310,0,2004,2005,5,1134,0,0,
	2005,2007,1,0,0,0,2006,1821,1,0,0,0,2006,1828,1,0,0,0,2006,1833,1,0,0,0,
	2006,1838,1,0,0,0,2006,1843,1,0,0,0,2006,1849,1,0,0,0,2006,1859,1,0,0,0,
	2006,1865,1,0,0,0,2006,1872,1,0,0,0,2006,1877,1,0,0,0,2006,1882,1,0,0,0,
	2006,1887,1,0,0,0,2006,1893,1,0,0,0,2006,1898,1,0,0,0,2006,1903,1,0,0,0,
	2006,1908,1,0,0,0,2006,1913,1,0,0,0,2006,1918,1,0,0,0,2006,1924,1,0,0,0,
	2006,1929,1,0,0,0,2006,1934,1,0,0,0,2006,1939,1,0,0,0,2006,1944,1,0,0,0,
	2006,1949,1,0,0,0,2006,1954,1,0,0,0,2006,1959,1,0,0,0,2006,1961,1,0,0,0,
	2006,1966,1,0,0,0,2006,1971,1,0,0,0,2006,1976,1,0,0,0,2006,1984,1,0,0,0,
	2006,1989,1,0,0,0,2006,1992,1,0,0,0,2006,1993,1,0,0,0,2006,1998,1,0,0,0,
	2007,107,1,0,0,0,2008,2009,7,31,0,0,2009,109,1,0,0,0,2010,2011,5,636,0,
	0,2011,2012,7,18,0,0,2012,111,1,0,0,0,2013,2014,5,129,0,0,2014,2015,5,19,
	0,0,2015,2018,3,114,57,0,2016,2017,5,550,0,0,2017,2019,3,590,295,0,2018,
	2016,1,0,0,0,2018,2019,1,0,0,0,2019,2027,1,0,0,0,2020,2021,5,641,0,0,2021,
	2022,5,19,0,0,2022,2025,3,116,58,0,2023,2024,5,642,0,0,2024,2026,3,590,
	295,0,2025,2023,1,0,0,0,2025,2026,1,0,0,0,2026,2028,1,0,0,0,2027,2020,1,
	0,0,0,2027,2028,1,0,0,0,2028,2040,1,0,0,0,2029,2030,5,1133,0,0,2030,2035,
	3,118,59,0,2031,2032,5,1135,0,0,2032,2034,3,118,59,0,2033,2031,1,0,0,0,
	2034,2037,1,0,0,0,2035,2033,1,0,0,0,2035,2036,1,0,0,0,2036,2038,1,0,0,0,
	2037,2035,1,0,0,0,2038,2039,5,1134,0,0,2039,2041,1,0,0,0,2040,2029,1,0,
	0,0,2040,2041,1,0,0,0,2041,113,1,0,0,0,2042,2044,5,100,0,0,2043,2042,1,
	0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2046,5,443,0,0,2046,2047,
	5,1133,0,0,2047,2048,3,688,344,0,2048,2049,5,1134,0,0,2049,2089,1,0,0,0,
	2050,2052,5,100,0,0,2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,2053,1,0,0,
	0,2053,2057,5,91,0,0,2054,2055,5,336,0,0,2055,2056,5,1124,0,0,2056,2058,
	7,32,0,0,2057,2054,1,0,0,0,2057,2058,1,0,0,0,2058,2059,1,0,0,0,2059,2061,
	5,1133,0,0,2060,2062,3,616,308,0,2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,
	2063,1,0,0,0,2063,2089,5,1134,0,0,2064,2074,5,133,0,0,2065,2066,5,1133,
	0,0,2066,2067,3,688,344,0,2067,2068,5,1134,0,0,2068,2075,1,0,0,0,2069,2070,
	5,365,0,0,2070,2071,5,1133,0,0,2071,2072,3,616,308,0,2072,2073,5,1134,0,
	0,2073,2075,1,0,0,0,2074,2065,1,0,0,0,2074,2069,1,0,0,0,2075,2089,1,0,0,
	0,2076,2086,5,473,0,0,2077,2078,5,1133,0,0,2078,2079,3,688,344,0,2079,2080,
	5,1134,0,0,2080,2087,1,0,0,0,2081,2082,5,365,0,0,2082,2083,5,1133,0,0,2083,
	2084,3,616,308,0,2084,2085,5,1134,0,0,2085,2087,1,0,0,0,2086,2077,1,0,0,
	0,2086,2081,1,0,0,0,2087,2089,1,0,0,0,2088,2043,1,0,0,0,2088,2051,1,0,0,
	0,2088,2064,1,0,0,0,2088,2076,1,0,0,0,2089,115,1,0,0,0,2090,2092,5,100,
	0,0,2091,2090,1,0,0,0,2091,2092,1,0,0,0,2092,2093,1,0,0,0,2093,2094,5,443,
	0,0,2094,2095,5,1133,0,0,2095,2096,3,688,344,0,2096,2097,5,1134,0,0,2097,
	2112,1,0,0,0,2098,2100,5,100,0,0,2099,2098,1,0,0,0,2099,2100,1,0,0,0,2100,
	2101,1,0,0,0,2101,2105,5,91,0,0,2102,2103,5,336,0,0,2103,2104,5,1124,0,
	0,2104,2106,7,32,0,0,2105,2102,1,0,0,0,2105,2106,1,0,0,0,2106,2107,1,0,
	0,0,2107,2108,5,1133,0,0,2108,2109,3,616,308,0,2109,2110,5,1134,0,0,2110,
	2112,1,0,0,0,2111,2091,1,0,0,0,2111,2099,1,0,0,0,2112,117,1,0,0,0,2113,
	2114,5,129,0,0,2114,2115,3,584,292,0,2115,2116,5,188,0,0,2116,2117,5,471,
	0,0,2117,2118,5,651,0,0,2118,2119,5,1133,0,0,2119,2124,3,120,60,0,2120,
	2121,5,1135,0,0,2121,2123,3,120,60,0,2122,2120,1,0,0,0,2123,2126,1,0,0,
	0,2124,2122,1,0,0,0,2124,2125,1,0,0,0,2125,2127,1,0,0,0,2126,2124,1,0,0,
	0,2127,2131,5,1134,0,0,2128,2130,3,126,63,0,2129,2128,1,0,0,0,2130,2133,
	1,0,0,0,2131,2129,1,0,0,0,2131,2132,1,0,0,0,2132,2145,1,0,0,0,2133,2131,
	1,0,0,0,2134,2135,5,1133,0,0,2135,2140,3,124,62,0,2136,2137,5,1135,0,0,
	2137,2139,3,124,62,0,2138,2136,1,0,0,0,2139,2142,1,0,0,0,2140,2138,1,0,
	0,0,2140,2141,1,0,0,0,2141,2143,1,0,0,0,2142,2140,1,0,0,0,2143,2144,5,1134,
	0,0,2144,2146,1,0,0,0,2145,2134,1,0,0,0,2145,2146,1,0,0,0,2146,2260,1,0,
	0,0,2147,2148,5,129,0,0,2148,2149,3,584,292,0,2149,2150,5,188,0,0,2150,
	2151,5,471,0,0,2151,2152,5,651,0,0,2152,2156,3,120,60,0,2153,2155,3,126,
	63,0,2154,2153,1,0,0,0,2155,2158,1,0,0,0,2156,2154,1,0,0,0,2156,2157,1,
	0,0,0,2157,2170,1,0,0,0,2158,2156,1,0,0,0,2159,2160,5,1133,0,0,2160,2165,
	3,124,62,0,2161,2162,5,1135,0,0,2162,2164,3,124,62,0,2163,2161,1,0,0,0,
	2164,2167,1,0,0,0,2165,2163,1,0,0,0,2165,2166,1,0,0,0,2166,2168,1,0,0,0,
	2167,2165,1,0,0,0,2168,2169,5,1134,0,0,2169,2171,1,0,0,0,2170,2159,1,0,
	0,0,2170,2171,1,0,0,0,2171,2260,1,0,0,0,2172,2173,5,129,0,0,2173,2174,3,
	584,292,0,2174,2175,5,188,0,0,2175,2176,5,80,0,0,2176,2177,5,1133,0,0,2177,
	2182,3,120,60,0,2178,2179,5,1135,0,0,2179,2181,3,120,60,0,2180,2178,1,0,
	0,0,2181,2184,1,0,0,0,2182,2180,1,0,0,0,2182,2183,1,0,0,0,2183,2185,1,0,
	0,0,2184,2182,1,0,0,0,2185,2189,5,1134,0,0,2186,2188,3,126,63,0,2187,2186,
	1,0,0,0,2188,2191,1,0,0,0,2189,2187,1,0,0,0,2189,2190,1,0,0,0,2190,2203,
	1,0,0,0,2191,2189,1,0,0,0,2192,2193,5,1133,0,0,2193,2198,3,124,62,0,2194,
	2195,5,1135,0,0,2195,2197,3,124,62,0,2196,2194,1,0,0,0,2197,2200,1,0,0,
	0,2198,2196,1,0,0,0,2198,2199,1,0,0,0,2199,2201,1,0,0,0,2200,2198,1,0,0,
	0,2201,2202,5,1134,0,0,2202,2204,1,0,0,0,2203,2192,1,0,0,0,2203,2204,1,
	0,0,0,2204,2260,1,0,0,0,2205,2206,5,129,0,0,2206,2207,3,584,292,0,2207,
	2208,5,188,0,0,2208,2209,5,80,0,0,2209,2210,5,1133,0,0,2210,2215,3,122,
	61,0,2211,2212,5,1135,0,0,2212,2214,3,122,61,0,2213,2211,1,0,0,0,2214,2217,
	1,0,0,0,2215,2213,1,0,0,0,2215,2216,1,0,0,0,2216,2218,1,0,0,0,2217,2215,
	1,0,0,0,2218,2222,5,1134,0,0,2219,2221,3,126,63,0,2220,2219,1,0,0,0,2221,
	2224,1,0,0,0,2222,2220,1,0,0,0,2222,2223,1,0,0,0,2223,2236,1,0,0,0,2224,
	2222,1,0,0,0,2225,2226,5,1133,0,0,2226,2231,3,124,62,0,2227,2228,5,1135,
	0,0,2228,2230,3,124,62,0,2229,2227,1,0,0,0,2230,2233,1,0,0,0,2231,2229,
	1,0,0,0,2231,2232,1,0,0,0,2232,2234,1,0,0,0,2233,2231,1,0,0,0,2234,2235,
	5,1134,0,0,2235,2237,1,0,0,0,2236,2225,1,0,0,0,2236,2237,1,0,0,0,2237,2260,
	1,0,0,0,2238,2239,5,129,0,0,2239,2243,3,584,292,0,2240,2242,3,126,63,0,
	2241,2240,1,0,0,0,2242,2245,1,0,0,0,2243,2241,1,0,0,0,2243,2244,1,0,0,0,
	2244,2257,1,0,0,0,2245,2243,1,0,0,0,2246,2247,5,1133,0,0,2247,2252,3,124,
	62,0,2248,2249,5,1135,0,0,2249,2251,3,124,62,0,2250,2248,1,0,0,0,2251,2254,
	1,0,0,0,2252,2250,1,0,0,0,2252,2253,1,0,0,0,2253,2255,1,0,0,0,2254,2252,
	1,0,0,0,2255,2256,5,1134,0,0,2256,2258,1,0,0,0,2257,2246,1,0,0,0,2257,2258,
	1,0,0,0,2258,2260,1,0,0,0,2259,2113,1,0,0,0,2259,2147,1,0,0,0,2259,2172,
	1,0,0,0,2259,2205,1,0,0,0,2259,2238,1,0,0,0,2260,119,1,0,0,0,2261,2265,
	3,602,301,0,2262,2265,3,688,344,0,2263,2265,5,110,0,0,2264,2261,1,0,0,0,
	2264,2262,1,0,0,0,2264,2263,1,0,0,0,2265,121,1,0,0,0,2266,2267,5,1133,0,
	0,2267,2270,3,120,60,0,2268,2269,5,1135,0,0,2269,2271,3,120,60,0,2270,2268,
	1,0,0,0,2271,2272,1,0,0,0,2272,2270,1,0,0,0,2272,2273,1,0,0,0,2273,2274,
	1,0,0,0,2274,2275,5,1134,0,0,2275,123,1,0,0,0,2276,2277,5,641,0,0,2277,
	2281,3,584,292,0,2278,2280,3,126,63,0,2279,2278,1,0,0,0,2280,2283,1,0,0,
	0,2281,2279,1,0,0,0,2281,2282,1,0,0,0,2282,125,1,0,0,0,2283,2281,1,0,0,
	0,2284,2286,5,42,0,0,2285,2284,1,0,0,0,2285,2286,1,0,0,0,2286,2288,1,0,
	0,0,2287,2289,5,636,0,0,2288,2287,1,0,0,0,2288,2289,1,0,0,0,2289,2290,1,
	0,0,0,2290,2292,5,409,0,0,2291,2293,5,1124,0,0,2292,2291,1,0,0,0,2292,2293,
	1,0,0,0,2293,2294,1,0,0,0,2294,2333,3,572,286,0,2295,2297,5,368,0,0,2296,
	2298,5,1124,0,0,2297,2296,1,0,0,0,2297,2298,1,0,0,0,2298,2299,1,0,0,0,2299,
	2333,5,1148,0,0,2300,2301,5,388,0,0,2301,2303,5,395,0,0,2302,2304,5,1124,
	0,0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2305,1,0,0,0,2305,2333,5,1148,
	0,0,2306,2307,5,81,0,0,2307,2309,5,395,0,0,2308,2310,5,1124,0,0,2309,2308,
	1,0,0,0,2309,2310,1,0,0,0,2310,2311,1,0,0,0,2311,2333,5,1148,0,0,2312,2314,
	5,500,0,0,2313,2315,5,1124,0,0,2314,2313,1,0,0,0,2314,2315,1,0,0,0,2315,
	2316,1,0,0,0,2316,2333,3,590,295,0,2317,2319,5,510,0,0,2318,2320,5,1124,
	0,0,2319,2318,1,0,0,0,2319,2320,1,0,0,0,2320,2321,1,0,0,0,2321,2333,3,590,
	295,0,2322,2324,5,647,0,0,2323,2325,5,1124,0,0,2324,2323,1,0,0,0,2324,2325,
	1,0,0,0,2325,2326,1,0,0,0,2326,2333,3,584,292,0,2327,2329,5,528,0,0,2328,
	2330,5,1124,0,0,2329,2328,1,0,0,0,2329,2330,1,0,0,0,2330,2331,1,0,0,0,2331,
	2333,3,584,292,0,2332,2285,1,0,0,0,2332,2295,1,0,0,0,2332,2300,1,0,0,0,
	2332,2306,1,0,0,0,2332,2312,1,0,0,0,2332,2317,1,0,0,0,2332,2322,1,0,0,0,
	2332,2327,1,0,0,0,2333,127,1,0,0,0,2334,2335,5,7,0,0,2335,2337,7,0,0,0,
	2336,2338,3,584,292,0,2337,2336,1,0,0,0,2337,2338,1,0,0,0,2338,2340,1,0,
	0,0,2339,2341,3,58,29,0,2340,2339,1,0,0,0,2341,2342,1,0,0,0,2342,2340,1,
	0,0,0,2342,2343,1,0,0,0,2343,2353,1,0,0,0,2344,2345,5,7,0,0,2345,2346,7,
	0,0,0,2346,2347,3,584,292,0,2347,2348,5,664,0,0,2348,2349,5,388,0,0,2349,
	2350,5,395,0,0,2350,2351,5,516,0,0,2351,2353,1,0,0,0,2352,2334,1,0,0,0,
	2352,2344,1,0,0,0,2353,129,1,0,0,0,2354,2356,5,7,0,0,2355,2357,3,64,32,
	0,2356,2355,1,0,0,0,2356,2357,1,0,0,0,2357,2358,1,0,0,0,2358,2359,5,415,
	0,0,2359,2363,3,550,275,0,2360,2361,5,118,0,0,2361,2362,5,605,0,0,2362,
	2364,3,66,33,0,2363,2360,1,0,0,0,2363,2364,1,0,0,0,2364,2371,1,0,0,0,2365,
	2366,5,118,0,0,2366,2368,5,371,0,0,2367,2369,5,114,0,0,2368,2367,1,0,0,
	0,2368,2369,1,0,0,0,2369,2370,1,0,0,0,2370,2372,5,561,0,0,2371,2365,1,0,
	0,0,2371,2372,1,0,0,0,2372,2376,1,0,0,0,2373,2374,5,139,0,0,2374,2375,5,
	175,0,0,2375,2377,3,550,275,0,2376,2373,1,0,0,0,2376,2377,1,0,0,0,2377,
	2379,1,0,0,0,2378,2380,3,74,37,0,2379,2378,1,0,0,0,2379,2380,1,0,0,0,2380,
	2383,1,0,0,0,2381,2382,5,368,0,0,2382,2384,5,1148,0,0,2383,2381,1,0,0,0,
	2383,2384,1,0,0,0,2384,2387,1,0,0,0,2385,2386,5,399,0,0,2386,2388,3,388,
	194,0,2387,2385,1,0,0,0,2387,2388,1,0,0,0,2388,131,1,0,0,0,2389,2390,5,
	7,0,0,2390,2391,5,437,0,0,2391,2395,3,550,275,0,2392,2394,3,84,42,0,2393,
	2392,1,0,0,0,2394,2397,1,0,0,0,2395,2393,1,0,0,0,2395,2396,1,0,0,0,2396,
	133,1,0,0,0,2397,2395,1,0,0,0,2398,2399,5,7,0,0,2399,2400,5,457,0,0,2400,
	2401,5,599,0,0,2401,2402,5,791,0,0,2402,2403,5,477,0,0,2403,2404,5,91,0,
	0,2404,135,1,0,0,0,2405,2406,5,7,0,0,2406,2407,5,475,0,0,2407,2408,5,73,
	0,0,2408,2409,3,584,292,0,2409,2410,5,5,0,0,2410,2411,5,659,0,0,2411,2417,
	5,1148,0,0,2412,2414,5,453,0,0,2413,2415,5,1124,0,0,2414,2413,1,0,0,0,2414,
	2415,1,0,0,0,2415,2416,1,0,0,0,2416,2418,3,592,296,0,2417,2412,1,0,0,0,
	2417,2418,1,0,0,0,2418,2420,1,0,0,0,2419,2421,5,674,0,0,2420,2419,1,0,0,
	0,2420,2421,1,0,0,0,2421,2422,1,0,0,0,2422,2424,5,409,0,0,2423,2425,5,1124,
	0,0,2424,2423,1,0,0,0,2424,2425,1,0,0,0,2425,2426,1,0,0,0,2426,2427,3,572,
	286,0,2427,137,1,0,0,0,2428,2429,5,7,0,0,2429,2430,5,131,0,0,2430,2434,
	3,550,275,0,2431,2433,3,84,42,0,2432,2431,1,0,0,0,2433,2436,1,0,0,0,2434,
	2432,1,0,0,0,2434,2435,1,0,0,0,2435,139,1,0,0,0,2436,2434,1,0,0,0,2437,
	2438,5,7,0,0,2438,2439,5,608,0,0,2439,2440,3,584,292,0,2440,2441,5,541,
	0,0,2441,2442,5,1133,0,0,2442,2447,3,86,43,0,2443,2444,5,1135,0,0,2444,
	2446,3,86,43,0,2445,2443,1,0,0,0,2446,2449,1,0,0,0,2447,2445,1,0,0,0,2447,
	2448,1,0,0,0,2448,2450,1,0,0,0,2449,2447,1,0,0,0,2450,2451,5,1134,0,0,2451,
	141,1,0,0,0,2452,2454,5,7,0,0,2453,2455,7,1,0,0,2454,2453,1,0,0,0,2454,
	2455,1,0,0,0,2455,2457,1,0,0,0,2456,2458,5,78,0,0,2457,2456,1,0,0,0,2457,
	2458,1,0,0,0,2458,2459,1,0,0,0,2459,2460,5,172,0,0,2460,2462,3,552,276,
	0,2461,2463,3,646,323,0,2462,2461,1,0,0,0,2462,2463,1,0,0,0,2463,2472,1,
	0,0,0,2464,2469,3,148,74,0,2465,2466,5,1135,0,0,2466,2468,3,148,74,0,2467,
	2465,1,0,0,0,2468,2471,1,0,0,0,2469,2467,1,0,0,0,2469,2470,1,0,0,0,2470,
	2473,1,0,0,0,2471,2469,1,0,0,0,2472,2464,1,0,0,0,2472,2473,1,0,0,0,2473,
	2475,1,0,0,0,2474,2476,3,112,56,0,2475,2474,1,0,0,0,2475,2476,1,0,0,0,2476,
	143,1,0,0,0,2477,2478,5,7,0,0,2478,2479,5,647,0,0,2479,2480,3,584,292,0,
	2480,2481,7,33,0,0,2481,2482,5,389,0,0,2482,2486,5,1148,0,0,2483,2484,5,
	453,0,0,2484,2485,5,1124,0,0,2485,2487,3,592,296,0,2486,2483,1,0,0,0,2486,
	2487,1,0,0,0,2487,2489,1,0,0,0,2488,2490,5,674,0,0,2489,2488,1,0,0,0,2489,
	2490,1,0,0,0,2490,2491,1,0,0,0,2491,2493,5,409,0,0,2492,2494,5,1124,0,0,
	2493,2492,1,0,0,0,2493,2494,1,0,0,0,2494,2495,1,0,0,0,2495,2496,3,572,286,
	0,2496,145,1,0,0,0,2497,2501,5,7,0,0,2498,2499,5,336,0,0,2499,2500,5,1124,
	0,0,2500,2502,7,10,0,0,2501,2498,1,0,0,0,2501,2502,1,0,0,0,2502,2504,1,
	0,0,0,2503,2505,3,64,32,0,2504,2503,1,0,0,0,2504,2505,1,0,0,0,2505,2509,
	1,0,0,0,2506,2507,5,160,0,0,2507,2508,5,606,0,0,2508,2510,7,11,0,0,2509,
	2506,1,0,0,0,2509,2510,1,0,0,0,2510,2511,1,0,0,0,2511,2512,5,671,0,0,2512,
	2517,3,550,275,0,2513,2514,5,1133,0,0,2514,2515,3,616,308,0,2515,2516,5,
	1134,0,0,2516,2518,1,0,0,0,2517,2513,1,0,0,0,2517,2518,1,0,0,0,2518,2519,
	1,0,0,0,2519,2520,5,12,0,0,2520,2527,3,200,100,0,2521,2523,5,192,0,0,2522,
	2524,7,12,0,0,2523,2522,1,0,0,0,2523,2524,1,0,0,0,2524,2525,1,0,0,0,2525,
	2526,5,26,0,0,2526,2528,5,120,0,0,2527,2521,1,0,0,0,2527,2528,1,0,0,0,2528,
	147,1,0,0,0,2529,2536,3,106,53,0,2530,2532,5,1135,0,0,2531,2530,1,0,0,0,
	2531,2532,1,0,0,0,2532,2533,1,0,0,0,2533,2535,3,106,53,0,2534,2531,1,0,
	0,0,2535,2538,1,0,0,0,2536,2534,1,0,0,0,2536,2537,1,0,0,0,2537,2881,1,0,
	0,0,2538,2536,1,0,0,0,2539,2541,5,5,0,0,2540,2542,5,28,0,0,2541,2540,1,
	0,0,0,2541,2542,1,0,0,0,2542,2543,1,0,0,0,2543,2544,3,584,292,0,2544,2548,
	3,92,46,0,2545,2549,5,430,0,0,2546,2547,5,334,0,0,2547,2549,3,584,292,0,
	2548,2545,1,0,0,0,2548,2546,1,0,0,0,2548,2549,1,0,0,0,2549,2881,1,0,0,0,
	2550,2552,5,5,0,0,2551,2553,5,28,0,0,2552,2551,1,0,0,0,2552,2553,1,0,0,
	0,2553,2554,1,0,0,0,2554,2555,5,1133,0,0,2555,2556,3,584,292,0,2556,2563,
	3,92,46,0,2557,2558,5,1135,0,0,2558,2559,3,584,292,0,2559,2560,3,92,46,
	0,2560,2562,1,0,0,0,2561,2557,1,0,0,0,2562,2565,1,0,0,0,2563,2561,1,0,0,
	0,2563,2564,1,0,0,0,2564,2566,1,0,0,0,2565,2563,1,0,0,0,2566,2567,5,1134,
	0,0,2567,2881,1,0,0,0,2568,2569,5,5,0,0,2569,2571,7,20,0,0,2570,2572,3,
	584,292,0,2571,2570,1,0,0,0,2571,2572,1,0,0,0,2572,2574,1,0,0,0,2573,2575,
	3,76,38,0,2574,2573,1,0,0,0,2574,2575,1,0,0,0,2575,2576,1,0,0,0,2576,2580,
	3,622,311,0,2577,2579,3,78,39,0,2578,2577,1,0,0,0,2579,2582,1,0,0,0,2580,
	2578,1,0,0,0,2580,2581,1,0,0,0,2581,2881,1,0,0,0,2582,2580,1,0,0,0,2583,
	2588,5,5,0,0,2584,2586,5,30,0,0,2585,2587,3,584,292,0,2586,2585,1,0,0,0,
	2586,2587,1,0,0,0,2587,2589,1,0,0,0,2588,2584,1,0,0,0,2588,2589,1,0,0,0,
	2589,2590,1,0,0,0,2590,2591,5,130,0,0,2591,2593,5,91,0,0,2592,2594,3,584,
	292,0,2593,2592,1,0,0,0,2593,2594,1,0,0,0,2594,2596,1,0,0,0,2595,2597,3,
	76,38,0,2596,2595,1,0,0,0,2596,2597,1,0,0,0,2597,2598,1,0,0,0,2598,2602,
	3,622,311,0,2599,2601,3,78,39,0,2600,2599,1,0,0,0,2601,2604,1,0,0,0,2602,
	2600,1,0,0,0,2602,2603,1,0,0,0,2603,2881,1,0,0,0,2604,2602,1,0,0,0,2605,
	2610,5,5,0,0,2606,2608,5,30,0,0,2607,2609,3,584,292,0,2608,2607,1,0,0,0,
	2608,2609,1,0,0,0,2609,2611,1,0,0,0,2610,2606,1,0,0,0,2610,2611,1,0,0,0,
	2611,2612,1,0,0,0,2612,2614,5,181,0,0,2613,2615,7,20,0,0,2614,2613,1,0,
	0,0,2614,2615,1,0,0,0,2615,2617,1,0,0,0,2616,2618,3,584,292,0,2617,2616,
	1,0,0,0,2617,2618,1,0,0,0,2618,2620,1,0,0,0,2619,2621,3,76,38,0,2620,2619,
	1,0,0,0,2620,2621,1,0,0,0,2621,2622,1,0,0,0,2622,2626,3,622,311,0,2623,
	2625,3,78,39,0,2624,2623,1,0,0,0,2625,2628,1,0,0,0,2626,2624,1,0,0,0,2626,
	2627,1,0,0,0,2627,2881,1,0,0,0,2628,2626,1,0,0,0,2629,2630,5,5,0,0,2630,
	2632,7,22,0,0,2631,2633,7,20,0,0,2632,2631,1,0,0,0,2632,2633,1,0,0,0,2633,
	2635,1,0,0,0,2634,2636,3,584,292,0,2635,2634,1,0,0,0,2635,2636,1,0,0,0,
	2636,2637,1,0,0,0,2637,2641,3,622,311,0,2638,2640,3,78,39,0,2639,2638,1,
	0,0,0,2640,2643,1,0,0,0,2641,2639,1,0,0,0,2641,2642,1,0,0,0,2642,2881,1,
	0,0,0,2643,2641,1,0,0,0,2644,2649,5,5,0,0,2645,2647,5,30,0,0,2646,2648,
	3,584,292,0,2647,2646,1,0,0,0,2647,2648,1,0,0,0,2648,2650,1,0,0,0,2649,
	2645,1,0,0,0,2649,2650,1,0,0,0,2650,2651,1,0,0,0,2651,2652,5,67,0,0,2652,
	2654,5,91,0,0,2653,2655,3,584,292,0,2654,2653,1,0,0,0,2654,2655,1,0,0,0,
	2655,2656,1,0,0,0,2656,2657,3,622,311,0,2657,2658,3,98,49,0,2658,2881,1,
	0,0,0,2659,2664,5,5,0,0,2660,2662,5,30,0,0,2661,2663,3,584,292,0,2662,2661,
	1,0,0,0,2662,2663,1,0,0,0,2663,2665,1,0,0,0,2664,2660,1,0,0,0,2664,2665,
	1,0,0,0,2665,2666,1,0,0,0,2666,2673,5,26,0,0,2667,2674,3,584,292,0,2668,
	2674,3,594,297,0,2669,2670,5,1133,0,0,2670,2671,3,688,344,0,2671,2672,5,
	1134,0,0,2672,2674,1,0,0,0,2673,2667,1,0,0,0,2673,2668,1,0,0,0,2673,2669,
	1,0,0,0,2674,2676,1,0,0,0,2675,2677,5,114,0,0,2676,2675,1,0,0,0,2676,2677,
	1,0,0,0,2677,2679,1,0,0,0,2678,2680,5,57,0,0,2679,2678,1,0,0,0,2679,2680,
	1,0,0,0,2680,2881,1,0,0,0,2681,2686,5,7,0,0,2682,2684,5,30,0,0,2683,2685,
	3,584,292,0,2684,2683,1,0,0,0,2684,2685,1,0,0,0,2685,2687,1,0,0,0,2686,
	2682,1,0,0,0,2686,2687,1,0,0,0,2687,2688,1,0,0,0,2688,2695,5,26,0,0,2689,
	2696,3,584,292,0,2690,2696,3,594,297,0,2691,2692,5,1133,0,0,2692,2693,3,
	688,344,0,2693,2694,5,1134,0,0,2694,2696,1,0,0,0,2695,2689,1,0,0,0,2695,
	2690,1,0,0,0,2695,2691,1,0,0,0,2696,2698,1,0,0,0,2697,2699,5,114,0,0,2698,
	2697,1,0,0,0,2698,2699,1,0,0,0,2699,2701,1,0,0,0,2700,2702,5,57,0,0,2701,
	2700,1,0,0,0,2701,2702,1,0,0,0,2702,2881,1,0,0,0,2703,2708,5,5,0,0,2704,
	2706,5,30,0,0,2705,2707,3,584,292,0,2706,2705,1,0,0,0,2706,2707,1,0,0,0,
	2707,2709,1,0,0,0,2708,2704,1,0,0,0,2708,2709,1,0,0,0,2709,2710,1,0,0,0,
	2710,2711,5,26,0,0,2711,2712,5,1133,0,0,2712,2713,3,688,344,0,2713,2714,
	5,1134,0,0,2714,2881,1,0,0,0,2715,2717,5,336,0,0,2716,2718,5,1124,0,0,2717,
	2716,1,0,0,0,2717,2718,1,0,0,0,2718,2719,1,0,0,0,2719,2881,7,34,0,0,2720,
	2722,5,7,0,0,2721,2723,5,28,0,0,2722,2721,1,0,0,0,2722,2723,1,0,0,0,2723,
	2724,1,0,0,0,2724,2730,3,584,292,0,2725,2726,5,153,0,0,2726,2727,5,42,0,
	0,2727,2731,3,634,317,0,2728,2729,5,51,0,0,2729,2731,5,42,0,0,2730,2725,
	1,0,0,0,2730,2728,1,0,0,0,2731,2881,1,0,0,0,2732,2734,5,24,0,0,2733,2735,
	5,28,0,0,2734,2733,1,0,0,0,2734,2735,1,0,0,0,2735,2736,1,0,0,0,2736,2737,
	3,584,292,0,2737,2738,3,584,292,0,2738,2742,3,92,46,0,2739,2743,5,430,0,
	0,2740,2741,5,334,0,0,2741,2743,3,584,292,0,2742,2739,1,0,0,0,2742,2740,
	1,0,0,0,2742,2743,1,0,0,0,2743,2881,1,0,0,0,2744,2745,5,139,0,0,2745,2746,
	5,28,0,0,2746,2747,3,584,292,0,2747,2748,5,175,0,0,2748,2749,3,584,292,
	0,2749,2881,1,0,0,0,2750,2752,5,103,0,0,2751,2753,5,1124,0,0,2752,2751,
	1,0,0,0,2752,2753,1,0,0,0,2753,2754,1,0,0,0,2754,2881,7,4,0,0,2755,2757,
	5,512,0,0,2756,2758,5,28,0,0,2757,2756,1,0,0,0,2757,2758,1,0,0,0,2758,2759,
	1,0,0,0,2759,2760,3,584,292,0,2760,2764,3,92,46,0,2761,2765,5,430,0,0,2762,
	2763,5,334,0,0,2763,2765,3,584,292,0,2764,2761,1,0,0,0,2764,2762,1,0,0,
	0,2764,2765,1,0,0,0,2765,2881,1,0,0,0,2766,2768,5,51,0,0,2767,2769,5,28,
	0,0,2768,2767,1,0,0,0,2768,2769,1,0,0,0,2769,2770,1,0,0,0,2770,2772,3,584,
	292,0,2771,2773,5,144,0,0,2772,2771,1,0,0,0,2772,2773,1,0,0,0,2773,2881,
	1,0,0,0,2774,2775,5,51,0,0,2775,2776,7,35,0,0,2776,2881,3,584,292,0,2777,
	2778,5,51,0,0,2778,2779,5,130,0,0,2779,2881,5,91,0,0,2780,2781,5,51,0,0,
	2781,2782,7,20,0,0,2782,2881,3,584,292,0,2783,2784,5,139,0,0,2784,2785,
	7,20,0,0,2785,2786,3,584,292,0,2786,2787,5,175,0,0,2787,2788,3,584,292,
	0,2788,2881,1,0,0,0,2789,2791,5,7,0,0,2790,2792,5,28,0,0,2791,2790,1,0,
	0,0,2791,2792,1,0,0,0,2792,2793,1,0,0,0,2793,2807,3,584,292,0,2794,2795,
	5,153,0,0,2795,2801,5,42,0,0,2796,2802,3,594,297,0,2797,2798,5,1133,0,0,
	2798,2799,3,688,344,0,2799,2800,5,1134,0,0,2800,2802,1,0,0,0,2801,2796,
	1,0,0,0,2801,2797,1,0,0,0,2802,2808,1,0,0,0,2803,2804,5,153,0,0,2804,2808,
	7,15,0,0,2805,2806,5,51,0,0,2806,2808,5,42,0,0,2807,2794,1,0,0,0,2807,2803,
	1,0,0,0,2807,2805,1,0,0,0,2808,2881,1,0,0,0,2809,2810,5,7,0,0,2810,2811,
	5,81,0,0,2811,2812,3,584,292,0,2812,2813,7,15,0,0,2813,2881,1,0,0,0,2814,
	2815,5,51,0,0,2815,2816,5,67,0,0,2816,2817,5,91,0,0,2817,2881,3,584,292,
	0,2818,2819,5,396,0,0,2819,2881,5,92,0,0,2820,2821,5,403,0,0,2821,2881,
	5,92,0,0,2822,2824,5,139,0,0,2823,2825,7,36,0,0,2824,2823,1,0,0,0,2824,
	2825,1,0,0,0,2825,2828,1,0,0,0,2826,2829,3,584,292,0,2827,2829,3,550,275,
	0,2828,2826,1,0,0,0,2828,2827,1,0,0,0,2829,2881,1,0,0,0,2830,2831,5,124,
	0,0,2831,2832,5,19,0,0,2832,2881,3,616,308,0,2833,2834,5,32,0,0,2834,2838,
	5,175,0,0,2835,2839,5,841,0,0,2836,2837,5,25,0,0,2837,2839,5,153,0,0,2838,
	2835,1,0,0,0,2838,2836,1,0,0,0,2839,2840,1,0,0,0,2840,2843,3,568,284,0,
	2841,2842,5,27,0,0,2842,2844,3,570,285,0,2843,2841,1,0,0,0,2843,2844,1,
	0,0,0,2844,2881,1,0,0,0,2845,2847,5,42,0,0,2846,2845,1,0,0,0,2846,2847,
	1,0,0,0,2847,2848,1,0,0,0,2848,2849,5,25,0,0,2849,2850,5,153,0,0,2850,2851,
	5,1124,0,0,2851,2855,3,568,284,0,2852,2853,5,27,0,0,2853,2854,5,1124,0,
	0,2854,2856,3,570,285,0,2855,2852,1,0,0,0,2855,2856,1,0,0,0,2856,2881,1,
	0,0,0,2857,2858,5,397,0,0,2858,2881,5,647,0,0,2859,2860,5,450,0,0,2860,
	2881,5,647,0,0,2861,2881,5,66,0,0,2862,2863,7,37,0,0,2863,2881,5,668,0,
	0,2864,2866,5,5,0,0,2865,2867,5,28,0,0,2866,2865,1,0,0,0,2866,2867,1,0,
	0,0,2867,2868,1,0,0,0,2868,2869,5,1133,0,0,2869,2874,3,90,45,0,2870,2871,
	5,1135,0,0,2871,2873,3,90,45,0,2872,2870,1,0,0,0,2873,2876,1,0,0,0,2874,
	2872,1,0,0,0,2874,2875,1,0,0,0,2875,2877,1,0,0,0,2876,2874,1,0,0,0,2877,
	2878,5,1134,0,0,2878,2881,1,0,0,0,2879,2881,3,150,75,0,2880,2529,1,0,0,
	0,2880,2539,1,0,0,0,2880,2550,1,0,0,0,2880,2568,1,0,0,0,2880,2583,1,0,0,
	0,2880,2605,1,0,0,0,2880,2629,1,0,0,0,2880,2644,1,0,0,0,2880,2659,1,0,0,
	0,2880,2681,1,0,0,0,2880,2703,1,0,0,0,2880,2715,1,0,0,0,2880,2720,1,0,0,
	0,2880,2732,1,0,0,0,2880,2744,1,0,0,0,2880,2750,1,0,0,0,2880,2755,1,0,0,
	0,2880,2766,1,0,0,0,2880,2774,1,0,0,0,2880,2777,1,0,0,0,2880,2780,1,0,0,
	0,2880,2783,1,0,0,0,2880,2789,1,0,0,0,2880,2809,1,0,0,0,2880,2814,1,0,0,
	0,2880,2818,1,0,0,0,2880,2820,1,0,0,0,2880,2822,1,0,0,0,2880,2830,1,0,0,
	0,2880,2833,1,0,0,0,2880,2846,1,0,0,0,2880,2857,1,0,0,0,2880,2859,1,0,0,
	0,2880,2861,1,0,0,0,2880,2862,1,0,0,0,2880,2864,1,0,0,0,2880,2879,1,0,0,
	0,2881,149,1,0,0,0,2882,2883,5,5,0,0,2883,2884,5,129,0,0,2884,2885,5,1133,
	0,0,2885,2890,3,118,59,0,2886,2887,5,1135,0,0,2887,2889,3,118,59,0,2888,
	2886,1,0,0,0,2889,2892,1,0,0,0,2890,2888,1,0,0,0,2890,2891,1,0,0,0,2891,
	2893,1,0,0,0,2892,2890,1,0,0,0,2893,2894,5,1134,0,0,2894,2981,1,0,0,0,2895,
	2896,5,51,0,0,2896,2897,5,129,0,0,2897,2981,3,616,308,0,2898,2899,5,397,
	0,0,2899,2902,5,129,0,0,2900,2903,3,616,308,0,2901,2903,5,6,0,0,2902,2900,
	1,0,0,0,2902,2901,1,0,0,0,2903,2904,1,0,0,0,2904,2981,5,647,0,0,2905,2906,
	5,450,0,0,2906,2909,5,129,0,0,2907,2910,3,616,308,0,2908,2910,5,6,0,0,2909,
	2907,1,0,0,0,2909,2908,1,0,0,0,2910,2911,1,0,0,0,2911,2981,5,647,0,0,2912,
	2913,5,656,0,0,2913,2916,5,129,0,0,2914,2917,3,616,308,0,2915,2917,5,6,
	0,0,2916,2914,1,0,0,0,2916,2915,1,0,0,0,2917,2981,1,0,0,0,2918,2919,5,363,
	0,0,2919,2920,5,129,0,0,2920,2981,3,590,295,0,2921,2922,5,579,0,0,2922,
	2923,5,129,0,0,2923,2924,3,616,308,0,2924,2925,5,87,0,0,2925,2926,5,1133,
	0,0,2926,2931,3,118,59,0,2927,2928,5,1135,0,0,2928,2930,3,118,59,0,2929,
	2927,1,0,0,0,2930,2933,1,0,0,0,2931,2929,1,0,0,0,2931,2932,1,0,0,0,2932,
	2934,1,0,0,0,2933,2931,1,0,0,0,2934,2935,5,1134,0,0,2935,2981,1,0,0,0,2936,
	2937,5,418,0,0,2937,2938,5,129,0,0,2938,2939,3,584,292,0,2939,2940,5,192,
	0,0,2940,2941,5,172,0,0,2941,2944,3,552,276,0,2942,2943,7,37,0,0,2943,2945,
	5,668,0,0,2944,2942,1,0,0,0,2944,2945,1,0,0,0,2945,2981,1,0,0,0,2946,2947,
	5,9,0,0,2947,2950,5,129,0,0,2948,2951,3,616,308,0,2949,2951,5,6,0,0,2950,
	2948,1,0,0,0,2950,2949,1,0,0,0,2951,2981,1,0,0,0,2952,2953,5,26,0,0,2953,
	2956,5,129,0,0,2954,2957,3,616,308,0,2955,2957,5,6,0,0,2956,2954,1,0,0,
	0,2956,2955,1,0,0,0,2957,2981,1,0,0,0,2958,2959,5,119,0,0,2959,2962,5,129,
	0,0,2960,2963,3,616,308,0,2961,2963,5,6,0,0,2962,2960,1,0,0,0,2962,2961,
	1,0,0,0,2963,2981,1,0,0,0,2964,2965,5,569,0,0,2965,2968,5,129,0,0,2966,
	2969,3,616,308,0,2967,2969,5,6,0,0,2968,2966,1,0,0,0,2968,2967,1,0,0,0,
	2969,2981,1,0,0,0,2970,2971,5,580,0,0,2971,2974,5,129,0,0,2972,2975,3,616,
	308,0,2973,2975,5,6,0,0,2974,2972,1,0,0,0,2974,2973,1,0,0,0,2975,2981,1,
	0,0,0,2976,2977,5,578,0,0,2977,2981,5,549,0,0,2978,2979,5,664,0,0,2979,
	2981,5,549,0,0,2980,2882,1,0,0,0,2980,2895,1,0,0,0,2980,2898,1,0,0,0,2980,
	2905,1,0,0,0,2980,2912,1,0,0,0,2980,2918,1,0,0,0,2980,2921,1,0,0,0,2980,
	2936,1,0,0,0,2980,2946,1,0,0,0,2980,2952,1,0,0,0,2980,2958,1,0,0,0,2980,
	2964,1,0,0,0,2980,2970,1,0,0,0,2980,2976,1,0,0,0,2980,2978,1,0,0,0,2981,
	151,1,0,0,0,2982,2983,5,51,0,0,2983,2985,7,0,0,0,2984,2986,3,640,320,0,
	2985,2984,1,0,0,0,2985,2986,1,0,0,0,2986,2987,1,0,0,0,2987,2988,3,584,292,
	0,2988,153,1,0,0,0,2989,2990,5,51,0,0,2990,2992,5,415,0,0,2991,2993,3,640,
	320,0,2992,2991,1,0,0,0,2992,2993,1,0,0,0,2993,2994,1,0,0,0,2994,2995,3,
	550,275,0,2995,155,1,0,0,0,2996,2997,5,51,0,0,2997,2999,5,81,0,0,2998,3000,
	7,1,0,0,2999,2998,1,0,0,0,2999,3000,1,0,0,0,3000,3001,1,0,0,0,3001,3002,
	3,584,292,0,3002,3003,5,118,0,0,3003,3016,3,552,276,0,3004,3006,5,336,0,
	0,3005,3007,5,1124,0,0,3006,3005,1,0,0,0,3006,3007,1,0,0,0,3007,3008,1,
	0,0,0,3008,3015,7,3,0,0,3009,3011,5,103,0,0,3010,3012,5,1124,0,0,3011,3010,
	1,0,0,0,3011,3012,1,0,0,0,3012,3013,1,0,0,0,3013,3015,7,4,0,0,3014,3004,
	1,0,0,0,3014,3009,1,0,0,0,3015,3018,1,0,0,0,3016,3014,1,0,0,0,3016,3017,
	1,0,0,0,3017,157,1,0,0,0,3018,3016,1,0,0,0,3019,3020,5,51,0,0,3020,3021,
	5,475,0,0,3021,3022,5,73,0,0,3022,3023,3,584,292,0,3023,3024,5,409,0,0,
	3024,3025,5,1124,0,0,3025,3026,3,572,286,0,3026,159,1,0,0,0,3027,3028,5,
	51,0,0,3028,3030,5,131,0,0,3029,3031,3,640,320,0,3030,3029,1,0,0,0,3030,
	3031,1,0,0,0,3031,3032,1,0,0,0,3032,3033,3,550,275,0,3033,161,1,0,0,0,3034,
	3035,5,51,0,0,3035,3037,5,437,0,0,3036,3038,3,640,320,0,3037,3036,1,0,0,
	0,3037,3038,1,0,0,0,3038,3039,1,0,0,0,3039,3040,3,550,275,0,3040,163,1,
	0,0,0,3041,3042,5,51,0,0,3042,3044,5,608,0,0,3043,3045,3,640,320,0,3044,
	3043,1,0,0,0,3044,3045,1,0,0,0,3045,3046,1,0,0,0,3046,3047,3,584,292,0,
	3047,165,1,0,0,0,3048,3050,5,51,0,0,3049,3051,5,649,0,0,3050,3049,1,0,0,
	0,3050,3051,1,0,0,0,3051,3052,1,0,0,0,3052,3054,5,172,0,0,3053,3055,3,640,
	320,0,3054,3053,1,0,0,0,3054,3055,1,0,0,0,3055,3056,1,0,0,0,3056,3058,3,
	620,310,0,3057,3059,7,38,0,0,3058,3057,1,0,0,0,3058,3059,1,0,0,0,3059,167,
	1,0,0,0,3060,3061,5,51,0,0,3061,3062,5,647,0,0,3062,3068,3,584,292,0,3063,
	3065,5,409,0,0,3064,3066,5,1124,0,0,3065,3064,1,0,0,0,3065,3066,1,0,0,0,
	3066,3067,1,0,0,0,3067,3069,3,572,286,0,3068,3063,1,0,0,0,3068,3069,1,0,
	0,0,3069,169,1,0,0,0,3070,3071,5,51,0,0,3071,3073,5,177,0,0,3072,3074,3,
	640,320,0,3073,3072,1,0,0,0,3073,3074,1,0,0,0,3074,3075,1,0,0,0,3075,3076,
	3,550,275,0,3076,171,1,0,0,0,3077,3078,5,51,0,0,3078,3080,5,671,0,0,3079,
	3081,3,640,320,0,3080,3079,1,0,0,0,3080,3081,1,0,0,0,3081,3082,1,0,0,0,
	3082,3087,3,550,275,0,3083,3084,5,1135,0,0,3084,3086,3,550,275,0,3085,3083,
	1,0,0,0,3086,3089,1,0,0,0,3087,3085,1,0,0,0,3087,3088,1,0,0,0,3088,3091,
	1,0,0,0,3089,3087,1,0,0,0,3090,3092,7,38,0,0,3091,3090,1,0,0,0,3091,3092,
	1,0,0,0,3092,173,1,0,0,0,3093,3094,5,51,0,0,3094,3096,5,596,0,0,3095,3097,
	3,640,320,0,3096,3095,1,0,0,0,3096,3097,1,0,0,0,3097,3098,1,0,0,0,3098,
	3103,3,554,277,0,3099,3100,5,1135,0,0,3100,3102,3,554,277,0,3101,3099,1,
	0,0,0,3102,3105,1,0,0,0,3103,3101,1,0,0,0,3103,3104,1,0,0,0,3104,175,1,
	0,0,0,3105,3103,1,0,0,0,3106,3107,5,153,0,0,3107,3108,5,42,0,0,3108,3119,
	5,596,0,0,3109,3120,5,529,0,0,3110,3120,5,6,0,0,3111,3116,3,554,277,0,3112,
	3113,5,1135,0,0,3113,3115,3,554,277,0,3114,3112,1,0,0,0,3115,3118,1,0,0,
	0,3116,3114,1,0,0,0,3116,3117,1,0,0,0,3117,3120,1,0,0,0,3118,3116,1,0,0,
	0,3119,3109,1,0,0,0,3119,3110,1,0,0,0,3119,3111,1,0,0,0,3120,3121,1,0,0,
	0,3121,3124,5,175,0,0,3122,3125,3,564,282,0,3123,3125,3,584,292,0,3124,
	3122,1,0,0,0,3124,3123,1,0,0,0,3125,3133,1,0,0,0,3126,3129,5,1135,0,0,3127,
	3130,3,564,282,0,3128,3130,3,584,292,0,3129,3127,1,0,0,0,3129,3128,1,0,
	0,0,3130,3132,1,0,0,0,3131,3126,1,0,0,0,3132,3135,1,0,0,0,3133,3131,1,0,
	0,0,3133,3134,1,0,0,0,3134,3140,1,0,0,0,3135,3133,1,0,0,0,3136,3137,5,153,
	0,0,3137,3138,5,596,0,0,3138,3140,3,434,217,0,3139,3106,1,0,0,0,3139,3136,
	1,0,0,0,3140,177,1,0,0,0,3141,3142,5,139,0,0,3142,3143,5,172,0,0,3143,3148,
	3,180,90,0,3144,3145,5,1135,0,0,3145,3147,3,180,90,0,3146,3144,1,0,0,0,
	3147,3150,1,0,0,0,3148,3146,1,0,0,0,3148,3149,1,0,0,0,3149,179,1,0,0,0,
	3150,3148,1,0,0,0,3151,3152,3,552,276,0,3152,3153,5,175,0,0,3153,3154,3,
	552,276,0,3154,181,1,0,0,0,3155,3157,5,656,0,0,3156,3158,5,172,0,0,3157,
	3156,1,0,0,0,3157,3158,1,0,0,0,3158,3159,1,0,0,0,3159,3160,3,552,276,0,
	3160,183,1,0,0,0,3161,3162,5,20,0,0,3162,3169,3,550,275,0,3163,3166,5,1133,
	0,0,3164,3167,3,628,314,0,3165,3167,3,624,312,0,3166,3164,1,0,0,0,3166,
	3165,1,0,0,0,3166,3167,1,0,0,0,3167,3168,1,0,0,0,3168,3170,5,1134,0,0,3169,
	3163,1,0,0,0,3169,3170,1,0,0,0,3170,185,1,0,0,0,3171,3174,3,214,107,0,3172,
	3174,3,216,108,0,3173,3171,1,0,0,0,3173,3172,1,0,0,0,3174,187,1,0,0,0,3175,
	3176,5,399,0,0,3176,3177,3,624,312,0,3177,189,1,0,0,0,3178,3183,3,218,109,
	0,3179,3183,3,220,110,0,3180,3183,3,222,111,0,3181,3183,3,224,112,0,3182,
	3178,1,0,0,0,3182,3179,1,0,0,0,3182,3180,1,0,0,0,3182,3181,1,0,0,0,3183,
	191,1,0,0,0,3184,3186,5,85,0,0,3185,3187,7,39,0,0,3186,3185,1,0,0,0,3186,
	3187,1,0,0,0,3187,3189,1,0,0,0,3188,3190,5,78,0,0,3189,3188,1,0,0,0,3189,
	3190,1,0,0,0,3190,3192,1,0,0,0,3191,3193,5,87,0,0,3192,3191,1,0,0,0,3192,
	3193,1,0,0,0,3193,3194,1,0,0,0,3194,3201,3,552,276,0,3195,3196,5,129,0,
	0,3196,3198,5,1133,0,0,3197,3199,3,616,308,0,3198,3197,1,0,0,0,3198,3199,
	1,0,0,0,3199,3200,1,0,0,0,3200,3202,5,1134,0,0,3201,3195,1,0,0,0,3201,3202,
	1,0,0,0,3202,3226,1,0,0,0,3203,3205,5,1133,0,0,3204,3206,3,618,309,0,3205,
	3204,1,0,0,0,3205,3206,1,0,0,0,3206,3207,1,0,0,0,3207,3209,5,1134,0,0,3208,
	3203,1,0,0,0,3208,3209,1,0,0,0,3209,3210,1,0,0,0,3210,3215,3,206,103,0,
	3211,3213,5,12,0,0,3212,3211,1,0,0,0,3212,3213,1,0,0,0,3213,3214,1,0,0,
	0,3214,3216,3,584,292,0,3215,3212,1,0,0,0,3215,3216,1,0,0,0,3216,3227,1,
	0,0,0,3217,3218,5,153,0,0,3218,3223,3,208,104,0,3219,3220,5,1135,0,0,3220,
	3222,3,208,104,0,3221,3219,1,0,0,0,3222,3225,1,0,0,0,3223,3221,1,0,0,0,
	3223,3224,1,0,0,0,3224,3227,1,0,0,0,3225,3223,1,0,0,0,3226,3208,1,0,0,0,
	3226,3217,1,0,0,0,3227,3240,1,0,0,0,3228,3229,5,118,0,0,3229,3230,5,401,
	0,0,3230,3231,5,91,0,0,3231,3232,5,184,0,0,3232,3237,3,208,104,0,3233,3234,
	5,1135,0,0,3234,3236,3,208,104,0,3235,3233,1,0,0,0,3236,3239,1,0,0,0,3237,
	3235,1,0,0,0,3237,3238,1,0,0,0,3238,3241,1,0,0,0,3239,3237,1,0,0,0,3240,
	3228,1,0,0,0,3240,3241,1,0,0,0,3241,193,1,0,0,0,3242,3243,5,102,0,0,3243,
	3245,5,388,0,0,3244,3246,7,40,0,0,3245,3244,1,0,0,0,3245,3246,1,0,0,0,3246,
	3248,1,0,0,0,3247,3249,5,474,0,0,3248,3247,1,0,0,0,3248,3249,1,0,0,0,3249,
	3250,1,0,0,0,3250,3251,5,82,0,0,3251,3253,5,1148,0,0,3252,3254,7,6,0,0,
	3253,3252,1,0,0,0,3253,3254,1,0,0,0,3254,3255,1,0,0,0,3255,3256,5,87,0,
	0,3256,3257,5,172,0,0,3257,3263,3,552,276,0,3258,3259,5,129,0,0,3259,3260,
	5,1133,0,0,3260,3261,3,616,308,0,3261,3262,5,1134,0,0,3262,3264,1,0,0,0,
	3263,3258,1,0,0,0,3263,3264,1,0,0,0,3264,3268,1,0,0,0,3265,3266,5,25,0,
	0,3266,3267,5,153,0,0,3267,3269,3,568,284,0,3268,3265,1,0,0,0,3268,3269,
	1,0,0,0,3269,3276,1,0,0,0,3270,3272,7,41,0,0,3271,3273,3,280,140,0,3272,
	3271,1,0,0,0,3273,3274,1,0,0,0,3274,3272,1,0,0,0,3274,3275,1,0,0,0,3275,
	3277,1,0,0,0,3276,3270,1,0,0,0,3276,3277,1,0,0,0,3277,3284,1,0,0,0,3278,
	3280,5,101,0,0,3279,3281,3,282,141,0,3280,3279,1,0,0,0,3281,3282,1,0,0,
	0,3282,3280,1,0,0,0,3282,3283,1,0,0,0,3283,3285,1,0,0,0,3284,3278,1,0,0,
	0,3284,3285,1,0,0,0,3285,3290,1,0,0,0,3286,3287,5,78,0,0,3287,3288,3,590,
	295,0,3288,3289,7,42,0,0,3289,3291,1,0,0,0,3290,3286,1,0,0,0,3290,3291,
	1,0,0,0,3291,3303,1,0,0,0,3292,3293,5,1133,0,0,3293,3298,3,210,105,0,3294,
	3295,5,1135,0,0,3295,3297,3,210,105,0,3296,3294,1,0,0,0,3297,3300,1,0,0,
	0,3298,3296,1,0,0,0,3298,3299,1,0,0,0,3299,3301,1,0,0,0,3300,3298,1,0,0,
	0,3301,3302,5,1134,0,0,3302,3304,1,0,0,0,3303,3292,1,0,0,0,3303,3304,1,
	0,0,0,3304,3314,1,0,0,0,3305,3306,5,153,0,0,3306,3311,3,208,104,0,3307,
	3308,5,1135,0,0,3308,3310,3,208,104,0,3309,3307,1,0,0,0,3310,3313,1,0,0,
	0,3311,3309,1,0,0,0,3311,3312,1,0,0,0,3312,3315,1,0,0,0,3313,3311,1,0,0,
	0,3314,3305,1,0,0,0,3314,3315,1,0,0,0,3315,195,1,0,0,0,3316,3317,5,102,
	0,0,3317,3319,5,682,0,0,3318,3320,7,40,0,0,3319,3318,1,0,0,0,3319,3320,
	1,0,0,0,3320,3322,1,0,0,0,3321,3323,5,474,0,0,3322,3321,1,0,0,0,3322,3323,
	1,0,0,0,3323,3324,1,0,0,0,3324,3325,5,82,0,0,3325,3327,5,1148,0,0,3326,
	3328,7,6,0,0,3327,3326,1,0,0,0,3327,3328,1,0,0,0,3328,3329,1,0,0,0,3329,
	3330,5,87,0,0,3330,3331,5,172,0,0,3331,3335,3,552,276,0,3332,3333,5,25,
	0,0,3333,3334,5,153,0,0,3334,3336,3,568,284,0,3335,3332,1,0,0,0,3335,3336,
	1,0,0,0,3336,3343,1,0,0,0,3337,3338,5,601,0,0,3338,3339,5,448,0,0,3339,
	3340,5,19,0,0,3340,3341,5,1126,0,0,3341,3342,5,1148,0,0,3342,3344,5,1125,
	0,0,3343,3337,1,0,0,0,3343,3344,1,0,0,0,3344,3349,1,0,0,0,3345,3346,5,78,
	0,0,3346,3347,3,590,295,0,3347,3348,7,42,0,0,3348,3350,1,0,0,0,3349,3345,
	1,0,0,0,3349,3350,1,0,0,0,3350,3362,1,0,0,0,3351,3352,5,1133,0,0,3352,3357,
	3,210,105,0,3353,3354,5,1135,0,0,3354,3356,3,210,105,0,3355,3353,1,0,0,
	0,3356,3359,1,0,0,0,3357,3355,1,0,0,0,3357,3358,1,0,0,0,3358,3360,1,0,0,
	0,3359,3357,1,0,0,0,3360,3361,5,1134,0,0,3361,3363,1,0,0,0,3362,3351,1,
	0,0,0,3362,3363,1,0,0,0,3363,3373,1,0,0,0,3364,3365,5,153,0,0,3365,3370,
	3,208,104,0,3366,3367,5,1135,0,0,3367,3369,3,208,104,0,3368,3366,1,0,0,
	0,3369,3372,1,0,0,0,3370,3368,1,0,0,0,3370,3371,1,0,0,0,3371,3374,1,0,0,
	0,3372,3370,1,0,0,0,3373,3364,1,0,0,0,3373,3374,1,0,0,0,3374,197,1,0,0,
	0,3375,3377,5,141,0,0,3376,3378,7,43,0,0,3377,3376,1,0,0,0,3377,3378,1,
	0,0,0,3378,3380,1,0,0,0,3379,3381,5,87,0,0,3380,3379,1,0,0,0,3380,3381,
	1,0,0,0,3381,3382,1,0,0,0,3382,3388,3,552,276,0,3383,3384,5,129,0,0,3384,
	3385,5,1133,0,0,3385,3386,3,616,308,0,3386,3387,5,1134,0,0,3387,3389,1,
	0,0,0,3388,3383,1,0,0,0,3388,3389,1,0,0,0,3389,3406,1,0,0,0,3390,3391,5,
	1133,0,0,3391,3392,3,616,308,0,3392,3393,5,1134,0,0,3393,3395,1,0,0,0,3394,
	3390,1,0,0,0,3394,3395,1,0,0,0,3395,3396,1,0,0,0,3396,3407,3,206,103,0,
	3397,3398,5,153,0,0,3398,3403,3,208,104,0,3399,3400,5,1135,0,0,3400,3402,
	3,208,104,0,3401,3399,1,0,0,0,3402,3405,1,0,0,0,3403,3401,1,0,0,0,3403,
	3404,1,0,0,0,3404,3407,1,0,0,0,3405,3403,1,0,0,0,3406,3394,1,0,0,0,3406,
	3397,1,0,0,0,3407,199,1,0,0,0,3408,3410,3,252,126,0,3409,3411,3,212,106,
	0,3410,3409,1,0,0,0,3410,3411,1,0,0,0,3411,3474,1,0,0,0,3412,3414,3,248,
	124,0,3413,3415,3,212,106,0,3414,3413,1,0,0,0,3414,3415,1,0,0,0,3415,3474,
	1,0,0,0,3416,3419,3,254,127,0,3417,3419,3,250,125,0,3418,3416,1,0,0,0,3418,
	3417,1,0,0,0,3419,3421,1,0,0,0,3420,3422,3,258,129,0,3421,3420,1,0,0,0,
	3422,3423,1,0,0,0,3423,3421,1,0,0,0,3423,3424,1,0,0,0,3424,3433,1,0,0,0,
	3425,3427,5,180,0,0,3426,3428,7,44,0,0,3427,3426,1,0,0,0,3427,3428,1,0,
	0,0,3428,3431,1,0,0,0,3429,3432,3,252,126,0,3430,3432,3,248,124,0,3431,
	3429,1,0,0,0,3431,3430,1,0,0,0,3432,3434,1,0,0,0,3433,3425,1,0,0,0,3433,
	3434,1,0,0,0,3434,3436,1,0,0,0,3435,3437,3,230,115,0,3436,3435,1,0,0,0,
	3436,3437,1,0,0,0,3437,3439,1,0,0,0,3438,3440,3,294,147,0,3439,3438,1,0,
	0,0,3439,3440,1,0,0,0,3440,3442,1,0,0,0,3441,3443,3,212,106,0,3442,3441,
	1,0,0,0,3442,3443,1,0,0,0,3443,3474,1,0,0,0,3444,3446,3,250,125,0,3445,
	3447,3,256,128,0,3446,3445,1,0,0,0,3447,3448,1,0,0,0,3448,3446,1,0,0,0,
	3448,3449,1,0,0,0,3449,3455,1,0,0,0,3450,3452,5,180,0,0,3451,3453,7,44,
	0,0,3452,3451,1,0,0,0,3452,3453,1,0,0,0,3453,3454,1,0,0,0,3454,3456,3,248,
	124,0,3455,3450,1,0,0,0,3455,3456,1,0,0,0,3456,3458,1,0,0,0,3457,3459,3,
	230,115,0,3458,3457,1,0,0,0,3458,3459,1,0,0,0,3459,3461,1,0,0,0,3460,3462,
	3,294,147,0,3461,3460,1,0,0,0,3461,3462,1,0,0,0,3462,3464,1,0,0,0,3463,
	3465,3,212,106,0,3464,3463,1,0,0,0,3464,3465,1,0,0,0,3465,3474,1,0,0,0,
	3466,3469,3,254,127,0,3467,3468,5,1135,0,0,3468,3470,3,260,130,0,3469,3467,
	1,0,0,0,3470,3471,1,0,0,0,3471,3469,1,0,0,0,3471,3472,1,0,0,0,3472,3474,
	1,0,0,0,3473,3408,1,0,0,0,3473,3412,1,0,0,0,3473,3418,1,0,0,0,3473,3444,
	1,0,0,0,3473,3466,1,0,0,0,3474,201,1,0,0,0,3475,3478,3,226,113,0,3476,3478,
	3,228,114,0,3477,3475,1,0,0,0,3477,3476,1,0,0,0,3478,203,1,0,0,0,3479,3480,
	5,188,0,0,3480,3482,5,1133,0,0,3481,3483,3,626,313,0,3482,3481,1,0,0,0,
	3482,3483,1,0,0,0,3483,3484,1,0,0,0,3484,3493,5,1134,0,0,3485,3486,5,1135,
	0,0,3486,3488,5,1133,0,0,3487,3489,3,626,313,0,3488,3487,1,0,0,0,3488,3489,
	1,0,0,0,3489,3490,1,0,0,0,3490,3492,5,1134,0,0,3491,3485,1,0,0,0,3492,3495,
	1,0,0,0,3493,3491,1,0,0,0,3493,3494,1,0,0,0,3494,205,1,0,0,0,3495,3493,
	1,0,0,0,3496,3515,3,200,100,0,3497,3498,7,45,0,0,3498,3500,5,1133,0,0,3499,
	3501,3,626,313,0,3500,3499,1,0,0,0,3500,3501,1,0,0,0,3501,3502,1,0,0,0,
	3502,3511,5,1134,0,0,3503,3504,5,1135,0,0,3504,3506,5,1133,0,0,3505,3507,
	3,626,313,0,3506,3505,1,0,0,0,3506,3507,1,0,0,0,3507,3508,1,0,0,0,3508,
	3510,5,1134,0,0,3509,3503,1,0,0,0,3510,3513,1,0,0,0,3511,3509,1,0,0,0,3511,
	3512,1,0,0,0,3512,3515,1,0,0,0,3513,3511,1,0,0,0,3514,3496,1,0,0,0,3514,
	3497,1,0,0,0,3515,207,1,0,0,0,3516,3517,3,556,278,0,3517,3520,5,1124,0,
	0,3518,3521,3,688,344,0,3519,3521,5,42,0,0,3520,3518,1,0,0,0,3520,3519,
	1,0,0,0,3521,209,1,0,0,0,3522,3525,3,584,292,0,3523,3525,5,1159,0,0,3524,
	3522,1,0,0,0,3524,3523,1,0,0,0,3525,211,1,0,0,0,3526,3527,5,65,0,0,3527,
	3533,5,184,0,0,3528,3529,5,103,0,0,3529,3530,5,80,0,0,3530,3531,5,610,0,
	0,3531,3533,5,511,0,0,3532,3526,1,0,0,0,3532,3528,1,0,0,0,3533,213,1,0,
	0,0,3534,3536,5,44,0,0,3535,3537,5,106,0,0,3536,3535,1,0,0,0,3536,3537,
	1,0,0,0,3537,3539,1,0,0,0,3538,3540,5,568,0,0,3539,3538,1,0,0,0,3539,3540,
	1,0,0,0,3540,3542,1,0,0,0,3541,3543,5,78,0,0,3542,3541,1,0,0,0,3542,3543,
	1,0,0,0,3543,3544,1,0,0,0,3544,3545,5,68,0,0,3545,3550,3,552,276,0,3546,
	3548,5,12,0,0,3547,3546,1,0,0,0,3547,3548,1,0,0,0,3548,3549,1,0,0,0,3549,
	3551,3,584,292,0,3550,3547,1,0,0,0,3550,3551,1,0,0,0,3551,3557,1,0,0,0,
	3552,3553,5,129,0,0,3553,3554,5,1133,0,0,3554,3555,3,616,308,0,3555,3556,
	5,1134,0,0,3556,3558,1,0,0,0,3557,3552,1,0,0,0,3557,3558,1,0,0,0,3558,3561,
	1,0,0,0,3559,3560,5,190,0,0,3560,3562,3,688,344,0,3561,3559,1,0,0,0,3561,
	3562,1,0,0,0,3562,3564,1,0,0,0,3563,3565,3,230,115,0,3564,3563,1,0,0,0,
	3564,3565,1,0,0,0,3565,3568,1,0,0,0,3566,3567,5,99,0,0,3567,3569,3,296,
	148,0,3568,3566,1,0,0,0,3568,3569,1,0,0,0,3569,215,1,0,0,0,3570,3572,5,
	44,0,0,3571,3573,5,106,0,0,3572,3571,1,0,0,0,3572,3573,1,0,0,0,3573,3575,
	1,0,0,0,3574,3576,5,568,0,0,3575,3574,1,0,0,0,3575,3576,1,0,0,0,3576,3578,
	1,0,0,0,3577,3579,5,78,0,0,3578,3577,1,0,0,0,3578,3579,1,0,0,0,3579,3619,
	1,0,0,0,3580,3583,3,552,276,0,3581,3582,5,1132,0,0,3582,3584,5,1117,0,0,
	3583,3581,1,0,0,0,3583,3584,1,0,0,0,3584,3593,1,0,0,0,3585,3586,5,1135,
	0,0,3586,3589,3,552,276,0,3587,3588,5,1132,0,0,3588,3590,5,1117,0,0,3589,
	3587,1,0,0,0,3589,3590,1,0,0,0,3590,3592,1,0,0,0,3591,3585,1,0,0,0,3592,
	3595,1,0,0,0,3593,3591,1,0,0,0,3593,3594,1,0,0,0,3594,3596,1,0,0,0,3595,
	3593,1,0,0,0,3596,3597,5,68,0,0,3597,3598,3,234,117,0,3598,3620,1,0,0,0,
	3599,3600,5,68,0,0,3600,3603,3,552,276,0,3601,3602,5,1132,0,0,3602,3604,
	5,1117,0,0,3603,3601,1,0,0,0,3603,3604,1,0,0,0,3604,3613,1,0,0,0,3605,3606,
	5,1135,0,0,3606,3609,3,552,276,0,3607,3608,5,1132,0,0,3608,3610,5,1117,
	0,0,3609,3607,1,0,0,0,3609,3610,1,0,0,0,3610,3612,1,0,0,0,3611,3605,1,0,
	0,0,3612,3615,1,0,0,0,3613,3611,1,0,0,0,3613,3614,1,0,0,0,3614,3616,1,0,
	0,0,3615,3613,1,0,0,0,3616,3617,5,187,0,0,3617,3618,3,234,117,0,3618,3620,
	1,0,0,0,3619,3580,1,0,0,0,3619,3599,1,0,0,0,3620,3623,1,0,0,0,3621,3622,
	5,190,0,0,3622,3624,3,688,344,0,3623,3621,1,0,0,0,3623,3624,1,0,0,0,3624,
	217,1,0,0,0,3625,3626,5,442,0,0,3626,3627,3,552,276,0,3627,3632,5,539,0,
	0,3628,3630,5,12,0,0,3629,3628,1,0,0,0,3629,3630,1,0,0,0,3630,3631,1,0,
	0,0,3631,3633,3,584,292,0,3632,3629,1,0,0,0,3632,3633,1,0,0,0,3633,219,
	1,0,0,0,3634,3635,5,442,0,0,3635,3636,3,552,276,0,3636,3637,5,134,0,0,3637,
	3644,3,584,292,0,3638,3639,3,696,348,0,3639,3640,5,1133,0,0,3640,3641,3,
	628,314,0,3641,3642,5,1134,0,0,3642,3645,1,0,0,0,3643,3645,7,46,0,0,3644,
	3638,1,0,0,0,3644,3643,1,0,0,0,3645,3648,1,0,0,0,3646,3647,5,190,0,0,3647,
	3649,3,688,344,0,3648,3646,1,0,0,0,3648,3649,1,0,0,0,3649,3652,1,0,0,0,
	3650,3651,5,99,0,0,3651,3653,3,296,148,0,3652,3650,1,0,0,0,3652,3653,1,
	0,0,0,3653,221,1,0,0,0,3654,3655,5,442,0,0,3655,3656,3,552,276,0,3656,3657,
	5,134,0,0,3657,3660,7,47,0,0,3658,3659,5,190,0,0,3659,3661,3,688,344,0,
	3660,3658,1,0,0,0,3660,3661,1,0,0,0,3661,3664,1,0,0,0,3662,3663,5,99,0,
	0,3663,3665,3,296,148,0,3664,3662,1,0,0,0,3664,3665,1,0,0,0,3665,223,1,
	0,0,0,3666,3667,5,442,0,0,3667,3668,3,552,276,0,3668,3669,5,361,0,0,3669,
	225,1,0,0,0,3670,3672,5,184,0,0,3671,3673,5,106,0,0,3672,3671,1,0,0,0,3672,
	3673,1,0,0,0,3673,3675,1,0,0,0,3674,3676,5,78,0,0,3675,3674,1,0,0,0,3675,
	3676,1,0,0,0,3676,3677,1,0,0,0,3677,3682,3,552,276,0,3678,3680,5,12,0,0,
	3679,3678,1,0,0,0,3679,3680,1,0,0,0,3680,3681,1,0,0,0,3681,3683,3,584,292,
	0,3682,3679,1,0,0,0,3682,3683,1,0,0,0,3683,3684,1,0,0,0,3684,3685,5,153,
	0,0,3685,3690,3,208,104,0,3686,3687,5,1135,0,0,3687,3689,3,208,104,0,3688,
	3686,1,0,0,0,3689,3692,1,0,0,0,3690,3688,1,0,0,0,3690,3691,1,0,0,0,3691,
	3695,1,0,0,0,3692,3690,1,0,0,0,3693,3694,5,190,0,0,3694,3696,3,688,344,
	0,3695,3693,1,0,0,0,3695,3696,1,0,0,0,3696,3698,1,0,0,0,3697,3699,3,230,
	115,0,3698,3697,1,0,0,0,3698,3699,1,0,0,0,3699,3701,1,0,0,0,3700,3702,3,
	294,147,0,3701,3700,1,0,0,0,3701,3702,1,0,0,0,3702,227,1,0,0,0,3703,3705,
	5,184,0,0,3704,3706,5,106,0,0,3705,3704,1,0,0,0,3705,3706,1,0,0,0,3706,
	3708,1,0,0,0,3707,3709,5,78,0,0,3708,3707,1,0,0,0,3708,3709,1,0,0,0,3709,
	3710,1,0,0,0,3710,3711,3,234,117,0,3711,3712,5,153,0,0,3712,3717,3,208,
	104,0,3713,3714,5,1135,0,0,3714,3716,3,208,104,0,3715,3713,1,0,0,0,3716,
	3719,1,0,0,0,3717,3715,1,0,0,0,3717,3718,1,0,0,0,3718,3722,1,0,0,0,3719,
	3717,1,0,0,0,3720,3721,5,190,0,0,3721,3723,3,688,344,0,3722,3720,1,0,0,
	0,3722,3723,1,0,0,0,3723,229,1,0,0,0,3724,3725,5,124,0,0,3725,3726,5,19,
	0,0,3726,3731,3,232,116,0,3727,3728,5,1135,0,0,3728,3730,3,232,116,0,3729,
	3727,1,0,0,0,3730,3733,1,0,0,0,3731,3729,1,0,0,0,3731,3732,1,0,0,0,3732,
	231,1,0,0,0,3733,3731,1,0,0,0,3734,3736,3,688,344,0,3735,3737,7,48,0,0,
	3736,3735,1,0,0,0,3736,3737,1,0,0,0,3737,233,1,0,0,0,3738,3743,3,236,118,
	0,3739,3740,5,1135,0,0,3740,3742,3,236,118,0,3741,3739,1,0,0,0,3742,3745,
	1,0,0,0,3743,3741,1,0,0,0,3743,3744,1,0,0,0,3744,235,1,0,0,0,3745,3743,
	1,0,0,0,3746,3750,3,238,119,0,3747,3749,3,244,122,0,3748,3747,1,0,0,0,3749,
	3752,1,0,0,0,3750,3748,1,0,0,0,3750,3751,1,0,0,0,3751,3765,1,0,0,0,3752,
	3750,1,0,0,0,3753,3754,5,1133,0,0,3754,3758,3,238,119,0,3755,3757,3,244,
	122,0,3756,3755,1,0,0,0,3757,3760,1,0,0,0,3758,3756,1,0,0,0,3758,3759,1,
	0,0,0,3759,3761,1,0,0,0,3760,3758,1,0,0,0,3761,3762,5,1134,0,0,3762,3765,
	1,0,0,0,3763,3765,3,262,131,0,3764,3746,1,0,0,0,3764,3753,1,0,0,0,3764,
	3763,1,0,0,0,3765,237,1,0,0,0,3766,3772,3,552,276,0,3767,3768,5,129,0,0,
	3768,3769,5,1133,0,0,3769,3770,3,616,308,0,3770,3771,5,1134,0,0,3771,3773,
	1,0,0,0,3772,3767,1,0,0,0,3772,3773,1,0,0,0,3773,3778,1,0,0,0,3774,3776,
	5,12,0,0,3775,3774,1,0,0,0,3775,3776,1,0,0,0,3776,3777,1,0,0,0,3777,3779,
	3,584,292,0,3778,3775,1,0,0,0,3778,3779,1,0,0,0,3779,3788,1,0,0,0,3780,
	3785,3,240,120,0,3781,3782,5,1135,0,0,3782,3784,3,240,120,0,3783,3781,1,
	0,0,0,3784,3787,1,0,0,0,3785,3783,1,0,0,0,3785,3786,1,0,0,0,3786,3789,1,
	0,0,0,3787,3785,1,0,0,0,3788,3780,1,0,0,0,3788,3789,1,0,0,0,3789,3807,1,
	0,0,0,3790,3796,3,200,100,0,3791,3792,5,1133,0,0,3792,3793,3,200,100,0,
	3793,3794,5,1134,0,0,3794,3796,1,0,0,0,3795,3790,1,0,0,0,3795,3791,1,0,
	0,0,3796,3798,1,0,0,0,3797,3799,5,12,0,0,3798,3797,1,0,0,0,3798,3799,1,
	0,0,0,3799,3800,1,0,0,0,3800,3801,3,584,292,0,3801,3807,1,0,0,0,3802,3803,
	5,1133,0,0,3803,3804,3,234,117,0,3804,3805,5,1134,0,0,3805,3807,1,0,0,0,
	3806,3766,1,0,0,0,3806,3795,1,0,0,0,3806,3802,1,0,0,0,3807,239,1,0,0,0,
	3808,3809,7,49,0,0,3809,3812,7,20,0,0,3810,3811,5,65,0,0,3811,3813,3,242,
	121,0,3812,3810,1,0,0,0,3812,3813,1,0,0,0,3813,3814,1,0,0,0,3814,3815,5,
	1133,0,0,3815,3816,3,616,308,0,3816,3817,5,1134,0,0,3817,241,1,0,0,0,3818,
	3824,5,90,0,0,3819,3820,5,124,0,0,3820,3824,5,19,0,0,3821,3822,5,73,0,0,
	3822,3824,5,19,0,0,3823,3818,1,0,0,0,3823,3819,1,0,0,0,3823,3821,1,0,0,
	0,3824,243,1,0,0,0,3825,3827,7,50,0,0,3826,3825,1,0,0,0,3826,3827,1,0,0,
	0,3827,3828,1,0,0,0,3828,3830,5,90,0,0,3829,3831,5,94,0,0,3830,3829,1,0,
	0,0,3830,3831,1,0,0,0,3831,3832,1,0,0,0,3832,3836,3,238,119,0,3833,3835,
	3,246,123,0,3834,3833,1,0,0,0,3835,3838,1,0,0,0,3836,3834,1,0,0,0,3836,
	3837,1,0,0,0,3837,3873,1,0,0,0,3838,3836,1,0,0,0,3839,3840,5,171,0,0,3840,
	3845,3,238,119,0,3841,3842,5,118,0,0,3842,3844,3,688,344,0,3843,3841,1,
	0,0,0,3844,3847,1,0,0,0,3845,3843,1,0,0,0,3845,3846,1,0,0,0,3846,3873,1,
	0,0,0,3847,3845,1,0,0,0,3848,3850,7,51,0,0,3849,3851,5,126,0,0,3850,3849,
	1,0,0,0,3850,3851,1,0,0,0,3851,3852,1,0,0,0,3852,3854,5,90,0,0,3853,3855,
	5,94,0,0,3854,3853,1,0,0,0,3854,3855,1,0,0,0,3855,3856,1,0,0,0,3856,3860,
	3,238,119,0,3857,3859,3,246,123,0,3858,3857,1,0,0,0,3859,3862,1,0,0,0,3860,
	3858,1,0,0,0,3860,3861,1,0,0,0,3861,3873,1,0,0,0,3862,3860,1,0,0,0,3863,
	3868,5,113,0,0,3864,3866,7,51,0,0,3865,3867,5,126,0,0,3866,3865,1,0,0,0,
	3866,3867,1,0,0,0,3867,3869,1,0,0,0,3868,3864,1,0,0,0,3868,3869,1,0,0,0,
	3869,3870,1,0,0,0,3870,3871,5,90,0,0,3871,3873,3,238,119,0,3872,3826,1,
	0,0,0,3872,3839,1,0,0,0,3872,3848,1,0,0,0,3872,3863,1,0,0,0,3873,245,1,
	0,0,0,3874,3875,5,118,0,0,3875,3882,3,688,344,0,3876,3877,5,187,0,0,3877,
	3878,5,1133,0,0,3878,3879,3,616,308,0,3879,3880,5,1134,0,0,3880,3882,1,
	0,0,0,3881,3874,1,0,0,0,3881,3876,1,0,0,0,3882,247,1,0,0,0,3883,3884,5,
	1133,0,0,3884,3885,3,252,126,0,3885,3886,5,1134,0,0,3886,3892,1,0,0,0,3887,
	3888,5,1133,0,0,3888,3889,3,248,124,0,3889,3890,5,1134,0,0,3890,3892,1,
	0,0,0,3891,3883,1,0,0,0,3891,3887,1,0,0,0,3892,249,1,0,0,0,3893,3894,5,
	1133,0,0,3894,3895,3,254,127,0,3895,3896,5,1134,0,0,3896,3902,1,0,0,0,3897,
	3898,5,1133,0,0,3898,3899,3,250,125,0,3899,3900,5,1134,0,0,3900,3902,1,
	0,0,0,3901,3893,1,0,0,0,3901,3897,1,0,0,0,3902,251,1,0,0,0,3903,3907,5,
	152,0,0,3904,3906,3,272,136,0,3905,3904,1,0,0,0,3906,3909,1,0,0,0,3907,
	3905,1,0,0,0,3907,3908,1,0,0,0,3908,3910,1,0,0,0,3909,3907,1,0,0,0,3910,
	3912,3,274,137,0,3911,3913,3,278,139,0,3912,3911,1,0,0,0,3912,3913,1,0,
	0,0,3913,3914,1,0,0,0,3914,3916,3,284,142,0,3915,3917,3,286,143,0,3916,
	3915,1,0,0,0,3916,3917,1,0,0,0,3917,3919,1,0,0,0,3918,3920,3,288,144,0,
	3919,3918,1,0,0,0,3919,3920,1,0,0,0,3920,3922,1,0,0,0,3921,3923,3,290,145,
	0,3922,3921,1,0,0,0,3922,3923,1,0,0,0,3923,3925,1,0,0,0,3924,3926,3,230,
	115,0,3925,3924,1,0,0,0,3925,3926,1,0,0,0,3926,3928,1,0,0,0,3927,3929,3,
	294,147,0,3928,3927,1,0,0,0,3928,3929,1,0,0,0,3929,3958,1,0,0,0,3930,3934,
	5,152,0,0,3931,3933,3,272,136,0,3932,3931,1,0,0,0,3933,3936,1,0,0,0,3934,
	3932,1,0,0,0,3934,3935,1,0,0,0,3935,3937,1,0,0,0,3936,3934,1,0,0,0,3937,
	3938,3,274,137,0,3938,3940,3,284,142,0,3939,3941,3,286,143,0,3940,3939,
	1,0,0,0,3940,3941,1,0,0,0,3941,3943,1,0,0,0,3942,3944,3,288,144,0,3943,
	3942,1,0,0,0,3943,3944,1,0,0,0,3944,3946,1,0,0,0,3945,3947,3,290,145,0,
	3946,3945,1,0,0,0,3946,3947,1,0,0,0,3947,3949,1,0,0,0,3948,3950,3,230,115,
	0,3949,3948,1,0,0,0,3949,3950,1,0,0,0,3950,3952,1,0,0,0,3951,3953,3,294,
	147,0,3952,3951,1,0,0,0,3952,3953,1,0,0,0,3953,3955,1,0,0,0,3954,3956,3,
	278,139,0,3955,3954,1,0,0,0,3955,3956,1,0,0,0,3956,3958,1,0,0,0,3957,3903,
	1,0,0,0,3957,3930,1,0,0,0,3958,253,1,0,0,0,3959,3963,5,152,0,0,3960,3962,
	3,272,136,0,3961,3960,1,0,0,0,3962,3965,1,0,0,0,3963,3961,1,0,0,0,3963,
	3964,1,0,0,0,3964,3966,1,0,0,0,3965,3963,1,0,0,0,3966,3967,3,274,137,0,
	3967,3969,3,284,142,0,3968,3970,3,286,143,0,3969,3968,1,0,0,0,3969,3970,
	1,0,0,0,3970,3972,1,0,0,0,3971,3973,3,288,144,0,3972,3971,1,0,0,0,3972,
	3973,1,0,0,0,3973,3975,1,0,0,0,3974,3976,3,290,145,0,3975,3974,1,0,0,0,
	3975,3976,1,0,0,0,3976,3978,1,0,0,0,3977,3979,3,230,115,0,3978,3977,1,0,
	0,0,3978,3979,1,0,0,0,3979,3981,1,0,0,0,3980,3982,3,294,147,0,3981,3980,
	1,0,0,0,3981,3982,1,0,0,0,3982,3984,1,0,0,0,3983,3985,3,258,129,0,3984,
	3983,1,0,0,0,3984,3985,1,0,0,0,3985,255,1,0,0,0,3986,3988,5,180,0,0,3987,
	3989,7,44,0,0,3988,3987,1,0,0,0,3988,3989,1,0,0,0,3989,3990,1,0,0,0,3990,
	3991,3,250,125,0,3991,257,1,0,0,0,3992,3994,5,180,0,0,3993,3995,7,44,0,
	0,3994,3993,1,0,0,0,3994,3995,1,0,0,0,3995,3998,1,0,0,0,3996,3999,3,254,
	127,0,3997,3999,3,250,125,0,3998,3996,1,0,0,0,3998,3997,1,0,0,0,3999,259,
	1,0,0,0,4000,4015,5,94,0,0,4001,4016,3,254,127,0,4002,4016,3,250,125,0,
	4003,4006,5,1133,0,0,4004,4007,3,254,127,0,4005,4007,3,250,125,0,4006,4004,
	1,0,0,0,4006,4005,1,0,0,0,4007,4008,1,0,0,0,4008,4013,5,1134,0,0,4009,4011,
	5,12,0,0,4010,4009,1,0,0,0,4010,4011,1,0,0,0,4011,4012,1,0,0,0,4012,4014,
	3,584,292,0,4013,4010,1,0,0,0,4013,4014,1,0,0,0,4014,4016,1,0,0,0,4015,
	4001,1,0,0,0,4015,4002,1,0,0,0,4015,4003,1,0,0,0,4016,261,1,0,0,0,4017,
	4018,5,278,0,0,4018,4019,5,1133,0,0,4019,4020,5,1148,0,0,4020,4021,5,1135,
	0,0,4021,4022,5,1148,0,0,4022,4023,5,365,0,0,4023,4024,5,1133,0,0,4024,
	4025,3,264,132,0,4025,4026,5,1134,0,0,4026,4031,5,1134,0,0,4027,4029,5,
	12,0,0,4028,4027,1,0,0,0,4028,4029,1,0,0,0,4029,4030,1,0,0,0,4030,4032,
	3,584,292,0,4031,4028,1,0,0,0,4031,4032,1,0,0,0,4032,263,1,0,0,0,4033,4038,
	3,266,133,0,4034,4035,5,1135,0,0,4035,4037,3,266,133,0,4036,4034,1,0,0,
	0,4037,4040,1,0,0,0,4038,4036,1,0,0,0,4038,4039,1,0,0,0,4039,265,1,0,0,
	0,4040,4038,1,0,0,0,4041,4058,3,556,278,0,4042,4043,5,65,0,0,4043,4059,
	5,284,0,0,4044,4056,3,604,302,0,4045,4046,5,285,0,0,4046,4048,5,1148,0,
	0,4047,4049,3,268,134,0,4048,4047,1,0,0,0,4048,4049,1,0,0,0,4049,4051,1,
	0,0,0,4050,4052,3,270,135,0,4051,4050,1,0,0,0,4051,4052,1,0,0,0,4052,4057,
	1,0,0,0,4053,4054,5,60,0,0,4054,4055,5,285,0,0,4055,4057,5,1148,0,0,4056,
	4045,1,0,0,0,4056,4053,1,0,0,0,4057,4059,1,0,0,0,4058,4042,1,0,0,0,4058,
	4044,1,0,0,0,4059,4071,1,0,0,0,4060,4062,5,283,0,0,4061,4063,5,285,0,0,
	4062,4061,1,0,0,0,4062,4063,1,0,0,0,4063,4064,1,0,0,0,4064,4065,5,1148,
	0,0,4065,4066,5,365,0,0,4066,4067,5,1133,0,0,4067,4068,3,264,132,0,4068,
	4069,5,1134,0,0,4069,4071,1,0,0,0,4070,4041,1,0,0,0,4070,4060,1,0,0,0,4071,
	267,1,0,0,0,4072,4077,5,116,0,0,4073,4077,5,411,0,0,4074,4075,5,42,0,0,
	4075,4077,3,634,317,0,4076,4072,1,0,0,0,4076,4073,1,0,0,0,4076,4074,1,0,
	0,0,4077,4078,1,0,0,0,4078,4079,5,118,0,0,4079,4080,5,55,0,0,4080,269,1,
	0,0,0,4081,4086,5,116,0,0,4082,4086,5,411,0,0,4083,4084,5,42,0,0,4084,4086,
	3,634,317,0,4085,4081,1,0,0,0,4085,4082,1,0,0,0,4085,4083,1,0,0,0,4086,
	4087,1,0,0,0,4087,4088,5,118,0,0,4088,4089,5,411,0,0,4089,271,1,0,0,0,4090,
	4099,7,52,0,0,4091,4099,5,75,0,0,4092,4099,5,171,0,0,4093,4099,5,166,0,
	0,4094,4099,5,164,0,0,4095,4099,5,625,0,0,4096,4099,7,53,0,0,4097,4099,
	5,165,0,0,4098,4090,1,0,0,0,4098,4091,1,0,0,0,4098,4092,1,0,0,0,4098,4093,
	1,0,0,0,4098,4094,1,0,0,0,4098,4095,1,0,0,0,4098,4096,1,0,0,0,4098,4097,
	1,0,0,0,4099,273,1,0,0,0,4100,4103,5,1117,0,0,4101,4103,3,276,138,0,4102,
	4100,1,0,0,0,4102,4101,1,0,0,0,4103,4108,1,0,0,0,4104,4105,5,1135,0,0,4105,
	4107,3,276,138,0,4106,4104,1,0,0,0,4107,4110,1,0,0,0,4108,4106,1,0,0,0,
	4108,4109,1,0,0,0,4109,275,1,0,0,0,4110,4108,1,0,0,0,4111,4112,3,550,275,
	0,4112,4113,5,1132,0,0,4113,4114,5,1117,0,0,4114,4141,1,0,0,0,4115,4120,
	3,556,278,0,4116,4118,5,12,0,0,4117,4116,1,0,0,0,4117,4118,1,0,0,0,4118,
	4119,1,0,0,0,4119,4121,3,584,292,0,4120,4117,1,0,0,0,4120,4121,1,0,0,0,
	4121,4141,1,0,0,0,4122,4127,3,648,324,0,4123,4125,5,12,0,0,4124,4123,1,
	0,0,0,4124,4125,1,0,0,0,4125,4126,1,0,0,0,4126,4128,3,584,292,0,4127,4124,
	1,0,0,0,4127,4128,1,0,0,0,4128,4141,1,0,0,0,4129,4130,5,1159,0,0,4130,4132,
	5,1108,0,0,4131,4129,1,0,0,0,4131,4132,1,0,0,0,4132,4133,1,0,0,0,4133,4138,
	3,688,344,0,4134,4136,5,12,0,0,4135,4134,1,0,0,0,4135,4136,1,0,0,0,4136,
	4137,1,0,0,0,4137,4139,3,584,292,0,4138,4135,1,0,0,0,4138,4139,1,0,0,0,
	4139,4141,1,0,0,0,4140,4111,1,0,0,0,4140,4115,1,0,0,0,4140,4122,1,0,0,0,
	4140,4131,1,0,0,0,4141,277,1,0,0,0,4142,4143,5,87,0,0,4143,4148,3,210,105,
	0,4144,4145,5,1135,0,0,4145,4147,3,210,105,0,4146,4144,1,0,0,0,4147,4150,
	1,0,0,0,4148,4146,1,0,0,0,4148,4149,1,0,0,0,4149,4179,1,0,0,0,4150,4148,
	1,0,0,0,4151,4152,5,87,0,0,4152,4153,5,400,0,0,4153,4179,5,1148,0,0,4154,
	4155,5,87,0,0,4155,4156,5,127,0,0,4156,4160,5,1148,0,0,4157,4158,5,25,0,
	0,4158,4159,5,153,0,0,4159,4161,3,568,284,0,4160,4157,1,0,0,0,4160,4161,
	1,0,0,0,4161,4168,1,0,0,0,4162,4164,7,41,0,0,4163,4165,3,280,140,0,4164,
	4163,1,0,0,0,4165,4166,1,0,0,0,4166,4164,1,0,0,0,4166,4167,1,0,0,0,4167,
	4169,1,0,0,0,4168,4162,1,0,0,0,4168,4169,1,0,0,0,4169,4176,1,0,0,0,4170,
	4172,5,101,0,0,4171,4173,3,282,141,0,4172,4171,1,0,0,0,4173,4174,1,0,0,
	0,4174,4172,1,0,0,0,4174,4175,1,0,0,0,4175,4177,1,0,0,0,4176,4170,1,0,0,
	0,4176,4177,1,0,0,0,4177,4179,1,0,0,0,4178,4142,1,0,0,0,4178,4151,1,0,0,
	0,4178,4154,1,0,0,0,4179,279,1,0,0,0,4180,4181,5,173,0,0,4181,4182,5,19,
	0,0,4182,4193,5,1148,0,0,4183,4185,5,122,0,0,4184,4183,1,0,0,0,4184,4185,
	1,0,0,0,4185,4186,1,0,0,0,4186,4187,5,56,0,0,4187,4188,5,19,0,0,4188,4193,
	5,1148,0,0,4189,4190,5,58,0,0,4190,4191,5,19,0,0,4191,4193,5,1148,0,0,4192,
	4180,1,0,0,0,4192,4184,1,0,0,0,4192,4189,1,0,0,0,4193,281,1,0,0,0,4194,
	4195,5,169,0,0,4195,4196,5,19,0,0,4196,4201,5,1148,0,0,4197,4198,5,173,
	0,0,4198,4199,5,19,0,0,4199,4201,5,1148,0,0,4200,4194,1,0,0,0,4200,4197,
	1,0,0,0,4201,283,1,0,0,0,4202,4203,5,68,0,0,4203,4205,3,234,117,0,4204,
	4202,1,0,0,0,4204,4205,1,0,0,0,4205,4208,1,0,0,0,4206,4207,5,190,0,0,4207,
	4209,3,688,344,0,4208,4206,1,0,0,0,4208,4209,1,0,0,0,4209,285,1,0,0,0,4210,
	4211,5,73,0,0,4211,4212,5,19,0,0,4212,4217,3,292,146,0,4213,4214,5,1135,
	0,0,4214,4216,3,292,146,0,4215,4213,1,0,0,0,4216,4219,1,0,0,0,4217,4215,
	1,0,0,0,4217,4218,1,0,0,0,4218,4222,1,0,0,0,4219,4217,1,0,0,0,4220,4221,
	5,192,0,0,4221,4223,5,598,0,0,4222,4220,1,0,0,0,4222,4223,1,0,0,0,4223,
	287,1,0,0,0,4224,4225,5,74,0,0,4225,4226,3,688,344,0,4226,289,1,0,0,0,4227,
	4228,5,676,0,0,4228,4229,3,666,333,0,4229,4230,5,12,0,0,4230,4231,5,1133,
	0,0,4231,4232,3,664,332,0,4232,4242,5,1134,0,0,4233,4234,5,1135,0,0,4234,
	4235,3,666,333,0,4235,4236,5,12,0,0,4236,4237,5,1133,0,0,4237,4238,3,664,
	332,0,4238,4239,5,1134,0,0,4239,4241,1,0,0,0,4240,4233,1,0,0,0,4241,4244,
	1,0,0,0,4242,4240,1,0,0,0,4242,4243,1,0,0,0,4243,291,1,0,0,0,4244,4242,
	1,0,0,0,4245,4247,3,688,344,0,4246,4248,7,48,0,0,4247,4246,1,0,0,0,4247,
	4248,1,0,0,0,4248,293,1,0,0,0,4249,4260,5,99,0,0,4250,4251,3,296,148,0,
	4251,4252,5,1135,0,0,4252,4254,1,0,0,0,4253,4250,1,0,0,0,4253,4254,1,0,
	0,0,4254,4255,1,0,0,0,4255,4261,3,296,148,0,4256,4257,3,296,148,0,4257,
	4258,5,532,0,0,4258,4259,3,296,148,0,4259,4261,1,0,0,0,4260,4253,1,0,0,
	0,4260,4256,1,0,0,0,4261,295,1,0,0,0,4262,4266,3,590,295,0,4263,4266,3,
	566,283,0,4264,4266,3,586,293,0,4265,4262,1,0,0,0,4265,4263,1,0,0,0,4265,
	4264,1,0,0,0,4266,297,1,0,0,0,4267,4268,5,629,0,0,4268,4277,5,653,0,0,4269,
	4274,3,320,160,0,4270,4271,5,1135,0,0,4271,4273,3,320,160,0,4272,4270,1,
	0,0,0,4273,4276,1,0,0,0,4274,4272,1,0,0,0,4274,4275,1,0,0,0,4275,4278,1,
	0,0,0,4276,4274,1,0,0,0,4277,4269,1,0,0,0,4277,4278,1,0,0,0,4278,299,1,
	0,0,0,4279,4281,5,344,0,0,4280,4282,5,678,0,0,4281,4280,1,0,0,0,4281,4282,
	1,0,0,0,4282,301,1,0,0,0,4283,4285,5,369,0,0,4284,4286,5,678,0,0,4285,4284,
	1,0,0,0,4285,4286,1,0,0,0,4286,4292,1,0,0,0,4287,4289,5,10,0,0,4288,4290,
	5,521,0,0,4289,4288,1,0,0,0,4289,4290,1,0,0,0,4290,4291,1,0,0,0,4291,4293,
	5,353,0,0,4292,4287,1,0,0,0,4292,4293,1,0,0,0,4293,4298,1,0,0,0,4294,4296,
	5,521,0,0,4295,4294,1,0,0,0,4295,4296,1,0,0,0,4296,4297,1,0,0,0,4297,4299,
	5,138,0,0,4298,4295,1,0,0,0,4298,4299,1,0,0,0,4299,303,1,0,0,0,4300,4302,
	5,597,0,0,4301,4303,5,678,0,0,4302,4301,1,0,0,0,4302,4303,1,0,0,0,4303,
	4309,1,0,0,0,4304,4306,5,10,0,0,4305,4307,5,521,0,0,4306,4305,1,0,0,0,4306,
	4307,1,0,0,0,4307,4308,1,0,0,0,4308,4310,5,353,0,0,4309,4304,1,0,0,0,4309,
	4310,1,0,0,0,4310,4315,1,0,0,0,4311,4313,5,521,0,0,4312,4311,1,0,0,0,4312,
	4313,1,0,0,0,4313,4314,1,0,0,0,4314,4316,5,138,0,0,4315,4312,1,0,0,0,4315,
	4316,1,0,0,0,4316,305,1,0,0,0,4317,4318,5,604,0,0,4318,4319,3,584,292,0,
	4319,307,1,0,0,0,4320,4322,5,597,0,0,4321,4323,5,678,0,0,4322,4321,1,0,
	0,0,4322,4323,1,0,0,0,4323,4324,1,0,0,0,4324,4326,5,175,0,0,4325,4327,5,
	604,0,0,4326,4325,1,0,0,0,4326,4327,1,0,0,0,4327,4328,1,0,0,0,4328,4329,
	3,584,292,0,4329,309,1,0,0,0,4330,4331,5,138,0,0,4331,4332,5,604,0,0,4332,
	4333,3,584,292,0,4333,311,1,0,0,0,4334,4335,5,103,0,0,4335,4336,7,54,0,
	0,4336,4341,3,322,161,0,4337,4338,5,1135,0,0,4338,4340,3,322,161,0,4339,
	4337,1,0,0,0,4340,4343,1,0,0,0,4341,4339,1,0,0,0,4341,4342,1,0,0,0,4342,
	4345,1,0,0,0,4343,4341,1,0,0,0,4344,4346,3,646,323,0,4345,4344,1,0,0,0,
	4345,4346,1,0,0,0,4346,313,1,0,0,0,4347,4348,5,182,0,0,4348,4349,5,742,
	0,0,4349,315,1,0,0,0,4350,4351,5,153,0,0,4351,4352,5,340,0,0,4352,4353,
	5,1124,0,0,4353,4354,7,24,0,0,4354,317,1,0,0,0,4355,4357,5,153,0,0,4356,
	4358,7,55,0,0,4357,4356,1,0,0,0,4357,4358,1,0,0,0,4358,4359,1,0,0,0,4359,
	4360,5,653,0,0,4360,4365,3,326,163,0,4361,4362,5,1135,0,0,4362,4364,3,326,
	163,0,4363,4361,1,0,0,0,4364,4367,1,0,0,0,4365,4363,1,0,0,0,4365,4366,1,
	0,0,0,4366,319,1,0,0,0,4367,4365,1,0,0,0,4368,4369,5,192,0,0,4369,4370,
	5,377,0,0,4370,4376,5,616,0,0,4371,4372,5,134,0,0,4372,4376,5,193,0,0,4373,
	4374,5,134,0,0,4374,4376,5,538,0,0,4375,4368,1,0,0,0,4375,4371,1,0,0,0,
	4375,4373,1,0,0,0,4376,321,1,0,0,0,4377,4382,3,552,276,0,4378,4380,5,12,
	0,0,4379,4378,1,0,0,0,4379,4380,1,0,0,0,4380,4381,1,0,0,0,4381,4383,3,584,
	292,0,4382,4379,1,0,0,0,4382,4383,1,0,0,0,4383,4384,1,0,0,0,4384,4385,3,
	324,162,0,4385,323,1,0,0,0,4386,4388,5,134,0,0,4387,4389,5,474,0,0,4388,
	4387,1,0,0,0,4388,4389,1,0,0,0,4389,4395,1,0,0,0,4390,4392,5,106,0,0,4391,
	4390,1,0,0,0,4391,4392,1,0,0,0,4392,4393,1,0,0,0,4393,4395,5,193,0,0,4394,
	4386,1,0,0,0,4394,4391,1,0,0,0,4395,325,1,0,0,0,4396,4397,5,464,0,0,4397,
	4398,5,472,0,0,4398,4404,3,328,164,0,4399,4400,5,134,0,0,4400,4404,5,193,
	0,0,4401,4402,5,134,0,0,4402,4404,5,538,0,0,4403,4396,1,0,0,0,4403,4399,
	1,0,0,0,4403,4401,1,0,0,0,4404,327,1,0,0,0,4405,4406,5,799,0,0,4406,4413,
	5,134,0,0,4407,4408,5,134,0,0,4408,4413,5,800,0,0,4409,4410,5,134,0,0,4410,
	4413,5,801,0,0,4411,4413,5,802,0,0,4412,4405,1,0,0,0,4412,4407,1,0,0,0,
	4412,4409,1,0,0,0,4412,4411,1,0,0,0,4413,329,1,0,0,0,4414,4415,5,24,0,0,
	4415,4416,5,477,0,0,4416,4417,5,175,0,0,4417,4422,3,348,174,0,4418,4419,
	5,1135,0,0,4419,4421,3,348,174,0,4420,4418,1,0,0,0,4421,4424,1,0,0,0,4422,
	4420,1,0,0,0,4422,4423,1,0,0,0,4423,4426,1,0,0,0,4424,4422,1,0,0,0,4425,
	4427,3,356,178,0,4426,4425,1,0,0,0,4426,4427,1,0,0,0,4427,331,1,0,0,0,4428,
	4429,5,24,0,0,4429,4430,5,588,0,0,4430,4431,5,429,0,0,4431,4436,3,358,179,
	0,4432,4433,5,1135,0,0,4433,4435,3,358,179,0,4434,4432,1,0,0,0,4435,4438,
	1,0,0,0,4436,4434,1,0,0,0,4436,4437,1,0,0,0,4437,333,1,0,0,0,4438,4436,
	1,0,0,0,4439,4440,5,132,0,0,4440,4441,7,56,0,0,4441,4446,5,476,0,0,4442,
	4443,5,175,0,0,4443,4447,5,1148,0,0,4444,4445,5,15,0,0,4445,4447,5,1148,
	0,0,4446,4442,1,0,0,0,4446,4444,1,0,0,0,4447,335,1,0,0,0,4448,4449,5,589,
	0,0,4449,4450,5,477,0,0,4450,337,1,0,0,0,4451,4452,5,589,0,0,4452,4454,
	5,614,0,0,4453,4455,5,6,0,0,4454,4453,1,0,0,0,4454,4455,1,0,0,0,4455,4457,
	1,0,0,0,4456,4458,3,356,178,0,4457,4456,1,0,0,0,4457,4458,1,0,0,0,4458,
	339,1,0,0,0,4459,4460,5,629,0,0,4460,4469,5,614,0,0,4461,4466,3,362,181,
	0,4462,4463,5,1135,0,0,4463,4465,3,362,181,0,4464,4462,1,0,0,0,4465,4468,
	1,0,0,0,4466,4464,1,0,0,0,4466,4467,1,0,0,0,4467,4470,1,0,0,0,4468,4466,
	1,0,0,0,4469,4461,1,0,0,0,4469,4470,1,0,0,0,4470,4473,1,0,0,0,4471,4472,
	5,663,0,0,4472,4474,3,364,182,0,4473,4471,1,0,0,0,4473,4474,1,0,0,0,4474,
	4478,1,0,0,0,4475,4477,3,366,183,0,4476,4475,1,0,0,0,4477,4480,1,0,0,0,
	4478,4476,1,0,0,0,4478,4479,1,0,0,0,4479,4482,1,0,0,0,4480,4478,1,0,0,0,
	4481,4483,3,356,178,0,4482,4481,1,0,0,0,4482,4483,1,0,0,0,4483,341,1,0,
	0,0,4484,4485,5,635,0,0,4485,4494,5,614,0,0,4486,4491,3,362,181,0,4487,
	4488,5,1135,0,0,4488,4490,3,362,181,0,4489,4487,1,0,0,0,4490,4493,1,0,0,
	0,4491,4489,1,0,0,0,4491,4492,1,0,0,0,4492,4495,1,0,0,0,4493,4491,1,0,0,
	0,4494,4486,1,0,0,0,4494,4495,1,0,0,0,4495,343,1,0,0,0,4496,4497,5,629,
	0,0,4497,4498,5,441,0,0,4498,345,1,0,0,0,4499,4500,5,635,0,0,4500,4501,
	5,441,0,0,4501,347,1,0,0,0,4502,4503,3,350,175,0,4503,4504,5,1124,0,0,4504,
	4505,5,1148,0,0,4505,4532,1,0,0,0,4506,4507,3,352,176,0,4507,4508,5,1124,
	0,0,4508,4509,3,590,295,0,4509,4532,1,0,0,0,4510,4511,3,354,177,0,4511,
	4512,5,1124,0,0,4512,4513,7,24,0,0,4513,4532,1,0,0,0,4514,4515,5,481,0,
	0,4515,4516,5,1124,0,0,4516,4532,5,1151,0,0,4517,4518,5,449,0,0,4518,4519,
	5,1124,0,0,4519,4528,5,1133,0,0,4520,4525,3,584,292,0,4521,4522,5,1135,
	0,0,4522,4524,3,584,292,0,4523,4521,1,0,0,0,4524,4527,1,0,0,0,4525,4523,
	1,0,0,0,4525,4526,1,0,0,0,4526,4529,1,0,0,0,4527,4525,1,0,0,0,4528,4520,
	1,0,0,0,4528,4529,1,0,0,0,4529,4530,1,0,0,0,4530,4532,5,1134,0,0,4531,4502,
	1,0,0,0,4531,4506,1,0,0,0,4531,4510,1,0,0,0,4531,4514,1,0,0,0,4531,4517,
	1,0,0,0,4532,349,1,0,0,0,4533,4534,7,57,0,0,4534,351,1,0,0,0,4535,4536,
	7,58,0,0,4536,353,1,0,0,0,4537,4538,7,59,0,0,4538,355,1,0,0,0,4539,4540,
	5,65,0,0,4540,4541,5,355,0,0,4541,4542,5,1148,0,0,4542,357,1,0,0,0,4543,
	4544,5,581,0,0,4544,4545,5,1124,0,0,4545,4546,5,1133,0,0,4546,4547,3,616,
	308,0,4547,4548,5,1134,0,0,4548,4593,1,0,0,0,4549,4550,5,583,0,0,4550,4551,
	5,1124,0,0,4551,4552,5,1133,0,0,4552,4553,3,616,308,0,4553,4554,5,1134,
	0,0,4554,4593,1,0,0,0,4555,4556,5,582,0,0,4556,4557,5,1124,0,0,4557,4558,
	5,1133,0,0,4558,4559,3,620,310,0,4559,4560,5,1134,0,0,4560,4593,1,0,0,0,
	4561,4562,5,584,0,0,4562,4563,5,1124,0,0,4563,4564,5,1133,0,0,4564,4565,
	3,620,310,0,4565,4566,5,1134,0,0,4566,4593,1,0,0,0,4567,4568,5,586,0,0,
	4568,4569,5,1124,0,0,4569,4570,5,1133,0,0,4570,4571,3,630,315,0,4571,4572,
	5,1134,0,0,4572,4593,1,0,0,0,4573,4574,5,587,0,0,4574,4575,5,1124,0,0,4575,
	4576,5,1133,0,0,4576,4577,3,630,315,0,4577,4578,5,1134,0,0,4578,4593,1,
	0,0,0,4579,4580,5,585,0,0,4580,4581,5,1124,0,0,4581,4582,5,1133,0,0,4582,
	4587,3,360,180,0,4583,4584,5,1135,0,0,4584,4586,3,360,180,0,4585,4583,1,
	0,0,0,4586,4589,1,0,0,0,4587,4585,1,0,0,0,4587,4588,1,0,0,0,4588,4590,1,
	0,0,0,4589,4587,1,0,0,0,4590,4591,5,1134,0,0,4591,4593,1,0,0,0,4592,4543,
	1,0,0,0,4592,4549,1,0,0,0,4592,4555,1,0,0,0,4592,4561,1,0,0,0,4592,4567,
	1,0,0,0,4592,4573,1,0,0,0,4592,4579,1,0,0,0,4593,359,1,0,0,0,4594,4595,
	5,1133,0,0,4595,4596,3,552,276,0,4596,4597,5,1135,0,0,4597,4598,3,552,276,
	0,4598,4599,5,1134,0,0,4599,361,1,0,0,0,4600,4601,7,60,0,0,4601,363,1,0,
	0,0,4602,4603,7,61,0,0,4603,4604,5,1124,0,0,4604,4621,3,368,184,0,4605,
	4606,5,483,0,0,4606,4607,5,1124,0,0,4607,4608,5,1148,0,0,4608,4609,5,1135,
	0,0,4609,4610,5,484,0,0,4610,4611,5,1124,0,0,4611,4621,3,590,295,0,4612,
	4613,5,575,0,0,4613,4614,5,1124,0,0,4614,4615,5,1148,0,0,4615,4616,5,1135,
	0,0,4616,4617,5,576,0,0,4617,4618,5,1124,0,0,4618,4621,3,590,295,0,4619,
	4621,5,623,0,0,4620,4602,1,0,0,0,4620,4605,1,0,0,0,4620,4612,1,0,0,0,4620,
	4619,1,0,0,0,4621,365,1,0,0,0,4622,4623,5,665,0,0,4623,4624,5,1124,0,0,
	4624,4635,5,1148,0,0,4625,4626,5,551,0,0,4626,4627,5,1124,0,0,4627,4635,
	5,1148,0,0,4628,4629,5,391,0,0,4629,4630,5,1124,0,0,4630,4635,5,1148,0,
	0,4631,4632,5,555,0,0,4632,4633,5,1124,0,0,4633,4635,5,1148,0,0,4634,4622,
	1,0,0,0,4634,4625,1,0,0,0,4634,4628,1,0,0,0,4634,4631,1,0,0,0,4635,367,
	1,0,0,0,4636,4641,3,576,288,0,4637,4638,5,1135,0,0,4638,4640,3,576,288,
	0,4639,4637,1,0,0,0,4640,4643,1,0,0,0,4641,4639,1,0,0,0,4641,4642,1,0,0,
	0,4642,4646,1,0,0,0,4643,4641,1,0,0,0,4644,4646,5,1148,0,0,4645,4636,1,
	0,0,0,4645,4644,1,0,0,0,4646,369,1,0,0,0,4647,4648,5,681,0,0,4648,4649,
	7,62,0,0,4649,4651,3,578,289,0,4650,4652,7,63,0,0,4651,4650,1,0,0,0,4651,
	4652,1,0,0,0,4652,371,1,0,0,0,4653,4654,5,681,0,0,4654,4655,5,407,0,0,4655,
	4661,3,578,289,0,4656,4659,5,643,0,0,4657,4658,5,65,0,0,4658,4660,5,509,
	0,0,4659,4657,1,0,0,0,4659,4660,1,0,0,0,4660,4662,1,0,0,0,4661,4656,1,0,
	0,0,4661,4662,1,0,0,0,4662,373,1,0,0,0,4663,4664,5,681,0,0,4664,4665,5,
	560,0,0,4665,4666,3,578,289,0,4666,375,1,0,0,0,4667,4668,5,681,0,0,4668,
	4669,5,369,0,0,4669,4672,3,578,289,0,4670,4671,5,536,0,0,4671,4673,5,553,
	0,0,4672,4670,1,0,0,0,4672,4673,1,0,0,0,4673,377,1,0,0,0,4674,4675,5,681,
	0,0,4675,4676,5,597,0,0,4676,4677,3,578,289,0,4677,379,1,0,0,0,4678,4679,
	5,681,0,0,4679,4682,5,570,0,0,4680,4681,5,32,0,0,4681,4683,3,578,289,0,
	4682,4680,1,0,0,0,4682,4683,1,0,0,0,4683,381,1,0,0,0,4684,4685,5,560,0,
	0,4685,4686,3,584,292,0,4686,4689,5,68,0,0,4687,4690,5,1148,0,0,4688,4690,
	5,1159,0,0,4689,4687,1,0,0,0,4689,4688,1,0,0,0,4690,383,1,0,0,0,4691,4692,
	5,708,0,0,4692,4695,3,584,292,0,4693,4694,5,187,0,0,4694,4696,3,632,316,
	0,4695,4693,1,0,0,0,4695,4696,1,0,0,0,4696,385,1,0,0,0,4697,4698,7,64,0,
	0,4698,4699,5,560,0,0,4699,4700,3,584,292,0,4700,387,1,0,0,0,4701,4704,
	3,390,195,0,4702,4704,3,4,2,0,4703,4701,1,0,0,0,4703,4702,1,0,0,0,4704,
	389,1,0,0,0,4705,4706,3,584,292,0,4706,4707,5,1144,0,0,4707,4709,1,0,0,
	0,4708,4705,1,0,0,0,4708,4709,1,0,0,0,4709,4710,1,0,0,0,4710,4716,5,344,
	0,0,4711,4712,3,410,205,0,4712,4713,5,1136,0,0,4713,4715,1,0,0,0,4714,4711,
	1,0,0,0,4715,4718,1,0,0,0,4716,4714,1,0,0,0,4716,4717,1,0,0,0,4717,4724,
	1,0,0,0,4718,4716,1,0,0,0,4719,4720,3,412,206,0,4720,4721,5,1136,0,0,4721,
	4723,1,0,0,0,4722,4719,1,0,0,0,4723,4726,1,0,0,0,4724,4722,1,0,0,0,4724,
	4725,1,0,0,0,4725,4732,1,0,0,0,4726,4724,1,0,0,0,4727,4728,3,414,207,0,
	4728,4729,5,1136,0,0,4729,4731,1,0,0,0,4730,4727,1,0,0,0,4731,4734,1,0,
	0,0,4732,4730,1,0,0,0,4732,4733,1,0,0,0,4733,4740,1,0,0,0,4734,4732,1,0,
	0,0,4735,4736,3,416,208,0,4736,4737,5,1136,0,0,4737,4739,1,0,0,0,4738,4735,
	1,0,0,0,4739,4742,1,0,0,0,4740,4738,1,0,0,0,4740,4741,1,0,0,0,4741,4746,
	1,0,0,0,4742,4740,1,0,0,0,4743,4745,3,420,210,0,4744,4743,1,0,0,0,4745,
	4748,1,0,0,0,4746,4744,1,0,0,0,4746,4747,1,0,0,0,4747,4749,1,0,0,0,4748,
	4746,1,0,0,0,4749,4751,5,407,0,0,4750,4752,3,584,292,0,4751,4750,1,0,0,
	0,4751,4752,1,0,0,0,4752,391,1,0,0,0,4753,4756,5,22,0,0,4754,4757,3,584,
	292,0,4755,4757,3,688,344,0,4756,4754,1,0,0,0,4756,4755,1,0,0,0,4756,4757,
	1,0,0,0,4757,4759,1,0,0,0,4758,4760,3,422,211,0,4759,4758,1,0,0,0,4760,
	4761,1,0,0,0,4761,4759,1,0,0,0,4761,4762,1,0,0,0,4762,4769,1,0,0,0,4763,
	4765,5,53,0,0,4764,4766,3,420,210,0,4765,4764,1,0,0,0,4766,4767,1,0,0,0,
	4767,4765,1,0,0,0,4767,4768,1,0,0,0,4768,4770,1,0,0,0,4769,4763,1,0,0,0,
	4769,4770,1,0,0,0,4770,4771,1,0,0,0,4771,4772,5,407,0,0,4772,4773,5,22,
	0,0,4773,393,1,0,0,0,4774,4775,5,77,0,0,4775,4776,3,688,344,0,4776,4778,
	5,174,0,0,4777,4779,3,420,210,0,4778,4777,1,0,0,0,4779,4780,1,0,0,0,4780,
	4778,1,0,0,0,4780,4781,1,0,0,0,4781,4785,1,0,0,0,4782,4784,3,424,212,0,
	4783,4782,1,0,0,0,4784,4787,1,0,0,0,4785,4783,1,0,0,0,4785,4786,1,0,0,0,
	4786,4794,1,0,0,0,4787,4785,1,0,0,0,4788,4790,5,53,0,0,4789,4791,3,420,
	210,0,4790,4789,1,0,0,0,4791,4792,1,0,0,0,4792,4790,1,0,0,0,4792,4793,1,
	0,0,0,4793,4795,1,0,0,0,4794,4788,1,0,0,0,4794,4795,1,0,0,0,4795,4796,1,
	0,0,0,4796,4797,5,407,0,0,4797,4798,5,77,0,0,4798,395,1,0,0,0,4799,4800,
	5,89,0,0,4800,4801,3,584,292,0,4801,397,1,0,0,0,4802,4803,5,96,0,0,4803,
	4804,3,584,292,0,4804,399,1,0,0,0,4805,4806,3,584,292,0,4806,4807,5,1144,
	0,0,4807,4809,1,0,0,0,4808,4805,1,0,0,0,4808,4809,1,0,0,0,4809,4810,1,0,
	0,0,4810,4812,5,105,0,0,4811,4813,3,420,210,0,4812,4811,1,0,0,0,4813,4814,
	1,0,0,0,4814,4812,1,0,0,0,4814,4815,1,0,0,0,4815,4816,1,0,0,0,4816,4817,
	5,407,0,0,4817,4819,5,105,0,0,4818,4820,3,584,292,0,4819,4818,1,0,0,0,4819,
	4820,1,0,0,0,4820,401,1,0,0,0,4821,4822,3,584,292,0,4822,4823,5,1144,0,
	0,4823,4825,1,0,0,0,4824,4821,1,0,0,0,4824,4825,1,0,0,0,4825,4826,1,0,0,
	0,4826,4828,5,140,0,0,4827,4829,3,420,210,0,4828,4827,1,0,0,0,4829,4830,
	1,0,0,0,4830,4828,1,0,0,0,4830,4831,1,0,0,0,4831,4832,1,0,0,0,4832,4833,
	5,663,0,0,4833,4834,3,688,344,0,4834,4835,5,407,0,0,4835,4837,5,140,0,0,
	4836,4838,3,584,292,0,4837,4836,1,0,0,0,4837,4838,1,0,0,0,4838,403,1,0,
	0,0,4839,4840,5,146,0,0,4840,4841,3,688,344,0,4841,405,1,0,0,0,4842,4843,
	3,584,292,0,4843,4844,5,1144,0,0,4844,4846,1,0,0,0,4845,4842,1,0,0,0,4845,
	4846,1,0,0,0,4846,4847,1,0,0,0,4847,4848,5,191,0,0,4848,4849,3,688,344,
	0,4849,4851,5,399,0,0,4850,4852,3,420,210,0,4851,4850,1,0,0,0,4852,4853,
	1,0,0,0,4853,4851,1,0,0,0,4853,4854,1,0,0,0,4854,4855,1,0,0,0,4855,4856,
	5,407,0,0,4856,4858,5,191,0,0,4857,4859,3,584,292,0,4858,4857,1,0,0,0,4858,
	4859,1,0,0,0,4859,407,1,0,0,0,4860,4861,5,361,0,0,4861,4876,3,584,292,0,
	4862,4867,5,64,0,0,4863,4865,5,520,0,0,4864,4863,1,0,0,0,4864,4865,1,0,
	0,0,4865,4866,1,0,0,0,4866,4868,5,68,0,0,4867,4864,1,0,0,0,4867,4868,1,
	0,0,0,4868,4869,1,0,0,0,4869,4870,3,584,292,0,4870,4871,5,87,0,0,4871,4872,
	3,616,308,0,4872,4876,1,0,0,0,4873,4874,5,539,0,0,4874,4876,3,584,292,0,
	4875,4860,1,0,0,0,4875,4862,1,0,0,0,4875,4873,1,0,0,0,4876,409,1,0,0,0,
	4877,4878,5,41,0,0,4878,4879,3,616,308,0,4879,4882,3,604,302,0,4880,4881,
	5,42,0,0,4881,4883,3,688,344,0,4882,4880,1,0,0,0,4882,4883,1,0,0,0,4883,
	411,1,0,0,0,4884,4885,5,41,0,0,4885,4886,3,584,292,0,4886,4887,5,29,0,0,
	4887,4894,5,65,0,0,4888,4895,3,590,295,0,4889,4891,5,162,0,0,4890,4892,
	5,669,0,0,4891,4890,1,0,0,0,4891,4892,1,0,0,0,4892,4893,1,0,0,0,4893,4895,
	5,1148,0,0,4894,4888,1,0,0,0,4894,4889,1,0,0,0,4895,413,1,0,0,0,4896,4897,
	5,41,0,0,4897,4898,3,584,292,0,4898,4899,5,38,0,0,4899,4900,5,65,0,0,4900,
	4901,3,200,100,0,4901,415,1,0,0,0,4902,4903,5,41,0,0,4903,4904,7,65,0,0,
	4904,4905,5,442,0,0,4905,4906,5,65,0,0,4906,4911,3,418,209,0,4907,4908,
	5,1135,0,0,4908,4910,3,418,209,0,4909,4907,1,0,0,0,4910,4913,1,0,0,0,4911,
	4909,1,0,0,0,4911,4912,1,0,0,0,4912,4914,1,0,0,0,4913,4911,1,0,0,0,4914,
	4915,3,388,194,0,4915,417,1,0,0,0,4916,4928,3,590,295,0,4917,4919,5,162,
	0,0,4918,4920,5,669,0,0,4919,4918,1,0,0,0,4919,4920,1,0,0,0,4920,4921,1,
	0,0,0,4921,4928,5,1148,0,0,4922,4928,3,584,292,0,4923,4928,5,163,0,0,4924,
	4925,5,114,0,0,4925,4928,5,435,0,0,4926,4928,5,161,0,0,4927,4916,1,0,0,
	0,4927,4917,1,0,0,0,4927,4922,1,0,0,0,4927,4923,1,0,0,0,4927,4924,1,0,0,
	0,4927,4926,1,0,0,0,4928,419,1,0,0,0,4929,4932,3,18,9,0,4930,4932,3,4,2,
	0,4931,4929,1,0,0,0,4931,4930,1,0,0,0,4932,4933,1,0,0,0,4933,4934,5,1136,
	0,0,4934,421,1,0,0,0,4935,4938,5,189,0,0,4936,4939,3,602,301,0,4937,4939,
	3,688,344,0,4938,4936,1,0,0,0,4938,4937,1,0,0,0,4939,4940,1,0,0,0,4940,
	4942,5,174,0,0,4941,4943,3,420,210,0,4942,4941,1,0,0,0,4943,4944,1,0,0,
	0,4944,4942,1,0,0,0,4944,4945,1,0,0,0,4945,423,1,0,0,0,4946,4947,5,54,0,
	0,4947,4948,3,688,344,0,4948,4950,5,174,0,0,4949,4951,3,420,210,0,4950,
	4949,1,0,0,0,4951,4952,1,0,0,0,4952,4950,1,0,0,0,4952,4953,1,0,0,0,4953,
	425,1,0,0,0,4954,4955,5,7,0,0,4955,4956,5,665,0,0,4956,4961,3,446,223,0,
	4957,4958,5,1135,0,0,4958,4960,3,446,223,0,4959,4957,1,0,0,0,4960,4963,
	1,0,0,0,4961,4959,1,0,0,0,4961,4962,1,0,0,0,4962,5028,1,0,0,0,4963,4961,
	1,0,0,0,4964,4965,5,7,0,0,4965,4967,5,665,0,0,4966,4968,3,640,320,0,4967,
	4966,1,0,0,0,4967,4968,1,0,0,0,4968,4969,1,0,0,0,4969,4974,3,448,224,0,
	4970,4971,5,1135,0,0,4971,4973,3,448,224,0,4972,4970,1,0,0,0,4973,4976,
	1,0,0,0,4974,4972,1,0,0,0,4974,4975,1,0,0,0,4975,4991,1,0,0,0,4976,4974,
	1,0,0,0,4977,4989,5,142,0,0,4978,4990,5,529,0,0,4979,4986,3,454,227,0,4980,
	4982,5,10,0,0,4981,4980,1,0,0,0,4981,4982,1,0,0,0,4982,4983,1,0,0,0,4983,
	4985,3,454,227,0,4984,4981,1,0,0,0,4985,4988,1,0,0,0,4986,4984,1,0,0,0,
	4986,4987,1,0,0,0,4987,4990,1,0,0,0,4988,4986,1,0,0,0,4989,4978,1,0,0,0,
	4989,4979,1,0,0,0,4990,4992,1,0,0,0,4991,4977,1,0,0,0,4991,4992,1,0,0,0,
	4992,4999,1,0,0,0,4993,4995,5,192,0,0,4994,4996,3,456,228,0,4995,4994,1,
	0,0,0,4996,4997,1,0,0,0,4997,4995,1,0,0,0,4997,4998,1,0,0,0,4998,5000,1,
	0,0,0,4999,4993,1,0,0,0,4999,5000,1,0,0,0,5000,5005,1,0,0,0,5001,5004,3,
	458,229,0,5002,5004,3,460,230,0,5003,5001,1,0,0,0,5003,5002,1,0,0,0,5004,
	5007,1,0,0,0,5005,5003,1,0,0,0,5005,5006,1,0,0,0,5006,5012,1,0,0,0,5007,
	5005,1,0,0,0,5008,5009,5,368,0,0,5009,5013,5,1148,0,0,5010,5011,5,14,0,
	0,5011,5013,5,1148,0,0,5012,5008,1,0,0,0,5012,5010,1,0,0,0,5012,5013,1,
	0,0,0,5013,5028,1,0,0,0,5014,5015,5,7,0,0,5015,5017,5,665,0,0,5016,5018,
	3,640,320,0,5017,5016,1,0,0,0,5017,5018,1,0,0,0,5018,5021,1,0,0,0,5019,
	5022,3,564,282,0,5020,5022,3,584,292,0,5021,5019,1,0,0,0,5021,5020,1,0,
	0,0,5022,5023,1,0,0,0,5023,5024,5,42,0,0,5024,5025,5,596,0,0,5025,5026,
	3,434,217,0,5026,5028,1,0,0,0,5027,4954,1,0,0,0,5027,4964,1,0,0,0,5027,
	5014,1,0,0,0,5028,427,1,0,0,0,5029,5030,5,33,0,0,5030,5031,5,665,0,0,5031,
	5036,3,448,224,0,5032,5033,5,1135,0,0,5033,5035,3,448,224,0,5034,5032,1,
	0,0,0,5035,5038,1,0,0,0,5036,5034,1,0,0,0,5036,5037,1,0,0,0,5037,5095,1,
	0,0,0,5038,5036,1,0,0,0,5039,5040,5,33,0,0,5040,5042,5,665,0,0,5041,5043,
	3,642,321,0,5042,5041,1,0,0,0,5042,5043,1,0,0,0,5043,5044,1,0,0,0,5044,
	5049,3,448,224,0,5045,5046,5,1135,0,0,5046,5048,3,448,224,0,5047,5045,1,
	0,0,0,5048,5051,1,0,0,0,5049,5047,1,0,0,0,5049,5050,1,0,0,0,5050,5055,1,
	0,0,0,5051,5049,1,0,0,0,5052,5053,5,42,0,0,5053,5054,5,596,0,0,5054,5056,
	3,434,217,0,5055,5052,1,0,0,0,5055,5056,1,0,0,0,5056,5071,1,0,0,0,5057,
	5069,5,142,0,0,5058,5070,5,529,0,0,5059,5066,3,454,227,0,5060,5062,5,10,
	0,0,5061,5060,1,0,0,0,5061,5062,1,0,0,0,5062,5063,1,0,0,0,5063,5065,3,454,
	227,0,5064,5061,1,0,0,0,5065,5068,1,0,0,0,5066,5064,1,0,0,0,5066,5067,1,
	0,0,0,5067,5070,1,0,0,0,5068,5066,1,0,0,0,5069,5058,1,0,0,0,5069,5059,1,
	0,0,0,5070,5072,1,0,0,0,5071,5057,1,0,0,0,5071,5072,1,0,0,0,5072,5079,1,
	0,0,0,5073,5075,5,192,0,0,5074,5076,3,456,228,0,5075,5074,1,0,0,0,5076,
	5077,1,0,0,0,5077,5075,1,0,0,0,5077,5078,1,0,0,0,5078,5080,1,0,0,0,5079,
	5073,1,0,0,0,5079,5080,1,0,0,0,5080,5085,1,0,0,0,5081,5084,3,458,229,0,
	5082,5084,3,460,230,0,5083,5081,1,0,0,0,5083,5082,1,0,0,0,5084,5087,1,0,
	0,0,5085,5083,1,0,0,0,5085,5086,1,0,0,0,5086,5092,1,0,0,0,5087,5085,1,0,
	0,0,5088,5089,5,368,0,0,5089,5093,5,1148,0,0,5090,5091,5,14,0,0,5091,5093,
	5,1148,0,0,5092,5088,1,0,0,0,5092,5090,1,0,0,0,5092,5093,1,0,0,0,5093,5095,
	1,0,0,0,5094,5029,1,0,0,0,5094,5039,1,0,0,0,5095,429,1,0,0,0,5096,5097,
	5,51,0,0,5097,5099,5,665,0,0,5098,5100,3,640,320,0,5099,5098,1,0,0,0,5099,
	5100,1,0,0,0,5100,5101,1,0,0,0,5101,5106,3,564,282,0,5102,5103,5,1135,0,
	0,5103,5105,3,564,282,0,5104,5102,1,0,0,0,5105,5108,1,0,0,0,5106,5104,1,
	0,0,0,5106,5107,1,0,0,0,5107,431,1,0,0,0,5108,5106,1,0,0,0,5109,5110,5,
	72,0,0,5110,5115,3,462,231,0,5111,5112,5,1135,0,0,5112,5114,3,462,231,0,
	5113,5111,1,0,0,0,5114,5117,1,0,0,0,5115,5113,1,0,0,0,5115,5116,1,0,0,0,
	5116,5118,1,0,0,0,5117,5115,1,0,0,0,5118,5120,5,118,0,0,5119,5121,7,66,
	0,0,5120,5119,1,0,0,0,5120,5121,1,0,0,0,5121,5122,1,0,0,0,5122,5123,3,466,
	233,0,5123,5124,5,175,0,0,5124,5129,3,448,224,0,5125,5126,5,1135,0,0,5126,
	5128,3,448,224,0,5127,5125,1,0,0,0,5128,5131,1,0,0,0,5129,5127,1,0,0,0,
	5129,5130,1,0,0,0,5130,5146,1,0,0,0,5131,5129,1,0,0,0,5132,5144,5,142,0,
	0,5133,5145,5,529,0,0,5134,5141,3,454,227,0,5135,5137,5,10,0,0,5136,5135,
	1,0,0,0,5136,5137,1,0,0,0,5137,5138,1,0,0,0,5138,5140,3,454,227,0,5139,
	5136,1,0,0,0,5140,5143,1,0,0,0,5141,5139,1,0,0,0,5141,5142,1,0,0,0,5142,
	5145,1,0,0,0,5143,5141,1,0,0,0,5144,5133,1,0,0,0,5144,5134,1,0,0,0,5145,
	5147,1,0,0,0,5146,5132,1,0,0,0,5146,5147,1,0,0,0,5147,5157,1,0,0,0,5148,
	5154,5,192,0,0,5149,5150,5,72,0,0,5150,5153,5,120,0,0,5151,5153,3,456,228,
	0,5152,5149,1,0,0,0,5152,5151,1,0,0,0,5153,5156,1,0,0,0,5154,5152,1,0,0,
	0,5154,5155,1,0,0,0,5155,5158,1,0,0,0,5156,5154,1,0,0,0,5157,5148,1,0,0,
	0,5157,5158,1,0,0,0,5158,5165,1,0,0,0,5159,5160,5,12,0,0,5160,5161,3,564,
	282,0,5161,5162,5,192,0,0,5162,5163,5,596,0,0,5163,5164,3,434,217,0,5164,
	5166,1,0,0,0,5165,5159,1,0,0,0,5165,5166,1,0,0,0,5166,5203,1,0,0,0,5167,
	5170,5,72,0,0,5168,5171,3,564,282,0,5169,5171,3,584,292,0,5170,5168,1,0,
	0,0,5170,5169,1,0,0,0,5171,5179,1,0,0,0,5172,5175,5,1135,0,0,5173,5176,
	3,564,282,0,5174,5176,3,584,292,0,5175,5173,1,0,0,0,5175,5174,1,0,0,0,5176,
	5178,1,0,0,0,5177,5172,1,0,0,0,5178,5181,1,0,0,0,5179,5177,1,0,0,0,5179,
	5180,1,0,0,0,5180,5182,1,0,0,0,5181,5179,1,0,0,0,5182,5185,5,175,0,0,5183,
	5186,3,564,282,0,5184,5186,3,584,292,0,5185,5183,1,0,0,0,5185,5184,1,0,
	0,0,5186,5194,1,0,0,0,5187,5190,5,1135,0,0,5188,5191,3,564,282,0,5189,5191,
	3,584,292,0,5190,5188,1,0,0,0,5190,5189,1,0,0,0,5191,5193,1,0,0,0,5192,
	5187,1,0,0,0,5193,5196,1,0,0,0,5194,5192,1,0,0,0,5194,5195,1,0,0,0,5195,
	5200,1,0,0,0,5196,5194,1,0,0,0,5197,5198,5,192,0,0,5198,5199,5,697,0,0,
	5199,5201,5,120,0,0,5200,5197,1,0,0,0,5200,5201,1,0,0,0,5201,5203,1,0,0,
	0,5202,5109,1,0,0,0,5202,5167,1,0,0,0,5203,433,1,0,0,0,5204,5227,5,42,0,
	0,5205,5227,5,529,0,0,5206,5216,5,6,0,0,5207,5208,5,59,0,0,5208,5213,3,
	564,282,0,5209,5210,5,1135,0,0,5210,5212,3,564,282,0,5211,5209,1,0,0,0,
	5212,5215,1,0,0,0,5213,5211,1,0,0,0,5213,5214,1,0,0,0,5214,5217,1,0,0,0,
	5215,5213,1,0,0,0,5216,5207,1,0,0,0,5216,5217,1,0,0,0,5217,5227,1,0,0,0,
	5218,5223,3,564,282,0,5219,5220,5,1135,0,0,5220,5222,3,564,282,0,5221,5219,
	1,0,0,0,5222,5225,1,0,0,0,5223,5221,1,0,0,0,5223,5224,1,0,0,0,5224,5227,
	1,0,0,0,5225,5223,1,0,0,0,5226,5204,1,0,0,0,5226,5205,1,0,0,0,5226,5206,
	1,0,0,0,5226,5218,1,0,0,0,5227,435,1,0,0,0,5228,5229,5,72,0,0,5229,5230,
	5,566,0,0,5230,5231,5,118,0,0,5231,5232,3,564,282,0,5232,5233,5,175,0,0,
	5233,5238,3,564,282,0,5234,5235,5,1135,0,0,5235,5237,3,564,282,0,5236,5234,
	1,0,0,0,5237,5240,1,0,0,0,5238,5236,1,0,0,0,5238,5239,1,0,0,0,5239,5244,
	1,0,0,0,5240,5238,1,0,0,0,5241,5242,5,192,0,0,5242,5243,5,72,0,0,5243,5245,
	5,120,0,0,5244,5241,1,0,0,0,5244,5245,1,0,0,0,5245,437,1,0,0,0,5246,5247,
	5,139,0,0,5247,5248,5,665,0,0,5248,5253,3,468,234,0,5249,5250,5,1135,0,
	0,5250,5252,3,468,234,0,5251,5249,1,0,0,0,5252,5255,1,0,0,0,5253,5251,1,
	0,0,0,5253,5254,1,0,0,0,5254,439,1,0,0,0,5255,5253,1,0,0,0,5256,5257,5,
	147,0,0,5257,5262,3,462,231,0,5258,5259,5,1135,0,0,5259,5261,3,462,231,
	0,5260,5258,1,0,0,0,5261,5264,1,0,0,0,5262,5260,1,0,0,0,5262,5263,1,0,0,
	0,5263,5265,1,0,0,0,5264,5262,1,0,0,0,5265,5267,5,118,0,0,5266,5268,7,66,
	0,0,5267,5266,1,0,0,0,5267,5268,1,0,0,0,5268,5269,1,0,0,0,5269,5270,3,466,
	233,0,5270,5271,5,68,0,0,5271,5276,3,564,282,0,5272,5273,5,1135,0,0,5273,
	5275,3,564,282,0,5274,5272,1,0,0,0,5275,5278,1,0,0,0,5276,5274,1,0,0,0,
	5276,5277,1,0,0,0,5277,5327,1,0,0,0,5278,5276,1,0,0,0,5279,5280,5,147,0,
	0,5280,5282,5,6,0,0,5281,5283,5,725,0,0,5282,5281,1,0,0,0,5282,5283,1,0,
	0,0,5283,5284,1,0,0,0,5284,5285,5,1135,0,0,5285,5286,5,72,0,0,5286,5287,
	5,120,0,0,5287,5288,5,68,0,0,5288,5293,3,564,282,0,5289,5290,5,1135,0,0,
	5290,5292,3,564,282,0,5291,5289,1,0,0,0,5292,5295,1,0,0,0,5293,5291,1,0,
	0,0,5293,5294,1,0,0,0,5294,5327,1,0,0,0,5295,5293,1,0,0,0,5296,5299,5,147,
	0,0,5297,5300,3,564,282,0,5298,5300,3,584,292,0,5299,5297,1,0,0,0,5299,
	5298,1,0,0,0,5300,5308,1,0,0,0,5301,5304,5,1135,0,0,5302,5305,3,564,282,
	0,5303,5305,3,584,292,0,5304,5302,1,0,0,0,5304,5303,1,0,0,0,5305,5307,1,
	0,0,0,5306,5301,1,0,0,0,5307,5310,1,0,0,0,5308,5306,1,0,0,0,5308,5309,1,
	0,0,0,5309,5311,1,0,0,0,5310,5308,1,0,0,0,5311,5314,5,68,0,0,5312,5315,
	3,564,282,0,5313,5315,3,584,292,0,5314,5312,1,0,0,0,5314,5313,1,0,0,0,5315,
	5323,1,0,0,0,5316,5319,5,1135,0,0,5317,5320,3,564,282,0,5318,5320,3,584,
	292,0,5319,5317,1,0,0,0,5319,5318,1,0,0,0,5320,5322,1,0,0,0,5321,5316,1,
	0,0,0,5322,5325,1,0,0,0,5323,5321,1,0,0,0,5323,5324,1,0,0,0,5324,5327,1,
	0,0,0,5325,5323,1,0,0,0,5326,5256,1,0,0,0,5326,5279,1,0,0,0,5326,5296,1,
	0,0,0,5327,441,1,0,0,0,5328,5329,5,147,0,0,5329,5330,5,566,0,0,5330,5331,
	5,118,0,0,5331,5332,3,564,282,0,5332,5333,5,68,0,0,5333,5338,3,564,282,
	0,5334,5335,5,1135,0,0,5335,5337,3,564,282,0,5336,5334,1,0,0,0,5337,5340,
	1,0,0,0,5338,5336,1,0,0,0,5338,5339,1,0,0,0,5339,443,1,0,0,0,5340,5338,
	1,0,0,0,5341,5342,5,153,0,0,5342,5345,5,551,0,0,5343,5344,5,65,0,0,5344,
	5346,3,564,282,0,5345,5343,1,0,0,0,5345,5346,1,0,0,0,5346,5347,1,0,0,0,
	5347,5350,5,1124,0,0,5348,5351,3,682,341,0,5349,5351,5,1148,0,0,5350,5348,
	1,0,0,0,5350,5349,1,0,0,0,5351,445,1,0,0,0,5352,5353,3,564,282,0,5353,5354,
	3,458,229,0,5354,447,1,0,0,0,5355,5356,3,564,282,0,5356,5357,5,448,0,0,
	5357,5358,5,19,0,0,5358,5359,5,551,0,0,5359,5360,5,1148,0,0,5360,5381,1,
	0,0,0,5361,5362,3,564,282,0,5362,5363,5,448,0,0,5363,5364,5,19,0,0,5364,
	5365,5,991,0,0,5365,5366,5,551,0,0,5366,5367,3,450,225,0,5367,5381,1,0,
	0,0,5368,5369,3,564,282,0,5369,5370,5,448,0,0,5370,5371,5,19,0,0,5371,5372,
	5,1148,0,0,5372,5373,3,450,225,0,5373,5381,1,0,0,0,5374,5375,3,564,282,
	0,5375,5376,5,448,0,0,5376,5377,5,192,0,0,5377,5378,3,452,226,0,5378,5381,
	1,0,0,0,5379,5381,3,564,282,0,5380,5355,1,0,0,0,5380,5361,1,0,0,0,5380,
	5368,1,0,0,0,5380,5374,1,0,0,0,5380,5379,1,0,0,0,5381,449,1,0,0,0,5382,
	5383,5,141,0,0,5383,5385,5,1148,0,0,5384,5382,1,0,0,0,5384,5385,1,0,0,0,
	5385,5389,1,0,0,0,5386,5387,5,145,0,0,5387,5388,5,35,0,0,5388,5390,5,551,
	0,0,5389,5386,1,0,0,0,5389,5390,1,0,0,0,5390,451,1,0,0,0,5391,5399,3,582,
	291,0,5392,5396,7,67,0,0,5393,5397,5,1148,0,0,5394,5395,5,991,0,0,5395,
	5397,5,551,0,0,5396,5393,1,0,0,0,5396,5394,1,0,0,0,5397,5398,1,0,0,0,5398,
	5400,3,450,225,0,5399,5392,1,0,0,0,5399,5400,1,0,0,0,5400,5406,1,0,0,0,
	5401,5402,3,582,291,0,5402,5403,5,187,0,0,5403,5404,3,682,341,0,5404,5406,
	1,0,0,0,5405,5391,1,0,0,0,5405,5401,1,0,0,0,5406,453,1,0,0,0,5407,5416,
	5,167,0,0,5408,5416,5,680,0,0,5409,5410,5,358,0,0,5410,5416,5,1148,0,0,
	5411,5412,5,465,0,0,5412,5416,5,1148,0,0,5413,5414,5,640,0,0,5414,5416,
	5,1148,0,0,5415,5407,1,0,0,0,5415,5408,1,0,0,0,5415,5409,1,0,0,0,5415,5411,
	1,0,0,0,5415,5413,1,0,0,0,5416,455,1,0,0,0,5417,5418,5,499,0,0,5418,5426,
	3,590,295,0,5419,5420,5,502,0,0,5420,5426,3,590,295,0,5421,5422,5,498,0,
	0,5422,5426,3,590,295,0,5423,5424,5,503,0,0,5424,5426,3,590,295,0,5425,
	5417,1,0,0,0,5425,5419,1,0,0,0,5425,5421,1,0,0,0,5425,5423,1,0,0,0,5426,
	457,1,0,0,0,5427,5428,5,551,0,0,5428,5435,5,420,0,0,5429,5436,5,42,0,0,
	5430,5436,5,519,0,0,5431,5432,5,86,0,0,5432,5433,3,590,295,0,5433,5434,
	5,691,0,0,5434,5436,1,0,0,0,5435,5429,1,0,0,0,5435,5430,1,0,0,0,5435,5431,
	1,0,0,0,5435,5436,1,0,0,0,5436,5466,1,0,0,0,5437,5438,5,551,0,0,5438,5441,
	5,445,0,0,5439,5442,5,42,0,0,5440,5442,3,590,295,0,5441,5439,1,0,0,0,5441,
	5440,1,0,0,0,5442,5466,1,0,0,0,5443,5444,5,551,0,0,5444,5445,5,595,0,0,
	5445,5450,5,86,0,0,5446,5451,5,42,0,0,5447,5448,3,590,295,0,5448,5449,5,
	691,0,0,5449,5451,1,0,0,0,5450,5446,1,0,0,0,5450,5447,1,0,0,0,5451,5466,
	1,0,0,0,5452,5453,5,551,0,0,5453,5454,5,142,0,0,5454,5456,5,35,0,0,5455,
	5457,7,68,0,0,5456,5455,1,0,0,0,5456,5457,1,0,0,0,5457,5466,1,0,0,0,5458,
	5459,5,424,0,0,5459,5466,3,590,295,0,5460,5463,5,552,0,0,5461,5464,3,590,
	295,0,5462,5464,5,657,0,0,5463,5461,1,0,0,0,5463,5462,1,0,0,0,5464,5466,
	1,0,0,0,5465,5427,1,0,0,0,5465,5437,1,0,0,0,5465,5443,1,0,0,0,5465,5452,
	1,0,0,0,5465,5458,1,0,0,0,5465,5460,1,0,0,0,5466,459,1,0,0,0,5467,5468,
	5,332,0,0,5468,5469,7,69,0,0,5469,461,1,0,0,0,5470,5475,3,464,232,0,5471,
	5472,5,1133,0,0,5472,5473,3,616,308,0,5473,5474,5,1134,0,0,5474,5476,1,
	0,0,0,5475,5471,1,0,0,0,5475,5476,1,0,0,0,5476,463,1,0,0,0,5477,5479,5,
	6,0,0,5478,5480,5,725,0,0,5479,5478,1,0,0,0,5479,5480,1,0,0,0,5480,5571,
	1,0,0,0,5481,5483,5,7,0,0,5482,5484,5,733,0,0,5483,5482,1,0,0,0,5483,5484,
	1,0,0,0,5484,5571,1,0,0,0,5485,5493,5,33,0,0,5486,5487,5,649,0,0,5487,5494,
	5,742,0,0,5488,5494,5,733,0,0,5489,5494,5,671,0,0,5490,5494,5,665,0,0,5491,
	5494,5,647,0,0,5492,5494,5,596,0,0,5493,5486,1,0,0,0,5493,5488,1,0,0,0,
	5493,5489,1,0,0,0,5493,5490,1,0,0,0,5493,5491,1,0,0,0,5493,5492,1,0,0,0,
	5493,5494,1,0,0,0,5494,5571,1,0,0,0,5495,5571,5,44,0,0,5496,5498,5,51,0,
	0,5497,5499,5,596,0,0,5498,5497,1,0,0,0,5498,5499,1,0,0,0,5499,5571,1,0,
	0,0,5500,5571,5,415,0,0,5501,5571,5,708,0,0,5502,5571,5,709,0,0,5503,5504,
	5,72,0,0,5504,5571,5,120,0,0,5505,5571,5,81,0,0,5506,5571,5,85,0,0,5507,
	5508,5,103,0,0,5508,5571,5,742,0,0,5509,5571,5,726,0,0,5510,5571,5,566,
	0,0,5511,5571,5,136,0,0,5512,5571,5,727,0,0,5513,5514,5,588,0,0,5514,5571,
	7,70,0,0,5515,5571,5,152,0,0,5516,5517,5,155,0,0,5517,5571,7,71,0,0,5518,
	5571,5,739,0,0,5519,5571,5,740,0,0,5520,5571,5,177,0,0,5521,5571,5,184,
	0,0,5522,5571,5,185,0,0,5523,5571,5,698,0,0,5524,5571,5,699,0,0,5525,5571,
	5,700,0,0,5526,5571,5,701,0,0,5527,5571,5,702,0,0,5528,5571,5,703,0,0,5529,
	5571,5,704,0,0,5530,5571,5,705,0,0,5531,5571,5,706,0,0,5532,5571,5,707,
	0,0,5533,5571,5,710,0,0,5534,5571,5,711,0,0,5535,5571,5,712,0,0,5536,5571,
	5,713,0,0,5537,5571,5,714,0,0,5538,5571,5,715,0,0,5539,5571,5,716,0,0,5540,
	5571,5,717,0,0,5541,5571,5,718,0,0,5542,5571,5,719,0,0,5543,5571,5,722,
	0,0,5544,5571,5,723,0,0,5545,5571,5,724,0,0,5546,5571,5,728,0,0,5547,5571,
	5,729,0,0,5548,5571,5,730,0,0,5549,5571,5,731,0,0,5550,5571,5,732,0,0,5551,
	5571,5,735,0,0,5552,5571,5,736,0,0,5553,5571,5,737,0,0,5554,5571,5,158,
	0,0,5555,5571,5,738,0,0,5556,5571,5,1077,0,0,5557,5571,5,741,0,0,5558,5571,
	5,743,0,0,5559,5571,5,1088,0,0,5560,5571,5,744,0,0,5561,5571,5,745,0,0,
	5562,5563,5,102,0,0,5563,5564,5,68,0,0,5564,5571,5,734,0,0,5565,5566,5,
	152,0,0,5566,5567,5,87,0,0,5567,5571,5,734,0,0,5568,5569,5,720,0,0,5569,
	5571,5,721,0,0,5570,5477,1,0,0,0,5570,5481,1,0,0,0,5570,5485,1,0,0,0,5570,
	5495,1,0,0,0,5570,5496,1,0,0,0,5570,5500,1,0,0,0,5570,5501,1,0,0,0,5570,
	5502,1,0,0,0,5570,5503,1,0,0,0,5570,5505,1,0,0,0,5570,5506,1,0,0,0,5570,
	5507,1,0,0,0,5570,5509,1,0,0,0,5570,5510,1,0,0,0,5570,5511,1,0,0,0,5570,
	5512,1,0,0,0,5570,5513,1,0,0,0,5570,5515,1,0,0,0,5570,5516,1,0,0,0,5570,
	5518,1,0,0,0,5570,5519,1,0,0,0,5570,5520,1,0,0,0,5570,5521,1,0,0,0,5570,
	5522,1,0,0,0,5570,5523,1,0,0,0,5570,5524,1,0,0,0,5570,5525,1,0,0,0,5570,
	5526,1,0,0,0,5570,5527,1,0,0,0,5570,5528,1,0,0,0,5570,5529,1,0,0,0,5570,
	5530,1,0,0,0,5570,5531,1,0,0,0,5570,5532,1,0,0,0,5570,5533,1,0,0,0,5570,
	5534,1,0,0,0,5570,5535,1,0,0,0,5570,5536,1,0,0,0,5570,5537,1,0,0,0,5570,
	5538,1,0,0,0,5570,5539,1,0,0,0,5570,5540,1,0,0,0,5570,5541,1,0,0,0,5570,
	5542,1,0,0,0,5570,5543,1,0,0,0,5570,5544,1,0,0,0,5570,5545,1,0,0,0,5570,
	5546,1,0,0,0,5570,5547,1,0,0,0,5570,5548,1,0,0,0,5570,5549,1,0,0,0,5570,
	5550,1,0,0,0,5570,5551,1,0,0,0,5570,5552,1,0,0,0,5570,5553,1,0,0,0,5570,
	5554,1,0,0,0,5570,5555,1,0,0,0,5570,5556,1,0,0,0,5570,5557,1,0,0,0,5570,
	5558,1,0,0,0,5570,5559,1,0,0,0,5570,5560,1,0,0,0,5570,5561,1,0,0,0,5570,
	5562,1,0,0,0,5570,5565,1,0,0,0,5570,5568,1,0,0,0,5571,465,1,0,0,0,5572,
	5589,5,1117,0,0,5573,5574,5,1117,0,0,5574,5575,5,1132,0,0,5575,5589,5,1117,
	0,0,5576,5577,3,584,292,0,5577,5578,5,1132,0,0,5578,5579,5,1117,0,0,5579,
	5589,1,0,0,0,5580,5581,3,584,292,0,5581,5582,5,1132,0,0,5582,5583,3,584,
	292,0,5583,5589,1,0,0,0,5584,5585,3,584,292,0,5585,5586,3,588,294,0,5586,
	5589,1,0,0,0,5587,5589,3,584,292,0,5588,5572,1,0,0,0,5588,5573,1,0,0,0,
	5588,5576,1,0,0,0,5588,5580,1,0,0,0,5588,5584,1,0,0,0,5588,5587,1,0,0,0,
	5589,467,1,0,0,0,5590,5591,3,564,282,0,5591,5592,5,175,0,0,5592,5593,3,
	564,282,0,5593,469,1,0,0,0,5594,5596,5,9,0,0,5595,5597,7,72,0,0,5596,5595,
	1,0,0,0,5596,5597,1,0,0,0,5597,5598,1,0,0,0,5598,5599,7,54,0,0,5599,5617,
	3,620,310,0,5600,5601,5,184,0,0,5601,5602,5,76,0,0,5602,5603,5,118,0,0,
	5603,5608,3,556,278,0,5604,5605,5,1135,0,0,5605,5607,3,556,278,0,5606,5604,
	1,0,0,0,5607,5610,1,0,0,0,5608,5606,1,0,0,0,5608,5609,1,0,0,0,5609,5615,
	1,0,0,0,5610,5608,1,0,0,0,5611,5612,5,192,0,0,5612,5613,3,590,295,0,5613,
	5614,5,18,0,0,5614,5616,1,0,0,0,5615,5611,1,0,0,0,5615,5616,1,0,0,0,5616,
	5618,1,0,0,0,5617,5600,1,0,0,0,5617,5618,1,0,0,0,5618,5630,1,0,0,0,5619,
	5620,5,51,0,0,5620,5621,5,76,0,0,5621,5622,5,118,0,0,5622,5627,3,556,278,
	0,5623,5624,5,1135,0,0,5624,5626,3,556,278,0,5625,5623,1,0,0,0,5626,5629,
	1,0,0,0,5627,5625,1,0,0,0,5627,5628,1,0,0,0,5628,5631,1,0,0,0,5629,5627,
	1,0,0,0,5630,5619,1,0,0,0,5630,5631,1,0,0,0,5631,471,1,0,0,0,5632,5633,
	5,26,0,0,5633,5634,5,172,0,0,5634,5638,3,620,310,0,5635,5637,3,480,240,
	0,5636,5635,1,0,0,0,5637,5640,1,0,0,0,5638,5636,1,0,0,0,5638,5639,1,0,0,
	0,5639,473,1,0,0,0,5640,5638,1,0,0,0,5641,5642,5,356,0,0,5642,5643,5,172,
	0,0,5643,5645,3,620,310,0,5644,5646,7,73,0,0,5645,5644,1,0,0,0,5645,5646,
	1,0,0,0,5646,475,1,0,0,0,5647,5649,5,119,0,0,5648,5650,7,72,0,0,5649,5648,
	1,0,0,0,5649,5650,1,0,0,0,5650,5651,1,0,0,0,5651,5652,7,54,0,0,5652,5653,
	3,620,310,0,5653,477,1,0,0,0,5654,5656,5,580,0,0,5655,5657,7,72,0,0,5656,
	5655,1,0,0,0,5656,5657,1,0,0,0,5657,5658,1,0,0,0,5658,5659,5,172,0,0,5659,
	5661,3,620,310,0,5660,5662,5,568,0,0,5661,5660,1,0,0,0,5661,5662,1,0,0,
	0,5662,5664,1,0,0,0,5663,5665,5,422,0,0,5664,5663,1,0,0,0,5664,5665,1,0,
	0,0,5665,5667,1,0,0,0,5666,5668,5,666,0,0,5667,5666,1,0,0,0,5667,5668,1,
	0,0,0,5668,479,1,0,0,0,5669,5670,5,65,0,0,5670,5677,5,664,0,0,5671,5677,
	5,568,0,0,5672,5677,5,425,0,0,5673,5677,5,504,0,0,5674,5677,5,422,0,0,5675,
	5677,5,354,0,0,5676,5669,1,0,0,0,5676,5671,1,0,0,0,5676,5672,1,0,0,0,5676,
	5673,1,0,0,0,5676,5674,1,0,0,0,5676,5675,1,0,0,0,5677,481,1,0,0,0,5678,
	5680,5,33,0,0,5679,5681,5,335,0,0,5680,5679,1,0,0,0,5680,5681,1,0,0,0,5681,
	5682,1,0,0,0,5682,5684,5,437,0,0,5683,5685,3,642,321,0,5684,5683,1,0,0,
	0,5684,5685,1,0,0,0,5685,5686,1,0,0,0,5686,5687,3,584,292,0,5687,5688,5,
	594,0,0,5688,5689,7,74,0,0,5689,5690,5,619,0,0,5690,5691,5,1148,0,0,5691,
	483,1,0,0,0,5692,5693,5,456,0,0,5693,5694,5,554,0,0,5694,5695,3,584,292,
	0,5695,5696,5,619,0,0,5696,5697,5,1148,0,0,5697,485,1,0,0,0,5698,5699,5,
	661,0,0,5699,5700,5,554,0,0,5700,5701,3,584,292,0,5701,487,1,0,0,0,5702,
	5703,5,153,0,0,5703,5704,3,492,246,0,5704,5707,7,75,0,0,5705,5708,3,688,
	344,0,5706,5708,5,118,0,0,5707,5705,1,0,0,0,5707,5706,1,0,0,0,5708,5718,
	1,0,0,0,5709,5710,5,1135,0,0,5710,5711,3,492,246,0,5711,5714,7,75,0,0,5712,
	5715,3,688,344,0,5713,5715,5,118,0,0,5714,5712,1,0,0,0,5714,5713,1,0,0,
	0,5715,5717,1,0,0,0,5716,5709,1,0,0,0,5717,5720,1,0,0,0,5718,5716,1,0,0,
	0,5718,5719,1,0,0,0,5719,5755,1,0,0,0,5720,5718,1,0,0,0,5721,5722,5,153,
	0,0,5722,5725,3,60,30,0,5723,5726,3,568,284,0,5724,5726,5,42,0,0,5725,5723,
	1,0,0,0,5725,5724,1,0,0,0,5726,5755,1,0,0,0,5727,5728,5,153,0,0,5728,5735,
	5,517,0,0,5729,5732,3,568,284,0,5730,5731,5,27,0,0,5731,5733,3,570,285,
	0,5732,5730,1,0,0,0,5732,5733,1,0,0,0,5733,5736,1,0,0,0,5734,5736,5,42,
	0,0,5735,5729,1,0,0,0,5735,5734,1,0,0,0,5736,5755,1,0,0,0,5737,5755,3,444,
	222,0,5738,5755,3,318,159,0,5739,5755,3,316,158,0,5740,5741,5,153,0,0,5741,
	5742,3,550,275,0,5742,5743,7,75,0,0,5743,5751,3,688,344,0,5744,5745,5,1135,
	0,0,5745,5746,3,550,275,0,5746,5747,7,75,0,0,5747,5748,3,688,344,0,5748,
	5750,1,0,0,0,5749,5744,1,0,0,0,5750,5753,1,0,0,0,5751,5749,1,0,0,0,5751,
	5752,1,0,0,0,5752,5755,1,0,0,0,5753,5751,1,0,0,0,5754,5702,1,0,0,0,5754,
	5721,1,0,0,0,5754,5727,1,0,0,0,5754,5737,1,0,0,0,5754,5738,1,0,0,0,5754,
	5739,1,0,0,0,5754,5740,1,0,0,0,5755,489,1,0,0,0,5756,5757,5,155,0,0,5757,
	5758,7,56,0,0,5758,5910,5,476,0,0,5759,5760,5,155,0,0,5760,5761,7,76,0,
	0,5761,5764,5,416,0,0,5762,5763,5,80,0,0,5763,5765,5,1148,0,0,5764,5762,
	1,0,0,0,5764,5765,1,0,0,0,5765,5768,1,0,0,0,5766,5767,5,68,0,0,5767,5769,
	3,590,295,0,5768,5766,1,0,0,0,5768,5769,1,0,0,0,5769,5777,1,0,0,0,5770,
	5774,5,99,0,0,5771,5772,3,590,295,0,5772,5773,5,1135,0,0,5773,5775,1,0,
	0,0,5774,5771,1,0,0,0,5774,5775,1,0,0,0,5775,5776,1,0,0,0,5776,5778,3,590,
	295,0,5777,5770,1,0,0,0,5777,5778,1,0,0,0,5778,5910,1,0,0,0,5779,5780,5,
	155,0,0,5780,5782,3,494,247,0,5781,5783,3,496,248,0,5782,5781,1,0,0,0,5782,
	5783,1,0,0,0,5783,5910,1,0,0,0,5784,5786,5,155,0,0,5785,5787,5,436,0,0,
	5786,5785,1,0,0,0,5786,5787,1,0,0,0,5787,5788,1,0,0,0,5788,5789,7,41,0,
	0,5789,5790,7,77,0,0,5790,5793,3,552,276,0,5791,5792,7,77,0,0,5792,5794,
	3,584,292,0,5793,5791,1,0,0,0,5793,5794,1,0,0,0,5794,5796,1,0,0,0,5795,
	5797,3,496,248,0,5796,5795,1,0,0,0,5796,5797,1,0,0,0,5797,5910,1,0,0,0,
	5798,5799,5,155,0,0,5799,5800,5,33,0,0,5800,5802,7,0,0,0,5801,5803,3,642,
	321,0,5802,5801,1,0,0,0,5802,5803,1,0,0,0,5803,5804,1,0,0,0,5804,5910,3,
	584,292,0,5805,5806,5,155,0,0,5806,5807,5,33,0,0,5807,5808,7,78,0,0,5808,
	5910,3,550,275,0,5809,5810,5,155,0,0,5810,5811,5,33,0,0,5811,5812,5,665,
	0,0,5812,5910,3,564,282,0,5813,5814,5,155,0,0,5814,5815,5,409,0,0,5815,
	5816,3,572,286,0,5816,5817,7,79,0,0,5817,5910,1,0,0,0,5818,5819,5,155,0,
	0,5819,5910,3,498,249,0,5820,5821,5,155,0,0,5821,5829,7,80,0,0,5822,5826,
	5,99,0,0,5823,5824,3,590,295,0,5824,5825,5,1135,0,0,5825,5827,1,0,0,0,5826,
	5823,1,0,0,0,5826,5827,1,0,0,0,5827,5828,1,0,0,0,5828,5830,3,590,295,0,
	5829,5822,1,0,0,0,5829,5830,1,0,0,0,5830,5910,1,0,0,0,5831,5832,5,155,0,
	0,5832,5833,5,290,0,0,5833,5834,5,1133,0,0,5834,5835,5,1117,0,0,5835,5836,
	5,1134,0,0,5836,5910,7,80,0,0,5837,5838,5,155,0,0,5838,5841,3,500,250,0,
	5839,5840,7,77,0,0,5840,5842,3,584,292,0,5841,5839,1,0,0,0,5841,5842,1,
	0,0,0,5842,5844,1,0,0,0,5843,5845,3,496,248,0,5844,5843,1,0,0,0,5844,5845,
	1,0,0,0,5845,5910,1,0,0,0,5846,5847,5,155,0,0,5847,5848,7,81,0,0,5848,5849,
	5,364,0,0,5849,5910,3,550,275,0,5850,5851,5,155,0,0,5851,5854,5,440,0,0,
	5852,5853,5,65,0,0,5853,5855,3,564,282,0,5854,5852,1,0,0,0,5854,5855,1,
	0,0,0,5855,5910,1,0,0,0,5856,5857,5,155,0,0,5857,5858,7,82,0,0,5858,5859,
	7,77,0,0,5859,5862,3,552,276,0,5860,5861,7,77,0,0,5861,5863,3,584,292,0,
	5862,5860,1,0,0,0,5862,5863,1,0,0,0,5863,5866,1,0,0,0,5864,5865,5,190,0,
	0,5865,5867,3,688,344,0,5866,5864,1,0,0,0,5866,5867,1,0,0,0,5867,5910,1,
	0,0,0,5868,5869,5,155,0,0,5869,5870,5,539,0,0,5870,5873,5,742,0,0,5871,
	5872,7,77,0,0,5872,5874,3,584,292,0,5873,5871,1,0,0,0,5873,5874,1,0,0,0,
	5874,5876,1,0,0,0,5875,5877,3,496,248,0,5876,5875,1,0,0,0,5876,5877,1,0,
	0,0,5877,5910,1,0,0,0,5878,5879,5,155,0,0,5879,5880,5,564,0,0,5880,5885,
	3,502,251,0,5881,5882,5,1135,0,0,5882,5884,3,502,251,0,5883,5881,1,0,0,
	0,5884,5887,1,0,0,0,5885,5883,1,0,0,0,5885,5886,1,0,0,0,5886,5891,1,0,0,
	0,5887,5885,1,0,0,0,5888,5889,5,65,0,0,5889,5890,5,567,0,0,5890,5892,3,
	590,295,0,5891,5888,1,0,0,0,5891,5892,1,0,0,0,5892,5893,1,0,0,0,5893,5897,
	5,99,0,0,5894,5895,3,590,295,0,5895,5896,5,1135,0,0,5896,5898,1,0,0,0,5897,
	5894,1,0,0,0,5897,5898,1,0,0,0,5898,5899,1,0,0,0,5899,5900,3,590,295,0,
	5900,5910,1,0,0,0,5901,5902,5,155,0,0,5902,5903,5,614,0,0,5903,5907,5,634,
	0,0,5904,5905,5,65,0,0,5905,5906,5,355,0,0,5906,5908,5,1148,0,0,5907,5904,
	1,0,0,0,5907,5908,1,0,0,0,5908,5910,1,0,0,0,5909,5756,1,0,0,0,5909,5759,
	1,0,0,0,5909,5779,1,0,0,0,5909,5784,1,0,0,0,5909,5798,1,0,0,0,5909,5805,
	1,0,0,0,5909,5809,1,0,0,0,5909,5813,1,0,0,0,5909,5818,1,0,0,0,5909,5820,
	1,0,0,0,5909,5831,1,0,0,0,5909,5837,1,0,0,0,5909,5846,1,0,0,0,5909,5850,
	1,0,0,0,5909,5856,1,0,0,0,5909,5868,1,0,0,0,5909,5878,1,0,0,0,5909,5901,
	1,0,0,0,5910,491,1,0,0,0,5911,5922,5,1159,0,0,5912,5922,5,1160,0,0,5913,
	5914,5,1137,0,0,5914,5916,5,1137,0,0,5915,5913,1,0,0,0,5915,5916,1,0,0,
	0,5916,5917,1,0,0,0,5917,5919,7,83,0,0,5918,5915,1,0,0,0,5918,5919,1,0,
	0,0,5919,5920,1,0,0,0,5920,5922,3,584,292,0,5921,5911,1,0,0,0,5921,5912,
	1,0,0,0,5921,5918,1,0,0,0,5922,493,1,0,0,0,5923,5924,5,25,0,0,5924,5937,
	5,153,0,0,5925,5937,5,844,0,0,5926,5937,5,40,0,0,5927,5937,5,151,0,0,5928,
	5929,5,437,0,0,5929,5937,5,634,0,0,5930,5931,5,131,0,0,5931,5937,5,634,
	0,0,5932,5934,7,55,0,0,5933,5932,1,0,0,0,5933,5934,1,0,0,0,5934,5935,1,
	0,0,0,5935,5937,7,84,0,0,5936,5923,1,0,0,0,5936,5925,1,0,0,0,5936,5926,
	1,0,0,0,5936,5927,1,0,0,0,5936,5928,1,0,0,0,5936,5930,1,0,0,0,5936,5933,
	1,0,0,0,5937,495,1,0,0,0,5938,5939,5,98,0,0,5939,5943,5,1148,0,0,5940,5941,
	5,190,0,0,5941,5943,3,688,344,0,5942,5938,1,0,0,0,5942,5940,1,0,0,0,5943,
	497,1,0,0,0,5944,5946,5,636,0,0,5945,5944,1,0,0,0,5945,5946,1,0,0,0,5946,
	5947,1,0,0,0,5947,5962,5,410,0,0,5948,5949,5,477,0,0,5949,5962,5,634,0,
	0,5950,5962,5,556,0,0,5951,5962,5,725,0,0,5952,5954,5,436,0,0,5953,5952,
	1,0,0,0,5953,5954,1,0,0,0,5954,5955,1,0,0,0,5955,5962,5,563,0,0,5956,5962,
	5,565,0,0,5957,5958,5,614,0,0,5958,5962,5,447,0,0,5959,5962,5,339,0,0,5960,
	5962,5,383,0,0,5961,5945,1,0,0,0,5961,5948,1,0,0,0,5961,5950,1,0,0,0,5961,
	5951,1,0,0,0,5961,5953,1,0,0,0,5961,5956,1,0,0,0,5961,5957,1,0,0,0,5961,
	5959,1,0,0,0,5961,5960,1,0,0,0,5962,499,1,0,0,0,5963,5972,5,416,0,0,5964,
	5965,5,172,0,0,5965,5972,5,634,0,0,5966,5968,5,436,0,0,5967,5966,1,0,0,
	0,5967,5968,1,0,0,0,5968,5969,1,0,0,0,5969,5972,5,742,0,0,5970,5972,5,655,
	0,0,5971,5963,1,0,0,0,5971,5964,1,0,0,0,5971,5967,1,0,0,0,5971,5970,1,0,
	0,0,5972,501,1,0,0,0,5973,5986,5,6,0,0,5974,5975,5,347,0,0,5975,5986,5,
	461,0,0,5976,5977,5,382,0,0,5977,5986,5,645,0,0,5978,5986,5,385,0,0,5979,
	5986,5,463,0,0,5980,5986,5,792,0,0,5981,5982,5,544,0,0,5982,5986,5,426,
	0,0,5983,5986,5,621,0,0,5984,5986,5,644,0,0,5985,5973,1,0,0,0,5985,5974,
	1,0,0,0,5985,5976,1,0,0,0,5985,5978,1,0,0,0,5985,5979,1,0,0,0,5985,5980,
	1,0,0,0,5985,5981,1,0,0,0,5985,5983,1,0,0,0,5985,5984,1,0,0,0,5986,503,
	1,0,0,0,5987,5988,5,345,0,0,5988,5989,5,1148,0,0,5989,505,1,0,0,0,5990,
	5991,5,351,0,0,5991,5992,5,81,0,0,5992,5997,3,518,259,0,5993,5994,5,1135,
	0,0,5994,5996,3,518,259,0,5995,5993,1,0,0,0,5996,5999,1,0,0,0,5997,5995,
	1,0,0,0,5997,5998,1,0,0,0,5998,6007,1,0,0,0,5999,5997,1,0,0,0,6000,6001,
	5,129,0,0,6001,6004,5,1133,0,0,6002,6005,3,616,308,0,6003,6005,5,6,0,0,
	6004,6002,1,0,0,0,6004,6003,1,0,0,0,6005,6006,1,0,0,0,6006,6008,5,1134,
	0,0,6007,6000,1,0,0,0,6007,6008,1,0,0,0,6008,6009,1,0,0,0,6009,6010,5,80,
	0,0,6010,6011,3,584,292,0,6011,507,1,0,0,0,6012,6014,5,432,0,0,6013,6015,
	7,72,0,0,6014,6013,1,0,0,0,6014,6015,1,0,0,0,6015,6016,1,0,0,0,6016,6021,
	3,520,260,0,6017,6018,5,1135,0,0,6018,6020,3,520,260,0,6019,6017,1,0,0,
	0,6020,6023,1,0,0,0,6021,6019,1,0,0,0,6021,6022,1,0,0,0,6022,509,1,0,0,
	0,6023,6021,1,0,0,0,6024,6026,5,93,0,0,6025,6027,7,85,0,0,6026,6025,1,0,
	0,0,6026,6027,1,0,0,0,6027,6028,1,0,0,0,6028,6029,3,688,344,0,6029,511,
	1,0,0,0,6030,6031,5,102,0,0,6031,6032,5,81,0,0,6032,6033,5,87,0,0,6033,
	6034,5,351,0,0,6034,6039,3,524,262,0,6035,6036,5,1135,0,0,6036,6038,3,524,
	262,0,6037,6035,1,0,0,0,6038,6041,1,0,0,0,6039,6037,1,0,0,0,6039,6040,1,
	0,0,0,6040,513,1,0,0,0,6041,6039,1,0,0,0,6042,6043,5,589,0,0,6043,6044,
	5,567,0,0,6044,6045,5,351,0,0,6045,515,1,0,0,0,6046,6047,5,739,0,0,6047,
	517,1,0,0,0,6048,6056,3,552,276,0,6049,6051,7,20,0,0,6050,6049,1,0,0,0,
	6050,6051,1,0,0,0,6051,6052,1,0,0,0,6052,6053,5,1133,0,0,6053,6054,3,616,
	308,0,6054,6055,5,1134,0,0,6055,6057,1,0,0,0,6056,6050,1,0,0,0,6056,6057,
	1,0,0,0,6057,519,1,0,0,0,6058,6077,5,394,0,0,6059,6077,5,447,0,0,6060,6062,
	7,86,0,0,6061,6060,1,0,0,0,6061,6062,1,0,0,0,6062,6063,1,0,0,0,6063,6077,
	5,476,0,0,6064,6077,5,540,0,0,6065,6077,5,725,0,0,6066,6067,5,567,0,0,6067,
	6077,5,351,0,0,6068,6077,5,634,0,0,6069,6077,5,667,0,0,6070,6074,5,742,
	0,0,6071,6072,5,192,0,0,6072,6073,5,134,0,0,6073,6075,5,103,0,0,6074,6071,
	1,0,0,0,6074,6075,1,0,0,0,6075,6077,1,0,0,0,6076,6058,1,0,0,0,6076,6059,
	1,0,0,0,6076,6061,1,0,0,0,6076,6064,1,0,0,0,6076,6065,1,0,0,0,6076,6066,
	1,0,0,0,6076,6068,1,0,0,0,6076,6069,1,0,0,0,6076,6070,1,0,0,0,6077,6091,
	1,0,0,0,6078,6079,5,574,0,0,6079,6081,5,476,0,0,6080,6082,3,356,178,0,6081,
	6080,1,0,0,0,6081,6082,1,0,0,0,6082,6091,1,0,0,0,6083,6085,7,54,0,0,6084,
	6086,3,620,310,0,6085,6084,1,0,0,0,6085,6086,1,0,0,0,6086,6088,1,0,0,0,
	6087,6089,3,522,261,0,6088,6087,1,0,0,0,6088,6089,1,0,0,0,6089,6091,1,0,
	0,0,6090,6076,1,0,0,0,6090,6078,1,0,0,0,6090,6083,1,0,0,0,6091,521,1,0,
	0,0,6092,6093,5,192,0,0,6093,6094,5,134,0,0,6094,6098,5,103,0,0,6095,6096,
	5,65,0,0,6096,6098,5,421,0,0,6097,6092,1,0,0,0,6097,6095,1,0,0,0,6098,523,
	1,0,0,0,6099,6107,3,552,276,0,6100,6101,5,129,0,0,6101,6104,5,1133,0,0,
	6102,6105,3,616,308,0,6103,6105,5,6,0,0,6104,6102,1,0,0,0,6104,6103,1,0,
	0,0,6105,6106,1,0,0,0,6106,6108,5,1134,0,0,6107,6100,1,0,0,0,6107,6108,
	1,0,0,0,6108,6116,1,0,0,0,6109,6111,7,20,0,0,6110,6109,1,0,0,0,6110,6111,
	1,0,0,0,6111,6112,1,0,0,0,6112,6113,5,1133,0,0,6113,6114,3,616,308,0,6114,
	6115,5,1134,0,0,6115,6117,1,0,0,0,6116,6110,1,0,0,0,6116,6117,1,0,0,0,6117,
	6120,1,0,0,0,6118,6119,5,78,0,0,6119,6121,5,470,0,0,6120,6118,1,0,0,0,6120,
	6121,1,0,0,0,6121,525,1,0,0,0,6122,6123,7,87,0,0,6123,6126,3,552,276,0,
	6124,6127,3,584,292,0,6125,6127,5,1148,0,0,6126,6124,1,0,0,0,6126,6125,
	1,0,0,0,6126,6127,1,0,0,0,6127,527,1,0,0,0,6128,6132,7,87,0,0,6129,6130,
	7,88,0,0,6130,6131,5,1124,0,0,6131,6133,7,89,0,0,6132,6129,1,0,0,0,6132,
	6133,1,0,0,0,6133,6134,1,0,0,0,6134,6135,3,548,274,0,6135,529,1,0,0,0,6136,
	6137,5,444,0,0,6137,6138,5,1148,0,0,6138,531,1,0,0,0,6139,6140,5,186,0,
	0,6140,6141,3,584,292,0,6141,533,1,0,0,0,6142,6150,5,156,0,0,6143,6145,
	5,162,0,0,6144,6146,5,669,0,0,6145,6144,1,0,0,0,6145,6146,1,0,0,0,6146,
	6147,1,0,0,0,6147,6151,3,594,297,0,6148,6151,5,1156,0,0,6149,6151,5,1157,
	0,0,6150,6143,1,0,0,0,6150,6148,1,0,0,0,6150,6149,1,0,0,0,6151,6161,1,0,
	0,0,6152,6153,5,153,0,0,6153,6158,3,538,269,0,6154,6155,5,1135,0,0,6155,
	6157,3,538,269,0,6156,6154,1,0,0,0,6157,6160,1,0,0,0,6158,6156,1,0,0,0,
	6158,6159,1,0,0,0,6159,6162,1,0,0,0,6160,6158,1,0,0,0,6161,6152,1,0,0,0,
	6161,6162,1,0,0,0,6162,535,1,0,0,0,6163,6171,5,143,0,0,6164,6166,5,162,
	0,0,6165,6167,5,669,0,0,6166,6165,1,0,0,0,6166,6167,1,0,0,0,6167,6168,1,
	0,0,0,6168,6172,3,594,297,0,6169,6172,5,1156,0,0,6170,6172,5,1157,0,0,6171,
	6164,1,0,0,0,6171,6169,1,0,0,0,6171,6170,1,0,0,0,6171,6172,1,0,0,0,6172,
	6182,1,0,0,0,6173,6174,5,153,0,0,6174,6179,3,538,269,0,6175,6176,5,1135,
	0,0,6176,6178,3,538,269,0,6177,6175,1,0,0,0,6178,6181,1,0,0,0,6179,6177,
	1,0,0,0,6179,6180,1,0,0,0,6180,6183,1,0,0,0,6181,6179,1,0,0,0,6182,6173,
	1,0,0,0,6182,6183,1,0,0,0,6183,537,1,0,0,0,6184,6185,7,90,0,0,6185,6190,
	5,1124,0,0,6186,6191,3,594,297,0,6187,6191,5,1149,0,0,6188,6191,3,566,283,
	0,6189,6191,3,586,293,0,6190,6186,1,0,0,0,6190,6187,1,0,0,0,6190,6188,1,
	0,0,0,6190,6189,1,0,0,0,6191,539,1,0,0,0,6192,6194,5,192,0,0,6193,6195,
	5,571,0,0,6194,6193,1,0,0,0,6194,6195,1,0,0,0,6195,6196,1,0,0,0,6196,6201,
	3,50,25,0,6197,6198,5,1135,0,0,6198,6200,3,50,25,0,6199,6197,1,0,0,0,6200,
	6203,1,0,0,0,6201,6199,1,0,0,0,6201,6202,1,0,0,0,6202,541,1,0,0,0,6203,
	6201,1,0,0,0,6204,6205,5,172,0,0,6205,6207,3,552,276,0,6206,6208,3,230,
	115,0,6207,6206,1,0,0,0,6207,6208,1,0,0,0,6208,6210,1,0,0,0,6209,6211,3,
	294,147,0,6210,6209,1,0,0,0,6210,6211,1,0,0,0,6211,543,1,0,0,0,6212,6214,
	5,71,0,0,6213,6215,7,91,0,0,6214,6213,1,0,0,0,6214,6215,1,0,0,0,6215,6216,
	1,0,0,0,6216,6248,5,48,0,0,6217,6218,3,492,246,0,6218,6219,5,1124,0,0,6219,
	6227,7,92,0,0,6220,6221,5,1135,0,0,6221,6222,3,492,246,0,6222,6223,5,1124,
	0,0,6223,6224,7,92,0,0,6224,6226,1,0,0,0,6225,6220,1,0,0,0,6226,6229,1,
	0,0,0,6227,6225,1,0,0,0,6227,6228,1,0,0,0,6228,6249,1,0,0,0,6229,6227,1,
	0,0,0,6230,6233,5,29,0,0,6231,6234,3,590,295,0,6232,6234,3,492,246,0,6233,
	6231,1,0,0,0,6233,6232,1,0,0,0,6234,6235,1,0,0,0,6235,6236,3,492,246,0,
	6236,6237,5,1124,0,0,6237,6245,3,546,273,0,6238,6239,5,1135,0,0,6239,6240,
	3,492,246,0,6240,6241,5,1124,0,0,6241,6242,3,546,273,0,6242,6244,1,0,0,
	0,6243,6238,1,0,0,0,6244,6247,1,0,0,0,6245,6243,1,0,0,0,6245,6246,1,0,0,
	0,6246,6249,1,0,0,0,6247,6245,1,0,0,0,6248,6217,1,0,0,0,6248,6230,1,0,0,
	0,6249,545,1,0,0,0,6250,6251,7,93,0,0,6251,547,1,0,0,0,6252,6258,3,200,
	100,0,6253,6258,3,186,93,0,6254,6258,3,192,96,0,6255,6258,3,198,99,0,6256,
	6258,3,202,101,0,6257,6252,1,0,0,0,6257,6253,1,0,0,0,6257,6254,1,0,0,0,
	6257,6255,1,0,0,0,6257,6256,1,0,0,0,6258,6263,1,0,0,0,6259,6260,5,65,0,
	0,6260,6261,5,376,0,0,6261,6263,3,584,292,0,6262,6257,1,0,0,0,6262,6259,
	1,0,0,0,6263,549,1,0,0,0,6264,6268,3,584,292,0,6265,6269,5,1155,0,0,6266,
	6267,5,1132,0,0,6267,6269,3,584,292,0,6268,6265,1,0,0,0,6268,6266,1,0,0,
	0,6268,6269,1,0,0,0,6269,551,1,0,0,0,6270,6271,3,550,275,0,6271,553,1,0,
	0,0,6272,6275,3,564,282,0,6273,6275,3,584,292,0,6274,6272,1,0,0,0,6274,
	6273,1,0,0,0,6275,555,1,0,0,0,6276,6281,3,584,292,0,6277,6279,3,588,294,
	0,6278,6280,3,588,294,0,6279,6278,1,0,0,0,6279,6280,1,0,0,0,6280,6282,1,
	0,0,0,6281,6277,1,0,0,0,6281,6282,1,0,0,0,6282,6291,1,0,0,0,6283,6285,9,
	0,0,0,6284,6283,1,0,0,0,6284,6285,1,0,0,0,6285,6286,1,0,0,0,6286,6288,3,
	588,294,0,6287,6289,3,588,294,0,6288,6287,1,0,0,0,6288,6289,1,0,0,0,6289,
	6291,1,0,0,0,6290,6276,1,0,0,0,6290,6284,1,0,0,0,6291,557,1,0,0,0,6292,
	6295,3,584,292,0,6293,6295,5,1148,0,0,6294,6292,1,0,0,0,6294,6293,1,0,0,
	0,6295,6300,1,0,0,0,6296,6297,5,1133,0,0,6297,6298,3,590,295,0,6298,6299,
	5,1134,0,0,6299,6301,1,0,0,0,6300,6296,1,0,0,0,6300,6301,1,0,0,0,6301,6304,
	1,0,0,0,6302,6304,3,688,344,0,6303,6294,1,0,0,0,6303,6302,1,0,0,0,6304,
	6306,1,0,0,0,6305,6307,7,48,0,0,6306,6305,1,0,0,0,6306,6307,1,0,0,0,6307,
	559,1,0,0,0,6308,6313,5,1148,0,0,6309,6313,5,1156,0,0,6310,6313,5,697,0,
	0,6311,6313,3,718,359,0,6312,6308,1,0,0,0,6312,6309,1,0,0,0,6312,6310,1,
	0,0,0,6312,6311,1,0,0,0,6313,561,1,0,0,0,6314,6315,7,94,0,0,6315,563,1,
	0,0,0,6316,6322,3,560,280,0,6317,6318,3,560,280,0,6318,6319,3,562,281,0,
	6319,6322,1,0,0,0,6320,6322,3,62,31,0,6321,6316,1,0,0,0,6321,6317,1,0,0,
	0,6321,6320,1,0,0,0,6322,565,1,0,0,0,6323,6324,7,95,0,0,6324,567,1,0,0,
	0,6325,6330,5,226,0,0,6326,6330,3,708,354,0,6327,6330,5,1148,0,0,6328,6330,
	5,1145,0,0,6329,6325,1,0,0,0,6329,6326,1,0,0,0,6329,6327,1,0,0,0,6329,6328,
	1,0,0,0,6330,569,1,0,0,0,6331,6334,3,584,292,0,6332,6334,5,1148,0,0,6333,
	6331,1,0,0,0,6333,6332,1,0,0,0,6334,571,1,0,0,0,6335,6339,3,574,287,0,6336,
	6339,5,1156,0,0,6337,6339,5,1148,0,0,6338,6335,1,0,0,0,6338,6336,1,0,0,
	0,6338,6337,1,0,0,0,6339,573,1,0,0,0,6340,6341,7,96,0,0,6341,575,1,0,0,
	0,6342,6343,3,590,295,0,6343,6344,5,1121,0,0,6344,6345,3,590,295,0,6345,
	6346,5,1121,0,0,6346,6347,3,590,295,0,6347,6348,5,1121,0,0,6348,6349,3,
	590,295,0,6349,6350,5,1121,0,0,6350,6356,3,590,295,0,6351,6352,5,1144,0,
	0,6352,6353,3,590,295,0,6353,6354,5,1121,0,0,6354,6355,3,590,295,0,6355,
	6357,1,0,0,0,6356,6351,1,0,0,0,6357,6358,1,0,0,0,6358,6356,1,0,0,0,6358,
	6359,1,0,0,0,6359,577,1,0,0,0,6360,6367,3,580,290,0,6361,6362,5,1135,0,
	0,6362,6365,3,580,290,0,6363,6364,5,1135,0,0,6364,6366,3,590,295,0,6365,
	6363,1,0,0,0,6365,6366,1,0,0,0,6366,6368,1,0,0,0,6367,6361,1,0,0,0,6367,
	6368,1,0,0,0,6368,579,1,0,0,0,6369,6377,5,1148,0,0,6370,6377,5,1153,0,0,
	6371,6373,5,1150,0,0,6372,6371,1,0,0,0,6373,6374,1,0,0,0,6374,6372,1,0,
	0,0,6374,6375,1,0,0,0,6375,6377,1,0,0,0,6376,6369,1,0,0,0,6376,6370,1,0,
	0,0,6376,6372,1,0,0,0,6377,581,1,0,0,0,6378,6381,3,584,292,0,6379,6381,
	5,1148,0,0,6380,6378,1,0,0,0,6380,6379,1,0,0,0,6381,583,1,0,0,0,6382,6386,
	3,586,293,0,6383,6386,5,1145,0,0,6384,6386,5,1148,0,0,6385,6382,1,0,0,0,
	6385,6383,1,0,0,0,6385,6384,1,0,0,0,6386,585,1,0,0,0,6387,6397,5,1156,0,
	0,6388,6397,3,708,354,0,6389,6397,3,710,355,0,6390,6397,3,574,287,0,6391,
	6397,3,712,356,0,6392,6397,3,714,357,0,6393,6397,3,716,358,0,6394,6397,
	3,718,359,0,6395,6397,3,680,340,0,6396,6387,1,0,0,0,6396,6388,1,0,0,0,6396,
	6389,1,0,0,0,6396,6390,1,0,0,0,6396,6391,1,0,0,0,6396,6392,1,0,0,0,6396,
	6393,1,0,0,0,6396,6394,1,0,0,0,6396,6395,1,0,0,0,6397,587,1,0,0,0,6398,
	6402,5,1155,0,0,6399,6400,5,1132,0,0,6400,6402,3,584,292,0,6401,6398,1,
	0,0,0,6401,6399,1,0,0,0,6402,589,1,0,0,0,6403,6404,7,97,0,0,6404,591,1,
	0,0,0,6405,6408,5,1146,0,0,6406,6408,3,590,295,0,6407,6405,1,0,0,0,6407,
	6406,1,0,0,0,6408,593,1,0,0,0,6409,6411,5,1154,0,0,6410,6409,1,0,0,0,6410,
	6411,1,0,0,0,6411,6412,1,0,0,0,6412,6415,5,1148,0,0,6413,6415,5,1147,0,
	0,6414,6410,1,0,0,0,6414,6413,1,0,0,0,6415,6417,1,0,0,0,6416,6418,5,1148,
	0,0,6417,6416,1,0,0,0,6418,6419,1,0,0,0,6419,6417,1,0,0,0,6419,6420,1,0,
	0,0,6420,6433,1,0,0,0,6421,6423,5,1154,0,0,6422,6421,1,0,0,0,6422,6423,
	1,0,0,0,6423,6424,1,0,0,0,6424,6427,5,1148,0,0,6425,6427,5,1147,0,0,6426,
	6422,1,0,0,0,6426,6425,1,0,0,0,6427,6430,1,0,0,0,6428,6429,5,27,0,0,6429,
	6431,3,570,285,0,6430,6428,1,0,0,0,6430,6431,1,0,0,0,6431,6433,1,0,0,0,
	6432,6414,1,0,0,0,6432,6426,1,0,0,0,6433,595,1,0,0,0,6434,6435,7,98,0,0,
	6435,597,1,0,0,0,6436,6438,5,1154,0,0,6437,6436,1,0,0,0,6437,6438,1,0,0,
	0,6438,6439,1,0,0,0,6439,6440,5,1150,0,0,6440,599,1,0,0,0,6441,6443,5,114,
	0,0,6442,6441,1,0,0,0,6442,6443,1,0,0,0,6443,6444,1,0,0,0,6444,6445,7,99,
	0,0,6445,601,1,0,0,0,6446,6459,3,594,297,0,6447,6459,3,590,295,0,6448,6449,
	5,1121,0,0,6449,6459,3,590,295,0,6450,6459,3,598,299,0,6451,6459,3,596,
	298,0,6452,6459,5,1151,0,0,6453,6459,5,1153,0,0,6454,6456,5,114,0,0,6455,
	6454,1,0,0,0,6455,6456,1,0,0,0,6456,6457,1,0,0,0,6457,6459,7,99,0,0,6458,
	6446,1,0,0,0,6458,6447,1,0,0,0,6458,6448,1,0,0,0,6458,6450,1,0,0,0,6458,
	6451,1,0,0,0,6458,6452,1,0,0,0,6458,6453,1,0,0,0,6458,6455,1,0,0,0,6459,
	603,1,0,0,0,6460,6462,7,100,0,0,6461,6463,5,238,0,0,6462,6461,1,0,0,0,6462,
	6463,1,0,0,0,6463,6465,1,0,0,0,6464,6466,3,610,305,0,6465,6464,1,0,0,0,
	6465,6466,1,0,0,0,6466,6468,1,0,0,0,6467,6469,5,226,0,0,6468,6467,1,0,0,
	0,6468,6469,1,0,0,0,6469,6473,1,0,0,0,6470,6471,3,60,30,0,6471,6472,3,568,
	284,0,6472,6474,1,0,0,0,6473,6470,1,0,0,0,6473,6474,1,0,0,0,6474,6478,1,
	0,0,0,6475,6476,5,27,0,0,6476,6479,3,570,285,0,6477,6479,5,226,0,0,6478,
	6475,1,0,0,0,6478,6477,1,0,0,0,6478,6479,1,0,0,0,6479,6587,1,0,0,0,6480,
	6481,5,225,0,0,6481,6482,7,101,0,0,6482,6484,5,238,0,0,6483,6485,3,610,
	305,0,6484,6483,1,0,0,0,6484,6485,1,0,0,0,6485,6487,1,0,0,0,6486,6488,5,
	226,0,0,6487,6486,1,0,0,0,6487,6488,1,0,0,0,6488,6587,1,0,0,0,6489,6490,
	5,225,0,0,6490,6492,7,102,0,0,6491,6493,3,610,305,0,6492,6491,1,0,0,0,6492,
	6493,1,0,0,0,6493,6495,1,0,0,0,6494,6496,5,226,0,0,6495,6494,1,0,0,0,6495,
	6496,1,0,0,0,6496,6587,1,0,0,0,6497,6498,5,518,0,0,6498,6500,5,223,0,0,
	6499,6501,3,610,305,0,6500,6499,1,0,0,0,6500,6501,1,0,0,0,6501,6503,1,0,
	0,0,6502,6504,5,226,0,0,6503,6502,1,0,0,0,6503,6504,1,0,0,0,6504,6587,1,
	0,0,0,6505,6507,7,103,0,0,6506,6508,3,610,305,0,6507,6506,1,0,0,0,6507,
	6508,1,0,0,0,6508,6512,1,0,0,0,6509,6511,7,104,0,0,6510,6509,1,0,0,0,6511,
	6514,1,0,0,0,6512,6510,1,0,0,0,6512,6513,1,0,0,0,6513,6587,1,0,0,0,6514,
	6512,1,0,0,0,6515,6517,5,208,0,0,6516,6518,3,612,306,0,6517,6516,1,0,0,
	0,6517,6518,1,0,0,0,6518,6522,1,0,0,0,6519,6521,7,104,0,0,6520,6519,1,0,
	0,0,6521,6524,1,0,0,0,6522,6520,1,0,0,0,6522,6523,1,0,0,0,6523,6587,1,0,
	0,0,6524,6522,1,0,0,0,6525,6527,5,209,0,0,6526,6528,5,210,0,0,6527,6526,
	1,0,0,0,6527,6528,1,0,0,0,6528,6530,1,0,0,0,6529,6531,3,612,306,0,6530,
	6529,1,0,0,0,6530,6531,1,0,0,0,6531,6535,1,0,0,0,6532,6534,7,104,0,0,6533,
	6532,1,0,0,0,6534,6537,1,0,0,0,6535,6533,1,0,0,0,6535,6536,1,0,0,0,6536,
	6587,1,0,0,0,6537,6535,1,0,0,0,6538,6540,7,105,0,0,6539,6541,3,614,307,
	0,6540,6539,1,0,0,0,6540,6541,1,0,0,0,6541,6545,1,0,0,0,6542,6544,7,104,
	0,0,6543,6542,1,0,0,0,6544,6547,1,0,0,0,6545,6543,1,0,0,0,6545,6546,1,0,
	0,0,6546,6587,1,0,0,0,6547,6545,1,0,0,0,6548,6587,7,106,0,0,6549,6551,7,
	107,0,0,6550,6552,3,610,305,0,6551,6550,1,0,0,0,6551,6552,1,0,0,0,6552,
	6587,1,0,0,0,6553,6554,7,108,0,0,6554,6556,3,606,303,0,6555,6557,5,226,
	0,0,6556,6555,1,0,0,0,6556,6557,1,0,0,0,6557,6561,1,0,0,0,6558,6559,3,60,
	30,0,6559,6560,3,568,284,0,6560,6562,1,0,0,0,6561,6558,1,0,0,0,6561,6562,
	1,0,0,0,6562,6587,1,0,0,0,6563,6566,7,109,0,0,6564,6565,5,1012,0,0,6565,
	6567,3,590,295,0,6566,6564,1,0,0,0,6566,6567,1,0,0,0,6567,6587,1,0,0,0,
	6568,6570,5,231,0,0,6569,6571,5,223,0,0,6570,6569,1,0,0,0,6570,6571,1,0,
	0,0,6571,6573,1,0,0,0,6572,6574,5,226,0,0,6573,6572,1,0,0,0,6573,6574,1,
	0,0,0,6574,6578,1,0,0,0,6575,6576,3,60,30,0,6576,6577,3,568,284,0,6577,
	6579,1,0,0,0,6578,6575,1,0,0,0,6578,6579,1,0,0,0,6579,6582,1,0,0,0,6580,
	6581,5,27,0,0,6581,6583,3,570,285,0,6582,6580,1,0,0,0,6582,6583,1,0,0,0,
	6583,6587,1,0,0,0,6584,6585,5,231,0,0,6585,6587,5,227,0,0,6586,6460,1,0,
	0,0,6586,6480,1,0,0,0,6586,6489,1,0,0,0,6586,6497,1,0,0,0,6586,6505,1,0,
	0,0,6586,6515,1,0,0,0,6586,6525,1,0,0,0,6586,6538,1,0,0,0,6586,6548,1,0,
	0,0,6586,6549,1,0,0,0,6586,6553,1,0,0,0,6586,6563,1,0,0,0,6586,6568,1,0,
	0,0,6586,6584,1,0,0,0,6587,605,1,0,0,0,6588,6589,5,1133,0,0,6589,6594,5,
	1148,0,0,6590,6591,5,1135,0,0,6591,6593,5,1148,0,0,6592,6590,1,0,0,0,6593,
	6596,1,0,0,0,6594,6592,1,0,0,0,6594,6595,1,0,0,0,6595,6597,1,0,0,0,6596,
	6594,1,0,0,0,6597,6598,5,1134,0,0,6598,607,1,0,0,0,6599,6601,7,110,0,0,
	6600,6602,3,610,305,0,6601,6600,1,0,0,0,6601,6602,1,0,0,0,6602,6622,1,0,
	0,0,6603,6605,5,222,0,0,6604,6606,3,610,305,0,6605,6604,1,0,0,0,6605,6606,
	1,0,0,0,6606,6610,1,0,0,0,6607,6608,3,60,30,0,6608,6609,3,568,284,0,6609,
	6611,1,0,0,0,6610,6607,1,0,0,0,6610,6611,1,0,0,0,6611,6622,1,0,0,0,6612,
	6622,7,111,0,0,6613,6615,7,112,0,0,6614,6616,3,614,307,0,6615,6614,1,0,
	0,0,6615,6616,1,0,0,0,6616,6622,1,0,0,0,6617,6619,7,113,0,0,6618,6620,7,
	114,0,0,6619,6618,1,0,0,0,6619,6620,1,0,0,0,6620,6622,1,0,0,0,6621,6599,
	1,0,0,0,6621,6603,1,0,0,0,6621,6612,1,0,0,0,6621,6613,1,0,0,0,6621,6617,
	1,0,0,0,6622,6624,1,0,0,0,6623,6625,5,11,0,0,6624,6623,1,0,0,0,6624,6625,
	1,0,0,0,6625,609,1,0,0,0,6626,6627,5,1133,0,0,6627,6628,3,590,295,0,6628,
	6629,5,1134,0,0,6629,611,1,0,0,0,6630,6631,5,1133,0,0,6631,6632,3,590,295,
	0,6632,6633,5,1135,0,0,6633,6634,3,590,295,0,6634,6635,5,1134,0,0,6635,
	613,1,0,0,0,6636,6637,5,1133,0,0,6637,6640,3,590,295,0,6638,6639,5,1135,
	0,0,6639,6641,3,590,295,0,6640,6638,1,0,0,0,6640,6641,1,0,0,0,6641,6642,
	1,0,0,0,6642,6643,5,1134,0,0,6643,615,1,0,0,0,6644,6649,3,584,292,0,6645,
	6646,5,1135,0,0,6646,6648,3,584,292,0,6647,6645,1,0,0,0,6648,6651,1,0,0,
	0,6649,6647,1,0,0,0,6649,6650,1,0,0,0,6650,617,1,0,0,0,6651,6649,1,0,0,
	0,6652,6657,3,556,278,0,6653,6654,5,1135,0,0,6654,6656,3,556,278,0,6655,
	6653,1,0,0,0,6656,6659,1,0,0,0,6657,6655,1,0,0,0,6657,6658,1,0,0,0,6658,
	619,1,0,0,0,6659,6657,1,0,0,0,6660,6665,3,552,276,0,6661,6662,5,1135,0,
	0,6662,6664,3,552,276,0,6663,6661,1,0,0,0,6664,6667,1,0,0,0,6665,6663,1,
	0,0,0,6665,6666,1,0,0,0,6666,621,1,0,0,0,6667,6665,1,0,0,0,6668,6669,5,
	1133,0,0,6669,6674,3,558,279,0,6670,6671,5,1135,0,0,6671,6673,3,558,279,
	0,6672,6670,1,0,0,0,6673,6676,1,0,0,0,6674,6672,1,0,0,0,6674,6675,1,0,0,
	0,6675,6677,1,0,0,0,6676,6674,1,0,0,0,6677,6678,5,1134,0,0,6678,623,1,0,
	0,0,6679,6684,3,688,344,0,6680,6681,5,1135,0,0,6681,6683,3,688,344,0,6682,
	6680,1,0,0,0,6683,6686,1,0,0,0,6684,6682,1,0,0,0,6684,6685,1,0,0,0,6685,
	625,1,0,0,0,6686,6684,1,0,0,0,6687,6692,3,638,319,0,6688,6689,5,1135,0,
	0,6689,6691,3,638,319,0,6690,6688,1,0,0,0,6691,6694,1,0,0,0,6692,6690,1,
	0,0,0,6692,6693,1,0,0,0,6693,627,1,0,0,0,6694,6692,1,0,0,0,6695,6700,3,
	602,301,0,6696,6697,5,1135,0,0,6697,6699,3,602,301,0,6698,6696,1,0,0,0,
	6699,6702,1,0,0,0,6700,6698,1,0,0,0,6700,6701,1,0,0,0,6701,629,1,0,0,0,
	6702,6700,1,0,0,0,6703,6708,5,1148,0,0,6704,6705,5,1135,0,0,6705,6707,5,
	1148,0,0,6706,6704,1,0,0,0,6707,6710,1,0,0,0,6708,6706,1,0,0,0,6708,6709,
	1,0,0,0,6709,631,1,0,0,0,6710,6708,1,0,0,0,6711,6716,5,1159,0,0,6712,6713,
	5,1135,0,0,6713,6715,5,1159,0,0,6714,6712,1,0,0,0,6715,6718,1,0,0,0,6716,
	6714,1,0,0,0,6716,6717,1,0,0,0,6717,633,1,0,0,0,6718,6716,1,0,0,0,6719,
	6746,5,116,0,0,6720,6721,5,23,0,0,6721,6722,5,1133,0,0,6722,6723,3,688,
	344,0,6723,6724,5,12,0,0,6724,6725,3,608,304,0,6725,6726,5,1134,0,0,6726,
	6746,1,0,0,0,6727,6729,3,694,347,0,6728,6727,1,0,0,0,6728,6729,1,0,0,0,
	6729,6730,1,0,0,0,6730,6746,3,602,301,0,6731,6735,3,636,318,0,6732,6733,
	5,118,0,0,6733,6734,5,184,0,0,6734,6736,3,636,318,0,6735,6732,1,0,0,0,6735,
	6736,1,0,0,0,6736,6746,1,0,0,0,6737,6738,5,1133,0,0,6738,6739,3,688,344,
	0,6739,6740,5,1134,0,0,6740,6746,1,0,0,0,6741,6742,5,1133,0,0,6742,6743,
	3,550,275,0,6743,6744,5,1134,0,0,6744,6746,1,0,0,0,6745,6719,1,0,0,0,6745,
	6720,1,0,0,0,6745,6728,1,0,0,0,6745,6731,1,0,0,0,6745,6737,1,0,0,0,6745,
	6741,1,0,0,0,6746,635,1,0,0,0,6747,6753,7,115,0,0,6748,6750,5,1133,0,0,
	6749,6751,3,590,295,0,6750,6749,1,0,0,0,6750,6751,1,0,0,0,6751,6752,1,0,
	0,0,6752,6754,5,1134,0,0,6753,6748,1,0,0,0,6753,6754,1,0,0,0,6754,6762,
	1,0,0,0,6755,6756,5,323,0,0,6756,6758,5,1133,0,0,6757,6759,3,590,295,0,
	6758,6757,1,0,0,0,6758,6759,1,0,0,0,6759,6760,1,0,0,0,6760,6762,5,1134,
	0,0,6761,6747,1,0,0,0,6761,6755,1,0,0,0,6762,637,1,0,0,0,6763,6766,3,688,
	344,0,6764,6766,5,42,0,0,6765,6763,1,0,0,0,6765,6764,1,0,0,0,6766,639,1,
	0,0,0,6767,6768,5,77,0,0,6768,6769,5,60,0,0,6769,641,1,0,0,0,6770,6771,
	5,77,0,0,6771,6772,5,114,0,0,6772,6773,5,60,0,0,6773,643,1,0,0,0,6774,6775,
	5,123,0,0,6775,6776,5,141,0,0,6776,645,1,0,0,0,6777,6778,5,674,0,0,6778,
	6781,3,590,295,0,6779,6781,5,527,0,0,6780,6777,1,0,0,0,6780,6779,1,0,0,
	0,6781,647,1,0,0,0,6782,6801,3,650,325,0,6783,6801,3,658,329,0,6784,6801,
	3,660,330,0,6785,6786,3,680,340,0,6786,6788,5,1133,0,0,6787,6789,3,684,
	342,0,6788,6787,1,0,0,0,6788,6789,1,0,0,0,6789,6790,1,0,0,0,6790,6791,5,
	1134,0,0,6791,6801,1,0,0,0,6792,6793,3,550,275,0,6793,6795,5,1133,0,0,6794,
	6796,3,684,342,0,6795,6794,1,0,0,0,6795,6796,1,0,0,0,6796,6797,1,0,0,0,
	6797,6798,5,1134,0,0,6798,6801,1,0,0,0,6799,6801,3,682,341,0,6800,6782,
	1,0,0,0,6800,6783,1,0,0,0,6800,6784,1,0,0,0,6800,6785,1,0,0,0,6800,6792,
	1,0,0,0,6800,6799,1,0,0,0,6801,649,1,0,0,0,6802,6805,7,116,0,0,6803,6804,
	5,1133,0,0,6804,6806,5,1134,0,0,6805,6803,1,0,0,0,6805,6806,1,0,0,0,6806,
	6982,1,0,0,0,6807,6982,3,62,31,0,6808,6809,5,32,0,0,6809,6810,5,1133,0,
	0,6810,6811,3,688,344,0,6811,6812,5,1135,0,0,6812,6813,3,608,304,0,6813,
	6814,5,1134,0,0,6814,6982,1,0,0,0,6815,6816,5,32,0,0,6816,6817,5,1133,0,
	0,6817,6818,3,688,344,0,6818,6819,5,187,0,0,6819,6820,3,568,284,0,6820,
	6821,5,1134,0,0,6821,6982,1,0,0,0,6822,6823,5,23,0,0,6823,6824,5,1133,0,
	0,6824,6825,3,688,344,0,6825,6826,5,12,0,0,6826,6827,3,608,304,0,6827,6828,
	5,1134,0,0,6828,6982,1,0,0,0,6829,6830,5,188,0,0,6830,6831,5,1133,0,0,6831,
	6832,3,556,278,0,6832,6833,5,1134,0,0,6833,6982,1,0,0,0,6834,6835,5,22,
	0,0,6835,6837,3,688,344,0,6836,6838,3,652,326,0,6837,6836,1,0,0,0,6838,
	6839,1,0,0,0,6839,6837,1,0,0,0,6839,6840,1,0,0,0,6840,6843,1,0,0,0,6841,
	6842,5,53,0,0,6842,6844,3,686,343,0,6843,6841,1,0,0,0,6843,6844,1,0,0,0,
	6844,6845,1,0,0,0,6845,6846,5,407,0,0,6846,6982,1,0,0,0,6847,6849,5,22,
	0,0,6848,6850,3,652,326,0,6849,6848,1,0,0,0,6850,6851,1,0,0,0,6851,6849,
	1,0,0,0,6851,6852,1,0,0,0,6852,6855,1,0,0,0,6853,6854,5,53,0,0,6854,6856,
	3,686,343,0,6855,6853,1,0,0,0,6855,6856,1,0,0,0,6856,6857,1,0,0,0,6857,
	6858,5,407,0,0,6858,6982,1,0,0,0,6859,6860,5,222,0,0,6860,6861,5,1133,0,
	0,6861,6864,3,684,342,0,6862,6863,5,187,0,0,6863,6865,3,568,284,0,6864,
	6862,1,0,0,0,6864,6865,1,0,0,0,6865,6866,1,0,0,0,6866,6867,5,1134,0,0,6867,
	6982,1,0,0,0,6868,6869,5,324,0,0,6869,6872,5,1133,0,0,6870,6873,3,594,297,
	0,6871,6873,3,688,344,0,6872,6870,1,0,0,0,6872,6871,1,0,0,0,6873,6874,1,
	0,0,0,6874,6877,5,80,0,0,6875,6878,3,594,297,0,6876,6878,3,688,344,0,6877,
	6875,1,0,0,0,6877,6876,1,0,0,0,6878,6879,1,0,0,0,6879,6880,5,1134,0,0,6880,
	6982,1,0,0,0,6881,6882,7,117,0,0,6882,6885,5,1133,0,0,6883,6886,3,594,297,
	0,6884,6886,3,688,344,0,6885,6883,1,0,0,0,6885,6884,1,0,0,0,6886,6887,1,
	0,0,0,6887,6890,5,68,0,0,6888,6891,3,590,295,0,6889,6891,3,688,344,0,6890,
	6888,1,0,0,0,6890,6889,1,0,0,0,6891,6897,1,0,0,0,6892,6895,5,65,0,0,6893,
	6896,3,590,295,0,6894,6896,3,688,344,0,6895,6893,1,0,0,0,6895,6894,1,0,
	0,0,6896,6898,1,0,0,0,6897,6892,1,0,0,0,6897,6898,1,0,0,0,6898,6899,1,0,
	0,0,6899,6900,5,1134,0,0,6900,6982,1,0,0,0,6901,6902,5,328,0,0,6902,6903,
	5,1133,0,0,6903,6906,7,118,0,0,6904,6907,3,594,297,0,6905,6907,3,688,344,
	0,6906,6904,1,0,0,0,6906,6905,1,0,0,0,6906,6907,1,0,0,0,6907,6908,1,0,0,
	0,6908,6911,5,68,0,0,6909,6912,3,594,297,0,6910,6912,3,688,344,0,6911,6909,
	1,0,0,0,6911,6910,1,0,0,0,6912,6913,1,0,0,0,6913,6914,5,1134,0,0,6914,6982,
	1,0,0,0,6915,6916,5,328,0,0,6916,6919,5,1133,0,0,6917,6920,3,594,297,0,
	6918,6920,3,688,344,0,6919,6917,1,0,0,0,6919,6918,1,0,0,0,6920,6921,1,0,
	0,0,6921,6924,5,68,0,0,6922,6925,3,594,297,0,6923,6925,3,688,344,0,6924,
	6922,1,0,0,0,6924,6923,1,0,0,0,6925,6926,1,0,0,0,6926,6927,5,1134,0,0,6927,
	6982,1,0,0,0,6928,6929,5,1103,0,0,6929,6932,5,1133,0,0,6930,6933,3,594,
	297,0,6931,6933,3,688,344,0,6932,6930,1,0,0,0,6932,6931,1,0,0,0,6933,6940,
	1,0,0,0,6934,6935,5,12,0,0,6935,6936,7,119,0,0,6936,6937,5,1133,0,0,6937,
	6938,3,590,295,0,6938,6939,5,1134,0,0,6939,6941,1,0,0,0,6940,6934,1,0,0,
	0,6940,6941,1,0,0,0,6941,6943,1,0,0,0,6942,6944,3,654,327,0,6943,6942,1,
	0,0,0,6943,6944,1,0,0,0,6944,6945,1,0,0,0,6945,6946,5,1134,0,0,6946,6982,
	1,0,0,0,6947,6948,5,321,0,0,6948,6949,5,1133,0,0,6949,6950,3,72,36,0,6950,
	6953,5,68,0,0,6951,6954,3,594,297,0,6952,6954,3,688,344,0,6953,6951,1,0,
	0,0,6953,6952,1,0,0,0,6954,6955,1,0,0,0,6955,6956,5,1134,0,0,6956,6982,
	1,0,0,0,6957,6958,5,900,0,0,6958,6959,5,1133,0,0,6959,6960,7,120,0,0,6960,
	6961,5,1135,0,0,6961,6962,3,594,297,0,6962,6963,5,1134,0,0,6963,6982,1,
	0,0,0,6964,6965,5,282,0,0,6965,6966,5,1133,0,0,6966,6967,3,688,344,0,6967,
	6968,5,1135,0,0,6968,6971,3,688,344,0,6969,6970,5,593,0,0,6970,6972,3,608,
	304,0,6971,6969,1,0,0,0,6971,6972,1,0,0,0,6972,6974,1,0,0,0,6973,6975,3,
	268,134,0,6974,6973,1,0,0,0,6974,6975,1,0,0,0,6975,6977,1,0,0,0,6976,6978,
	3,270,135,0,6977,6976,1,0,0,0,6977,6978,1,0,0,0,6978,6979,1,0,0,0,6979,
	6980,5,1134,0,0,6980,6982,1,0,0,0,6981,6802,1,0,0,0,6981,6807,1,0,0,0,6981,
	6808,1,0,0,0,6981,6815,1,0,0,0,6981,6822,1,0,0,0,6981,6829,1,0,0,0,6981,
	6834,1,0,0,0,6981,6847,1,0,0,0,6981,6859,1,0,0,0,6981,6868,1,0,0,0,6981,
	6881,1,0,0,0,6981,6901,1,0,0,0,6981,6915,1,0,0,0,6981,6928,1,0,0,0,6981,
	6947,1,0,0,0,6981,6957,1,0,0,0,6981,6964,1,0,0,0,6982,651,1,0,0,0,6983,
	6984,5,189,0,0,6984,6985,3,686,343,0,6985,6986,5,174,0,0,6986,6987,3,686,
	343,0,6987,653,1,0,0,0,6988,6989,5,472,0,0,6989,6994,3,656,328,0,6990,6991,
	5,1135,0,0,6991,6993,3,656,328,0,6992,6990,1,0,0,0,6993,6996,1,0,0,0,6994,
	6992,1,0,0,0,6994,6995,1,0,0,0,6995,7003,1,0,0,0,6996,6994,1,0,0,0,6997,
	6998,5,472,0,0,6998,6999,3,590,295,0,6999,7000,5,1121,0,0,7000,7001,3,590,
	295,0,7001,7003,1,0,0,0,7002,6988,1,0,0,0,7002,6997,1,0,0,0,7003,655,1,
	0,0,0,7004,7006,3,590,295,0,7005,7007,7,121,0,0,7006,7005,1,0,0,0,7006,
	7007,1,0,0,0,7007,657,1,0,0,0,7008,7009,7,122,0,0,7009,7011,5,1133,0,0,
	7010,7012,7,44,0,0,7011,7010,1,0,0,0,7011,7012,1,0,0,0,7012,7013,1,0,0,
	0,7013,7014,3,686,343,0,7014,7016,5,1134,0,0,7015,7017,3,662,331,0,7016,
	7015,1,0,0,0,7016,7017,1,0,0,0,7017,7068,1,0,0,0,7018,7019,5,290,0,0,7019,
	7027,5,1133,0,0,7020,7028,5,1117,0,0,7021,7023,5,6,0,0,7022,7021,1,0,0,
	0,7022,7023,1,0,0,0,7023,7024,1,0,0,0,7024,7028,3,686,343,0,7025,7026,5,
	49,0,0,7026,7028,3,684,342,0,7027,7020,1,0,0,0,7027,7022,1,0,0,0,7027,7025,
	1,0,0,0,7028,7029,1,0,0,0,7029,7031,5,1134,0,0,7030,7032,3,662,331,0,7031,
	7030,1,0,0,0,7031,7032,1,0,0,0,7032,7068,1,0,0,0,7033,7034,7,123,0,0,7034,
	7036,5,1133,0,0,7035,7037,5,6,0,0,7036,7035,1,0,0,0,7036,7037,1,0,0,0,7037,
	7038,1,0,0,0,7038,7039,3,686,343,0,7039,7041,5,1134,0,0,7040,7042,3,662,
	331,0,7041,7040,1,0,0,0,7041,7042,1,0,0,0,7042,7068,1,0,0,0,7043,7044,5,
	294,0,0,7044,7046,5,1133,0,0,7045,7047,5,49,0,0,7046,7045,1,0,0,0,7046,
	7047,1,0,0,0,7047,7048,1,0,0,0,7048,7059,3,684,342,0,7049,7050,5,124,0,
	0,7050,7051,5,19,0,0,7051,7056,3,232,116,0,7052,7053,5,1135,0,0,7053,7055,
	3,232,116,0,7054,7052,1,0,0,0,7055,7058,1,0,0,0,7056,7054,1,0,0,0,7056,
	7057,1,0,0,0,7057,7060,1,0,0,0,7058,7056,1,0,0,0,7059,7049,1,0,0,0,7059,
	7060,1,0,0,0,7060,7063,1,0,0,0,7061,7062,5,154,0,0,7062,7064,5,1148,0,0,
	7063,7061,1,0,0,0,7063,7064,1,0,0,0,7064,7065,1,0,0,0,7065,7066,5,1134,
	0,0,7066,7068,1,0,0,0,7067,7008,1,0,0,0,7067,7018,1,0,0,0,7067,7033,1,0,
	0,0,7067,7043,1,0,0,0,7068,659,1,0,0,0,7069,7070,7,124,0,0,7070,7071,5,
	1133,0,0,7071,7074,3,688,344,0,7072,7073,5,1135,0,0,7073,7075,3,590,295,
	0,7074,7072,1,0,0,0,7074,7075,1,0,0,0,7075,7078,1,0,0,0,7076,7077,5,1135,
	0,0,7077,7079,3,590,295,0,7078,7076,1,0,0,0,7078,7079,1,0,0,0,7079,7080,
	1,0,0,0,7080,7081,5,1134,0,0,7081,7082,3,662,331,0,7082,7108,1,0,0,0,7083,
	7084,7,125,0,0,7084,7085,5,1133,0,0,7085,7086,3,688,344,0,7086,7087,5,1134,
	0,0,7087,7088,3,662,331,0,7088,7108,1,0,0,0,7089,7090,7,126,0,0,7090,7091,
	5,1133,0,0,7091,7092,5,1134,0,0,7092,7108,3,662,331,0,7093,7094,5,301,0,
	0,7094,7095,5,1133,0,0,7095,7096,3,688,344,0,7096,7097,5,1135,0,0,7097,
	7098,3,590,295,0,7098,7099,5,1134,0,0,7099,7100,3,662,331,0,7100,7108,1,
	0,0,0,7101,7102,5,300,0,0,7102,7103,5,1133,0,0,7103,7104,3,590,295,0,7104,
	7105,5,1134,0,0,7105,7106,3,662,331,0,7106,7108,1,0,0,0,7107,7069,1,0,0,
	0,7107,7083,1,0,0,0,7107,7089,1,0,0,0,7107,7093,1,0,0,0,7107,7101,1,0,0,
	0,7108,661,1,0,0,0,7109,7115,5,128,0,0,7110,7111,5,1133,0,0,7111,7112,3,
	664,332,0,7112,7113,5,1134,0,0,7113,7116,1,0,0,0,7114,7116,3,666,333,0,
	7115,7110,1,0,0,0,7115,7114,1,0,0,0,7116,663,1,0,0,0,7117,7119,3,666,333,
	0,7118,7117,1,0,0,0,7118,7119,1,0,0,0,7119,7121,1,0,0,0,7120,7122,3,678,
	339,0,7121,7120,1,0,0,0,7121,7122,1,0,0,0,7122,7124,1,0,0,0,7123,7125,3,
	230,115,0,7124,7123,1,0,0,0,7124,7125,1,0,0,0,7125,7127,1,0,0,0,7126,7128,
	3,668,334,0,7127,7126,1,0,0,0,7127,7128,1,0,0,0,7128,665,1,0,0,0,7129,7130,
	3,584,292,0,7130,667,1,0,0,0,7131,7132,3,670,335,0,7132,7133,3,672,336,
	0,7133,669,1,0,0,0,7134,7135,7,127,0,0,7135,671,1,0,0,0,7136,7139,3,676,
	338,0,7137,7139,3,674,337,0,7138,7136,1,0,0,0,7138,7137,1,0,0,0,7139,673,
	1,0,0,0,7140,7141,5,16,0,0,7141,7142,3,676,338,0,7142,7143,5,10,0,0,7143,
	7144,3,676,338,0,7144,675,1,0,0,0,7145,7146,5,35,0,0,7146,7153,5,600,0,
	0,7147,7148,5,657,0,0,7148,7153,7,128,0,0,7149,7150,3,688,344,0,7150,7151,
	7,128,0,0,7151,7153,1,0,0,0,7152,7145,1,0,0,0,7152,7147,1,0,0,0,7152,7149,
	1,0,0,0,7153,677,1,0,0,0,7154,7155,5,129,0,0,7155,7156,5,19,0,0,7156,7161,
	3,688,344,0,7157,7158,5,1135,0,0,7158,7160,3,688,344,0,7159,7157,1,0,0,
	0,7160,7163,1,0,0,0,7161,7159,1,0,0,0,7161,7162,1,0,0,0,7162,679,1,0,0,
	0,7163,7161,1,0,0,0,7164,7189,3,720,360,0,7165,7189,5,747,0,0,7166,7189,
	5,317,0,0,7167,7189,5,313,0,0,7168,7189,5,314,0,0,7169,7189,5,315,0,0,7170,
	7189,5,318,0,0,7171,7189,5,319,0,0,7172,7189,5,320,0,0,7173,7189,5,77,0,
	0,7174,7189,5,85,0,0,7175,7189,5,316,0,0,7176,7189,5,322,0,0,7177,7189,
	5,508,0,0,7178,7189,5,323,0,0,7179,7189,5,140,0,0,7180,7189,5,141,0,0,7181,
	7189,5,325,0,0,7182,7189,5,326,0,0,7183,7189,5,327,0,0,7184,7189,5,328,
	0,0,7185,7189,5,329,0,0,7186,7189,5,330,0,0,7187,7189,5,331,0,0,7188,7164,
	1,0,0,0,7188,7165,1,0,0,0,7188,7166,1,0,0,0,7188,7167,1,0,0,0,7188,7168,
	1,0,0,0,7188,7169,1,0,0,0,7188,7170,1,0,0,0,7188,7171,1,0,0,0,7188,7172,
	1,0,0,0,7188,7173,1,0,0,0,7188,7174,1,0,0,0,7188,7175,1,0,0,0,7188,7176,
	1,0,0,0,7188,7177,1,0,0,0,7188,7178,1,0,0,0,7188,7179,1,0,0,0,7188,7180,
	1,0,0,0,7188,7181,1,0,0,0,7188,7182,1,0,0,0,7188,7183,1,0,0,0,7188,7184,
	1,0,0,0,7188,7185,1,0,0,0,7188,7186,1,0,0,0,7188,7187,1,0,0,0,7189,681,
	1,0,0,0,7190,7191,7,129,0,0,7191,7192,5,1133,0,0,7192,7193,3,686,343,0,
	7193,7194,5,1134,0,0,7194,683,1,0,0,0,7195,7200,3,602,301,0,7196,7200,3,
	556,278,0,7197,7200,3,648,324,0,7198,7200,3,688,344,0,7199,7195,1,0,0,0,
	7199,7196,1,0,0,0,7199,7197,1,0,0,0,7199,7198,1,0,0,0,7200,7210,1,0,0,0,
	7201,7206,5,1135,0,0,7202,7207,3,602,301,0,7203,7207,3,556,278,0,7204,7207,
	3,648,324,0,7205,7207,3,688,344,0,7206,7202,1,0,0,0,7206,7203,1,0,0,0,7206,
	7204,1,0,0,0,7206,7205,1,0,0,0,7207,7209,1,0,0,0,7208,7201,1,0,0,0,7209,
	7212,1,0,0,0,7210,7208,1,0,0,0,7210,7211,1,0,0,0,7211,685,1,0,0,0,7212,
	7210,1,0,0,0,7213,7218,3,602,301,0,7214,7218,3,556,278,0,7215,7218,3,648,
	324,0,7216,7218,3,688,344,0,7217,7213,1,0,0,0,7217,7214,1,0,0,0,7217,7215,
	1,0,0,0,7217,7216,1,0,0,0,7218,687,1,0,0,0,7219,7220,6,344,-1,0,7220,7221,
	7,130,0,0,7221,7231,3,688,344,4,7222,7223,3,690,345,0,7223,7225,5,88,0,
	0,7224,7226,5,114,0,0,7225,7224,1,0,0,0,7225,7226,1,0,0,0,7226,7227,1,0,
	0,0,7227,7228,7,131,0,0,7228,7231,1,0,0,0,7229,7231,3,690,345,0,7230,7219,
	1,0,0,0,7230,7222,1,0,0,0,7230,7229,1,0,0,0,7231,7238,1,0,0,0,7232,7233,
	10,3,0,0,7233,7234,3,698,349,0,7234,7235,3,688,344,4,7235,7237,1,0,0,0,
	7236,7232,1,0,0,0,7237,7240,1,0,0,0,7238,7236,1,0,0,0,7238,7239,1,0,0,0,
	7239,689,1,0,0,0,7240,7238,1,0,0,0,7241,7242,6,345,-1,0,7242,7243,3,692,
	346,0,7243,7308,1,0,0,0,7244,7245,10,8,0,0,7245,7246,3,696,348,0,7246,7247,
	3,690,345,9,7247,7307,1,0,0,0,7248,7250,10,6,0,0,7249,7251,5,114,0,0,7250,
	7249,1,0,0,0,7250,7251,1,0,0,0,7251,7252,1,0,0,0,7252,7253,5,16,0,0,7253,
	7254,3,690,345,0,7254,7255,5,10,0,0,7255,7256,3,690,345,7,7256,7307,1,0,
	0,0,7257,7258,10,5,0,0,7258,7259,5,620,0,0,7259,7260,5,98,0,0,7260,7307,
	3,690,345,6,7261,7263,10,3,0,0,7262,7264,5,114,0,0,7263,7262,1,0,0,0,7263,
	7264,1,0,0,0,7264,7265,1,0,0,0,7265,7266,7,132,0,0,7266,7307,3,690,345,
	4,7267,7269,10,10,0,0,7268,7270,5,114,0,0,7269,7268,1,0,0,0,7269,7270,1,
	0,0,0,7270,7271,1,0,0,0,7271,7272,5,80,0,0,7272,7275,5,1133,0,0,7273,7276,
	3,200,100,0,7274,7276,3,624,312,0,7275,7273,1,0,0,0,7275,7274,1,0,0,0,7276,
	7277,1,0,0,0,7277,7278,5,1134,0,0,7278,7307,1,0,0,0,7279,7280,10,9,0,0,
	7280,7281,5,88,0,0,7281,7307,3,600,300,0,7282,7283,10,7,0,0,7283,7284,3,
	696,348,0,7284,7285,7,133,0,0,7285,7286,5,1133,0,0,7286,7287,3,200,100,
	0,7287,7288,5,1134,0,0,7288,7307,1,0,0,0,7289,7291,10,4,0,0,7290,7292,5,
	114,0,0,7291,7290,1,0,0,0,7291,7292,1,0,0,0,7292,7293,1,0,0,0,7293,7294,
	5,98,0,0,7294,7297,3,690,345,0,7295,7296,5,413,0,0,7296,7298,5,1148,0,0,
	7297,7295,1,0,0,0,7297,7298,1,0,0,0,7298,7307,1,0,0,0,7299,7300,10,2,0,
	0,7300,7301,5,505,0,0,7301,7302,5,533,0,0,7302,7303,5,1133,0,0,7303,7304,
	3,690,345,0,7304,7305,5,1134,0,0,7305,7307,1,0,0,0,7306,7244,1,0,0,0,7306,
	7248,1,0,0,0,7306,7257,1,0,0,0,7306,7261,1,0,0,0,7306,7267,1,0,0,0,7306,
	7279,1,0,0,0,7306,7282,1,0,0,0,7306,7289,1,0,0,0,7306,7299,1,0,0,0,7307,
	7310,1,0,0,0,7308,7306,1,0,0,0,7308,7309,1,0,0,0,7309,691,1,0,0,0,7310,
	7308,1,0,0,0,7311,7312,6,346,-1,0,7312,7360,3,602,301,0,7313,7360,3,556,
	278,0,7314,7360,3,648,324,0,7315,7360,3,566,283,0,7316,7317,3,694,347,0,
	7317,7318,3,692,346,12,7318,7360,1,0,0,0,7319,7320,5,226,0,0,7320,7360,
	3,692,346,11,7321,7322,5,1159,0,0,7322,7323,5,1108,0,0,7323,7360,3,692,
	346,10,7324,7325,5,1133,0,0,7325,7330,3,688,344,0,7326,7327,5,1135,0,0,
	7327,7329,3,688,344,0,7328,7326,1,0,0,0,7329,7332,1,0,0,0,7330,7328,1,0,
	0,0,7330,7331,1,0,0,0,7331,7333,1,0,0,0,7332,7330,1,0,0,0,7333,7334,5,1134,
	0,0,7334,7360,1,0,0,0,7335,7336,5,600,0,0,7336,7337,5,1133,0,0,7337,7340,
	3,688,344,0,7338,7339,5,1135,0,0,7339,7341,3,688,344,0,7340,7338,1,0,0,
	0,7341,7342,1,0,0,0,7342,7340,1,0,0,0,7342,7343,1,0,0,0,7343,7344,1,0,0,
	0,7344,7345,5,1134,0,0,7345,7360,1,0,0,0,7346,7347,5,60,0,0,7347,7348,5,
	1133,0,0,7348,7349,3,200,100,0,7349,7350,5,1134,0,0,7350,7360,1,0,0,0,7351,
	7352,5,1133,0,0,7352,7353,3,200,100,0,7353,7354,5,1134,0,0,7354,7360,1,
	0,0,0,7355,7356,5,86,0,0,7356,7357,3,688,344,0,7357,7358,3,72,36,0,7358,
	7360,1,0,0,0,7359,7311,1,0,0,0,7359,7313,1,0,0,0,7359,7314,1,0,0,0,7359,
	7315,1,0,0,0,7359,7316,1,0,0,0,7359,7319,1,0,0,0,7359,7321,1,0,0,0,7359,
	7324,1,0,0,0,7359,7335,1,0,0,0,7359,7346,1,0,0,0,7359,7351,1,0,0,0,7359,
	7355,1,0,0,0,7360,7382,1,0,0,0,7361,7362,10,4,0,0,7362,7363,3,700,350,0,
	7363,7364,3,692,346,5,7364,7381,1,0,0,0,7365,7366,10,3,0,0,7366,7367,3,
	702,351,0,7367,7368,3,692,346,4,7368,7381,1,0,0,0,7369,7370,10,2,0,0,7370,
	7371,3,704,352,0,7371,7372,3,692,346,3,7372,7381,1,0,0,0,7373,7374,10,1,
	0,0,7374,7375,3,706,353,0,7375,7376,3,692,346,2,7376,7381,1,0,0,0,7377,
	7378,10,14,0,0,7378,7379,5,27,0,0,7379,7381,3,570,285,0,7380,7361,1,0,0,
	0,7380,7365,1,0,0,0,7380,7369,1,0,0,0,7380,7373,1,0,0,0,7380,7377,1,0,0,
	0,7381,7384,1,0,0,0,7382,7380,1,0,0,0,7382,7383,1,0,0,0,7383,693,1,0,0,
	0,7384,7382,1,0,0,0,7385,7386,7,134,0,0,7386,695,1,0,0,0,7387,7402,5,1124,
	0,0,7388,7402,5,1125,0,0,7389,7402,5,1126,0,0,7390,7391,5,1126,0,0,7391,
	7402,5,1124,0,0,7392,7393,5,1125,0,0,7393,7402,5,1124,0,0,7394,7395,5,1126,
	0,0,7395,7402,5,1125,0,0,7396,7397,5,1127,0,0,7397,7402,5,1124,0,0,7398,
	7399,5,1126,0,0,7399,7400,5,1124,0,0,7400,7402,5,1125,0,0,7401,7387,1,0,
	0,0,7401,7388,1,0,0,0,7401,7389,1,0,0,0,7401,7390,1,0,0,0,7401,7392,1,0,
	0,0,7401,7394,1,0,0,0,7401,7396,1,0,0,0,7401,7398,1,0,0,0,7402,697,1,0,
	0,0,7403,7411,5,10,0,0,7404,7405,5,1130,0,0,7405,7411,5,1130,0,0,7406,7411,
	5,194,0,0,7407,7411,5,123,0,0,7408,7409,5,1129,0,0,7409,7411,5,1129,0,0,
	7410,7403,1,0,0,0,7410,7404,1,0,0,0,7410,7406,1,0,0,0,7410,7407,1,0,0,0,
	7410,7408,1,0,0,0,7411,699,1,0,0,0,7412,7413,5,1126,0,0,7413,7420,5,1126,
	0,0,7414,7415,5,1125,0,0,7415,7420,5,1125,0,0,7416,7420,5,1130,0,0,7417,
	7420,5,1131,0,0,7418,7420,5,1129,0,0,7419,7412,1,0,0,0,7419,7414,1,0,0,
	0,7419,7416,1,0,0,0,7419,7417,1,0,0,0,7419,7418,1,0,0,0,7420,701,1,0,0,
	0,7421,7422,7,135,0,0,7422,703,1,0,0,0,7423,7424,7,136,0,0,7424,705,1,0,
	0,0,7425,7426,5,1121,0,0,7426,7431,5,1125,0,0,7427,7428,5,1121,0,0,7428,
	7429,5,1125,0,0,7429,7431,5,1125,0,0,7430,7425,1,0,0,0,7430,7427,1,0,0,
	0,7431,707,1,0,0,0,7432,7433,7,137,0,0,7433,709,1,0,0,0,7434,7435,7,138,
	0,0,7435,711,1,0,0,0,7436,7437,7,139,0,0,7437,713,1,0,0,0,7438,7439,7,140,
	0,0,7439,715,1,0,0,0,7440,7441,7,141,0,0,7441,717,1,0,0,0,7442,7443,7,142,
	0,0,7443,719,1,0,0,0,7444,7445,7,143,0,0,7445,721,1,0,0,0,1086,723,727,
	734,737,740,742,748,751,754,763,805,820,831,848,853,868,895,904,909,915,
	920,924,933,936,939,943,950,953,958,966,971,976,979,981,993,996,1000,1003,
	1007,1010,1014,1017,1020,1024,1027,1031,1037,1043,1049,1056,1063,1066,1070,
	1075,1081,1090,1095,1100,1107,1124,1131,1135,1145,1149,1153,1157,1161,1166,
	1169,1172,1175,1178,1184,1188,1194,1199,1202,1205,1207,1218,1222,1225,1239,
	1242,1246,1249,1253,1256,1260,1263,1267,1270,1273,1277,1280,1284,1290,1303,
	1309,1320,1325,1333,1341,1346,1349,1354,1362,1367,1373,1378,1382,1384,1387,
	1391,1395,1398,1402,1406,1410,1416,1419,1426,1431,1437,1444,1450,1458,1461,
	1468,1471,1473,1479,1485,1502,1509,1516,1528,1533,1536,1539,1552,1565,1570,
	1586,1594,1604,1607,1610,1616,1620,1623,1634,1637,1642,1655,1662,1669,1671,
	1678,1682,1684,1689,1692,1698,1703,1705,1709,1712,1715,1721,1726,1728,1733,
	1740,1742,1749,1754,1758,1761,1769,1777,1779,1789,1793,1796,1802,1807,1810,
	1816,1819,1823,1826,1830,1835,1840,1845,1849,1853,1857,1861,1865,1869,1874,
	1879,1884,1890,1895,1900,1905,1910,1915,1921,1926,1931,1936,1941,1946,1951,
	1956,1963,1968,1973,1978,1982,1987,1995,2000,2006,2018,2025,2027,2035,2040,
	2043,2051,2057,2061,2074,2086,2088,2091,2099,2105,2111,2124,2131,2140,2145,
	2156,2165,2170,2182,2189,2198,2203,2215,2222,2231,2236,2243,2252,2257,2259,
	2264,2272,2281,2285,2288,2292,2297,2303,2309,2314,2319,2324,2329,2332,2337,
	2342,2352,2356,2363,2368,2371,2376,2379,2383,2387,2395,2414,2417,2420,2424,
	2434,2447,2454,2457,2462,2469,2472,2475,2486,2489,2493,2501,2504,2509,2517,
	2523,2527,2531,2536,2541,2548,2552,2563,2571,2574,2580,2586,2588,2593,2596,
	2602,2608,2610,2614,2617,2620,2626,2632,2635,2641,2647,2649,2654,2662,2664,
	2673,2676,2679,2684,2686,2695,2698,2701,2706,2708,2717,2722,2730,2734,2742,
	2752,2757,2764,2768,2772,2791,2801,2807,2824,2828,2838,2843,2846,2855,2866,
	2874,2880,2890,2902,2909,2916,2931,2944,2950,2956,2962,2968,2974,2980,2985,
	2992,2999,3006,3011,3014,3016,3030,3037,3044,3050,3054,3058,3065,3068,3073,
	3080,3087,3091,3096,3103,3116,3119,3124,3129,3133,3139,3148,3157,3166,3169,
	3173,3182,3186,3189,3192,3198,3201,3205,3208,3212,3215,3223,3226,3237,3240,
	3245,3248,3253,3263,3268,3274,3276,3282,3284,3290,3298,3303,3311,3314,3319,
	3322,3327,3335,3343,3349,3357,3362,3370,3373,3377,3380,3388,3394,3403,3406,
	3410,3414,3418,3423,3427,3431,3433,3436,3439,3442,3448,3452,3455,3458,3461,
	3464,3471,3473,3477,3482,3488,3493,3500,3506,3511,3514,3520,3524,3532,3536,
	3539,3542,3547,3550,3557,3561,3564,3568,3572,3575,3578,3583,3589,3593,3603,
	3609,3613,3619,3623,3629,3632,3644,3648,3652,3660,3664,3672,3675,3679,3682,
	3690,3695,3698,3701,3705,3708,3717,3722,3731,3736,3743,3750,3758,3764,3772,
	3775,3778,3785,3788,3795,3798,3806,3812,3823,3826,3830,3836,3845,3850,3854,
	3860,3866,3868,3872,3881,3891,3901,3907,3912,3916,3919,3922,3925,3928,3934,
	3940,3943,3946,3949,3952,3955,3957,3963,3969,3972,3975,3978,3981,3984,3988,
	3994,3998,4006,4010,4013,4015,4028,4031,4038,4048,4051,4056,4058,4062,4070,
	4076,4085,4098,4102,4108,4117,4120,4124,4127,4131,4135,4138,4140,4148,4160,
	4166,4168,4174,4176,4178,4184,4192,4200,4204,4208,4217,4222,4242,4247,4253,
	4260,4265,4274,4277,4281,4285,4289,4292,4295,4298,4302,4306,4309,4312,4315,
	4322,4326,4341,4345,4357,4365,4375,4379,4382,4388,4391,4394,4403,4412,4422,
	4426,4436,4446,4454,4457,4466,4469,4473,4478,4482,4491,4494,4525,4528,4531,
	4587,4592,4620,4634,4641,4645,4651,4659,4661,4672,4682,4689,4695,4703,4708,
	4716,4724,4732,4740,4746,4751,4756,4761,4767,4769,4780,4785,4792,4794,4808,
	4814,4819,4824,4830,4837,4845,4853,4858,4864,4867,4875,4882,4891,4894,4911,
	4919,4927,4931,4938,4944,4952,4961,4967,4974,4981,4986,4989,4991,4997,4999,
	5003,5005,5012,5017,5021,5027,5036,5042,5049,5055,5061,5066,5069,5071,5077,
	5079,5083,5085,5092,5094,5099,5106,5115,5120,5129,5136,5141,5144,5146,5152,
	5154,5157,5165,5170,5175,5179,5185,5190,5194,5200,5202,5213,5216,5223,5226,
	5238,5244,5253,5262,5267,5276,5282,5293,5299,5304,5308,5314,5319,5323,5326,
	5338,5345,5350,5380,5384,5389,5396,5399,5405,5415,5425,5435,5441,5450,5456,
	5463,5465,5475,5479,5483,5493,5498,5570,5588,5596,5608,5615,5617,5627,5630,
	5638,5645,5649,5656,5661,5664,5667,5676,5680,5684,5707,5714,5718,5725,5732,
	5735,5751,5754,5764,5768,5774,5777,5782,5786,5793,5796,5802,5826,5829,5841,
	5844,5854,5862,5866,5873,5876,5885,5891,5897,5907,5909,5915,5918,5921,5933,
	5936,5942,5945,5953,5961,5967,5971,5985,5997,6004,6007,6014,6021,6026,6039,
	6050,6056,6061,6074,6076,6081,6085,6088,6090,6097,6104,6107,6110,6116,6120,
	6126,6132,6145,6150,6158,6161,6166,6171,6179,6182,6190,6194,6201,6207,6210,
	6214,6227,6233,6245,6248,6257,6262,6268,6274,6279,6281,6284,6288,6290,6294,
	6300,6303,6306,6312,6321,6329,6333,6338,6358,6365,6367,6374,6376,6380,6385,
	6396,6401,6407,6410,6414,6419,6422,6426,6430,6432,6437,6442,6455,6458,6462,
	6465,6468,6473,6478,6484,6487,6492,6495,6500,6503,6507,6512,6517,6522,6527,
	6530,6535,6540,6545,6551,6556,6561,6566,6570,6573,6578,6582,6586,6594,6601,
	6605,6610,6615,6619,6621,6624,6640,6649,6657,6665,6674,6684,6692,6700,6708,
	6716,6728,6735,6745,6750,6753,6758,6761,6765,6780,6788,6795,6800,6805,6839,
	6843,6851,6855,6864,6872,6877,6885,6890,6895,6897,6906,6911,6919,6924,6932,
	6940,6943,6953,6971,6974,6977,6981,6994,7002,7006,7011,7016,7022,7027,7031,
	7036,7041,7046,7056,7059,7063,7067,7074,7078,7107,7115,7118,7121,7124,7127,
	7138,7152,7161,7188,7199,7206,7210,7217,7225,7230,7238,7250,7263,7269,7275,
	7291,7297,7306,7308,7330,7342,7359,7380,7382,7401,7410,7419,7430];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MySqlParser.__ATN) {
			MySqlParser.__ATN = new ATNDeserializer().deserialize(MySqlParser._serializedATN);
		}

		return MySqlParser.__ATN;
	}


	static DecisionsToDFA = MySqlParser._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );

}

export class RootContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EOF(): TerminalNode {
		return this.getToken(MySqlParser.EOF, 0);
	}
	public sqlStatements(): SqlStatementsContext {
		return this.getTypedRuleContext(SqlStatementsContext, 0) as SqlStatementsContext;
	}
	public MINUS_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.MINUS);
	}
	public MINUS(i: number): TerminalNode {
		return this.getToken(MySqlParser.MINUS, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_root;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRoot) {
	 		listener.enterRoot(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRoot) {
	 		listener.exitRoot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoot) {
			return visitor.visitRoot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SqlStatementsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sqlStatement_list(): SqlStatementContext[] {
		return this.getTypedRuleContexts(SqlStatementContext) as SqlStatementContext[];
	}
	public sqlStatement(i: number): SqlStatementContext {
		return this.getTypedRuleContext(SqlStatementContext, i) as SqlStatementContext;
	}
	public emptyStatement__list(): EmptyStatement_Context[] {
		return this.getTypedRuleContexts(EmptyStatement_Context) as EmptyStatement_Context[];
	}
	public emptyStatement_(i: number): EmptyStatement_Context {
		return this.getTypedRuleContext(EmptyStatement_Context, i) as EmptyStatement_Context;
	}
	public SEMI_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.SEMI);
	}
	public SEMI(i: number): TerminalNode {
		return this.getToken(MySqlParser.SEMI, i);
	}
	public MINUS_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.MINUS);
	}
	public MINUS(i: number): TerminalNode {
		return this.getToken(MySqlParser.MINUS, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_sqlStatements;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSqlStatements) {
	 		listener.enterSqlStatements(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSqlStatements) {
	 		listener.exitSqlStatements(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSqlStatements) {
			return visitor.visitSqlStatements(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SqlStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ddlStatement(): DdlStatementContext {
		return this.getTypedRuleContext(DdlStatementContext, 0) as DdlStatementContext;
	}
	public dmlStatement(): DmlStatementContext {
		return this.getTypedRuleContext(DmlStatementContext, 0) as DmlStatementContext;
	}
	public transactionStatement(): TransactionStatementContext {
		return this.getTypedRuleContext(TransactionStatementContext, 0) as TransactionStatementContext;
	}
	public replicationStatement(): ReplicationStatementContext {
		return this.getTypedRuleContext(ReplicationStatementContext, 0) as ReplicationStatementContext;
	}
	public preparedStatement(): PreparedStatementContext {
		return this.getTypedRuleContext(PreparedStatementContext, 0) as PreparedStatementContext;
	}
	public administrationStatement(): AdministrationStatementContext {
		return this.getTypedRuleContext(AdministrationStatementContext, 0) as AdministrationStatementContext;
	}
	public utilityStatement(): UtilityStatementContext {
		return this.getTypedRuleContext(UtilityStatementContext, 0) as UtilityStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_sqlStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSqlStatement) {
	 		listener.enterSqlStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSqlStatement) {
	 		listener.exitSqlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSqlStatement) {
			return visitor.visitSqlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EmptyStatement_Context extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SEMI(): TerminalNode {
		return this.getToken(MySqlParser.SEMI, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_emptyStatement_;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterEmptyStatement_) {
	 		listener.enterEmptyStatement_(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitEmptyStatement_) {
	 		listener.exitEmptyStatement_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitEmptyStatement_) {
			return visitor.visitEmptyStatement_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DdlStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createDatabase(): CreateDatabaseContext {
		return this.getTypedRuleContext(CreateDatabaseContext, 0) as CreateDatabaseContext;
	}
	public createEvent(): CreateEventContext {
		return this.getTypedRuleContext(CreateEventContext, 0) as CreateEventContext;
	}
	public createIndex(): CreateIndexContext {
		return this.getTypedRuleContext(CreateIndexContext, 0) as CreateIndexContext;
	}
	public createLogfileGroup(): CreateLogfileGroupContext {
		return this.getTypedRuleContext(CreateLogfileGroupContext, 0) as CreateLogfileGroupContext;
	}
	public createProcedure(): CreateProcedureContext {
		return this.getTypedRuleContext(CreateProcedureContext, 0) as CreateProcedureContext;
	}
	public createFunction(): CreateFunctionContext {
		return this.getTypedRuleContext(CreateFunctionContext, 0) as CreateFunctionContext;
	}
	public createServer(): CreateServerContext {
		return this.getTypedRuleContext(CreateServerContext, 0) as CreateServerContext;
	}
	public createTable(): CreateTableContext {
		return this.getTypedRuleContext(CreateTableContext, 0) as CreateTableContext;
	}
	public createTablespaceInnodb(): CreateTablespaceInnodbContext {
		return this.getTypedRuleContext(CreateTablespaceInnodbContext, 0) as CreateTablespaceInnodbContext;
	}
	public createTablespaceNdb(): CreateTablespaceNdbContext {
		return this.getTypedRuleContext(CreateTablespaceNdbContext, 0) as CreateTablespaceNdbContext;
	}
	public createTrigger(): CreateTriggerContext {
		return this.getTypedRuleContext(CreateTriggerContext, 0) as CreateTriggerContext;
	}
	public createView(): CreateViewContext {
		return this.getTypedRuleContext(CreateViewContext, 0) as CreateViewContext;
	}
	public createRole(): CreateRoleContext {
		return this.getTypedRuleContext(CreateRoleContext, 0) as CreateRoleContext;
	}
	public alterDatabase(): AlterDatabaseContext {
		return this.getTypedRuleContext(AlterDatabaseContext, 0) as AlterDatabaseContext;
	}
	public alterEvent(): AlterEventContext {
		return this.getTypedRuleContext(AlterEventContext, 0) as AlterEventContext;
	}
	public alterFunction(): AlterFunctionContext {
		return this.getTypedRuleContext(AlterFunctionContext, 0) as AlterFunctionContext;
	}
	public alterInstance(): AlterInstanceContext {
		return this.getTypedRuleContext(AlterInstanceContext, 0) as AlterInstanceContext;
	}
	public alterLogfileGroup(): AlterLogfileGroupContext {
		return this.getTypedRuleContext(AlterLogfileGroupContext, 0) as AlterLogfileGroupContext;
	}
	public alterProcedure(): AlterProcedureContext {
		return this.getTypedRuleContext(AlterProcedureContext, 0) as AlterProcedureContext;
	}
	public alterServer(): AlterServerContext {
		return this.getTypedRuleContext(AlterServerContext, 0) as AlterServerContext;
	}
	public alterTable(): AlterTableContext {
		return this.getTypedRuleContext(AlterTableContext, 0) as AlterTableContext;
	}
	public alterTablespace(): AlterTablespaceContext {
		return this.getTypedRuleContext(AlterTablespaceContext, 0) as AlterTablespaceContext;
	}
	public alterView(): AlterViewContext {
		return this.getTypedRuleContext(AlterViewContext, 0) as AlterViewContext;
	}
	public dropDatabase(): DropDatabaseContext {
		return this.getTypedRuleContext(DropDatabaseContext, 0) as DropDatabaseContext;
	}
	public dropEvent(): DropEventContext {
		return this.getTypedRuleContext(DropEventContext, 0) as DropEventContext;
	}
	public dropIndex(): DropIndexContext {
		return this.getTypedRuleContext(DropIndexContext, 0) as DropIndexContext;
	}
	public dropLogfileGroup(): DropLogfileGroupContext {
		return this.getTypedRuleContext(DropLogfileGroupContext, 0) as DropLogfileGroupContext;
	}
	public dropProcedure(): DropProcedureContext {
		return this.getTypedRuleContext(DropProcedureContext, 0) as DropProcedureContext;
	}
	public dropFunction(): DropFunctionContext {
		return this.getTypedRuleContext(DropFunctionContext, 0) as DropFunctionContext;
	}
	public dropServer(): DropServerContext {
		return this.getTypedRuleContext(DropServerContext, 0) as DropServerContext;
	}
	public dropTable(): DropTableContext {
		return this.getTypedRuleContext(DropTableContext, 0) as DropTableContext;
	}
	public dropTablespace(): DropTablespaceContext {
		return this.getTypedRuleContext(DropTablespaceContext, 0) as DropTablespaceContext;
	}
	public dropTrigger(): DropTriggerContext {
		return this.getTypedRuleContext(DropTriggerContext, 0) as DropTriggerContext;
	}
	public dropView(): DropViewContext {
		return this.getTypedRuleContext(DropViewContext, 0) as DropViewContext;
	}
	public dropRole(): DropRoleContext {
		return this.getTypedRuleContext(DropRoleContext, 0) as DropRoleContext;
	}
	public setRole(): SetRoleContext {
		return this.getTypedRuleContext(SetRoleContext, 0) as SetRoleContext;
	}
	public renameTable(): RenameTableContext {
		return this.getTypedRuleContext(RenameTableContext, 0) as RenameTableContext;
	}
	public truncateTable(): TruncateTableContext {
		return this.getTypedRuleContext(TruncateTableContext, 0) as TruncateTableContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_ddlStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDdlStatement) {
	 		listener.enterDdlStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDdlStatement) {
	 		listener.exitDdlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDdlStatement) {
			return visitor.visitDdlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DmlStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public insertStatement(): InsertStatementContext {
		return this.getTypedRuleContext(InsertStatementContext, 0) as InsertStatementContext;
	}
	public updateStatement(): UpdateStatementContext {
		return this.getTypedRuleContext(UpdateStatementContext, 0) as UpdateStatementContext;
	}
	public deleteStatement(): DeleteStatementContext {
		return this.getTypedRuleContext(DeleteStatementContext, 0) as DeleteStatementContext;
	}
	public replaceStatement(): ReplaceStatementContext {
		return this.getTypedRuleContext(ReplaceStatementContext, 0) as ReplaceStatementContext;
	}
	public callStatement(): CallStatementContext {
		return this.getTypedRuleContext(CallStatementContext, 0) as CallStatementContext;
	}
	public loadDataStatement(): LoadDataStatementContext {
		return this.getTypedRuleContext(LoadDataStatementContext, 0) as LoadDataStatementContext;
	}
	public loadXmlStatement(): LoadXmlStatementContext {
		return this.getTypedRuleContext(LoadXmlStatementContext, 0) as LoadXmlStatementContext;
	}
	public doStatement(): DoStatementContext {
		return this.getTypedRuleContext(DoStatementContext, 0) as DoStatementContext;
	}
	public handlerStatement(): HandlerStatementContext {
		return this.getTypedRuleContext(HandlerStatementContext, 0) as HandlerStatementContext;
	}
	public valuesStatement(): ValuesStatementContext {
		return this.getTypedRuleContext(ValuesStatementContext, 0) as ValuesStatementContext;
	}
	public withStatement(): WithStatementContext {
		return this.getTypedRuleContext(WithStatementContext, 0) as WithStatementContext;
	}
	public tableStatement(): TableStatementContext {
		return this.getTypedRuleContext(TableStatementContext, 0) as TableStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dmlStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDmlStatement) {
	 		listener.enterDmlStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDmlStatement) {
	 		listener.exitDmlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDmlStatement) {
			return visitor.visitDmlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public startTransaction(): StartTransactionContext {
		return this.getTypedRuleContext(StartTransactionContext, 0) as StartTransactionContext;
	}
	public beginWork(): BeginWorkContext {
		return this.getTypedRuleContext(BeginWorkContext, 0) as BeginWorkContext;
	}
	public commitWork(): CommitWorkContext {
		return this.getTypedRuleContext(CommitWorkContext, 0) as CommitWorkContext;
	}
	public rollbackWork(): RollbackWorkContext {
		return this.getTypedRuleContext(RollbackWorkContext, 0) as RollbackWorkContext;
	}
	public savepointStatement(): SavepointStatementContext {
		return this.getTypedRuleContext(SavepointStatementContext, 0) as SavepointStatementContext;
	}
	public rollbackStatement(): RollbackStatementContext {
		return this.getTypedRuleContext(RollbackStatementContext, 0) as RollbackStatementContext;
	}
	public releaseStatement(): ReleaseStatementContext {
		return this.getTypedRuleContext(ReleaseStatementContext, 0) as ReleaseStatementContext;
	}
	public lockTables(): LockTablesContext {
		return this.getTypedRuleContext(LockTablesContext, 0) as LockTablesContext;
	}
	public unlockTables(): UnlockTablesContext {
		return this.getTypedRuleContext(UnlockTablesContext, 0) as UnlockTablesContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_transactionStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTransactionStatement) {
	 		listener.enterTransactionStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTransactionStatement) {
	 		listener.exitTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTransactionStatement) {
			return visitor.visitTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplicationStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public changeMaster(): ChangeMasterContext {
		return this.getTypedRuleContext(ChangeMasterContext, 0) as ChangeMasterContext;
	}
	public changeReplicationFilter(): ChangeReplicationFilterContext {
		return this.getTypedRuleContext(ChangeReplicationFilterContext, 0) as ChangeReplicationFilterContext;
	}
	public purgeBinaryLogs(): PurgeBinaryLogsContext {
		return this.getTypedRuleContext(PurgeBinaryLogsContext, 0) as PurgeBinaryLogsContext;
	}
	public resetMaster(): ResetMasterContext {
		return this.getTypedRuleContext(ResetMasterContext, 0) as ResetMasterContext;
	}
	public resetSlave(): ResetSlaveContext {
		return this.getTypedRuleContext(ResetSlaveContext, 0) as ResetSlaveContext;
	}
	public startSlave(): StartSlaveContext {
		return this.getTypedRuleContext(StartSlaveContext, 0) as StartSlaveContext;
	}
	public stopSlave(): StopSlaveContext {
		return this.getTypedRuleContext(StopSlaveContext, 0) as StopSlaveContext;
	}
	public startGroupReplication(): StartGroupReplicationContext {
		return this.getTypedRuleContext(StartGroupReplicationContext, 0) as StartGroupReplicationContext;
	}
	public stopGroupReplication(): StopGroupReplicationContext {
		return this.getTypedRuleContext(StopGroupReplicationContext, 0) as StopGroupReplicationContext;
	}
	public xaStartTransaction(): XaStartTransactionContext {
		return this.getTypedRuleContext(XaStartTransactionContext, 0) as XaStartTransactionContext;
	}
	public xaEndTransaction(): XaEndTransactionContext {
		return this.getTypedRuleContext(XaEndTransactionContext, 0) as XaEndTransactionContext;
	}
	public xaPrepareStatement(): XaPrepareStatementContext {
		return this.getTypedRuleContext(XaPrepareStatementContext, 0) as XaPrepareStatementContext;
	}
	public xaCommitWork(): XaCommitWorkContext {
		return this.getTypedRuleContext(XaCommitWorkContext, 0) as XaCommitWorkContext;
	}
	public xaRollbackWork(): XaRollbackWorkContext {
		return this.getTypedRuleContext(XaRollbackWorkContext, 0) as XaRollbackWorkContext;
	}
	public xaRecoverWork(): XaRecoverWorkContext {
		return this.getTypedRuleContext(XaRecoverWorkContext, 0) as XaRecoverWorkContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_replicationStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterReplicationStatement) {
	 		listener.enterReplicationStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitReplicationStatement) {
	 		listener.exitReplicationStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReplicationStatement) {
			return visitor.visitReplicationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PreparedStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public prepareStatement(): PrepareStatementContext {
		return this.getTypedRuleContext(PrepareStatementContext, 0) as PrepareStatementContext;
	}
	public executeStatement(): ExecuteStatementContext {
		return this.getTypedRuleContext(ExecuteStatementContext, 0) as ExecuteStatementContext;
	}
	public deallocatePrepare(): DeallocatePrepareContext {
		return this.getTypedRuleContext(DeallocatePrepareContext, 0) as DeallocatePrepareContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_preparedStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPreparedStatement) {
	 		listener.enterPreparedStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPreparedStatement) {
	 		listener.exitPreparedStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPreparedStatement) {
			return visitor.visitPreparedStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CompoundStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public blockStatement(): BlockStatementContext {
		return this.getTypedRuleContext(BlockStatementContext, 0) as BlockStatementContext;
	}
	public caseStatement(): CaseStatementContext {
		return this.getTypedRuleContext(CaseStatementContext, 0) as CaseStatementContext;
	}
	public ifStatement(): IfStatementContext {
		return this.getTypedRuleContext(IfStatementContext, 0) as IfStatementContext;
	}
	public leaveStatement(): LeaveStatementContext {
		return this.getTypedRuleContext(LeaveStatementContext, 0) as LeaveStatementContext;
	}
	public loopStatement(): LoopStatementContext {
		return this.getTypedRuleContext(LoopStatementContext, 0) as LoopStatementContext;
	}
	public repeatStatement(): RepeatStatementContext {
		return this.getTypedRuleContext(RepeatStatementContext, 0) as RepeatStatementContext;
	}
	public whileStatement(): WhileStatementContext {
		return this.getTypedRuleContext(WhileStatementContext, 0) as WhileStatementContext;
	}
	public iterateStatement(): IterateStatementContext {
		return this.getTypedRuleContext(IterateStatementContext, 0) as IterateStatementContext;
	}
	public returnStatement(): ReturnStatementContext {
		return this.getTypedRuleContext(ReturnStatementContext, 0) as ReturnStatementContext;
	}
	public cursorStatement(): CursorStatementContext {
		return this.getTypedRuleContext(CursorStatementContext, 0) as CursorStatementContext;
	}
	public withStatement(): WithStatementContext {
		return this.getTypedRuleContext(WithStatementContext, 0) as WithStatementContext;
	}
	public dmlStatement(): DmlStatementContext {
		return this.getTypedRuleContext(DmlStatementContext, 0) as DmlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_compoundStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCompoundStatement) {
	 		listener.enterCompoundStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCompoundStatement) {
	 		listener.exitCompoundStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCompoundStatement) {
			return visitor.visitCompoundStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdministrationStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterUser(): AlterUserContext {
		return this.getTypedRuleContext(AlterUserContext, 0) as AlterUserContext;
	}
	public createUser(): CreateUserContext {
		return this.getTypedRuleContext(CreateUserContext, 0) as CreateUserContext;
	}
	public dropUser(): DropUserContext {
		return this.getTypedRuleContext(DropUserContext, 0) as DropUserContext;
	}
	public grantStatement(): GrantStatementContext {
		return this.getTypedRuleContext(GrantStatementContext, 0) as GrantStatementContext;
	}
	public grantProxy(): GrantProxyContext {
		return this.getTypedRuleContext(GrantProxyContext, 0) as GrantProxyContext;
	}
	public renameUser(): RenameUserContext {
		return this.getTypedRuleContext(RenameUserContext, 0) as RenameUserContext;
	}
	public revokeStatement(): RevokeStatementContext {
		return this.getTypedRuleContext(RevokeStatementContext, 0) as RevokeStatementContext;
	}
	public revokeProxy(): RevokeProxyContext {
		return this.getTypedRuleContext(RevokeProxyContext, 0) as RevokeProxyContext;
	}
	public analyzeTable(): AnalyzeTableContext {
		return this.getTypedRuleContext(AnalyzeTableContext, 0) as AnalyzeTableContext;
	}
	public checkTable(): CheckTableContext {
		return this.getTypedRuleContext(CheckTableContext, 0) as CheckTableContext;
	}
	public checksumTable(): ChecksumTableContext {
		return this.getTypedRuleContext(ChecksumTableContext, 0) as ChecksumTableContext;
	}
	public optimizeTable(): OptimizeTableContext {
		return this.getTypedRuleContext(OptimizeTableContext, 0) as OptimizeTableContext;
	}
	public repairTable(): RepairTableContext {
		return this.getTypedRuleContext(RepairTableContext, 0) as RepairTableContext;
	}
	public createUdfunction(): CreateUdfunctionContext {
		return this.getTypedRuleContext(CreateUdfunctionContext, 0) as CreateUdfunctionContext;
	}
	public installPlugin(): InstallPluginContext {
		return this.getTypedRuleContext(InstallPluginContext, 0) as InstallPluginContext;
	}
	public uninstallPlugin(): UninstallPluginContext {
		return this.getTypedRuleContext(UninstallPluginContext, 0) as UninstallPluginContext;
	}
	public setStatement(): SetStatementContext {
		return this.getTypedRuleContext(SetStatementContext, 0) as SetStatementContext;
	}
	public showStatement(): ShowStatementContext {
		return this.getTypedRuleContext(ShowStatementContext, 0) as ShowStatementContext;
	}
	public binlogStatement(): BinlogStatementContext {
		return this.getTypedRuleContext(BinlogStatementContext, 0) as BinlogStatementContext;
	}
	public cacheIndexStatement(): CacheIndexStatementContext {
		return this.getTypedRuleContext(CacheIndexStatementContext, 0) as CacheIndexStatementContext;
	}
	public flushStatement(): FlushStatementContext {
		return this.getTypedRuleContext(FlushStatementContext, 0) as FlushStatementContext;
	}
	public killStatement(): KillStatementContext {
		return this.getTypedRuleContext(KillStatementContext, 0) as KillStatementContext;
	}
	public loadIndexIntoCache(): LoadIndexIntoCacheContext {
		return this.getTypedRuleContext(LoadIndexIntoCacheContext, 0) as LoadIndexIntoCacheContext;
	}
	public resetStatement(): ResetStatementContext {
		return this.getTypedRuleContext(ResetStatementContext, 0) as ResetStatementContext;
	}
	public shutdownStatement(): ShutdownStatementContext {
		return this.getTypedRuleContext(ShutdownStatementContext, 0) as ShutdownStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_administrationStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAdministrationStatement) {
	 		listener.enterAdministrationStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAdministrationStatement) {
	 		listener.exitAdministrationStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAdministrationStatement) {
			return visitor.visitAdministrationStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UtilityStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleDescribeStatement(): SimpleDescribeStatementContext {
		return this.getTypedRuleContext(SimpleDescribeStatementContext, 0) as SimpleDescribeStatementContext;
	}
	public fullDescribeStatement(): FullDescribeStatementContext {
		return this.getTypedRuleContext(FullDescribeStatementContext, 0) as FullDescribeStatementContext;
	}
	public helpStatement(): HelpStatementContext {
		return this.getTypedRuleContext(HelpStatementContext, 0) as HelpStatementContext;
	}
	public useStatement(): UseStatementContext {
		return this.getTypedRuleContext(UseStatementContext, 0) as UseStatementContext;
	}
	public signalStatement(): SignalStatementContext {
		return this.getTypedRuleContext(SignalStatementContext, 0) as SignalStatementContext;
	}
	public resignalStatement(): ResignalStatementContext {
		return this.getTypedRuleContext(ResignalStatementContext, 0) as ResignalStatementContext;
	}
	public diagnosticsStatement(): DiagnosticsStatementContext {
		return this.getTypedRuleContext(DiagnosticsStatementContext, 0) as DiagnosticsStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_utilityStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUtilityStatement) {
	 		listener.enterUtilityStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUtilityStatement) {
	 		listener.exitUtilityStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUtilityStatement) {
			return visitor.visitUtilityStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDatabaseContext extends ParserRuleContext {
	public _dbFormat!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public DATABASE(): TerminalNode {
		return this.getToken(MySqlParser.DATABASE, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMA, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public createDatabaseOption_list(): CreateDatabaseOptionContext[] {
		return this.getTypedRuleContexts(CreateDatabaseOptionContext) as CreateDatabaseOptionContext[];
	}
	public createDatabaseOption(i: number): CreateDatabaseOptionContext {
		return this.getTypedRuleContext(CreateDatabaseOptionContext, i) as CreateDatabaseOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createDatabase;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateDatabase) {
	 		listener.enterCreateDatabase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateDatabase) {
	 		listener.exitCreateDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateDatabase) {
			return visitor.visitCreateDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateEventContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public EVENT(): TerminalNode {
		return this.getToken(MySqlParser.EVENT, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public ON_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ON);
	}
	public ON(i: number): TerminalNode {
		return this.getToken(MySqlParser.ON, i);
	}
	public SCHEDULE(): TerminalNode {
		return this.getToken(MySqlParser.SCHEDULE, 0);
	}
	public scheduleExpression(): ScheduleExpressionContext {
		return this.getTypedRuleContext(ScheduleExpressionContext, 0) as ScheduleExpressionContext;
	}
	public DO(): TerminalNode {
		return this.getToken(MySqlParser.DO, 0);
	}
	public routineBody(): RoutineBodyContext {
		return this.getTypedRuleContext(RoutineBodyContext, 0) as RoutineBodyContext;
	}
	public ownerStatement(): OwnerStatementContext {
		return this.getTypedRuleContext(OwnerStatementContext, 0) as OwnerStatementContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public COMPLETION(): TerminalNode {
		return this.getToken(MySqlParser.COMPLETION, 0);
	}
	public PRESERVE(): TerminalNode {
		return this.getToken(MySqlParser.PRESERVE, 0);
	}
	public enableType(): EnableTypeContext {
		return this.getTypedRuleContext(EnableTypeContext, 0) as EnableTypeContext;
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createEvent;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateEvent) {
	 		listener.enterCreateEvent(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateEvent) {
	 		listener.exitCreateEvent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateEvent) {
			return visitor.visitCreateEvent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateIndexContext extends ParserRuleContext {
	public _intimeAction!: Token;
	public _indexCategory!: Token;
	public _algType!: Token;
	public _lockType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public indexType(): IndexTypeContext {
		return this.getTypedRuleContext(IndexTypeContext, 0) as IndexTypeContext;
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public ALGORITHM_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ALGORITHM);
	}
	public ALGORITHM(i: number): TerminalNode {
		return this.getToken(MySqlParser.ALGORITHM, i);
	}
	public LOCK_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LOCK);
	}
	public LOCK(i: number): TerminalNode {
		return this.getToken(MySqlParser.LOCK, i);
	}
	public ONLINE(): TerminalNode {
		return this.getToken(MySqlParser.ONLINE, 0);
	}
	public OFFLINE(): TerminalNode {
		return this.getToken(MySqlParser.OFFLINE, 0);
	}
	public UNIQUE(): TerminalNode {
		return this.getToken(MySqlParser.UNIQUE, 0);
	}
	public FULLTEXT(): TerminalNode {
		return this.getToken(MySqlParser.FULLTEXT, 0);
	}
	public SPATIAL(): TerminalNode {
		return this.getToken(MySqlParser.SPATIAL, 0);
	}
	public DEFAULT_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.DEFAULT);
	}
	public DEFAULT(i: number): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, i);
	}
	public INPLACE_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.INPLACE);
	}
	public INPLACE(i: number): TerminalNode {
		return this.getToken(MySqlParser.INPLACE, i);
	}
	public COPY_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COPY);
	}
	public COPY(i: number): TerminalNode {
		return this.getToken(MySqlParser.COPY, i);
	}
	public NONE_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.NONE);
	}
	public NONE(i: number): TerminalNode {
		return this.getToken(MySqlParser.NONE, i);
	}
	public SHARED_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.SHARED);
	}
	public SHARED(i: number): TerminalNode {
		return this.getToken(MySqlParser.SHARED, i);
	}
	public EXCLUSIVE_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EXCLUSIVE);
	}
	public EXCLUSIVE(i: number): TerminalNode {
		return this.getToken(MySqlParser.EXCLUSIVE, i);
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createIndex;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateIndex) {
	 		listener.enterCreateIndex(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateIndex) {
	 		listener.exitCreateIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateIndex) {
			return visitor.visitCreateIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateLogfileGroupContext extends ParserRuleContext {
	public _undoFile!: Token;
	public _initSize!: FileSizeLiteralContext;
	public _undoSize!: FileSizeLiteralContext;
	public _redoSize!: FileSizeLiteralContext;
	public _comment!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public LOGFILE(): TerminalNode {
		return this.getToken(MySqlParser.LOGFILE, 0);
	}
	public GROUP(): TerminalNode {
		return this.getToken(MySqlParser.GROUP, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public UNDOFILE(): TerminalNode {
		return this.getToken(MySqlParser.UNDOFILE, 0);
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public engineName(): EngineNameContext {
		return this.getTypedRuleContext(EngineNameContext, 0) as EngineNameContext;
	}
	public STRING_LITERAL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.STRING_LITERAL);
	}
	public STRING_LITERAL(i: number): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, i);
	}
	public INITIAL_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	}
	public UNDO_BUFFER_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0);
	}
	public REDO_BUFFER_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.REDO_BUFFER_SIZE, 0);
	}
	public NODEGROUP(): TerminalNode {
		return this.getToken(MySqlParser.NODEGROUP, 0);
	}
	public WAIT(): TerminalNode {
		return this.getToken(MySqlParser.WAIT, 0);
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
	public fileSizeLiteral_list(): FileSizeLiteralContext[] {
		return this.getTypedRuleContexts(FileSizeLiteralContext) as FileSizeLiteralContext[];
	}
	public fileSizeLiteral(i: number): FileSizeLiteralContext {
		return this.getTypedRuleContext(FileSizeLiteralContext, i) as FileSizeLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createLogfileGroup;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateLogfileGroup) {
	 		listener.enterCreateLogfileGroup(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateLogfileGroup) {
	 		listener.exitCreateLogfileGroup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateLogfileGroup) {
			return visitor.visitCreateLogfileGroup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateProcedureContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public PROCEDURE(): TerminalNode {
		return this.getToken(MySqlParser.PROCEDURE, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public routineBody(): RoutineBodyContext {
		return this.getTypedRuleContext(RoutineBodyContext, 0) as RoutineBodyContext;
	}
	public ownerStatement(): OwnerStatementContext {
		return this.getTypedRuleContext(OwnerStatementContext, 0) as OwnerStatementContext;
	}
	public procedureParameter_list(): ProcedureParameterContext[] {
		return this.getTypedRuleContexts(ProcedureParameterContext) as ProcedureParameterContext[];
	}
	public procedureParameter(i: number): ProcedureParameterContext {
		return this.getTypedRuleContext(ProcedureParameterContext, i) as ProcedureParameterContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public routineOption_list(): RoutineOptionContext[] {
		return this.getTypedRuleContexts(RoutineOptionContext) as RoutineOptionContext[];
	}
	public routineOption(i: number): RoutineOptionContext {
		return this.getTypedRuleContext(RoutineOptionContext, i) as RoutineOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createProcedure;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateProcedure) {
	 		listener.enterCreateProcedure(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateProcedure) {
	 		listener.exitCreateProcedure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateProcedure) {
			return visitor.visitCreateProcedure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateFunctionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.FUNCTION, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public RETURNS(): TerminalNode {
		return this.getToken(MySqlParser.RETURNS, 0);
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
	public routineBody(): RoutineBodyContext {
		return this.getTypedRuleContext(RoutineBodyContext, 0) as RoutineBodyContext;
	}
	public returnStatement(): ReturnStatementContext {
		return this.getTypedRuleContext(ReturnStatementContext, 0) as ReturnStatementContext;
	}
	public ownerStatement(): OwnerStatementContext {
		return this.getTypedRuleContext(OwnerStatementContext, 0) as OwnerStatementContext;
	}
	public AGGREGATE(): TerminalNode {
		return this.getToken(MySqlParser.AGGREGATE, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public functionParameter_list(): FunctionParameterContext[] {
		return this.getTypedRuleContexts(FunctionParameterContext) as FunctionParameterContext[];
	}
	public functionParameter(i: number): FunctionParameterContext {
		return this.getTypedRuleContext(FunctionParameterContext, i) as FunctionParameterContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public routineOption_list(): RoutineOptionContext[] {
		return this.getTypedRuleContexts(RoutineOptionContext) as RoutineOptionContext[];
	}
	public routineOption(i: number): RoutineOptionContext {
		return this.getTypedRuleContext(RoutineOptionContext, i) as RoutineOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createFunction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateFunction) {
	 		listener.enterCreateFunction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateFunction) {
	 		listener.exitCreateFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateFunction) {
			return visitor.visitCreateFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateRoleContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public ROLE(): TerminalNode {
		return this.getToken(MySqlParser.ROLE, 0);
	}
	public roleName_list(): RoleNameContext[] {
		return this.getTypedRuleContexts(RoleNameContext) as RoleNameContext[];
	}
	public roleName(i: number): RoleNameContext {
		return this.getTypedRuleContext(RoleNameContext, i) as RoleNameContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createRole;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateRole) {
	 		listener.enterCreateRole(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateRole) {
	 		listener.exitCreateRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateRole) {
			return visitor.visitCreateRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateServerContext extends ParserRuleContext {
	public _wrapperName!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public SERVER(): TerminalNode {
		return this.getToken(MySqlParser.SERVER, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public FOREIGN(): TerminalNode {
		return this.getToken(MySqlParser.FOREIGN, 0);
	}
	public DATA(): TerminalNode {
		return this.getToken(MySqlParser.DATA, 0);
	}
	public WRAPPER(): TerminalNode {
		return this.getToken(MySqlParser.WRAPPER, 0);
	}
	public OPTIONS(): TerminalNode {
		return this.getToken(MySqlParser.OPTIONS, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public serverOption_list(): ServerOptionContext[] {
		return this.getTypedRuleContexts(ServerOptionContext) as ServerOptionContext[];
	}
	public serverOption(i: number): ServerOptionContext {
		return this.getTypedRuleContext(ServerOptionContext, i) as ServerOptionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public MYSQL(): TerminalNode {
		return this.getToken(MySqlParser.MYSQL, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createServer;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateServer) {
	 		listener.enterCreateServer(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateServer) {
	 		listener.exitCreateServer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateServer) {
			return visitor.visitCreateServer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTableContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createTable;
	}
	public copyFrom(ctx: CreateTableContext): void {
		super.copyFrom(ctx);
	}
}
export class CopyCreateTableContext extends CreateTableContext {
	public _parenthesisTable!: TableNameContext;
	constructor(parser: MySqlParser, ctx: CreateTableContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tableName_list(): TableNameContext[] {
		return this.getTypedRuleContexts(TableNameContext) as TableNameContext[];
	}
	public tableName(i: number): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, i) as TableNameContext;
	}
	public LIKE(): TerminalNode {
		return this.getToken(MySqlParser.LIKE, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public TEMPORARY(): TerminalNode {
		return this.getToken(MySqlParser.TEMPORARY, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCopyCreateTable) {
	 		listener.enterCopyCreateTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCopyCreateTable) {
	 		listener.exitCopyCreateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCopyCreateTable) {
			return visitor.visitCopyCreateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ColumnCreateTableContext extends CreateTableContext {
	constructor(parser: MySqlParser, ctx: CreateTableContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public createDefinitions(): CreateDefinitionsContext {
		return this.getTypedRuleContext(CreateDefinitionsContext, 0) as CreateDefinitionsContext;
	}
	public TEMPORARY(): TerminalNode {
		return this.getToken(MySqlParser.TEMPORARY, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public tableOption_list(): TableOptionContext[] {
		return this.getTypedRuleContexts(TableOptionContext) as TableOptionContext[];
	}
	public tableOption(i: number): TableOptionContext {
		return this.getTypedRuleContext(TableOptionContext, i) as TableOptionContext;
	}
	public partitionDefinitions(): PartitionDefinitionsContext {
		return this.getTypedRuleContext(PartitionDefinitionsContext, 0) as PartitionDefinitionsContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterColumnCreateTable) {
	 		listener.enterColumnCreateTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitColumnCreateTable) {
	 		listener.exitColumnCreateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitColumnCreateTable) {
			return visitor.visitColumnCreateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class QueryCreateTableContext extends CreateTableContext {
	public _keyViolate!: Token;
	constructor(parser: MySqlParser, ctx: CreateTableContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public TEMPORARY(): TerminalNode {
		return this.getToken(MySqlParser.TEMPORARY, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public createDefinitions(): CreateDefinitionsContext {
		return this.getTypedRuleContext(CreateDefinitionsContext, 0) as CreateDefinitionsContext;
	}
	public tableOption_list(): TableOptionContext[] {
		return this.getTypedRuleContexts(TableOptionContext) as TableOptionContext[];
	}
	public tableOption(i: number): TableOptionContext {
		return this.getTypedRuleContext(TableOptionContext, i) as TableOptionContext;
	}
	public partitionDefinitions(): PartitionDefinitionsContext {
		return this.getTypedRuleContext(PartitionDefinitionsContext, 0) as PartitionDefinitionsContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public IGNORE(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(MySqlParser.REPLACE, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterQueryCreateTable) {
	 		listener.enterQueryCreateTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitQueryCreateTable) {
	 		listener.exitQueryCreateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitQueryCreateTable) {
			return visitor.visitQueryCreateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTablespaceInnodbContext extends ParserRuleContext {
	public _datafile!: Token;
	public _fileBlockSize!: FileSizeLiteralContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public DATAFILE(): TerminalNode {
		return this.getToken(MySqlParser.DATAFILE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public FILE_BLOCK_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.FILE_BLOCK_SIZE, 0);
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public engineName(): EngineNameContext {
		return this.getTypedRuleContext(EngineNameContext, 0) as EngineNameContext;
	}
	public fileSizeLiteral(): FileSizeLiteralContext {
		return this.getTypedRuleContext(FileSizeLiteralContext, 0) as FileSizeLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createTablespaceInnodb;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateTablespaceInnodb) {
	 		listener.enterCreateTablespaceInnodb(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateTablespaceInnodb) {
	 		listener.exitCreateTablespaceInnodb(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateTablespaceInnodb) {
			return visitor.visitCreateTablespaceInnodb(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTablespaceNdbContext extends ParserRuleContext {
	public _datafile!: Token;
	public _extentSize!: FileSizeLiteralContext;
	public _initialSize!: FileSizeLiteralContext;
	public _autoextendSize!: FileSizeLiteralContext;
	public _maxSize!: FileSizeLiteralContext;
	public _comment!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public DATAFILE(): TerminalNode {
		return this.getToken(MySqlParser.DATAFILE, 0);
	}
	public USE(): TerminalNode {
		return this.getToken(MySqlParser.USE, 0);
	}
	public LOGFILE(): TerminalNode {
		return this.getToken(MySqlParser.LOGFILE, 0);
	}
	public GROUP(): TerminalNode {
		return this.getToken(MySqlParser.GROUP, 0);
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public engineName(): EngineNameContext {
		return this.getTypedRuleContext(EngineNameContext, 0) as EngineNameContext;
	}
	public STRING_LITERAL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.STRING_LITERAL);
	}
	public STRING_LITERAL(i: number): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, i);
	}
	public EXTENT_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.EXTENT_SIZE, 0);
	}
	public INITIAL_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	}
	public AUTOEXTEND_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
	}
	public MAX_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.MAX_SIZE, 0);
	}
	public NODEGROUP(): TerminalNode {
		return this.getToken(MySqlParser.NODEGROUP, 0);
	}
	public WAIT(): TerminalNode {
		return this.getToken(MySqlParser.WAIT, 0);
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
	public fileSizeLiteral_list(): FileSizeLiteralContext[] {
		return this.getTypedRuleContexts(FileSizeLiteralContext) as FileSizeLiteralContext[];
	}
	public fileSizeLiteral(i: number): FileSizeLiteralContext {
		return this.getTypedRuleContext(FileSizeLiteralContext, i) as FileSizeLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createTablespaceNdb;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateTablespaceNdb) {
	 		listener.enterCreateTablespaceNdb(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateTablespaceNdb) {
	 		listener.exitCreateTablespaceNdb(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateTablespaceNdb) {
			return visitor.visitCreateTablespaceNdb(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTriggerContext extends ParserRuleContext {
	public _thisTrigger!: FullIdContext;
	public _triggerTime!: Token;
	public _triggerEvent!: Token;
	public _triggerPlace!: Token;
	public _otherTrigger!: FullIdContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public TRIGGER(): TerminalNode {
		return this.getToken(MySqlParser.TRIGGER, 0);
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public EACH(): TerminalNode {
		return this.getToken(MySqlParser.EACH, 0);
	}
	public ROW(): TerminalNode {
		return this.getToken(MySqlParser.ROW, 0);
	}
	public routineBody(): RoutineBodyContext {
		return this.getTypedRuleContext(RoutineBodyContext, 0) as RoutineBodyContext;
	}
	public fullId_list(): FullIdContext[] {
		return this.getTypedRuleContexts(FullIdContext) as FullIdContext[];
	}
	public fullId(i: number): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, i) as FullIdContext;
	}
	public BEFORE(): TerminalNode {
		return this.getToken(MySqlParser.BEFORE, 0);
	}
	public AFTER(): TerminalNode {
		return this.getToken(MySqlParser.AFTER, 0);
	}
	public INSERT(): TerminalNode {
		return this.getToken(MySqlParser.INSERT, 0);
	}
	public UPDATE(): TerminalNode {
		return this.getToken(MySqlParser.UPDATE, 0);
	}
	public DELETE(): TerminalNode {
		return this.getToken(MySqlParser.DELETE, 0);
	}
	public ownerStatement(): OwnerStatementContext {
		return this.getTypedRuleContext(OwnerStatementContext, 0) as OwnerStatementContext;
	}
	public FOLLOWS(): TerminalNode {
		return this.getToken(MySqlParser.FOLLOWS, 0);
	}
	public PRECEDES(): TerminalNode {
		return this.getToken(MySqlParser.PRECEDES, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createTrigger;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateTrigger) {
	 		listener.enterCreateTrigger(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateTrigger) {
	 		listener.exitCreateTrigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateTrigger) {
			return visitor.visitCreateTrigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public commonTableExpressions(): CommonTableExpressionsContext {
		return this.getTypedRuleContext(CommonTableExpressionsContext, 0) as CommonTableExpressionsContext;
	}
	public RECURSIVE(): TerminalNode {
		return this.getToken(MySqlParser.RECURSIVE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_withClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWithClause) {
	 		listener.enterWithClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWithClause) {
	 		listener.exitWithClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWithClause) {
			return visitor.visitWithClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommonTableExpressionsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public cteName(): CteNameContext {
		return this.getTypedRuleContext(CteNameContext, 0) as CteNameContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public dmlStatement(): DmlStatementContext {
		return this.getTypedRuleContext(DmlStatementContext, 0) as DmlStatementContext;
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public cteColumnName_list(): CteColumnNameContext[] {
		return this.getTypedRuleContexts(CteColumnNameContext) as CteColumnNameContext[];
	}
	public cteColumnName(i: number): CteColumnNameContext {
		return this.getTypedRuleContext(CteColumnNameContext, i) as CteColumnNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public commonTableExpressions(): CommonTableExpressionsContext {
		return this.getTypedRuleContext(CommonTableExpressionsContext, 0) as CommonTableExpressionsContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_commonTableExpressions;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCommonTableExpressions) {
	 		listener.enterCommonTableExpressions(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCommonTableExpressions) {
	 		listener.exitCommonTableExpressions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCommonTableExpressions) {
			return visitor.visitCommonTableExpressions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CteNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_cteName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCteName) {
	 		listener.enterCteName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCteName) {
	 		listener.exitCteName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCteName) {
			return visitor.visitCteName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CteColumnNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_cteColumnName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCteColumnName) {
	 		listener.enterCteColumnName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCteColumnName) {
	 		listener.exitCteColumnName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCteColumnName) {
			return visitor.visitCteColumnName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateViewContext extends ParserRuleContext {
	public _algType!: Token;
	public _secContext!: Token;
	public _checkOption!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public VIEW(): TerminalNode {
		return this.getToken(MySqlParser.VIEW, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public orReplace(): OrReplaceContext {
		return this.getTypedRuleContext(OrReplaceContext, 0) as OrReplaceContext;
	}
	public ALGORITHM(): TerminalNode {
		return this.getToken(MySqlParser.ALGORITHM, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public ownerStatement(): OwnerStatementContext {
		return this.getTypedRuleContext(OwnerStatementContext, 0) as OwnerStatementContext;
	}
	public SQL(): TerminalNode {
		return this.getToken(MySqlParser.SQL, 0);
	}
	public SECURITY(): TerminalNode {
		return this.getToken(MySqlParser.SECURITY, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public UNDEFINED(): TerminalNode {
		return this.getToken(MySqlParser.UNDEFINED, 0);
	}
	public MERGE(): TerminalNode {
		return this.getToken(MySqlParser.MERGE, 0);
	}
	public TEMPTABLE(): TerminalNode {
		return this.getToken(MySqlParser.TEMPTABLE, 0);
	}
	public DEFINER(): TerminalNode {
		return this.getToken(MySqlParser.DEFINER, 0);
	}
	public INVOKER(): TerminalNode {
		return this.getToken(MySqlParser.INVOKER, 0);
	}
	public withClause(): WithClauseContext {
		return this.getTypedRuleContext(WithClauseContext, 0) as WithClauseContext;
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public CHECK(): TerminalNode {
		return this.getToken(MySqlParser.CHECK, 0);
	}
	public OPTION(): TerminalNode {
		return this.getToken(MySqlParser.OPTION, 0);
	}
	public CASCADED(): TerminalNode {
		return this.getToken(MySqlParser.CASCADED, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createView;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateView) {
	 		listener.enterCreateView(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateView) {
	 		listener.exitCreateView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateView) {
			return visitor.visitCreateView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDatabaseOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public charSet(): CharSetContext {
		return this.getTypedRuleContext(CharSetContext, 0) as CharSetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public DEFAULT_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.DEFAULT);
	}
	public DEFAULT(i: number): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, i);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public COLLATE(): TerminalNode {
		return this.getToken(MySqlParser.COLLATE, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
	public ENCRYPTION(): TerminalNode {
		return this.getToken(MySqlParser.ENCRYPTION, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public READ(): TerminalNode {
		return this.getToken(MySqlParser.READ, 0);
	}
	public ONLY(): TerminalNode {
		return this.getToken(MySqlParser.ONLY, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createDatabaseOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateDatabaseOption) {
	 		listener.enterCreateDatabaseOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateDatabaseOption) {
	 		listener.exitCreateDatabaseOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateDatabaseOption) {
			return visitor.visitCreateDatabaseOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharSetContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHARACTER(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public CHARSET(): TerminalNode {
		return this.getToken(MySqlParser.CHARSET, 0);
	}
	public CHAR(): TerminalNode {
		return this.getToken(MySqlParser.CHAR, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_charSet;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCharSet) {
	 		listener.enterCharSet(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCharSet) {
	 		listener.exitCharSet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCharSet) {
			return visitor.visitCharSet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrentUserExpressionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_USER(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT_USER, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_currentUserExpression;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCurrentUserExpression) {
	 		listener.enterCurrentUserExpression(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCurrentUserExpression) {
	 		listener.exitCurrentUserExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCurrentUserExpression) {
			return visitor.visitCurrentUserExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OwnerStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFINER(): TerminalNode {
		return this.getToken(MySqlParser.DEFINER, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public currentUserExpression(): CurrentUserExpressionContext {
		return this.getTypedRuleContext(CurrentUserExpressionContext, 0) as CurrentUserExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_ownerStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterOwnerStatement) {
	 		listener.enterOwnerStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitOwnerStatement) {
	 		listener.exitOwnerStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOwnerStatement) {
			return visitor.visitOwnerStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScheduleExpressionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_scheduleExpression;
	}
	public copyFrom(ctx: ScheduleExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class PreciseScheduleContext extends ScheduleExpressionContext {
	constructor(parser: MySqlParser, ctx: ScheduleExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public AT(): TerminalNode {
		return this.getToken(MySqlParser.AT, 0);
	}
	public timestampValue(): TimestampValueContext {
		return this.getTypedRuleContext(TimestampValueContext, 0) as TimestampValueContext;
	}
	public intervalExpr_list(): IntervalExprContext[] {
		return this.getTypedRuleContexts(IntervalExprContext) as IntervalExprContext[];
	}
	public intervalExpr(i: number): IntervalExprContext {
		return this.getTypedRuleContext(IntervalExprContext, i) as IntervalExprContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPreciseSchedule) {
	 		listener.enterPreciseSchedule(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPreciseSchedule) {
	 		listener.exitPreciseSchedule(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPreciseSchedule) {
			return visitor.visitPreciseSchedule(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IntervalScheduleContext extends ScheduleExpressionContext {
	public _startTimestamp!: TimestampValueContext;
	public _intervalExpr!: IntervalExprContext;
	public _startIntervals: IntervalExprContext[] = [];
	public _endTimestamp!: TimestampValueContext;
	public _endIntervals: IntervalExprContext[] = [];
	constructor(parser: MySqlParser, ctx: ScheduleExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public EVERY(): TerminalNode {
		return this.getToken(MySqlParser.EVERY, 0);
	}
	public intervalType(): IntervalTypeContext {
		return this.getTypedRuleContext(IntervalTypeContext, 0) as IntervalTypeContext;
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public STARTS(): TerminalNode {
		return this.getToken(MySqlParser.STARTS, 0);
	}
	public ENDS(): TerminalNode {
		return this.getToken(MySqlParser.ENDS, 0);
	}
	public timestampValue_list(): TimestampValueContext[] {
		return this.getTypedRuleContexts(TimestampValueContext) as TimestampValueContext[];
	}
	public timestampValue(i: number): TimestampValueContext {
		return this.getTypedRuleContext(TimestampValueContext, i) as TimestampValueContext;
	}
	public intervalExpr_list(): IntervalExprContext[] {
		return this.getTypedRuleContexts(IntervalExprContext) as IntervalExprContext[];
	}
	public intervalExpr(i: number): IntervalExprContext {
		return this.getTypedRuleContext(IntervalExprContext, i) as IntervalExprContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIntervalSchedule) {
	 		listener.enterIntervalSchedule(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIntervalSchedule) {
	 		listener.exitIntervalSchedule(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalSchedule) {
			return visitor.visitIntervalSchedule(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimestampValueContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT_TIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_timestampValue;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTimestampValue) {
	 		listener.enterTimestampValue(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTimestampValue) {
	 		listener.exitTimestampValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTimestampValue) {
			return visitor.visitTimestampValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalExprContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PLUS(): TerminalNode {
		return this.getToken(MySqlParser.PLUS, 0);
	}
	public INTERVAL(): TerminalNode {
		return this.getToken(MySqlParser.INTERVAL, 0);
	}
	public intervalType(): IntervalTypeContext {
		return this.getTypedRuleContext(IntervalTypeContext, 0) as IntervalTypeContext;
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_intervalExpr;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIntervalExpr) {
	 		listener.enterIntervalExpr(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIntervalExpr) {
	 		listener.exitIntervalExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalExpr) {
			return visitor.visitIntervalExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalTypeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public intervalTypeBase(): IntervalTypeBaseContext {
		return this.getTypedRuleContext(IntervalTypeBaseContext, 0) as IntervalTypeBaseContext;
	}
	public YEAR(): TerminalNode {
		return this.getToken(MySqlParser.YEAR, 0);
	}
	public YEAR_MONTH(): TerminalNode {
		return this.getToken(MySqlParser.YEAR_MONTH, 0);
	}
	public DAY_HOUR(): TerminalNode {
		return this.getToken(MySqlParser.DAY_HOUR, 0);
	}
	public DAY_MINUTE(): TerminalNode {
		return this.getToken(MySqlParser.DAY_MINUTE, 0);
	}
	public DAY_SECOND(): TerminalNode {
		return this.getToken(MySqlParser.DAY_SECOND, 0);
	}
	public HOUR_MINUTE(): TerminalNode {
		return this.getToken(MySqlParser.HOUR_MINUTE, 0);
	}
	public HOUR_SECOND(): TerminalNode {
		return this.getToken(MySqlParser.HOUR_SECOND, 0);
	}
	public MINUTE_SECOND(): TerminalNode {
		return this.getToken(MySqlParser.MINUTE_SECOND, 0);
	}
	public SECOND_MICROSECOND(): TerminalNode {
		return this.getToken(MySqlParser.SECOND_MICROSECOND, 0);
	}
	public MINUTE_MICROSECOND(): TerminalNode {
		return this.getToken(MySqlParser.MINUTE_MICROSECOND, 0);
	}
	public HOUR_MICROSECOND(): TerminalNode {
		return this.getToken(MySqlParser.HOUR_MICROSECOND, 0);
	}
	public DAY_MICROSECOND(): TerminalNode {
		return this.getToken(MySqlParser.DAY_MICROSECOND, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_intervalType;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIntervalType) {
	 		listener.enterIntervalType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIntervalType) {
	 		listener.exitIntervalType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalType) {
			return visitor.visitIntervalType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnableTypeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ENABLE(): TerminalNode {
		return this.getToken(MySqlParser.ENABLE, 0);
	}
	public DISABLE(): TerminalNode {
		return this.getToken(MySqlParser.DISABLE, 0);
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public SLAVE(): TerminalNode {
		return this.getToken(MySqlParser.SLAVE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_enableType;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterEnableType) {
	 		listener.enterEnableType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitEnableType) {
	 		listener.exitEnableType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitEnableType) {
			return visitor.visitEnableType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexTypeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public USING(): TerminalNode {
		return this.getToken(MySqlParser.USING, 0);
	}
	public BTREE(): TerminalNode {
		return this.getToken(MySqlParser.BTREE, 0);
	}
	public HASH(): TerminalNode {
		return this.getToken(MySqlParser.HASH, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_indexType;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIndexType) {
	 		listener.enterIndexType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIndexType) {
	 		listener.exitIndexType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexType) {
			return visitor.visitIndexType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KEY_BLOCK_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	}
	public fileSizeLiteral(): FileSizeLiteralContext {
		return this.getTypedRuleContext(FileSizeLiteralContext, 0) as FileSizeLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public indexType(): IndexTypeContext {
		return this.getTypedRuleContext(IndexTypeContext, 0) as IndexTypeContext;
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public PARSER(): TerminalNode {
		return this.getToken(MySqlParser.PARSER, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public VISIBLE(): TerminalNode {
		return this.getToken(MySqlParser.VISIBLE, 0);
	}
	public INVISIBLE(): TerminalNode {
		return this.getToken(MySqlParser.INVISIBLE, 0);
	}
	public ENGINE_ATTRIBUTE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0);
	}
	public SECONDARY_ENGINE_ATTRIBUTE(): TerminalNode {
		return this.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_indexOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIndexOption) {
	 		listener.enterIndexOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIndexOption) {
	 		listener.exitIndexOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexOption) {
			return visitor.visitIndexOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureParameterContext extends ParserRuleContext {
	public _direction!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
	public IN(): TerminalNode {
		return this.getToken(MySqlParser.IN, 0);
	}
	public OUT(): TerminalNode {
		return this.getToken(MySqlParser.OUT, 0);
	}
	public INOUT(): TerminalNode {
		return this.getToken(MySqlParser.INOUT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_procedureParameter;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterProcedureParameter) {
	 		listener.enterProcedureParameter(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitProcedureParameter) {
	 		listener.exitProcedureParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitProcedureParameter) {
			return visitor.visitProcedureParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionParameterContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_functionParameter;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFunctionParameter) {
	 		listener.enterFunctionParameter(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFunctionParameter) {
	 		listener.exitFunctionParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionParameter) {
			return visitor.visitFunctionParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoutineOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_routineOption;
	}
	public copyFrom(ctx: RoutineOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class RoutineBehaviorContext extends RoutineOptionContext {
	constructor(parser: MySqlParser, ctx: RoutineOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DETERMINISTIC(): TerminalNode {
		return this.getToken(MySqlParser.DETERMINISTIC, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRoutineBehavior) {
	 		listener.enterRoutineBehavior(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRoutineBehavior) {
	 		listener.exitRoutineBehavior(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineBehavior) {
			return visitor.visitRoutineBehavior(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RoutineLanguageContext extends RoutineOptionContext {
	constructor(parser: MySqlParser, ctx: RoutineOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LANGUAGE(): TerminalNode {
		return this.getToken(MySqlParser.LANGUAGE, 0);
	}
	public SQL(): TerminalNode {
		return this.getToken(MySqlParser.SQL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRoutineLanguage) {
	 		listener.enterRoutineLanguage(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRoutineLanguage) {
	 		listener.exitRoutineLanguage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineLanguage) {
			return visitor.visitRoutineLanguage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RoutineCommentContext extends RoutineOptionContext {
	constructor(parser: MySqlParser, ctx: RoutineOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRoutineComment) {
	 		listener.enterRoutineComment(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRoutineComment) {
	 		listener.exitRoutineComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineComment) {
			return visitor.visitRoutineComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RoutineSecurityContext extends RoutineOptionContext {
	public _context!: Token;
	constructor(parser: MySqlParser, ctx: RoutineOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SQL(): TerminalNode {
		return this.getToken(MySqlParser.SQL, 0);
	}
	public SECURITY(): TerminalNode {
		return this.getToken(MySqlParser.SECURITY, 0);
	}
	public DEFINER(): TerminalNode {
		return this.getToken(MySqlParser.DEFINER, 0);
	}
	public INVOKER(): TerminalNode {
		return this.getToken(MySqlParser.INVOKER, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRoutineSecurity) {
	 		listener.enterRoutineSecurity(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRoutineSecurity) {
	 		listener.exitRoutineSecurity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineSecurity) {
			return visitor.visitRoutineSecurity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RoutineDataContext extends RoutineOptionContext {
	constructor(parser: MySqlParser, ctx: RoutineOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CONTAINS(): TerminalNode {
		return this.getToken(MySqlParser.CONTAINS, 0);
	}
	public SQL(): TerminalNode {
		return this.getToken(MySqlParser.SQL, 0);
	}
	public NO(): TerminalNode {
		return this.getToken(MySqlParser.NO, 0);
	}
	public READS(): TerminalNode {
		return this.getToken(MySqlParser.READS, 0);
	}
	public DATA(): TerminalNode {
		return this.getToken(MySqlParser.DATA, 0);
	}
	public MODIFIES(): TerminalNode {
		return this.getToken(MySqlParser.MODIFIES, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRoutineData) {
	 		listener.enterRoutineData(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRoutineData) {
	 		listener.exitRoutineData(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineData) {
			return visitor.visitRoutineData(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ServerOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HOST(): TerminalNode {
		return this.getToken(MySqlParser.HOST, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public DATABASE(): TerminalNode {
		return this.getToken(MySqlParser.DATABASE, 0);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
	public SOCKET(): TerminalNode {
		return this.getToken(MySqlParser.SOCKET, 0);
	}
	public OWNER(): TerminalNode {
		return this.getToken(MySqlParser.OWNER, 0);
	}
	public PORT(): TerminalNode {
		return this.getToken(MySqlParser.PORT, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_serverOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterServerOption) {
	 		listener.enterServerOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitServerOption) {
	 		listener.exitServerOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitServerOption) {
			return visitor.visitServerOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDefinitionsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public createDefinition_list(): CreateDefinitionContext[] {
		return this.getTypedRuleContexts(CreateDefinitionContext) as CreateDefinitionContext[];
	}
	public createDefinition(i: number): CreateDefinitionContext {
		return this.getTypedRuleContext(CreateDefinitionContext, i) as CreateDefinitionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createDefinitions;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateDefinitions) {
	 		listener.enterCreateDefinitions(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateDefinitions) {
	 		listener.exitCreateDefinitions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateDefinitions) {
			return visitor.visitCreateDefinitions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createDefinition;
	}
	public copyFrom(ctx: CreateDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class ColumnDeclarationContext extends CreateDefinitionContext {
	constructor(parser: MySqlParser, ctx: CreateDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public fullColumnName(): FullColumnNameContext {
		return this.getTypedRuleContext(FullColumnNameContext, 0) as FullColumnNameContext;
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getTypedRuleContext(ColumnDefinitionContext, 0) as ColumnDefinitionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterColumnDeclaration) {
	 		listener.enterColumnDeclaration(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitColumnDeclaration) {
	 		listener.exitColumnDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitColumnDeclaration) {
			return visitor.visitColumnDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ConstraintDeclarationContext extends CreateDefinitionContext {
	constructor(parser: MySqlParser, ctx: CreateDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public tableConstraint(): TableConstraintContext {
		return this.getTypedRuleContext(TableConstraintContext, 0) as TableConstraintContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public ENFORCED(): TerminalNode {
		return this.getToken(MySqlParser.ENFORCED, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterConstraintDeclaration) {
	 		listener.enterConstraintDeclaration(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitConstraintDeclaration) {
	 		listener.exitConstraintDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitConstraintDeclaration) {
			return visitor.visitConstraintDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IndexDeclarationContext extends CreateDefinitionContext {
	constructor(parser: MySqlParser, ctx: CreateDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public indexColumnDefinition(): IndexColumnDefinitionContext {
		return this.getTypedRuleContext(IndexColumnDefinitionContext, 0) as IndexColumnDefinitionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIndexDeclaration) {
	 		listener.enterIndexDeclaration(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIndexDeclaration) {
	 		listener.exitIndexDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexDeclaration) {
			return visitor.visitIndexDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
	public columnConstraint_list(): ColumnConstraintContext[] {
		return this.getTypedRuleContexts(ColumnConstraintContext) as ColumnConstraintContext[];
	}
	public columnConstraint(i: number): ColumnConstraintContext {
		return this.getTypedRuleContext(ColumnConstraintContext, i) as ColumnConstraintContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public ENFORCED(): TerminalNode {
		return this.getToken(MySqlParser.ENFORCED, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_columnDefinition;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterColumnDefinition) {
	 		listener.enterColumnDefinition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitColumnDefinition) {
	 		listener.exitColumnDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitColumnDefinition) {
			return visitor.visitColumnDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnConstraintContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_columnConstraint;
	}
	public copyFrom(ctx: ColumnConstraintContext): void {
		super.copyFrom(ctx);
	}
}
export class StorageColumnConstraintContext extends ColumnConstraintContext {
	public _storageval!: Token;
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public STORAGE(): TerminalNode {
		return this.getToken(MySqlParser.STORAGE, 0);
	}
	public DISK(): TerminalNode {
		return this.getToken(MySqlParser.DISK, 0);
	}
	public MEMORY(): TerminalNode {
		return this.getToken(MySqlParser.MEMORY, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStorageColumnConstraint) {
	 		listener.enterStorageColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStorageColumnConstraint) {
	 		listener.exitStorageColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStorageColumnConstraint) {
			return visitor.visitStorageColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class VisibilityColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public VISIBLE(): TerminalNode {
		return this.getToken(MySqlParser.VISIBLE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterVisibilityColumnConstraint) {
	 		listener.enterVisibilityColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitVisibilityColumnConstraint) {
	 		listener.exitVisibilityColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitVisibilityColumnConstraint) {
			return visitor.visitVisibilityColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public AUTO_INCREMENT(): TerminalNode {
		return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public UPDATE(): TerminalNode {
		return this.getToken(MySqlParser.UPDATE, 0);
	}
	public currentTimestamp(): CurrentTimestampContext {
		return this.getTypedRuleContext(CurrentTimestampContext, 0) as CurrentTimestampContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAutoIncrementColumnConstraint) {
	 		listener.enterAutoIncrementColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAutoIncrementColumnConstraint) {
	 		listener.exitAutoIncrementColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAutoIncrementColumnConstraint) {
			return visitor.visitAutoIncrementColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CommentColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCommentColumnConstraint) {
	 		listener.enterCommentColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCommentColumnConstraint) {
	 		listener.exitCommentColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCommentColumnConstraint) {
			return visitor.visitCommentColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public UNIQUE(): TerminalNode {
		return this.getToken(MySqlParser.UNIQUE, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUniqueKeyColumnConstraint) {
	 		listener.enterUniqueKeyColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUniqueKeyColumnConstraint) {
	 		listener.exitUniqueKeyColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUniqueKeyColumnConstraint) {
			return visitor.visitUniqueKeyColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SERIAL(): TerminalNode {
		return this.getToken(MySqlParser.SERIAL, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public VALUE(): TerminalNode {
		return this.getToken(MySqlParser.VALUE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSerialDefaultColumnConstraint) {
	 		listener.enterSerialDefaultColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSerialDefaultColumnConstraint) {
	 		listener.exitSerialDefaultColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSerialDefaultColumnConstraint) {
			return visitor.visitSerialDefaultColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GeneratedColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public GENERATED(): TerminalNode {
		return this.getToken(MySqlParser.GENERATED, 0);
	}
	public ALWAYS(): TerminalNode {
		return this.getToken(MySqlParser.ALWAYS, 0);
	}
	public VIRTUAL(): TerminalNode {
		return this.getToken(MySqlParser.VIRTUAL, 0);
	}
	public STORED(): TerminalNode {
		return this.getToken(MySqlParser.STORED, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterGeneratedColumnConstraint) {
	 		listener.enterGeneratedColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitGeneratedColumnConstraint) {
	 		listener.exitGeneratedColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGeneratedColumnConstraint) {
			return visitor.visitGeneratedColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FormatColumnConstraintContext extends ColumnConstraintContext {
	public _colformat!: Token;
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COLUMN_FORMAT(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN_FORMAT, 0);
	}
	public FIXED(): TerminalNode {
		return this.getToken(MySqlParser.FIXED, 0);
	}
	public DYNAMIC(): TerminalNode {
		return this.getToken(MySqlParser.DYNAMIC, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFormatColumnConstraint) {
	 		listener.enterFormatColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFormatColumnConstraint) {
	 		listener.exitFormatColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFormatColumnConstraint) {
			return visitor.visitFormatColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CollateColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COLLATE(): TerminalNode {
		return this.getToken(MySqlParser.COLLATE, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCollateColumnConstraint) {
	 		listener.enterCollateColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCollateColumnConstraint) {
	 		listener.exitCollateColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCollateColumnConstraint) {
			return visitor.visitCollateColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public PRIMARY(): TerminalNode {
		return this.getToken(MySqlParser.PRIMARY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPrimaryKeyColumnConstraint) {
	 		listener.enterPrimaryKeyColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPrimaryKeyColumnConstraint) {
	 		listener.exitPrimaryKeyColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrimaryKeyColumnConstraint) {
			return visitor.visitPrimaryKeyColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CheckColumnConstraintContext extends ColumnConstraintContext {
	public _name!: UidContext;
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHECK(): TerminalNode {
		return this.getToken(MySqlParser.CHECK, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCheckColumnConstraint) {
	 		listener.enterCheckColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCheckColumnConstraint) {
	 		listener.exitCheckColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCheckColumnConstraint) {
			return visitor.visitCheckColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NullColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public nullNotnull(): NullNotnullContext {
		return this.getTypedRuleContext(NullNotnullContext, 0) as NullNotnullContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterNullColumnConstraint) {
	 		listener.enterNullColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitNullColumnConstraint) {
	 		listener.exitNullColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNullColumnConstraint) {
			return visitor.visitNullColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DefaultColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public defaultValue(): DefaultValueContext {
		return this.getTypedRuleContext(DefaultValueContext, 0) as DefaultValueContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDefaultColumnConstraint) {
	 		listener.enterDefaultColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDefaultColumnConstraint) {
	 		listener.exitDefaultColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefaultColumnConstraint) {
			return visitor.visitDefaultColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ReferenceColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getTypedRuleContext(ReferenceDefinitionContext, 0) as ReferenceDefinitionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterReferenceColumnConstraint) {
	 		listener.enterReferenceColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitReferenceColumnConstraint) {
	 		listener.exitReferenceColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReferenceColumnConstraint) {
			return visitor.visitReferenceColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class InvisibilityColumnConstraintContext extends ColumnConstraintContext {
	constructor(parser: MySqlParser, ctx: ColumnConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INVISIBLE(): TerminalNode {
		return this.getToken(MySqlParser.INVISIBLE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterInvisibilityColumnConstraint) {
	 		listener.enterInvisibilityColumnConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitInvisibilityColumnConstraint) {
	 		listener.exitInvisibilityColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInvisibilityColumnConstraint) {
			return visitor.visitInvisibilityColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableConstraintContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tableConstraint;
	}
	public copyFrom(ctx: TableConstraintContext): void {
		super.copyFrom(ctx);
	}
}
export class UniqueKeyTableConstraintContext extends TableConstraintContext {
	public _name!: UidContext;
	public _indexFormat!: Token;
	public _index!: UidContext;
	constructor(parser: MySqlParser, ctx: TableConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public UNIQUE(): TerminalNode {
		return this.getToken(MySqlParser.UNIQUE, 0);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public indexType(): IndexTypeContext {
		return this.getTypedRuleContext(IndexTypeContext, 0) as IndexTypeContext;
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUniqueKeyTableConstraint) {
	 		listener.enterUniqueKeyTableConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUniqueKeyTableConstraint) {
	 		listener.exitUniqueKeyTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUniqueKeyTableConstraint) {
			return visitor.visitUniqueKeyTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CheckTableConstraintContext extends TableConstraintContext {
	public _name!: UidContext;
	constructor(parser: MySqlParser, ctx: TableConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHECK(): TerminalNode {
		return this.getToken(MySqlParser.CHECK, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCheckTableConstraint) {
	 		listener.enterCheckTableConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCheckTableConstraint) {
	 		listener.exitCheckTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCheckTableConstraint) {
			return visitor.visitCheckTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PrimaryKeyTableConstraintContext extends TableConstraintContext {
	public _name!: UidContext;
	public _index!: UidContext;
	constructor(parser: MySqlParser, ctx: TableConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PRIMARY(): TerminalNode {
		return this.getToken(MySqlParser.PRIMARY, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public indexType(): IndexTypeContext {
		return this.getTypedRuleContext(IndexTypeContext, 0) as IndexTypeContext;
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPrimaryKeyTableConstraint) {
	 		listener.enterPrimaryKeyTableConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPrimaryKeyTableConstraint) {
	 		listener.exitPrimaryKeyTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrimaryKeyTableConstraint) {
			return visitor.visitPrimaryKeyTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ForeignKeyTableConstraintContext extends TableConstraintContext {
	public _name!: UidContext;
	public _index!: UidContext;
	constructor(parser: MySqlParser, ctx: TableConstraintContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public FOREIGN(): TerminalNode {
		return this.getToken(MySqlParser.FOREIGN, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getTypedRuleContext(ReferenceDefinitionContext, 0) as ReferenceDefinitionContext;
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterForeignKeyTableConstraint) {
	 		listener.enterForeignKeyTableConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitForeignKeyTableConstraint) {
	 		listener.exitForeignKeyTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitForeignKeyTableConstraint) {
			return visitor.visitForeignKeyTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReferenceDefinitionContext extends ParserRuleContext {
	public _matchType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REFERENCES(): TerminalNode {
		return this.getToken(MySqlParser.REFERENCES, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public MATCH(): TerminalNode {
		return this.getToken(MySqlParser.MATCH, 0);
	}
	public referenceAction(): ReferenceActionContext {
		return this.getTypedRuleContext(ReferenceActionContext, 0) as ReferenceActionContext;
	}
	public FULL(): TerminalNode {
		return this.getToken(MySqlParser.FULL, 0);
	}
	public PARTIAL(): TerminalNode {
		return this.getToken(MySqlParser.PARTIAL, 0);
	}
	public SIMPLE(): TerminalNode {
		return this.getToken(MySqlParser.SIMPLE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_referenceDefinition;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterReferenceDefinition) {
	 		listener.enterReferenceDefinition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitReferenceDefinition) {
	 		listener.exitReferenceDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReferenceDefinition) {
			return visitor.visitReferenceDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReferenceActionContext extends ParserRuleContext {
	public _onDelete!: ReferenceControlTypeContext;
	public _onUpdate!: ReferenceControlTypeContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ON_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ON);
	}
	public ON(i: number): TerminalNode {
		return this.getToken(MySqlParser.ON, i);
	}
	public DELETE(): TerminalNode {
		return this.getToken(MySqlParser.DELETE, 0);
	}
	public referenceControlType_list(): ReferenceControlTypeContext[] {
		return this.getTypedRuleContexts(ReferenceControlTypeContext) as ReferenceControlTypeContext[];
	}
	public referenceControlType(i: number): ReferenceControlTypeContext {
		return this.getTypedRuleContext(ReferenceControlTypeContext, i) as ReferenceControlTypeContext;
	}
	public UPDATE(): TerminalNode {
		return this.getToken(MySqlParser.UPDATE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_referenceAction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterReferenceAction) {
	 		listener.enterReferenceAction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitReferenceAction) {
	 		listener.exitReferenceAction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReferenceAction) {
			return visitor.visitReferenceAction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReferenceControlTypeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESTRICT(): TerminalNode {
		return this.getToken(MySqlParser.RESTRICT, 0);
	}
	public CASCADE(): TerminalNode {
		return this.getToken(MySqlParser.CASCADE, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public NULL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.NULL_LITERAL, 0);
	}
	public NO(): TerminalNode {
		return this.getToken(MySqlParser.NO, 0);
	}
	public ACTION(): TerminalNode {
		return this.getToken(MySqlParser.ACTION, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_referenceControlType;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterReferenceControlType) {
	 		listener.enterReferenceControlType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitReferenceControlType) {
	 		listener.exitReferenceControlType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReferenceControlType) {
			return visitor.visitReferenceControlType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexColumnDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_indexColumnDefinition;
	}
	public copyFrom(ctx: IndexColumnDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
	public _indexFormat!: Token;
	constructor(parser: MySqlParser, ctx: IndexColumnDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public FULLTEXT(): TerminalNode {
		return this.getToken(MySqlParser.FULLTEXT, 0);
	}
	public SPATIAL(): TerminalNode {
		return this.getToken(MySqlParser.SPATIAL, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSpecialIndexDeclaration) {
	 		listener.enterSpecialIndexDeclaration(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSpecialIndexDeclaration) {
	 		listener.exitSpecialIndexDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSpecialIndexDeclaration) {
			return visitor.visitSpecialIndexDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
	public _indexFormat!: Token;
	constructor(parser: MySqlParser, ctx: IndexColumnDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public indexType(): IndexTypeContext {
		return this.getTypedRuleContext(IndexTypeContext, 0) as IndexTypeContext;
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSimpleIndexDeclaration) {
	 		listener.enterSimpleIndexDeclaration(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSimpleIndexDeclaration) {
	 		listener.exitSimpleIndexDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleIndexDeclaration) {
			return visitor.visitSimpleIndexDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tableOption;
	}
	public copyFrom(ctx: TableOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class TableOptionEngineContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public engineName(): EngineNameContext {
		return this.getTypedRuleContext(EngineNameContext, 0) as EngineNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionEngine) {
	 		listener.enterTableOptionEngine(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionEngine) {
	 		listener.exitTableOptionEngine(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionEngine) {
			return visitor.visitTableOptionEngine(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionMaxRowsContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MAX_ROWS(): TerminalNode {
		return this.getToken(MySqlParser.MAX_ROWS, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionMaxRows) {
	 		listener.enterTableOptionMaxRows(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionMaxRows) {
	 		listener.exitTableOptionMaxRows(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionMaxRows) {
			return visitor.visitTableOptionMaxRows(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionCollateContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COLLATE(): TerminalNode {
		return this.getToken(MySqlParser.COLLATE, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionCollate) {
	 		listener.enterTableOptionCollate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionCollate) {
	 		listener.exitTableOptionCollate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionCollate) {
			return visitor.visitTableOptionCollate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionPersistentContext extends TableOptionContext {
	public _extBoolValue!: Token;
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public STATS_PERSISTENT(): TerminalNode {
		return this.getToken(MySqlParser.STATS_PERSISTENT, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionPersistent) {
	 		listener.enterTableOptionPersistent(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionPersistent) {
	 		listener.exitTableOptionPersistent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionPersistent) {
			return visitor.visitTableOptionPersistent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionTablespaceContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public tablespaceStorage(): TablespaceStorageContext {
		return this.getTypedRuleContext(TablespaceStorageContext, 0) as TablespaceStorageContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionTablespace) {
	 		listener.enterTableOptionTablespace(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionTablespace) {
	 		listener.exitTableOptionTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionTablespace) {
			return visitor.visitTableOptionTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionAutoextendSizeContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public AUTOEXTEND_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionAutoextendSize) {
	 		listener.enterTableOptionAutoextendSize(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionAutoextendSize) {
	 		listener.exitTableOptionAutoextendSize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionAutoextendSize) {
			return visitor.visitTableOptionAutoextendSize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionPageCompressedContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PAGE_COMPRESSED(): TerminalNode {
		return this.getToken(MySqlParser.PAGE_COMPRESSED, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionPageCompressed) {
	 		listener.enterTableOptionPageCompressed(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionPageCompressed) {
	 		listener.exitTableOptionPageCompressed(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionPageCompressed) {
			return visitor.visitTableOptionPageCompressed(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionStartTransactionContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public START(): TerminalNode {
		return this.getToken(MySqlParser.START, 0);
	}
	public TRANSACTION(): TerminalNode {
		return this.getToken(MySqlParser.TRANSACTION, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionStartTransaction) {
	 		listener.enterTableOptionStartTransaction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionStartTransaction) {
	 		listener.exitTableOptionStartTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionStartTransaction) {
			return visitor.visitTableOptionStartTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionPackKeysContext extends TableOptionContext {
	public _extBoolValue!: Token;
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PACK_KEYS(): TerminalNode {
		return this.getToken(MySqlParser.PACK_KEYS, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionPackKeys) {
	 		listener.enterTableOptionPackKeys(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionPackKeys) {
	 		listener.exitTableOptionPackKeys(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionPackKeys) {
			return visitor.visitTableOptionPackKeys(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionPasswordContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionPassword) {
	 		listener.enterTableOptionPassword(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionPassword) {
	 		listener.exitTableOptionPassword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionPassword) {
			return visitor.visitTableOptionPassword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionUnionContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public UNION(): TerminalNode {
		return this.getToken(MySqlParser.UNION, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public tables(): TablesContext {
		return this.getTypedRuleContext(TablesContext, 0) as TablesContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionUnion) {
	 		listener.enterTableOptionUnion(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionUnion) {
	 		listener.exitTableOptionUnion(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionUnion) {
			return visitor.visitTableOptionUnion(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionSamplePageContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public STATS_SAMPLE_PAGES(): TerminalNode {
		return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionSamplePage) {
	 		listener.enterTableOptionSamplePage(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionSamplePage) {
	 		listener.exitTableOptionSamplePage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionSamplePage) {
			return visitor.visitTableOptionSamplePage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionCharsetContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public charSet(): CharSetContext {
		return this.getTypedRuleContext(CharSetContext, 0) as CharSetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public DEFAULT_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.DEFAULT);
	}
	public DEFAULT(i: number): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, i);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionCharset) {
	 		listener.enterTableOptionCharset(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionCharset) {
	 		listener.exitTableOptionCharset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionCharset) {
			return visitor.visitTableOptionCharset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionIndexDirectoryContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public DIRECTORY(): TerminalNode {
		return this.getToken(MySqlParser.DIRECTORY, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionIndexDirectory) {
	 		listener.enterTableOptionIndexDirectory(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionIndexDirectory) {
	 		listener.exitTableOptionIndexDirectory(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionIndexDirectory) {
			return visitor.visitTableOptionIndexDirectory(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionTableTypeContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TABLE_TYPE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE_TYPE, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public tableType(): TableTypeContext {
		return this.getTypedRuleContext(TableTypeContext, 0) as TableTypeContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionTableType) {
	 		listener.enterTableOptionTableType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionTableType) {
	 		listener.exitTableOptionTableType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionTableType) {
			return visitor.visitTableOptionTableType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionKeyBlockSizeContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public KEY_BLOCK_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	}
	public fileSizeLiteral(): FileSizeLiteralContext {
		return this.getTypedRuleContext(FileSizeLiteralContext, 0) as FileSizeLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionKeyBlockSize) {
	 		listener.enterTableOptionKeyBlockSize(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionKeyBlockSize) {
	 		listener.exitTableOptionKeyBlockSize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionKeyBlockSize) {
			return visitor.visitTableOptionKeyBlockSize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionEncryptionContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ENCRYPTION(): TerminalNode {
		return this.getToken(MySqlParser.ENCRYPTION, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionEncryption) {
	 		listener.enterTableOptionEncryption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionEncryption) {
	 		listener.exitTableOptionEncryption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionEncryption) {
			return visitor.visitTableOptionEncryption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionDataDirectoryContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DIRECTORY(): TerminalNode {
		return this.getToken(MySqlParser.DIRECTORY, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public DATA(): TerminalNode {
		return this.getToken(MySqlParser.DATA, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionDataDirectory) {
	 		listener.enterTableOptionDataDirectory(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionDataDirectory) {
	 		listener.exitTableOptionDataDirectory(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionDataDirectory) {
			return visitor.visitTableOptionDataDirectory(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionRecalculationContext extends TableOptionContext {
	public _extBoolValue!: Token;
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public STATS_AUTO_RECALC(): TerminalNode {
		return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionRecalculation) {
	 		listener.enterTableOptionRecalculation(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionRecalculation) {
	 		listener.exitTableOptionRecalculation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionRecalculation) {
			return visitor.visitTableOptionRecalculation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionAutoIncrementContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public AUTO_INCREMENT(): TerminalNode {
		return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionAutoIncrement) {
	 		listener.enterTableOptionAutoIncrement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionAutoIncrement) {
	 		listener.exitTableOptionAutoIncrement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionAutoIncrement) {
			return visitor.visitTableOptionAutoIncrement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionEncryptionKeyIdContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ENCRYPTION_KEY_ID(): TerminalNode {
		return this.getToken(MySqlParser.ENCRYPTION_KEY_ID, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionEncryptionKeyId) {
	 		listener.enterTableOptionEncryptionKeyId(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionEncryptionKeyId) {
	 		listener.exitTableOptionEncryptionKeyId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionEncryptionKeyId) {
			return visitor.visitTableOptionEncryptionKeyId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionChecksumContext extends TableOptionContext {
	public _boolValue!: Token;
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHECKSUM(): TerminalNode {
		return this.getToken(MySqlParser.CHECKSUM, 0);
	}
	public PAGE_CHECKSUM(): TerminalNode {
		return this.getToken(MySqlParser.PAGE_CHECKSUM, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionChecksum) {
	 		listener.enterTableOptionChecksum(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionChecksum) {
	 		listener.exitTableOptionChecksum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionChecksum) {
			return visitor.visitTableOptionChecksum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionDelayContext extends TableOptionContext {
	public _boolValue!: Token;
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DELAY_KEY_WRITE(): TerminalNode {
		return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionDelay) {
	 		listener.enterTableOptionDelay(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionDelay) {
	 		listener.exitTableOptionDelay(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionDelay) {
			return visitor.visitTableOptionDelay(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionConnectionContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CONNECTION(): TerminalNode {
		return this.getToken(MySqlParser.CONNECTION, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionConnection) {
	 		listener.enterTableOptionConnection(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionConnection) {
	 		listener.exitTableOptionConnection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionConnection) {
			return visitor.visitTableOptionConnection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionTransactionalContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TRANSACTIONAL(): TerminalNode {
		return this.getToken(MySqlParser.TRANSACTIONAL, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionTransactional) {
	 		listener.enterTableOptionTransactional(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionTransactional) {
	 		listener.exitTableOptionTransactional(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionTransactional) {
			return visitor.visitTableOptionTransactional(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionPageCompressionLevelContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public PAGE_COMPRESSION_LEVEL(): TerminalNode {
		return this.getToken(MySqlParser.PAGE_COMPRESSION_LEVEL, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionPageCompressionLevel) {
	 		listener.enterTableOptionPageCompressionLevel(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionPageCompressionLevel) {
	 		listener.exitTableOptionPageCompressionLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionPageCompressionLevel) {
			return visitor.visitTableOptionPageCompressionLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionSecondaryEngineAttributeContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SECONDARY_ENGINE_ATTRIBUTE(): TerminalNode {
		return this.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionSecondaryEngineAttribute) {
	 		listener.enterTableOptionSecondaryEngineAttribute(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionSecondaryEngineAttribute) {
	 		listener.exitTableOptionSecondaryEngineAttribute(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionSecondaryEngineAttribute) {
			return visitor.visitTableOptionSecondaryEngineAttribute(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionCommentContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionComment) {
	 		listener.enterTableOptionComment(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionComment) {
	 		listener.exitTableOptionComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionComment) {
			return visitor.visitTableOptionComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionAverageContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public AVG_ROW_LENGTH(): TerminalNode {
		return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionAverage) {
	 		listener.enterTableOptionAverage(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionAverage) {
	 		listener.exitTableOptionAverage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionAverage) {
			return visitor.visitTableOptionAverage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionRowFormatContext extends TableOptionContext {
	public _rowFormat!: Token;
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ROW_FORMAT(): TerminalNode {
		return this.getToken(MySqlParser.ROW_FORMAT, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public DYNAMIC(): TerminalNode {
		return this.getToken(MySqlParser.DYNAMIC, 0);
	}
	public FIXED(): TerminalNode {
		return this.getToken(MySqlParser.FIXED, 0);
	}
	public COMPRESSED(): TerminalNode {
		return this.getToken(MySqlParser.COMPRESSED, 0);
	}
	public REDUNDANT(): TerminalNode {
		return this.getToken(MySqlParser.REDUNDANT, 0);
	}
	public COMPACT(): TerminalNode {
		return this.getToken(MySqlParser.COMPACT, 0);
	}
	public ID(): TerminalNode {
		return this.getToken(MySqlParser.ID, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionRowFormat) {
	 		listener.enterTableOptionRowFormat(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionRowFormat) {
	 		listener.exitTableOptionRowFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionRowFormat) {
			return visitor.visitTableOptionRowFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionCompressionContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMPRESSION(): TerminalNode {
		return this.getToken(MySqlParser.COMPRESSION, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public ID(): TerminalNode {
		return this.getToken(MySqlParser.ID, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionCompression) {
	 		listener.enterTableOptionCompression(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionCompression) {
	 		listener.exitTableOptionCompression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionCompression) {
			return visitor.visitTableOptionCompression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionInsertMethodContext extends TableOptionContext {
	public _insertMethod!: Token;
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INSERT_METHOD(): TerminalNode {
		return this.getToken(MySqlParser.INSERT_METHOD, 0);
	}
	public NO(): TerminalNode {
		return this.getToken(MySqlParser.NO, 0);
	}
	public FIRST(): TerminalNode {
		return this.getToken(MySqlParser.FIRST, 0);
	}
	public LAST(): TerminalNode {
		return this.getToken(MySqlParser.LAST, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionInsertMethod) {
	 		listener.enterTableOptionInsertMethod(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionInsertMethod) {
	 		listener.exitTableOptionInsertMethod(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionInsertMethod) {
			return visitor.visitTableOptionInsertMethod(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionEngineAttributeContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ENGINE_ATTRIBUTE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionEngineAttribute) {
	 		listener.enterTableOptionEngineAttribute(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionEngineAttribute) {
	 		listener.exitTableOptionEngineAttribute(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionEngineAttribute) {
			return visitor.visitTableOptionEngineAttribute(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableOptionMinRowsContext extends TableOptionContext {
	constructor(parser: MySqlParser, ctx: TableOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MIN_ROWS(): TerminalNode {
		return this.getToken(MySqlParser.MIN_ROWS, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableOptionMinRows) {
	 		listener.enterTableOptionMinRows(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableOptionMinRows) {
	 		listener.exitTableOptionMinRows(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableOptionMinRows) {
			return visitor.visitTableOptionMinRows(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableTypeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MYSQL(): TerminalNode {
		return this.getToken(MySqlParser.MYSQL, 0);
	}
	public ODBC(): TerminalNode {
		return this.getToken(MySqlParser.ODBC, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tableType;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableType) {
	 		listener.enterTableType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableType) {
	 		listener.exitTableType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableType) {
			return visitor.visitTableType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablespaceStorageContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STORAGE(): TerminalNode {
		return this.getToken(MySqlParser.STORAGE, 0);
	}
	public DISK(): TerminalNode {
		return this.getToken(MySqlParser.DISK, 0);
	}
	public MEMORY(): TerminalNode {
		return this.getToken(MySqlParser.MEMORY, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tablespaceStorage;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTablespaceStorage) {
	 		listener.enterTablespaceStorage(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTablespaceStorage) {
	 		listener.exitTablespaceStorage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTablespaceStorage) {
			return visitor.visitTablespaceStorage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionDefinitionsContext extends ParserRuleContext {
	public _count!: DecimalLiteralContext;
	public _subCount!: DecimalLiteralContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public BY_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.BY);
	}
	public BY(i: number): TerminalNode {
		return this.getToken(MySqlParser.BY, i);
	}
	public partitionFunctionDefinition(): PartitionFunctionDefinitionContext {
		return this.getTypedRuleContext(PartitionFunctionDefinitionContext, 0) as PartitionFunctionDefinitionContext;
	}
	public PARTITIONS(): TerminalNode {
		return this.getToken(MySqlParser.PARTITIONS, 0);
	}
	public SUBPARTITION(): TerminalNode {
		return this.getToken(MySqlParser.SUBPARTITION, 0);
	}
	public subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext {
		return this.getTypedRuleContext(SubpartitionFunctionDefinitionContext, 0) as SubpartitionFunctionDefinitionContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public partitionDefinition_list(): PartitionDefinitionContext[] {
		return this.getTypedRuleContexts(PartitionDefinitionContext) as PartitionDefinitionContext[];
	}
	public partitionDefinition(i: number): PartitionDefinitionContext {
		return this.getTypedRuleContext(PartitionDefinitionContext, i) as PartitionDefinitionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public decimalLiteral_list(): DecimalLiteralContext[] {
		return this.getTypedRuleContexts(DecimalLiteralContext) as DecimalLiteralContext[];
	}
	public decimalLiteral(i: number): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, i) as DecimalLiteralContext;
	}
	public SUBPARTITIONS(): TerminalNode {
		return this.getToken(MySqlParser.SUBPARTITIONS, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_partitionDefinitions;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionDefinitions) {
	 		listener.enterPartitionDefinitions(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionDefinitions) {
	 		listener.exitPartitionDefinitions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionDefinitions) {
			return visitor.visitPartitionDefinitions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionFunctionDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_partitionFunctionDefinition;
	}
	public copyFrom(ctx: PartitionFunctionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
	public _algType!: Token;
	constructor(parser: MySqlParser, ctx: PartitionFunctionDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public LINEAR(): TerminalNode {
		return this.getToken(MySqlParser.LINEAR, 0);
	}
	public ALGORITHM(): TerminalNode {
		return this.getToken(MySqlParser.ALGORITHM, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public TWO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionFunctionKey) {
	 		listener.enterPartitionFunctionKey(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionFunctionKey) {
	 		listener.exitPartitionFunctionKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionFunctionKey) {
			return visitor.visitPartitionFunctionKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
	constructor(parser: MySqlParser, ctx: PartitionFunctionDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public HASH(): TerminalNode {
		return this.getToken(MySqlParser.HASH, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public LINEAR(): TerminalNode {
		return this.getToken(MySqlParser.LINEAR, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionFunctionHash) {
	 		listener.enterPartitionFunctionHash(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionFunctionHash) {
	 		listener.exitPartitionFunctionHash(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionFunctionHash) {
			return visitor.visitPartitionFunctionHash(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
	constructor(parser: MySqlParser, ctx: PartitionFunctionDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LIST(): TerminalNode {
		return this.getToken(MySqlParser.LIST, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COLUMNS(): TerminalNode {
		return this.getToken(MySqlParser.COLUMNS, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionFunctionList) {
	 		listener.enterPartitionFunctionList(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionFunctionList) {
	 		listener.exitPartitionFunctionList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionFunctionList) {
			return visitor.visitPartitionFunctionList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
	constructor(parser: MySqlParser, ctx: PartitionFunctionDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RANGE(): TerminalNode {
		return this.getToken(MySqlParser.RANGE, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COLUMNS(): TerminalNode {
		return this.getToken(MySqlParser.COLUMNS, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionFunctionRange) {
	 		listener.enterPartitionFunctionRange(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionFunctionRange) {
	 		listener.exitPartitionFunctionRange(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionFunctionRange) {
			return visitor.visitPartitionFunctionRange(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_subpartitionFunctionDefinition;
	}
	public copyFrom(ctx: SubpartitionFunctionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
	constructor(parser: MySqlParser, ctx: SubpartitionFunctionDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public HASH(): TerminalNode {
		return this.getToken(MySqlParser.HASH, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public LINEAR(): TerminalNode {
		return this.getToken(MySqlParser.LINEAR, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSubPartitionFunctionHash) {
	 		listener.enterSubPartitionFunctionHash(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSubPartitionFunctionHash) {
	 		listener.exitSubPartitionFunctionHash(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubPartitionFunctionHash) {
			return visitor.visitSubPartitionFunctionHash(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
	public _algType!: Token;
	constructor(parser: MySqlParser, ctx: SubpartitionFunctionDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public LINEAR(): TerminalNode {
		return this.getToken(MySqlParser.LINEAR, 0);
	}
	public ALGORITHM(): TerminalNode {
		return this.getToken(MySqlParser.ALGORITHM, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public TWO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSubPartitionFunctionKey) {
	 		listener.enterSubPartitionFunctionKey(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSubPartitionFunctionKey) {
	 		listener.exitSubPartitionFunctionKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubPartitionFunctionKey) {
			return visitor.visitSubPartitionFunctionKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_partitionDefinition;
	}
	public copyFrom(ctx: PartitionDefinitionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionComparisonContext extends PartitionDefinitionContext {
	constructor(parser: MySqlParser, ctx: PartitionDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public VALUES(): TerminalNode {
		return this.getToken(MySqlParser.VALUES, 0);
	}
	public LESS(): TerminalNode {
		return this.getToken(MySqlParser.LESS, 0);
	}
	public THAN(): TerminalNode {
		return this.getToken(MySqlParser.THAN, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public partitionDefinerAtom_list(): PartitionDefinerAtomContext[] {
		return this.getTypedRuleContexts(PartitionDefinerAtomContext) as PartitionDefinerAtomContext[];
	}
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext {
		return this.getTypedRuleContext(PartitionDefinerAtomContext, i) as PartitionDefinerAtomContext;
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public partitionOption_list(): PartitionOptionContext[] {
		return this.getTypedRuleContexts(PartitionOptionContext) as PartitionOptionContext[];
	}
	public partitionOption(i: number): PartitionOptionContext {
		return this.getTypedRuleContext(PartitionOptionContext, i) as PartitionOptionContext;
	}
	public subpartitionDefinition_list(): SubpartitionDefinitionContext[] {
		return this.getTypedRuleContexts(SubpartitionDefinitionContext) as SubpartitionDefinitionContext[];
	}
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext {
		return this.getTypedRuleContext(SubpartitionDefinitionContext, i) as SubpartitionDefinitionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionComparison) {
	 		listener.enterPartitionComparison(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionComparison) {
	 		listener.exitPartitionComparison(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionComparison) {
			return visitor.visitPartitionComparison(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionListAtomContext extends PartitionDefinitionContext {
	constructor(parser: MySqlParser, ctx: PartitionDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public VALUES(): TerminalNode {
		return this.getToken(MySqlParser.VALUES, 0);
	}
	public IN(): TerminalNode {
		return this.getToken(MySqlParser.IN, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public partitionDefinerAtom_list(): PartitionDefinerAtomContext[] {
		return this.getTypedRuleContexts(PartitionDefinerAtomContext) as PartitionDefinerAtomContext[];
	}
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext {
		return this.getTypedRuleContext(PartitionDefinerAtomContext, i) as PartitionDefinerAtomContext;
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public partitionOption_list(): PartitionOptionContext[] {
		return this.getTypedRuleContexts(PartitionOptionContext) as PartitionOptionContext[];
	}
	public partitionOption(i: number): PartitionOptionContext {
		return this.getTypedRuleContext(PartitionOptionContext, i) as PartitionOptionContext;
	}
	public subpartitionDefinition_list(): SubpartitionDefinitionContext[] {
		return this.getTypedRuleContexts(SubpartitionDefinitionContext) as SubpartitionDefinitionContext[];
	}
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext {
		return this.getTypedRuleContext(SubpartitionDefinitionContext, i) as SubpartitionDefinitionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionListAtom) {
	 		listener.enterPartitionListAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionListAtom) {
	 		listener.exitPartitionListAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionListAtom) {
			return visitor.visitPartitionListAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionListVectorContext extends PartitionDefinitionContext {
	constructor(parser: MySqlParser, ctx: PartitionDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public VALUES(): TerminalNode {
		return this.getToken(MySqlParser.VALUES, 0);
	}
	public IN(): TerminalNode {
		return this.getToken(MySqlParser.IN, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public partitionDefinerVector_list(): PartitionDefinerVectorContext[] {
		return this.getTypedRuleContexts(PartitionDefinerVectorContext) as PartitionDefinerVectorContext[];
	}
	public partitionDefinerVector(i: number): PartitionDefinerVectorContext {
		return this.getTypedRuleContext(PartitionDefinerVectorContext, i) as PartitionDefinerVectorContext;
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public partitionOption_list(): PartitionOptionContext[] {
		return this.getTypedRuleContexts(PartitionOptionContext) as PartitionOptionContext[];
	}
	public partitionOption(i: number): PartitionOptionContext {
		return this.getTypedRuleContext(PartitionOptionContext, i) as PartitionOptionContext;
	}
	public subpartitionDefinition_list(): SubpartitionDefinitionContext[] {
		return this.getTypedRuleContexts(SubpartitionDefinitionContext) as SubpartitionDefinitionContext[];
	}
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext {
		return this.getTypedRuleContext(SubpartitionDefinitionContext, i) as SubpartitionDefinitionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionListVector) {
	 		listener.enterPartitionListVector(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionListVector) {
	 		listener.exitPartitionListVector(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionListVector) {
			return visitor.visitPartitionListVector(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionSimpleContext extends PartitionDefinitionContext {
	constructor(parser: MySqlParser, ctx: PartitionDefinitionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public partitionOption_list(): PartitionOptionContext[] {
		return this.getTypedRuleContexts(PartitionOptionContext) as PartitionOptionContext[];
	}
	public partitionOption(i: number): PartitionOptionContext {
		return this.getTypedRuleContext(PartitionOptionContext, i) as PartitionOptionContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public subpartitionDefinition_list(): SubpartitionDefinitionContext[] {
		return this.getTypedRuleContexts(SubpartitionDefinitionContext) as SubpartitionDefinitionContext[];
	}
	public subpartitionDefinition(i: number): SubpartitionDefinitionContext {
		return this.getTypedRuleContext(SubpartitionDefinitionContext, i) as SubpartitionDefinitionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionSimple) {
	 		listener.enterPartitionSimple(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionSimple) {
	 		listener.exitPartitionSimple(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionSimple) {
			return visitor.visitPartitionSimple(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionDefinerAtomContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public constant(): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, 0) as ConstantContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public MAXVALUE(): TerminalNode {
		return this.getToken(MySqlParser.MAXVALUE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_partitionDefinerAtom;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionDefinerAtom) {
	 		listener.enterPartitionDefinerAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionDefinerAtom) {
	 		listener.exitPartitionDefinerAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionDefinerAtom) {
			return visitor.visitPartitionDefinerAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionDefinerVectorContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public partitionDefinerAtom_list(): PartitionDefinerAtomContext[] {
		return this.getTypedRuleContexts(PartitionDefinerAtomContext) as PartitionDefinerAtomContext[];
	}
	public partitionDefinerAtom(i: number): PartitionDefinerAtomContext {
		return this.getTypedRuleContext(PartitionDefinerAtomContext, i) as PartitionDefinerAtomContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_partitionDefinerVector;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionDefinerVector) {
	 		listener.enterPartitionDefinerVector(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionDefinerVector) {
	 		listener.exitPartitionDefinerVector(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionDefinerVector) {
			return visitor.visitPartitionDefinerVector(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubpartitionDefinitionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SUBPARTITION(): TerminalNode {
		return this.getToken(MySqlParser.SUBPARTITION, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public partitionOption_list(): PartitionOptionContext[] {
		return this.getTypedRuleContexts(PartitionOptionContext) as PartitionOptionContext[];
	}
	public partitionOption(i: number): PartitionOptionContext {
		return this.getTypedRuleContext(PartitionOptionContext, i) as PartitionOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_subpartitionDefinition;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSubpartitionDefinition) {
	 		listener.enterSubpartitionDefinition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSubpartitionDefinition) {
	 		listener.exitSubpartitionDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubpartitionDefinition) {
			return visitor.visitSubpartitionDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_partitionOption;
	}
	public copyFrom(ctx: PartitionOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class PartitionOptionCommentContext extends PartitionOptionContext {
	public _comment!: Token;
	constructor(parser: MySqlParser, ctx: PartitionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionOptionComment) {
	 		listener.enterPartitionOptionComment(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionOptionComment) {
	 		listener.exitPartitionOptionComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionComment) {
			return visitor.visitPartitionOptionComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionNodeGroupContext extends PartitionOptionContext {
	public _nodegroup!: UidContext;
	constructor(parser: MySqlParser, ctx: PartitionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public NODEGROUP(): TerminalNode {
		return this.getToken(MySqlParser.NODEGROUP, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionOptionNodeGroup) {
	 		listener.enterPartitionOptionNodeGroup(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionOptionNodeGroup) {
	 		listener.exitPartitionOptionNodeGroup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionNodeGroup) {
			return visitor.visitPartitionOptionNodeGroup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
	public _indexDirectory!: Token;
	constructor(parser: MySqlParser, ctx: PartitionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public DIRECTORY(): TerminalNode {
		return this.getToken(MySqlParser.DIRECTORY, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionOptionIndexDirectory) {
	 		listener.enterPartitionOptionIndexDirectory(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionOptionIndexDirectory) {
	 		listener.exitPartitionOptionIndexDirectory(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionIndexDirectory) {
			return visitor.visitPartitionOptionIndexDirectory(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionMaxRowsContext extends PartitionOptionContext {
	public _maxRows!: DecimalLiteralContext;
	constructor(parser: MySqlParser, ctx: PartitionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MAX_ROWS(): TerminalNode {
		return this.getToken(MySqlParser.MAX_ROWS, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionOptionMaxRows) {
	 		listener.enterPartitionOptionMaxRows(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionOptionMaxRows) {
	 		listener.exitPartitionOptionMaxRows(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionMaxRows) {
			return visitor.visitPartitionOptionMaxRows(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionTablespaceContext extends PartitionOptionContext {
	public _tablespace!: UidContext;
	constructor(parser: MySqlParser, ctx: PartitionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionOptionTablespace) {
	 		listener.enterPartitionOptionTablespace(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionOptionTablespace) {
	 		listener.exitPartitionOptionTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionTablespace) {
			return visitor.visitPartitionOptionTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionEngineContext extends PartitionOptionContext {
	constructor(parser: MySqlParser, ctx: PartitionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public engineName(): EngineNameContext {
		return this.getTypedRuleContext(EngineNameContext, 0) as EngineNameContext;
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public STORAGE(): TerminalNode {
		return this.getToken(MySqlParser.STORAGE, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionOptionEngine) {
	 		listener.enterPartitionOptionEngine(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionOptionEngine) {
	 		listener.exitPartitionOptionEngine(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionEngine) {
			return visitor.visitPartitionOptionEngine(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionMinRowsContext extends PartitionOptionContext {
	public _minRows!: DecimalLiteralContext;
	constructor(parser: MySqlParser, ctx: PartitionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MIN_ROWS(): TerminalNode {
		return this.getToken(MySqlParser.MIN_ROWS, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionOptionMinRows) {
	 		listener.enterPartitionOptionMinRows(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionOptionMinRows) {
	 		listener.exitPartitionOptionMinRows(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionMinRows) {
			return visitor.visitPartitionOptionMinRows(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
	public _dataDirectory!: Token;
	constructor(parser: MySqlParser, ctx: PartitionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DATA(): TerminalNode {
		return this.getToken(MySqlParser.DATA, 0);
	}
	public DIRECTORY(): TerminalNode {
		return this.getToken(MySqlParser.DIRECTORY, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionOptionDataDirectory) {
	 		listener.enterPartitionOptionDataDirectory(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionOptionDataDirectory) {
	 		listener.exitPartitionOptionDataDirectory(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionOptionDataDirectory) {
			return visitor.visitPartitionOptionDataDirectory(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterDatabase;
	}
	public copyFrom(ctx: AlterDatabaseContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterUpgradeNameContext extends AlterDatabaseContext {
	public _dbFormat!: Token;
	constructor(parser: MySqlParser, ctx: AlterDatabaseContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public UPGRADE(): TerminalNode {
		return this.getToken(MySqlParser.UPGRADE, 0);
	}
	public DATA(): TerminalNode {
		return this.getToken(MySqlParser.DATA, 0);
	}
	public DIRECTORY(): TerminalNode {
		return this.getToken(MySqlParser.DIRECTORY, 0);
	}
	public NAME(): TerminalNode {
		return this.getToken(MySqlParser.NAME, 0);
	}
	public DATABASE(): TerminalNode {
		return this.getToken(MySqlParser.DATABASE, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMA, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterUpgradeName) {
	 		listener.enterAlterUpgradeName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterUpgradeName) {
	 		listener.exitAlterUpgradeName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterUpgradeName) {
			return visitor.visitAlterUpgradeName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterSimpleDatabaseContext extends AlterDatabaseContext {
	public _dbFormat!: Token;
	constructor(parser: MySqlParser, ctx: AlterDatabaseContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public DATABASE(): TerminalNode {
		return this.getToken(MySqlParser.DATABASE, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMA, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public createDatabaseOption_list(): CreateDatabaseOptionContext[] {
		return this.getTypedRuleContexts(CreateDatabaseOptionContext) as CreateDatabaseOptionContext[];
	}
	public createDatabaseOption(i: number): CreateDatabaseOptionContext {
		return this.getTypedRuleContext(CreateDatabaseOptionContext, i) as CreateDatabaseOptionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterSimpleDatabase) {
	 		listener.enterAlterSimpleDatabase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterSimpleDatabase) {
	 		listener.exitAlterSimpleDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterSimpleDatabase) {
			return visitor.visitAlterSimpleDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterEventContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public EVENT(): TerminalNode {
		return this.getToken(MySqlParser.EVENT, 0);
	}
	public fullId_list(): FullIdContext[] {
		return this.getTypedRuleContexts(FullIdContext) as FullIdContext[];
	}
	public fullId(i: number): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, i) as FullIdContext;
	}
	public ownerStatement(): OwnerStatementContext {
		return this.getTypedRuleContext(OwnerStatementContext, 0) as OwnerStatementContext;
	}
	public ON_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ON);
	}
	public ON(i: number): TerminalNode {
		return this.getToken(MySqlParser.ON, i);
	}
	public SCHEDULE(): TerminalNode {
		return this.getToken(MySqlParser.SCHEDULE, 0);
	}
	public scheduleExpression(): ScheduleExpressionContext {
		return this.getTypedRuleContext(ScheduleExpressionContext, 0) as ScheduleExpressionContext;
	}
	public COMPLETION(): TerminalNode {
		return this.getToken(MySqlParser.COMPLETION, 0);
	}
	public PRESERVE(): TerminalNode {
		return this.getToken(MySqlParser.PRESERVE, 0);
	}
	public RENAME(): TerminalNode {
		return this.getToken(MySqlParser.RENAME, 0);
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public enableType(): EnableTypeContext {
		return this.getTypedRuleContext(EnableTypeContext, 0) as EnableTypeContext;
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public DO(): TerminalNode {
		return this.getToken(MySqlParser.DO, 0);
	}
	public routineBody(): RoutineBodyContext {
		return this.getTypedRuleContext(RoutineBodyContext, 0) as RoutineBodyContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterEvent;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterEvent) {
	 		listener.enterAlterEvent(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterEvent) {
	 		listener.exitAlterEvent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterEvent) {
			return visitor.visitAlterEvent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterFunctionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.FUNCTION, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public routineOption_list(): RoutineOptionContext[] {
		return this.getTypedRuleContexts(RoutineOptionContext) as RoutineOptionContext[];
	}
	public routineOption(i: number): RoutineOptionContext {
		return this.getTypedRuleContext(RoutineOptionContext, i) as RoutineOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterFunction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterFunction) {
	 		listener.enterAlterFunction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterFunction) {
	 		listener.exitAlterFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterFunction) {
			return visitor.visitAlterFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterInstanceContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public INSTANCE(): TerminalNode {
		return this.getToken(MySqlParser.INSTANCE, 0);
	}
	public ROTATE(): TerminalNode {
		return this.getToken(MySqlParser.ROTATE, 0);
	}
	public INNODB(): TerminalNode {
		return this.getToken(MySqlParser.INNODB, 0);
	}
	public MASTER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterInstance;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterInstance) {
	 		listener.enterAlterInstance(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterInstance) {
	 		listener.exitAlterInstance(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterInstance) {
			return visitor.visitAlterInstance(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterLogfileGroupContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public LOGFILE(): TerminalNode {
		return this.getToken(MySqlParser.LOGFILE, 0);
	}
	public GROUP(): TerminalNode {
		return this.getToken(MySqlParser.GROUP, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public UNDOFILE(): TerminalNode {
		return this.getToken(MySqlParser.UNDOFILE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public engineName(): EngineNameContext {
		return this.getTypedRuleContext(EngineNameContext, 0) as EngineNameContext;
	}
	public INITIAL_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	}
	public fileSizeLiteral(): FileSizeLiteralContext {
		return this.getTypedRuleContext(FileSizeLiteralContext, 0) as FileSizeLiteralContext;
	}
	public WAIT(): TerminalNode {
		return this.getToken(MySqlParser.WAIT, 0);
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterLogfileGroup;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterLogfileGroup) {
	 		listener.enterAlterLogfileGroup(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterLogfileGroup) {
	 		listener.exitAlterLogfileGroup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterLogfileGroup) {
			return visitor.visitAlterLogfileGroup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterProcedureContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public PROCEDURE(): TerminalNode {
		return this.getToken(MySqlParser.PROCEDURE, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public routineOption_list(): RoutineOptionContext[] {
		return this.getTypedRuleContexts(RoutineOptionContext) as RoutineOptionContext[];
	}
	public routineOption(i: number): RoutineOptionContext {
		return this.getTypedRuleContext(RoutineOptionContext, i) as RoutineOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterProcedure;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterProcedure) {
	 		listener.enterAlterProcedure(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterProcedure) {
	 		listener.exitAlterProcedure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterProcedure) {
			return visitor.visitAlterProcedure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterServerContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public SERVER(): TerminalNode {
		return this.getToken(MySqlParser.SERVER, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public OPTIONS(): TerminalNode {
		return this.getToken(MySqlParser.OPTIONS, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public serverOption_list(): ServerOptionContext[] {
		return this.getTypedRuleContexts(ServerOptionContext) as ServerOptionContext[];
	}
	public serverOption(i: number): ServerOptionContext {
		return this.getTypedRuleContext(ServerOptionContext, i) as ServerOptionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterServer;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterServer) {
	 		listener.enterAlterServer(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterServer) {
	 		listener.exitAlterServer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterServer) {
			return visitor.visitAlterServer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTableContext extends ParserRuleContext {
	public _intimeAction!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public IGNORE(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, 0);
	}
	public waitNowaitClause(): WaitNowaitClauseContext {
		return this.getTypedRuleContext(WaitNowaitClauseContext, 0) as WaitNowaitClauseContext;
	}
	public alterSpecification_list(): AlterSpecificationContext[] {
		return this.getTypedRuleContexts(AlterSpecificationContext) as AlterSpecificationContext[];
	}
	public alterSpecification(i: number): AlterSpecificationContext {
		return this.getTypedRuleContext(AlterSpecificationContext, i) as AlterSpecificationContext;
	}
	public partitionDefinitions(): PartitionDefinitionsContext {
		return this.getTypedRuleContext(PartitionDefinitionsContext, 0) as PartitionDefinitionsContext;
	}
	public ONLINE(): TerminalNode {
		return this.getToken(MySqlParser.ONLINE, 0);
	}
	public OFFLINE(): TerminalNode {
		return this.getToken(MySqlParser.OFFLINE, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterTable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterTable) {
	 		listener.enterAlterTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterTable) {
	 		listener.exitAlterTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterTable) {
			return visitor.visitAlterTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTablespaceContext extends ParserRuleContext {
	public _objectAction!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public DATAFILE(): TerminalNode {
		return this.getToken(MySqlParser.DATAFILE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public engineName(): EngineNameContext {
		return this.getTypedRuleContext(EngineNameContext, 0) as EngineNameContext;
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public INITIAL_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
	public fileSizeLiteral(): FileSizeLiteralContext {
		return this.getTypedRuleContext(FileSizeLiteralContext, 0) as FileSizeLiteralContext;
	}
	public WAIT(): TerminalNode {
		return this.getToken(MySqlParser.WAIT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterTablespace;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterTablespace) {
	 		listener.enterAlterTablespace(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterTablespace) {
	 		listener.exitAlterTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterTablespace) {
			return visitor.visitAlterTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterViewContext extends ParserRuleContext {
	public _algType!: Token;
	public _secContext!: Token;
	public _checkOpt!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public VIEW(): TerminalNode {
		return this.getToken(MySqlParser.VIEW, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public ALGORITHM(): TerminalNode {
		return this.getToken(MySqlParser.ALGORITHM, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public ownerStatement(): OwnerStatementContext {
		return this.getTypedRuleContext(OwnerStatementContext, 0) as OwnerStatementContext;
	}
	public SQL(): TerminalNode {
		return this.getToken(MySqlParser.SQL, 0);
	}
	public SECURITY(): TerminalNode {
		return this.getToken(MySqlParser.SECURITY, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public CHECK(): TerminalNode {
		return this.getToken(MySqlParser.CHECK, 0);
	}
	public OPTION(): TerminalNode {
		return this.getToken(MySqlParser.OPTION, 0);
	}
	public UNDEFINED(): TerminalNode {
		return this.getToken(MySqlParser.UNDEFINED, 0);
	}
	public MERGE(): TerminalNode {
		return this.getToken(MySqlParser.MERGE, 0);
	}
	public TEMPTABLE(): TerminalNode {
		return this.getToken(MySqlParser.TEMPTABLE, 0);
	}
	public DEFINER(): TerminalNode {
		return this.getToken(MySqlParser.DEFINER, 0);
	}
	public INVOKER(): TerminalNode {
		return this.getToken(MySqlParser.INVOKER, 0);
	}
	public CASCADED(): TerminalNode {
		return this.getToken(MySqlParser.CASCADED, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterView;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterView) {
	 		listener.enterAlterView(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterView) {
	 		listener.exitAlterView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterView) {
			return visitor.visitAlterView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterSpecificationContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterSpecification;
	}
	public copyFrom(ctx: AlterSpecificationContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterByAlterColumnDefaultContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public COLUMN(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN, 0);
	}
	public VISIBLE(): TerminalNode {
		return this.getToken(MySqlParser.VISIBLE, 0);
	}
	public INVISIBLE(): TerminalNode {
		return this.getToken(MySqlParser.INVISIBLE, 0);
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAlterColumnDefault) {
	 		listener.enterAlterByAlterColumnDefault(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAlterColumnDefault) {
	 		listener.exitAlterByAlterColumnDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAlterColumnDefault) {
			return visitor.visitAlterByAlterColumnDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDisableKeysContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DISABLE(): TerminalNode {
		return this.getToken(MySqlParser.DISABLE, 0);
	}
	public KEYS(): TerminalNode {
		return this.getToken(MySqlParser.KEYS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByDisableKeys) {
	 		listener.enterAlterByDisableKeys(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByDisableKeys) {
	 		listener.exitAlterByDisableKeys(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDisableKeys) {
			return visitor.visitAlterByDisableKeys(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDefaultCharsetContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHARACTER(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public COLLATE(): TerminalNode {
		return this.getToken(MySqlParser.COLLATE, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByDefaultCharset) {
	 		listener.enterAlterByDefaultCharset(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByDefaultCharset) {
	 		listener.exitAlterByDefaultCharset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDefaultCharset) {
			return visitor.visitAlterByDefaultCharset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRenameColumnContext extends AlterSpecificationContext {
	public _oldColumn!: UidContext;
	public _newColumn!: UidContext;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RENAME(): TerminalNode {
		return this.getToken(MySqlParser.RENAME, 0);
	}
	public COLUMN(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN, 0);
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByRenameColumn) {
	 		listener.enterAlterByRenameColumn(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByRenameColumn) {
	 		listener.exitAlterByRenameColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRenameColumn) {
			return visitor.visitAlterByRenameColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByConvertCharsetContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CONVERT(): TerminalNode {
		return this.getToken(MySqlParser.CONVERT, 0);
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public CHARSET(): TerminalNode {
		return this.getToken(MySqlParser.CHARSET, 0);
	}
	public CHARACTER(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public COLLATE(): TerminalNode {
		return this.getToken(MySqlParser.COLLATE, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByConvertCharset) {
	 		listener.enterAlterByConvertCharset(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByConvertCharset) {
	 		listener.exitAlterByConvertCharset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByConvertCharset) {
			return visitor.visitAlterByConvertCharset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddForeignKeyContext extends AlterSpecificationContext {
	public _name!: UidContext;
	public _indexName!: UidContext;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public FOREIGN(): TerminalNode {
		return this.getToken(MySqlParser.FOREIGN, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public referenceDefinition(): ReferenceDefinitionContext {
		return this.getTypedRuleContext(ReferenceDefinitionContext, 0) as ReferenceDefinitionContext;
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAddForeignKey) {
	 		listener.enterAlterByAddForeignKey(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAddForeignKey) {
	 		listener.exitAlterByAddForeignKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddForeignKey) {
			return visitor.visitAlterByAddForeignKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRenameIndexContext extends AlterSpecificationContext {
	public _indexFormat!: Token;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RENAME(): TerminalNode {
		return this.getToken(MySqlParser.RENAME, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByRenameIndex) {
	 		listener.enterAlterByRenameIndex(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByRenameIndex) {
	 		listener.exitAlterByRenameIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRenameIndex) {
			return visitor.visitAlterByRenameIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRenameContext extends AlterSpecificationContext {
	public _renameFormat!: Token;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RENAME(): TerminalNode {
		return this.getToken(MySqlParser.RENAME, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByRename) {
	 		listener.enterAlterByRename(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByRename) {
	 		listener.exitAlterByRename(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRename) {
			return visitor.visitAlterByRename(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByImportTablespaceContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IMPORT(): TerminalNode {
		return this.getToken(MySqlParser.IMPORT, 0);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByImportTablespace) {
	 		listener.enterAlterByImportTablespace(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByImportTablespace) {
	 		listener.exitAlterByImportTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByImportTablespace) {
			return visitor.visitAlterByImportTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddDefinitionsContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public createDefinition_list(): CreateDefinitionContext[] {
		return this.getTypedRuleContexts(CreateDefinitionContext) as CreateDefinitionContext[];
	}
	public createDefinition(i: number): CreateDefinitionContext {
		return this.getTypedRuleContext(CreateDefinitionContext, i) as CreateDefinitionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COLUMN(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAddDefinitions) {
	 		listener.enterAlterByAddDefinitions(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAddDefinitions) {
	 		listener.exitAlterByAddDefinitions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddDefinitions) {
			return visitor.visitAlterByAddDefinitions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAlterCheckTableConstraintContext extends AlterSpecificationContext {
	public _name!: UidContext;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public CHECK(): TerminalNode {
		return this.getToken(MySqlParser.CHECK, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public ENFORCED(): TerminalNode {
		return this.getToken(MySqlParser.ENFORCED, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAlterCheckTableConstraint) {
	 		listener.enterAlterByAlterCheckTableConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAlterCheckTableConstraint) {
	 		listener.exitAlterByAlterCheckTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAlterCheckTableConstraint) {
			return visitor.visitAlterByAlterCheckTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public CHECK(): TerminalNode {
		return this.getToken(MySqlParser.CHECK, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByDropConstraintCheck) {
	 		listener.enterAlterByDropConstraintCheck(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByDropConstraintCheck) {
	 		listener.exitAlterByDropConstraintCheck(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropConstraintCheck) {
			return visitor.visitAlterByDropConstraintCheck(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddColumnsContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public columnDefinition_list(): ColumnDefinitionContext[] {
		return this.getTypedRuleContexts(ColumnDefinitionContext) as ColumnDefinitionContext[];
	}
	public columnDefinition(i: number): ColumnDefinitionContext {
		return this.getTypedRuleContext(ColumnDefinitionContext, i) as ColumnDefinitionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COLUMN(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAddColumns) {
	 		listener.enterAlterByAddColumns(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAddColumns) {
	 		listener.exitAlterByAddColumns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddColumns) {
			return visitor.visitAlterByAddColumns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public VISIBLE(): TerminalNode {
		return this.getToken(MySqlParser.VISIBLE, 0);
	}
	public INVISIBLE(): TerminalNode {
		return this.getToken(MySqlParser.INVISIBLE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAlterIndexVisibility) {
	 		listener.enterAlterByAlterIndexVisibility(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAlterIndexVisibility) {
	 		listener.exitAlterByAlterIndexVisibility(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAlterIndexVisibility) {
			return visitor.visitAlterByAlterIndexVisibility(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropForeignKeyContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public FOREIGN(): TerminalNode {
		return this.getToken(MySqlParser.FOREIGN, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByDropForeignKey) {
	 		listener.enterAlterByDropForeignKey(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByDropForeignKey) {
	 		listener.exitAlterByDropForeignKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropForeignKey) {
			return visitor.visitAlterByDropForeignKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
	public _name!: UidContext;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public CHECK(): TerminalNode {
		return this.getToken(MySqlParser.CHECK, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public ENFORCED(): TerminalNode {
		return this.getToken(MySqlParser.ENFORCED, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAddCheckTableConstraint) {
	 		listener.enterAlterByAddCheckTableConstraint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAddCheckTableConstraint) {
	 		listener.exitAlterByAddCheckTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddCheckTableConstraint) {
			return visitor.visitAlterByAddCheckTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterPartitionContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public alterPartitionSpecification(): AlterPartitionSpecificationContext {
		return this.getTypedRuleContext(AlterPartitionSpecificationContext, 0) as AlterPartitionSpecificationContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterPartition) {
	 		listener.enterAlterPartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterPartition) {
	 		listener.exitAlterPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterPartition) {
			return visitor.visitAlterPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddIndexContext extends AlterSpecificationContext {
	public _indexFormat!: Token;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public indexType(): IndexTypeContext {
		return this.getTypedRuleContext(IndexTypeContext, 0) as IndexTypeContext;
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAddIndex) {
	 		listener.enterAlterByAddIndex(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAddIndex) {
	 		listener.exitAlterByAddIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddIndex) {
			return visitor.visitAlterByAddIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropColumnContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public COLUMN(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN, 0);
	}
	public RESTRICT(): TerminalNode {
		return this.getToken(MySqlParser.RESTRICT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByDropColumn) {
	 		listener.enterAlterByDropColumn(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByDropColumn) {
	 		listener.exitAlterByDropColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropColumn) {
			return visitor.visitAlterByDropColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByChangeDefaultContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public defaultValue(): DefaultValueContext {
		return this.getTypedRuleContext(DefaultValueContext, 0) as DefaultValueContext;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public COLUMN(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByChangeDefault) {
	 		listener.enterAlterByChangeDefault(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByChangeDefault) {
	 		listener.exitAlterByChangeDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByChangeDefault) {
			return visitor.visitAlterByChangeDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByForceContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public FORCE(): TerminalNode {
		return this.getToken(MySqlParser.FORCE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByForce) {
	 		listener.enterAlterByForce(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByForce) {
	 		listener.exitAlterByForce(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByForce) {
			return visitor.visitAlterByForce(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
	public _keyType!: Token;
	public _indexFormat!: Token;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public FULLTEXT(): TerminalNode {
		return this.getToken(MySqlParser.FULLTEXT, 0);
	}
	public SPATIAL(): TerminalNode {
		return this.getToken(MySqlParser.SPATIAL, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAddSpecialIndex) {
	 		listener.enterAlterByAddSpecialIndex(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAddSpecialIndex) {
	 		listener.exitAlterByAddSpecialIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddSpecialIndex) {
			return visitor.visitAlterByAddSpecialIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByModifyColumnContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MODIFY(): TerminalNode {
		return this.getToken(MySqlParser.MODIFY, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getTypedRuleContext(ColumnDefinitionContext, 0) as ColumnDefinitionContext;
	}
	public COLUMN(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN, 0);
	}
	public FIRST(): TerminalNode {
		return this.getToken(MySqlParser.FIRST, 0);
	}
	public AFTER(): TerminalNode {
		return this.getToken(MySqlParser.AFTER, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByModifyColumn) {
	 		listener.enterAlterByModifyColumn(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByModifyColumn) {
	 		listener.exitAlterByModifyColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByModifyColumn) {
			return visitor.visitAlterByModifyColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByTableOptionContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public tableOption_list(): TableOptionContext[] {
		return this.getTypedRuleContexts(TableOptionContext) as TableOptionContext[];
	}
	public tableOption(i: number): TableOptionContext {
		return this.getTypedRuleContext(TableOptionContext, i) as TableOptionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByTableOption) {
	 		listener.enterAlterByTableOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByTableOption) {
	 		listener.exitAlterByTableOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByTableOption) {
			return visitor.visitAlterByTableOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public PRIMARY(): TerminalNode {
		return this.getToken(MySqlParser.PRIMARY, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByDropPrimaryKey) {
	 		listener.enterAlterByDropPrimaryKey(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByDropPrimaryKey) {
	 		listener.exitAlterByDropPrimaryKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropPrimaryKey) {
			return visitor.visitAlterByDropPrimaryKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByLockContext extends AlterSpecificationContext {
	public _lockType!: Token;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LOCK(): TerminalNode {
		return this.getToken(MySqlParser.LOCK, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public NONE(): TerminalNode {
		return this.getToken(MySqlParser.NONE, 0);
	}
	public SHARED(): TerminalNode {
		return this.getToken(MySqlParser.SHARED, 0);
	}
	public EXCLUSIVE(): TerminalNode {
		return this.getToken(MySqlParser.EXCLUSIVE, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByLock) {
	 		listener.enterAlterByLock(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByLock) {
	 		listener.exitAlterByLock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByLock) {
			return visitor.visitAlterByLock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DISCARD(): TerminalNode {
		return this.getToken(MySqlParser.DISCARD, 0);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByDiscardTablespace) {
	 		listener.enterAlterByDiscardTablespace(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByDiscardTablespace) {
	 		listener.exitAlterByDiscardTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDiscardTablespace) {
			return visitor.visitAlterByDiscardTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByValidateContext extends AlterSpecificationContext {
	public _validationFormat!: Token;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public VALIDATION(): TerminalNode {
		return this.getToken(MySqlParser.VALIDATION, 0);
	}
	public WITHOUT(): TerminalNode {
		return this.getToken(MySqlParser.WITHOUT, 0);
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByValidate) {
	 		listener.enterAlterByValidate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByValidate) {
	 		listener.exitAlterByValidate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByValidate) {
			return visitor.visitAlterByValidate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
	public _name!: UidContext;
	public _index!: UidContext;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public PRIMARY(): TerminalNode {
		return this.getToken(MySqlParser.PRIMARY, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public indexType(): IndexTypeContext {
		return this.getTypedRuleContext(IndexTypeContext, 0) as IndexTypeContext;
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAddPrimaryKey) {
	 		listener.enterAlterByAddPrimaryKey(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAddPrimaryKey) {
	 		listener.exitAlterByAddPrimaryKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddPrimaryKey) {
			return visitor.visitAlterByAddPrimaryKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByEnableKeysContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ENABLE(): TerminalNode {
		return this.getToken(MySqlParser.ENABLE, 0);
	}
	public KEYS(): TerminalNode {
		return this.getToken(MySqlParser.KEYS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByEnableKeys) {
	 		listener.enterAlterByEnableKeys(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByEnableKeys) {
	 		listener.exitAlterByEnableKeys(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByEnableKeys) {
			return visitor.visitAlterByEnableKeys(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterBySetAlgorithmContext extends AlterSpecificationContext {
	public _algType!: Token;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ALGORITHM(): TerminalNode {
		return this.getToken(MySqlParser.ALGORITHM, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public INSTANT(): TerminalNode {
		return this.getToken(MySqlParser.INSTANT, 0);
	}
	public INPLACE(): TerminalNode {
		return this.getToken(MySqlParser.INPLACE, 0);
	}
	public COPY(): TerminalNode {
		return this.getToken(MySqlParser.COPY, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterBySetAlgorithm) {
	 		listener.enterAlterBySetAlgorithm(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterBySetAlgorithm) {
	 		listener.exitAlterBySetAlgorithm(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterBySetAlgorithm) {
			return visitor.visitAlterBySetAlgorithm(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByChangeColumnContext extends AlterSpecificationContext {
	public _oldColumn!: UidContext;
	public _newColumn!: UidContext;
	public _afterColumn!: UidContext;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHANGE(): TerminalNode {
		return this.getToken(MySqlParser.CHANGE, 0);
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getTypedRuleContext(ColumnDefinitionContext, 0) as ColumnDefinitionContext;
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public COLUMN(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN, 0);
	}
	public FIRST(): TerminalNode {
		return this.getToken(MySqlParser.FIRST, 0);
	}
	public AFTER(): TerminalNode {
		return this.getToken(MySqlParser.AFTER, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByChangeColumn) {
	 		listener.enterAlterByChangeColumn(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByChangeColumn) {
	 		listener.exitAlterByChangeColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByChangeColumn) {
			return visitor.visitAlterByChangeColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
	public _name!: UidContext;
	public _indexFormat!: Token;
	public _indexName!: UidContext;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public UNIQUE(): TerminalNode {
		return this.getToken(MySqlParser.UNIQUE, 0);
	}
	public indexColumnNames(): IndexColumnNamesContext {
		return this.getTypedRuleContext(IndexColumnNamesContext, 0) as IndexColumnNamesContext;
	}
	public CONSTRAINT(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT, 0);
	}
	public indexType(): IndexTypeContext {
		return this.getTypedRuleContext(IndexTypeContext, 0) as IndexTypeContext;
	}
	public indexOption_list(): IndexOptionContext[] {
		return this.getTypedRuleContexts(IndexOptionContext) as IndexOptionContext[];
	}
	public indexOption(i: number): IndexOptionContext {
		return this.getTypedRuleContext(IndexOptionContext, i) as IndexOptionContext;
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAddUniqueKey) {
	 		listener.enterAlterByAddUniqueKey(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAddUniqueKey) {
	 		listener.exitAlterByAddUniqueKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddUniqueKey) {
			return visitor.visitAlterByAddUniqueKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropIndexContext extends AlterSpecificationContext {
	public _indexFormat!: Token;
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByDropIndex) {
	 		listener.enterAlterByDropIndex(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByDropIndex) {
	 		listener.exitAlterByDropIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropIndex) {
			return visitor.visitAlterByDropIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddColumnContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getTypedRuleContext(ColumnDefinitionContext, 0) as ColumnDefinitionContext;
	}
	public COLUMN(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN, 0);
	}
	public FIRST(): TerminalNode {
		return this.getToken(MySqlParser.FIRST, 0);
	}
	public AFTER(): TerminalNode {
		return this.getToken(MySqlParser.AFTER, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAddColumn) {
	 		listener.enterAlterByAddColumn(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAddColumn) {
	 		listener.exitAlterByAddColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddColumn) {
			return visitor.visitAlterByAddColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByOrderContext extends AlterSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ORDER(): TerminalNode {
		return this.getToken(MySqlParser.ORDER, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByOrder) {
	 		listener.enterAlterByOrder(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByOrder) {
	 		listener.exitAlterByOrder(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByOrder) {
			return visitor.visitAlterByOrder(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterPartitionSpecificationContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterPartitionSpecification;
	}
	public copyFrom(ctx: AlterPartitionSpecificationContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterByImportPartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IMPORT(): TerminalNode {
		return this.getToken(MySqlParser.IMPORT, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByImportPartition) {
	 		listener.enterAlterByImportPartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByImportPartition) {
	 		listener.exitAlterByImportPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByImportPartition) {
			return visitor.visitAlterByImportPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDropPartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByDropPartition) {
	 		listener.enterAlterByDropPartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByDropPartition) {
	 		listener.exitAlterByDropPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDropPartition) {
			return visitor.visitAlterByDropPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByDiscardPartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DISCARD(): TerminalNode {
		return this.getToken(MySqlParser.DISCARD, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByDiscardPartition) {
	 		listener.enterAlterByDiscardPartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByDiscardPartition) {
	 		listener.exitAlterByDiscardPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByDiscardPartition) {
			return visitor.visitAlterByDiscardPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAddPartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ADD(): TerminalNode {
		return this.getToken(MySqlParser.ADD, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public partitionDefinition_list(): PartitionDefinitionContext[] {
		return this.getTypedRuleContexts(PartitionDefinitionContext) as PartitionDefinitionContext[];
	}
	public partitionDefinition(i: number): PartitionDefinitionContext {
		return this.getTypedRuleContext(PartitionDefinitionContext, i) as PartitionDefinitionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAddPartition) {
	 		listener.enterAlterByAddPartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAddPartition) {
	 		listener.exitAlterByAddPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAddPartition) {
			return visitor.visitAlterByAddPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRemovePartitioningContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REMOVE(): TerminalNode {
		return this.getToken(MySqlParser.REMOVE, 0);
	}
	public PARTITIONING(): TerminalNode {
		return this.getToken(MySqlParser.PARTITIONING, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByRemovePartitioning) {
	 		listener.enterAlterByRemovePartitioning(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByRemovePartitioning) {
	 		listener.exitAlterByRemovePartitioning(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRemovePartitioning) {
			return visitor.visitAlterByRemovePartitioning(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByOptimizePartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public OPTIMIZE(): TerminalNode {
		return this.getToken(MySqlParser.OPTIMIZE, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByOptimizePartition) {
	 		listener.enterAlterByOptimizePartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByOptimizePartition) {
	 		listener.exitAlterByOptimizePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByOptimizePartition) {
			return visitor.visitAlterByOptimizePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByCheckPartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHECK(): TerminalNode {
		return this.getToken(MySqlParser.CHECK, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByCheckPartition) {
	 		listener.enterAlterByCheckPartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByCheckPartition) {
	 		listener.exitAlterByCheckPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByCheckPartition) {
			return visitor.visitAlterByCheckPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByCoalescePartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public COALESCE(): TerminalNode {
		return this.getToken(MySqlParser.COALESCE, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByCoalescePartition) {
	 		listener.enterAlterByCoalescePartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByCoalescePartition) {
	 		listener.exitAlterByCoalescePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByCoalescePartition) {
			return visitor.visitAlterByCoalescePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByReorganizePartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REORGANIZE(): TerminalNode {
		return this.getToken(MySqlParser.REORGANIZE, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public partitionDefinition_list(): PartitionDefinitionContext[] {
		return this.getTypedRuleContexts(PartitionDefinitionContext) as PartitionDefinitionContext[];
	}
	public partitionDefinition(i: number): PartitionDefinitionContext {
		return this.getTypedRuleContext(PartitionDefinitionContext, i) as PartitionDefinitionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByReorganizePartition) {
	 		listener.enterAlterByReorganizePartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByReorganizePartition) {
	 		listener.exitAlterByReorganizePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByReorganizePartition) {
			return visitor.visitAlterByReorganizePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByAnalyzePartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ANALYZE(): TerminalNode {
		return this.getToken(MySqlParser.ANALYZE, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByAnalyzePartition) {
	 		listener.enterAlterByAnalyzePartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByAnalyzePartition) {
	 		listener.exitAlterByAnalyzePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByAnalyzePartition) {
			return visitor.visitAlterByAnalyzePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRebuildPartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REBUILD(): TerminalNode {
		return this.getToken(MySqlParser.REBUILD, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByRebuildPartition) {
	 		listener.enterAlterByRebuildPartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByRebuildPartition) {
	 		listener.exitAlterByRebuildPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRebuildPartition) {
			return visitor.visitAlterByRebuildPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByUpgradePartitioningContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public UPGRADE(): TerminalNode {
		return this.getToken(MySqlParser.UPGRADE, 0);
	}
	public PARTITIONING(): TerminalNode {
		return this.getToken(MySqlParser.PARTITIONING, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByUpgradePartitioning) {
	 		listener.enterAlterByUpgradePartitioning(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByUpgradePartitioning) {
	 		listener.exitAlterByUpgradePartitioning(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByUpgradePartitioning) {
			return visitor.visitAlterByUpgradePartitioning(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByTruncatePartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TRUNCATE(): TerminalNode {
		return this.getToken(MySqlParser.TRUNCATE, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByTruncatePartition) {
	 		listener.enterAlterByTruncatePartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByTruncatePartition) {
	 		listener.exitAlterByTruncatePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByTruncatePartition) {
			return visitor.visitAlterByTruncatePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByRepairPartitionContext extends AlterPartitionSpecificationContext {
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REPAIR(): TerminalNode {
		return this.getToken(MySqlParser.REPAIR, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByRepairPartition) {
	 		listener.enterAlterByRepairPartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByRepairPartition) {
	 		listener.exitAlterByRepairPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByRepairPartition) {
			return visitor.visitAlterByRepairPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterByExchangePartitionContext extends AlterPartitionSpecificationContext {
	public _validationFormat!: Token;
	constructor(parser: MySqlParser, ctx: AlterPartitionSpecificationContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public EXCHANGE(): TerminalNode {
		return this.getToken(MySqlParser.EXCHANGE, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public WITH_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.WITH);
	}
	public WITH(i: number): TerminalNode {
		return this.getToken(MySqlParser.WITH, i);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public VALIDATION(): TerminalNode {
		return this.getToken(MySqlParser.VALIDATION, 0);
	}
	public WITHOUT(): TerminalNode {
		return this.getToken(MySqlParser.WITHOUT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterByExchangePartition) {
	 		listener.enterAlterByExchangePartition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterByExchangePartition) {
	 		listener.exitAlterByExchangePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterByExchangePartition) {
			return visitor.visitAlterByExchangePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropDatabaseContext extends ParserRuleContext {
	public _dbFormat!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public DATABASE(): TerminalNode {
		return this.getToken(MySqlParser.DATABASE, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMA, 0);
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropDatabase;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropDatabase) {
	 		listener.enterDropDatabase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropDatabase) {
	 		listener.exitDropDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropDatabase) {
			return visitor.visitDropDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropEventContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public EVENT(): TerminalNode {
		return this.getToken(MySqlParser.EVENT, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropEvent;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropEvent) {
	 		listener.enterDropEvent(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropEvent) {
	 		listener.exitDropEvent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropEvent) {
			return visitor.visitDropEvent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropIndexContext extends ParserRuleContext {
	public _intimeAction!: Token;
	public _algType!: Token;
	public _lockType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public ALGORITHM_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ALGORITHM);
	}
	public ALGORITHM(i: number): TerminalNode {
		return this.getToken(MySqlParser.ALGORITHM, i);
	}
	public LOCK_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LOCK);
	}
	public LOCK(i: number): TerminalNode {
		return this.getToken(MySqlParser.LOCK, i);
	}
	public ONLINE(): TerminalNode {
		return this.getToken(MySqlParser.ONLINE, 0);
	}
	public OFFLINE(): TerminalNode {
		return this.getToken(MySqlParser.OFFLINE, 0);
	}
	public DEFAULT_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.DEFAULT);
	}
	public DEFAULT(i: number): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, i);
	}
	public INPLACE_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.INPLACE);
	}
	public INPLACE(i: number): TerminalNode {
		return this.getToken(MySqlParser.INPLACE, i);
	}
	public COPY_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COPY);
	}
	public COPY(i: number): TerminalNode {
		return this.getToken(MySqlParser.COPY, i);
	}
	public NONE_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.NONE);
	}
	public NONE(i: number): TerminalNode {
		return this.getToken(MySqlParser.NONE, i);
	}
	public SHARED_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.SHARED);
	}
	public SHARED(i: number): TerminalNode {
		return this.getToken(MySqlParser.SHARED, i);
	}
	public EXCLUSIVE_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EXCLUSIVE);
	}
	public EXCLUSIVE(i: number): TerminalNode {
		return this.getToken(MySqlParser.EXCLUSIVE, i);
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropIndex;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropIndex) {
	 		listener.enterDropIndex(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropIndex) {
	 		listener.exitDropIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropIndex) {
			return visitor.visitDropIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropLogfileGroupContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public LOGFILE(): TerminalNode {
		return this.getToken(MySqlParser.LOGFILE, 0);
	}
	public GROUP(): TerminalNode {
		return this.getToken(MySqlParser.GROUP, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public engineName(): EngineNameContext {
		return this.getTypedRuleContext(EngineNameContext, 0) as EngineNameContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropLogfileGroup;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropLogfileGroup) {
	 		listener.enterDropLogfileGroup(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropLogfileGroup) {
	 		listener.exitDropLogfileGroup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropLogfileGroup) {
			return visitor.visitDropLogfileGroup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropProcedureContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public PROCEDURE(): TerminalNode {
		return this.getToken(MySqlParser.PROCEDURE, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropProcedure;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropProcedure) {
	 		listener.enterDropProcedure(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropProcedure) {
	 		listener.exitDropProcedure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropProcedure) {
			return visitor.visitDropProcedure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropFunctionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.FUNCTION, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropFunction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropFunction) {
	 		listener.enterDropFunction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropFunction) {
	 		listener.exitDropFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropFunction) {
			return visitor.visitDropFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropServerContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public SERVER(): TerminalNode {
		return this.getToken(MySqlParser.SERVER, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropServer;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropServer) {
	 		listener.enterDropServer(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropServer) {
	 		listener.exitDropServer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropServer) {
			return visitor.visitDropServer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTableContext extends ParserRuleContext {
	public _dropType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tables(): TablesContext {
		return this.getTypedRuleContext(TablesContext, 0) as TablesContext;
	}
	public TEMPORARY(): TerminalNode {
		return this.getToken(MySqlParser.TEMPORARY, 0);
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public RESTRICT(): TerminalNode {
		return this.getToken(MySqlParser.RESTRICT, 0);
	}
	public CASCADE(): TerminalNode {
		return this.getToken(MySqlParser.CASCADE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropTable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropTable) {
	 		listener.enterDropTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropTable) {
	 		listener.exitDropTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropTable) {
			return visitor.visitDropTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTablespaceContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public engineName(): EngineNameContext {
		return this.getTypedRuleContext(EngineNameContext, 0) as EngineNameContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropTablespace;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropTablespace) {
	 		listener.enterDropTablespace(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropTablespace) {
	 		listener.exitDropTablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropTablespace) {
			return visitor.visitDropTablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTriggerContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public TRIGGER(): TerminalNode {
		return this.getToken(MySqlParser.TRIGGER, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropTrigger;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropTrigger) {
	 		listener.enterDropTrigger(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropTrigger) {
	 		listener.exitDropTrigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropTrigger) {
			return visitor.visitDropTrigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropViewContext extends ParserRuleContext {
	public _dropType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public VIEW(): TerminalNode {
		return this.getToken(MySqlParser.VIEW, 0);
	}
	public fullId_list(): FullIdContext[] {
		return this.getTypedRuleContexts(FullIdContext) as FullIdContext[];
	}
	public fullId(i: number): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, i) as FullIdContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public RESTRICT(): TerminalNode {
		return this.getToken(MySqlParser.RESTRICT, 0);
	}
	public CASCADE(): TerminalNode {
		return this.getToken(MySqlParser.CASCADE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropView;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropView) {
	 		listener.enterDropView(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropView) {
	 		listener.exitDropView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropView) {
			return visitor.visitDropView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropRoleContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public ROLE(): TerminalNode {
		return this.getToken(MySqlParser.ROLE, 0);
	}
	public roleName_list(): RoleNameContext[] {
		return this.getTypedRuleContexts(RoleNameContext) as RoleNameContext[];
	}
	public roleName(i: number): RoleNameContext {
		return this.getTypedRuleContext(RoleNameContext, i) as RoleNameContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropRole;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropRole) {
	 		listener.enterDropRole(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropRole) {
	 		listener.exitDropRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropRole) {
			return visitor.visitDropRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetRoleContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public ROLE(): TerminalNode {
		return this.getToken(MySqlParser.ROLE, 0);
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public NONE(): TerminalNode {
		return this.getToken(MySqlParser.NONE, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public roleName_list(): RoleNameContext[] {
		return this.getTypedRuleContexts(RoleNameContext) as RoleNameContext[];
	}
	public roleName(i: number): RoleNameContext {
		return this.getTypedRuleContext(RoleNameContext, i) as RoleNameContext;
	}
	public userName_list(): UserNameContext[] {
		return this.getTypedRuleContexts(UserNameContext) as UserNameContext[];
	}
	public userName(i: number): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, i) as UserNameContext;
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public roleOption(): RoleOptionContext {
		return this.getTypedRuleContext(RoleOptionContext, 0) as RoleOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_setRole;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetRole) {
	 		listener.enterSetRole(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetRole) {
	 		listener.exitSetRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetRole) {
			return visitor.visitSetRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameTableContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RENAME(): TerminalNode {
		return this.getToken(MySqlParser.RENAME, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public renameTableClause_list(): RenameTableClauseContext[] {
		return this.getTypedRuleContexts(RenameTableClauseContext) as RenameTableClauseContext[];
	}
	public renameTableClause(i: number): RenameTableClauseContext {
		return this.getTypedRuleContext(RenameTableClauseContext, i) as RenameTableClauseContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_renameTable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRenameTable) {
	 		listener.enterRenameTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRenameTable) {
	 		listener.exitRenameTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRenameTable) {
			return visitor.visitRenameTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameTableClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName_list(): TableNameContext[] {
		return this.getTypedRuleContexts(TableNameContext) as TableNameContext[];
	}
	public tableName(i: number): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, i) as TableNameContext;
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_renameTableClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRenameTableClause) {
	 		listener.enterRenameTableClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRenameTableClause) {
	 		listener.exitRenameTableClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRenameTableClause) {
			return visitor.visitRenameTableClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TruncateTableContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRUNCATE(): TerminalNode {
		return this.getToken(MySqlParser.TRUNCATE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_truncateTable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTruncateTable) {
	 		listener.enterTruncateTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTruncateTable) {
	 		listener.exitTruncateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTruncateTable) {
			return visitor.visitTruncateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CALL(): TerminalNode {
		return this.getToken(MySqlParser.CALL, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public constants(): ConstantsContext {
		return this.getTypedRuleContext(ConstantsContext, 0) as ConstantsContext;
	}
	public expressions(): ExpressionsContext {
		return this.getTypedRuleContext(ExpressionsContext, 0) as ExpressionsContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_callStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCallStatement) {
	 		listener.enterCallStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCallStatement) {
	 		listener.exitCallStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCallStatement) {
			return visitor.visitCallStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeleteStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public singleDeleteStatement(): SingleDeleteStatementContext {
		return this.getTypedRuleContext(SingleDeleteStatementContext, 0) as SingleDeleteStatementContext;
	}
	public multipleDeleteStatement(): MultipleDeleteStatementContext {
		return this.getTypedRuleContext(MultipleDeleteStatementContext, 0) as MultipleDeleteStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_deleteStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDeleteStatement) {
	 		listener.enterDeleteStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDeleteStatement) {
	 		listener.exitDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeleteStatement) {
			return visitor.visitDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DoStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DO(): TerminalNode {
		return this.getToken(MySqlParser.DO, 0);
	}
	public expressions(): ExpressionsContext {
		return this.getTypedRuleContext(ExpressionsContext, 0) as ExpressionsContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_doStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDoStatement) {
	 		listener.enterDoStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDoStatement) {
	 		listener.exitDoStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDoStatement) {
			return visitor.visitDoStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public handlerOpenStatement(): HandlerOpenStatementContext {
		return this.getTypedRuleContext(HandlerOpenStatementContext, 0) as HandlerOpenStatementContext;
	}
	public handlerReadIndexStatement(): HandlerReadIndexStatementContext {
		return this.getTypedRuleContext(HandlerReadIndexStatementContext, 0) as HandlerReadIndexStatementContext;
	}
	public handlerReadStatement(): HandlerReadStatementContext {
		return this.getTypedRuleContext(HandlerReadStatementContext, 0) as HandlerReadStatementContext;
	}
	public handlerCloseStatement(): HandlerCloseStatementContext {
		return this.getTypedRuleContext(HandlerCloseStatementContext, 0) as HandlerCloseStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_handlerStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerStatement) {
	 		listener.enterHandlerStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerStatement) {
	 		listener.exitHandlerStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerStatement) {
			return visitor.visitHandlerStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InsertStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public _partitions!: UidListContext;
	public _columns!: FullColumnNameListContext;
	public _setFirst!: UpdatedElementContext;
	public _updatedElement!: UpdatedElementContext;
	public _setElements: UpdatedElementContext[] = [];
	public _duplicatedFirst!: UpdatedElementContext;
	public _duplicatedElements: UpdatedElementContext[] = [];
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INSERT(): TerminalNode {
		return this.getToken(MySqlParser.INSERT, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public insertStatementValue(): InsertStatementValueContext {
		return this.getTypedRuleContext(InsertStatementValueContext, 0) as InsertStatementValueContext;
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public IGNORE(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, 0);
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public updatedElement_list(): UpdatedElementContext[] {
		return this.getTypedRuleContexts(UpdatedElementContext) as UpdatedElementContext[];
	}
	public updatedElement(i: number): UpdatedElementContext {
		return this.getTypedRuleContext(UpdatedElementContext, i) as UpdatedElementContext;
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public DUPLICATE(): TerminalNode {
		return this.getToken(MySqlParser.DUPLICATE, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public UPDATE(): TerminalNode {
		return this.getToken(MySqlParser.UPDATE, 0);
	}
	public LOW_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	}
	public DELAYED(): TerminalNode {
		return this.getToken(MySqlParser.DELAYED, 0);
	}
	public HIGH_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.HIGH_PRIORITY, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public fullColumnNameList(): FullColumnNameListContext {
		return this.getTypedRuleContext(FullColumnNameListContext, 0) as FullColumnNameListContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_insertStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterInsertStatement) {
	 		listener.enterInsertStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitInsertStatement) {
	 		listener.exitInsertStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInsertStatement) {
			return visitor.visitInsertStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadDataStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public _filename!: Token;
	public _violation!: Token;
	public _charset!: CharsetNameContext;
	public _fieldsFormat!: Token;
	public _linesFormat!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOAD(): TerminalNode {
		return this.getToken(MySqlParser.LOAD, 0);
	}
	public DATA(): TerminalNode {
		return this.getToken(MySqlParser.DATA, 0);
	}
	public INFILE(): TerminalNode {
		return this.getToken(MySqlParser.INFILE, 0);
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public CHARACTER(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER, 0);
	}
	public SET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.SET);
	}
	public SET(i: number): TerminalNode {
		return this.getToken(MySqlParser.SET, i);
	}
	public LINES_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LINES);
	}
	public LINES(i: number): TerminalNode {
		return this.getToken(MySqlParser.LINES, i);
	}
	public IGNORE_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.IGNORE);
	}
	public IGNORE(i: number): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, i);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public assignmentField_list(): AssignmentFieldContext[] {
		return this.getTypedRuleContexts(AssignmentFieldContext) as AssignmentFieldContext[];
	}
	public assignmentField(i: number): AssignmentFieldContext {
		return this.getTypedRuleContext(AssignmentFieldContext, i) as AssignmentFieldContext;
	}
	public updatedElement_list(): UpdatedElementContext[] {
		return this.getTypedRuleContexts(UpdatedElementContext) as UpdatedElementContext[];
	}
	public updatedElement(i: number): UpdatedElementContext {
		return this.getTypedRuleContext(UpdatedElementContext, i) as UpdatedElementContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public LOW_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	}
	public CONCURRENT(): TerminalNode {
		return this.getToken(MySqlParser.CONCURRENT, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(MySqlParser.REPLACE, 0);
	}
	public FIELDS(): TerminalNode {
		return this.getToken(MySqlParser.FIELDS, 0);
	}
	public COLUMNS(): TerminalNode {
		return this.getToken(MySqlParser.COLUMNS, 0);
	}
	public ROWS(): TerminalNode {
		return this.getToken(MySqlParser.ROWS, 0);
	}
	public selectFieldsInto_list(): SelectFieldsIntoContext[] {
		return this.getTypedRuleContexts(SelectFieldsIntoContext) as SelectFieldsIntoContext[];
	}
	public selectFieldsInto(i: number): SelectFieldsIntoContext {
		return this.getTypedRuleContext(SelectFieldsIntoContext, i) as SelectFieldsIntoContext;
	}
	public selectLinesInto_list(): SelectLinesIntoContext[] {
		return this.getTypedRuleContexts(SelectLinesIntoContext) as SelectLinesIntoContext[];
	}
	public selectLinesInto(i: number): SelectLinesIntoContext {
		return this.getTypedRuleContext(SelectLinesIntoContext, i) as SelectLinesIntoContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_loadDataStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLoadDataStatement) {
	 		listener.enterLoadDataStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLoadDataStatement) {
	 		listener.exitLoadDataStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLoadDataStatement) {
			return visitor.visitLoadDataStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadXmlStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public _filename!: Token;
	public _violation!: Token;
	public _charset!: CharsetNameContext;
	public _tag!: Token;
	public _linesFormat!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOAD(): TerminalNode {
		return this.getToken(MySqlParser.LOAD, 0);
	}
	public XML(): TerminalNode {
		return this.getToken(MySqlParser.XML, 0);
	}
	public INFILE(): TerminalNode {
		return this.getToken(MySqlParser.INFILE, 0);
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public STRING_LITERAL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.STRING_LITERAL);
	}
	public STRING_LITERAL(i: number): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, i);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
	public CHARACTER(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER, 0);
	}
	public SET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.SET);
	}
	public SET(i: number): TerminalNode {
		return this.getToken(MySqlParser.SET, i);
	}
	public ROWS_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ROWS);
	}
	public ROWS(i: number): TerminalNode {
		return this.getToken(MySqlParser.ROWS, i);
	}
	public IDENTIFIED(): TerminalNode {
		return this.getToken(MySqlParser.IDENTIFIED, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public LESS_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	}
	public GREATER_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	}
	public IGNORE_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.IGNORE);
	}
	public IGNORE(i: number): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, i);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public assignmentField_list(): AssignmentFieldContext[] {
		return this.getTypedRuleContexts(AssignmentFieldContext) as AssignmentFieldContext[];
	}
	public assignmentField(i: number): AssignmentFieldContext {
		return this.getTypedRuleContext(AssignmentFieldContext, i) as AssignmentFieldContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public updatedElement_list(): UpdatedElementContext[] {
		return this.getTypedRuleContexts(UpdatedElementContext) as UpdatedElementContext[];
	}
	public updatedElement(i: number): UpdatedElementContext {
		return this.getTypedRuleContext(UpdatedElementContext, i) as UpdatedElementContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public LOW_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	}
	public CONCURRENT(): TerminalNode {
		return this.getToken(MySqlParser.CONCURRENT, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(MySqlParser.REPLACE, 0);
	}
	public LINES(): TerminalNode {
		return this.getToken(MySqlParser.LINES, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_loadXmlStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLoadXmlStatement) {
	 		listener.enterLoadXmlStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLoadXmlStatement) {
	 		listener.exitLoadXmlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLoadXmlStatement) {
			return visitor.visitLoadXmlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplaceStatementContext extends ParserRuleContext {
	public _priority!: Token;
	public _partitions!: UidListContext;
	public _columns!: UidListContext;
	public _setFirst!: UpdatedElementContext;
	public _updatedElement!: UpdatedElementContext;
	public _setElements: UpdatedElementContext[] = [];
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPLACE(): TerminalNode {
		return this.getToken(MySqlParser.REPLACE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public insertStatementValue(): InsertStatementValueContext {
		return this.getTypedRuleContext(InsertStatementValueContext, 0) as InsertStatementValueContext;
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public updatedElement_list(): UpdatedElementContext[] {
		return this.getTypedRuleContexts(UpdatedElementContext) as UpdatedElementContext[];
	}
	public updatedElement(i: number): UpdatedElementContext {
		return this.getTypedRuleContext(UpdatedElementContext, i) as UpdatedElementContext;
	}
	public uidList_list(): UidListContext[] {
		return this.getTypedRuleContexts(UidListContext) as UidListContext[];
	}
	public uidList(i: number): UidListContext {
		return this.getTypedRuleContext(UidListContext, i) as UidListContext;
	}
	public LOW_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	}
	public DELAYED(): TerminalNode {
		return this.getToken(MySqlParser.DELAYED, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_replaceStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterReplaceStatement) {
	 		listener.enterReplaceStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitReplaceStatement) {
	 		listener.exitReplaceStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReplaceStatement) {
			return visitor.visitReplaceStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_selectStatement;
	}
	public copyFrom(ctx: SelectStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class UnionSelectContext extends SelectStatementContext {
	public _unionType!: Token;
	constructor(parser: MySqlParser, ctx: SelectStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		return this.getTypedRuleContext(QuerySpecificationNointoContext, 0) as QuerySpecificationNointoContext;
	}
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getTypedRuleContext(QueryExpressionNointoContext, 0) as QueryExpressionNointoContext;
	}
	public unionStatement_list(): UnionStatementContext[] {
		return this.getTypedRuleContexts(UnionStatementContext) as UnionStatementContext[];
	}
	public unionStatement(i: number): UnionStatementContext {
		return this.getTypedRuleContext(UnionStatementContext, i) as UnionStatementContext;
	}
	public UNION(): TerminalNode {
		return this.getToken(MySqlParser.UNION, 0);
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
	public lockClause(): LockClauseContext {
		return this.getTypedRuleContext(LockClauseContext, 0) as LockClauseContext;
	}
	public querySpecification(): QuerySpecificationContext {
		return this.getTypedRuleContext(QuerySpecificationContext, 0) as QuerySpecificationContext;
	}
	public queryExpression(): QueryExpressionContext {
		return this.getTypedRuleContext(QueryExpressionContext, 0) as QueryExpressionContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public DISTINCT(): TerminalNode {
		return this.getToken(MySqlParser.DISTINCT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUnionSelect) {
	 		listener.enterUnionSelect(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUnionSelect) {
	 		listener.exitUnionSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnionSelect) {
			return visitor.visitUnionSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UnionParenthesisSelectContext extends SelectStatementContext {
	public _unionType!: Token;
	constructor(parser: MySqlParser, ctx: SelectStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getTypedRuleContext(QueryExpressionNointoContext, 0) as QueryExpressionNointoContext;
	}
	public unionParenthesis_list(): UnionParenthesisContext[] {
		return this.getTypedRuleContexts(UnionParenthesisContext) as UnionParenthesisContext[];
	}
	public unionParenthesis(i: number): UnionParenthesisContext {
		return this.getTypedRuleContext(UnionParenthesisContext, i) as UnionParenthesisContext;
	}
	public UNION(): TerminalNode {
		return this.getToken(MySqlParser.UNION, 0);
	}
	public queryExpression(): QueryExpressionContext {
		return this.getTypedRuleContext(QueryExpressionContext, 0) as QueryExpressionContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
	public lockClause(): LockClauseContext {
		return this.getTypedRuleContext(LockClauseContext, 0) as LockClauseContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public DISTINCT(): TerminalNode {
		return this.getToken(MySqlParser.DISTINCT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUnionParenthesisSelect) {
	 		listener.enterUnionParenthesisSelect(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUnionParenthesisSelect) {
	 		listener.exitUnionParenthesisSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnionParenthesisSelect) {
			return visitor.visitUnionParenthesisSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleSelectContext extends SelectStatementContext {
	constructor(parser: MySqlParser, ctx: SelectStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public querySpecification(): QuerySpecificationContext {
		return this.getTypedRuleContext(QuerySpecificationContext, 0) as QuerySpecificationContext;
	}
	public lockClause(): LockClauseContext {
		return this.getTypedRuleContext(LockClauseContext, 0) as LockClauseContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSimpleSelect) {
	 		listener.enterSimpleSelect(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSimpleSelect) {
	 		listener.exitSimpleSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleSelect) {
			return visitor.visitSimpleSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ParenthesisSelectContext extends SelectStatementContext {
	constructor(parser: MySqlParser, ctx: SelectStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public queryExpression(): QueryExpressionContext {
		return this.getTypedRuleContext(QueryExpressionContext, 0) as QueryExpressionContext;
	}
	public lockClause(): LockClauseContext {
		return this.getTypedRuleContext(LockClauseContext, 0) as LockClauseContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterParenthesisSelect) {
	 		listener.enterParenthesisSelect(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitParenthesisSelect) {
	 		listener.exitParenthesisSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitParenthesisSelect) {
			return visitor.visitParenthesisSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class WithLateralStatementContext extends SelectStatementContext {
	constructor(parser: MySqlParser, ctx: SelectStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		return this.getTypedRuleContext(QuerySpecificationNointoContext, 0) as QuerySpecificationNointoContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public lateralStatement_list(): LateralStatementContext[] {
		return this.getTypedRuleContexts(LateralStatementContext) as LateralStatementContext[];
	}
	public lateralStatement(i: number): LateralStatementContext {
		return this.getTypedRuleContext(LateralStatementContext, i) as LateralStatementContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWithLateralStatement) {
	 		listener.enterWithLateralStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWithLateralStatement) {
	 		listener.exitWithLateralStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWithLateralStatement) {
			return visitor.visitWithLateralStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdateStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public singleUpdateStatement(): SingleUpdateStatementContext {
		return this.getTypedRuleContext(SingleUpdateStatementContext, 0) as SingleUpdateStatementContext;
	}
	public multipleUpdateStatement(): MultipleUpdateStatementContext {
		return this.getTypedRuleContext(MultipleUpdateStatementContext, 0) as MultipleUpdateStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_updateStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUpdateStatement) {
	 		listener.enterUpdateStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUpdateStatement) {
	 		listener.exitUpdateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUpdateStatement) {
			return visitor.visitUpdateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValuesStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public VALUES(): TerminalNode {
		return this.getToken(MySqlParser.VALUES, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public expressionsWithDefaults_list(): ExpressionsWithDefaultsContext[] {
		return this.getTypedRuleContexts(ExpressionsWithDefaultsContext) as ExpressionsWithDefaultsContext[];
	}
	public expressionsWithDefaults(i: number): ExpressionsWithDefaultsContext {
		return this.getTypedRuleContext(ExpressionsWithDefaultsContext, i) as ExpressionsWithDefaultsContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_valuesStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterValuesStatement) {
	 		listener.enterValuesStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitValuesStatement) {
	 		listener.exitValuesStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitValuesStatement) {
			return visitor.visitValuesStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InsertStatementValueContext extends ParserRuleContext {
	public _insertFormat!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public VALUES(): TerminalNode {
		return this.getToken(MySqlParser.VALUES, 0);
	}
	public VALUE(): TerminalNode {
		return this.getToken(MySqlParser.VALUE, 0);
	}
	public expressionsWithDefaults_list(): ExpressionsWithDefaultsContext[] {
		return this.getTypedRuleContexts(ExpressionsWithDefaultsContext) as ExpressionsWithDefaultsContext[];
	}
	public expressionsWithDefaults(i: number): ExpressionsWithDefaultsContext {
		return this.getTypedRuleContext(ExpressionsWithDefaultsContext, i) as ExpressionsWithDefaultsContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_insertStatementValue;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterInsertStatementValue) {
	 		listener.enterInsertStatementValue(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitInsertStatementValue) {
	 		listener.exitInsertStatementValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInsertStatementValue) {
			return visitor.visitInsertStatementValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdatedElementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullColumnName(): FullColumnNameContext {
		return this.getTypedRuleContext(FullColumnNameContext, 0) as FullColumnNameContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_updatedElement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUpdatedElement) {
	 		listener.enterUpdatedElement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUpdatedElement) {
	 		listener.exitUpdatedElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUpdatedElement) {
			return visitor.visitUpdatedElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AssignmentFieldContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public LOCAL_ID(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL_ID, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_assignmentField;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAssignmentField) {
	 		listener.enterAssignmentField(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAssignmentField) {
	 		listener.exitAssignmentField(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAssignmentField) {
			return visitor.visitAssignmentField(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public UPDATE(): TerminalNode {
		return this.getToken(MySqlParser.UPDATE, 0);
	}
	public LOCK(): TerminalNode {
		return this.getToken(MySqlParser.LOCK, 0);
	}
	public IN(): TerminalNode {
		return this.getToken(MySqlParser.IN, 0);
	}
	public SHARE(): TerminalNode {
		return this.getToken(MySqlParser.SHARE, 0);
	}
	public MODE(): TerminalNode {
		return this.getToken(MySqlParser.MODE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_lockClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLockClause) {
	 		listener.enterLockClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLockClause) {
	 		listener.exitLockClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLockClause) {
			return visitor.visitLockClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleDeleteStatementContext extends ParserRuleContext {
	public _priority!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DELETE(): TerminalNode {
		return this.getToken(MySqlParser.DELETE, 0);
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public QUICK(): TerminalNode {
		return this.getToken(MySqlParser.QUICK, 0);
	}
	public IGNORE(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public WHERE(): TerminalNode {
		return this.getToken(MySqlParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public LIMIT(): TerminalNode {
		return this.getToken(MySqlParser.LIMIT, 0);
	}
	public limitClauseAtom(): LimitClauseAtomContext {
		return this.getTypedRuleContext(LimitClauseAtomContext, 0) as LimitClauseAtomContext;
	}
	public LOW_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_singleDeleteStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSingleDeleteStatement) {
	 		listener.enterSingleDeleteStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSingleDeleteStatement) {
	 		listener.exitSingleDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSingleDeleteStatement) {
			return visitor.visitSingleDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultipleDeleteStatementContext extends ParserRuleContext {
	public _priority!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DELETE(): TerminalNode {
		return this.getToken(MySqlParser.DELETE, 0);
	}
	public tableName_list(): TableNameContext[] {
		return this.getTypedRuleContexts(TableNameContext) as TableNameContext[];
	}
	public tableName(i: number): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, i) as TableNameContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public tableSources(): TableSourcesContext {
		return this.getTypedRuleContext(TableSourcesContext, 0) as TableSourcesContext;
	}
	public USING(): TerminalNode {
		return this.getToken(MySqlParser.USING, 0);
	}
	public QUICK(): TerminalNode {
		return this.getToken(MySqlParser.QUICK, 0);
	}
	public IGNORE(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, 0);
	}
	public WHERE(): TerminalNode {
		return this.getToken(MySqlParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public LOW_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	}
	public DOT_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.DOT);
	}
	public DOT(i: number): TerminalNode {
		return this.getToken(MySqlParser.DOT, i);
	}
	public STAR_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.STAR);
	}
	public STAR(i: number): TerminalNode {
		return this.getToken(MySqlParser.STAR, i);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_multipleDeleteStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMultipleDeleteStatement) {
	 		listener.enterMultipleDeleteStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMultipleDeleteStatement) {
	 		listener.exitMultipleDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMultipleDeleteStatement) {
			return visitor.visitMultipleDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerOpenStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HANDLER(): TerminalNode {
		return this.getToken(MySqlParser.HANDLER, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public OPEN(): TerminalNode {
		return this.getToken(MySqlParser.OPEN, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_handlerOpenStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerOpenStatement) {
	 		listener.enterHandlerOpenStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerOpenStatement) {
	 		listener.exitHandlerOpenStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerOpenStatement) {
			return visitor.visitHandlerOpenStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerReadIndexStatementContext extends ParserRuleContext {
	public _index!: UidContext;
	public _moveOrder!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HANDLER(): TerminalNode {
		return this.getToken(MySqlParser.HANDLER, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public READ(): TerminalNode {
		return this.getToken(MySqlParser.READ, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getTypedRuleContext(ComparisonOperatorContext, 0) as ComparisonOperatorContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public constants(): ConstantsContext {
		return this.getTypedRuleContext(ConstantsContext, 0) as ConstantsContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public WHERE(): TerminalNode {
		return this.getToken(MySqlParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public LIMIT(): TerminalNode {
		return this.getToken(MySqlParser.LIMIT, 0);
	}
	public limitClauseAtom(): LimitClauseAtomContext {
		return this.getTypedRuleContext(LimitClauseAtomContext, 0) as LimitClauseAtomContext;
	}
	public FIRST(): TerminalNode {
		return this.getToken(MySqlParser.FIRST, 0);
	}
	public NEXT(): TerminalNode {
		return this.getToken(MySqlParser.NEXT, 0);
	}
	public PREV(): TerminalNode {
		return this.getToken(MySqlParser.PREV, 0);
	}
	public LAST(): TerminalNode {
		return this.getToken(MySqlParser.LAST, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_handlerReadIndexStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerReadIndexStatement) {
	 		listener.enterHandlerReadIndexStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerReadIndexStatement) {
	 		listener.exitHandlerReadIndexStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerReadIndexStatement) {
			return visitor.visitHandlerReadIndexStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerReadStatementContext extends ParserRuleContext {
	public _moveOrder!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HANDLER(): TerminalNode {
		return this.getToken(MySqlParser.HANDLER, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public READ(): TerminalNode {
		return this.getToken(MySqlParser.READ, 0);
	}
	public FIRST(): TerminalNode {
		return this.getToken(MySqlParser.FIRST, 0);
	}
	public NEXT(): TerminalNode {
		return this.getToken(MySqlParser.NEXT, 0);
	}
	public WHERE(): TerminalNode {
		return this.getToken(MySqlParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public LIMIT(): TerminalNode {
		return this.getToken(MySqlParser.LIMIT, 0);
	}
	public limitClauseAtom(): LimitClauseAtomContext {
		return this.getTypedRuleContext(LimitClauseAtomContext, 0) as LimitClauseAtomContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_handlerReadStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerReadStatement) {
	 		listener.enterHandlerReadStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerReadStatement) {
	 		listener.exitHandlerReadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerReadStatement) {
			return visitor.visitHandlerReadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerCloseStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HANDLER(): TerminalNode {
		return this.getToken(MySqlParser.HANDLER, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public CLOSE(): TerminalNode {
		return this.getToken(MySqlParser.CLOSE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_handlerCloseStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerCloseStatement) {
	 		listener.enterHandlerCloseStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerCloseStatement) {
	 		listener.exitHandlerCloseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerCloseStatement) {
			return visitor.visitHandlerCloseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleUpdateStatementContext extends ParserRuleContext {
	public _priority!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UPDATE(): TerminalNode {
		return this.getToken(MySqlParser.UPDATE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public updatedElement_list(): UpdatedElementContext[] {
		return this.getTypedRuleContexts(UpdatedElementContext) as UpdatedElementContext[];
	}
	public updatedElement(i: number): UpdatedElementContext {
		return this.getTypedRuleContext(UpdatedElementContext, i) as UpdatedElementContext;
	}
	public IGNORE(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public WHERE(): TerminalNode {
		return this.getToken(MySqlParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
	public LOW_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_singleUpdateStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSingleUpdateStatement) {
	 		listener.enterSingleUpdateStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSingleUpdateStatement) {
	 		listener.exitSingleUpdateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSingleUpdateStatement) {
			return visitor.visitSingleUpdateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultipleUpdateStatementContext extends ParserRuleContext {
	public _priority!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UPDATE(): TerminalNode {
		return this.getToken(MySqlParser.UPDATE, 0);
	}
	public tableSources(): TableSourcesContext {
		return this.getTypedRuleContext(TableSourcesContext, 0) as TableSourcesContext;
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public updatedElement_list(): UpdatedElementContext[] {
		return this.getTypedRuleContexts(UpdatedElementContext) as UpdatedElementContext[];
	}
	public updatedElement(i: number): UpdatedElementContext {
		return this.getTypedRuleContext(UpdatedElementContext, i) as UpdatedElementContext;
	}
	public IGNORE(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public WHERE(): TerminalNode {
		return this.getToken(MySqlParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public LOW_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_multipleUpdateStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMultipleUpdateStatement) {
	 		listener.enterMultipleUpdateStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMultipleUpdateStatement) {
	 		listener.exitMultipleUpdateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMultipleUpdateStatement) {
			return visitor.visitMultipleUpdateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderByClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ORDER(): TerminalNode {
		return this.getToken(MySqlParser.ORDER, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public orderByExpression_list(): OrderByExpressionContext[] {
		return this.getTypedRuleContexts(OrderByExpressionContext) as OrderByExpressionContext[];
	}
	public orderByExpression(i: number): OrderByExpressionContext {
		return this.getTypedRuleContext(OrderByExpressionContext, i) as OrderByExpressionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_orderByClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterOrderByClause) {
	 		listener.enterOrderByClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitOrderByClause) {
	 		listener.exitOrderByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOrderByClause) {
			return visitor.visitOrderByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderByExpressionContext extends ParserRuleContext {
	public _order!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public ASC(): TerminalNode {
		return this.getToken(MySqlParser.ASC, 0);
	}
	public DESC(): TerminalNode {
		return this.getToken(MySqlParser.DESC, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_orderByExpression;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterOrderByExpression) {
	 		listener.enterOrderByExpression(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitOrderByExpression) {
	 		listener.exitOrderByExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOrderByExpression) {
			return visitor.visitOrderByExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSourcesContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableSource_list(): TableSourceContext[] {
		return this.getTypedRuleContexts(TableSourceContext) as TableSourceContext[];
	}
	public tableSource(i: number): TableSourceContext {
		return this.getTypedRuleContext(TableSourceContext, i) as TableSourceContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tableSources;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableSources) {
	 		listener.enterTableSources(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableSources) {
	 		listener.exitTableSources(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableSources) {
			return visitor.visitTableSources(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSourceContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tableSource;
	}
	public copyFrom(ctx: TableSourceContext): void {
		super.copyFrom(ctx);
	}
}
export class TableJsonContext extends TableSourceContext {
	constructor(parser: MySqlParser, ctx: TableSourceContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public jsonTable(): JsonTableContext {
		return this.getTypedRuleContext(JsonTableContext, 0) as JsonTableContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableJson) {
	 		listener.enterTableJson(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableJson) {
	 		listener.exitTableJson(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableJson) {
			return visitor.visitTableJson(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableSourceNestedContext extends TableSourceContext {
	constructor(parser: MySqlParser, ctx: TableSourceContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public tableSourceItem(): TableSourceItemContext {
		return this.getTypedRuleContext(TableSourceItemContext, 0) as TableSourceItemContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public joinPart_list(): JoinPartContext[] {
		return this.getTypedRuleContexts(JoinPartContext) as JoinPartContext[];
	}
	public joinPart(i: number): JoinPartContext {
		return this.getTypedRuleContext(JoinPartContext, i) as JoinPartContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableSourceNested) {
	 		listener.enterTableSourceNested(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableSourceNested) {
	 		listener.exitTableSourceNested(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableSourceNested) {
			return visitor.visitTableSourceNested(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableSourceBaseContext extends TableSourceContext {
	constructor(parser: MySqlParser, ctx: TableSourceContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public tableSourceItem(): TableSourceItemContext {
		return this.getTypedRuleContext(TableSourceItemContext, 0) as TableSourceItemContext;
	}
	public joinPart_list(): JoinPartContext[] {
		return this.getTypedRuleContexts(JoinPartContext) as JoinPartContext[];
	}
	public joinPart(i: number): JoinPartContext {
		return this.getTypedRuleContext(JoinPartContext, i) as JoinPartContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableSourceBase) {
	 		listener.enterTableSourceBase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableSourceBase) {
	 		listener.exitTableSourceBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableSourceBase) {
			return visitor.visitTableSourceBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSourceItemContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tableSourceItem;
	}
	public copyFrom(ctx: TableSourceItemContext): void {
		super.copyFrom(ctx);
	}
}
export class SubqueryTableItemContext extends TableSourceItemContext {
	public _parenthesisSubquery!: SelectStatementContext;
	public _alias!: UidContext;
	constructor(parser: MySqlParser, ctx: TableSourceItemContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSubqueryTableItem) {
	 		listener.enterSubqueryTableItem(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSubqueryTableItem) {
	 		listener.exitSubqueryTableItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubqueryTableItem) {
			return visitor.visitSubqueryTableItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AtomTableItemContext extends TableSourceItemContext {
	public _alias!: UidContext;
	constructor(parser: MySqlParser, ctx: TableSourceItemContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public indexHint_list(): IndexHintContext[] {
		return this.getTypedRuleContexts(IndexHintContext) as IndexHintContext[];
	}
	public indexHint(i: number): IndexHintContext {
		return this.getTypedRuleContext(IndexHintContext, i) as IndexHintContext;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAtomTableItem) {
	 		listener.enterAtomTableItem(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAtomTableItem) {
	 		listener.exitAtomTableItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAtomTableItem) {
			return visitor.visitAtomTableItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableSourcesItemContext extends TableSourceItemContext {
	constructor(parser: MySqlParser, ctx: TableSourceItemContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public tableSources(): TableSourcesContext {
		return this.getTypedRuleContext(TableSourcesContext, 0) as TableSourcesContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableSourcesItem) {
	 		listener.enterTableSourcesItem(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableSourcesItem) {
	 		listener.exitTableSourcesItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableSourcesItem) {
			return visitor.visitTableSourcesItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexHintContext extends ParserRuleContext {
	public _indexHintAction!: Token;
	public _keyFormat!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public USE(): TerminalNode {
		return this.getToken(MySqlParser.USE, 0);
	}
	public IGNORE(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, 0);
	}
	public FORCE(): TerminalNode {
		return this.getToken(MySqlParser.FORCE, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public indexHintType(): IndexHintTypeContext {
		return this.getTypedRuleContext(IndexHintTypeContext, 0) as IndexHintTypeContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_indexHint;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIndexHint) {
	 		listener.enterIndexHint(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIndexHint) {
	 		listener.exitIndexHint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexHint) {
			return visitor.visitIndexHint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexHintTypeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public JOIN(): TerminalNode {
		return this.getToken(MySqlParser.JOIN, 0);
	}
	public ORDER(): TerminalNode {
		return this.getToken(MySqlParser.ORDER, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public GROUP(): TerminalNode {
		return this.getToken(MySqlParser.GROUP, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_indexHintType;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIndexHintType) {
	 		listener.enterIndexHintType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIndexHintType) {
	 		listener.exitIndexHintType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexHintType) {
			return visitor.visitIndexHintType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinPartContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_joinPart;
	}
	public copyFrom(ctx: JoinPartContext): void {
		super.copyFrom(ctx);
	}
}
export class InnerJoinContext extends JoinPartContext {
	constructor(parser: MySqlParser, ctx: JoinPartContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public JOIN(): TerminalNode {
		return this.getToken(MySqlParser.JOIN, 0);
	}
	public tableSourceItem(): TableSourceItemContext {
		return this.getTypedRuleContext(TableSourceItemContext, 0) as TableSourceItemContext;
	}
	public LATERAL(): TerminalNode {
		return this.getToken(MySqlParser.LATERAL, 0);
	}
	public joinSpec_list(): JoinSpecContext[] {
		return this.getTypedRuleContexts(JoinSpecContext) as JoinSpecContext[];
	}
	public joinSpec(i: number): JoinSpecContext {
		return this.getTypedRuleContext(JoinSpecContext, i) as JoinSpecContext;
	}
	public INNER(): TerminalNode {
		return this.getToken(MySqlParser.INNER, 0);
	}
	public CROSS(): TerminalNode {
		return this.getToken(MySqlParser.CROSS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterInnerJoin) {
	 		listener.enterInnerJoin(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitInnerJoin) {
	 		listener.exitInnerJoin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInnerJoin) {
			return visitor.visitInnerJoin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NaturalJoinContext extends JoinPartContext {
	constructor(parser: MySqlParser, ctx: JoinPartContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public NATURAL(): TerminalNode {
		return this.getToken(MySqlParser.NATURAL, 0);
	}
	public JOIN(): TerminalNode {
		return this.getToken(MySqlParser.JOIN, 0);
	}
	public tableSourceItem(): TableSourceItemContext {
		return this.getTypedRuleContext(TableSourceItemContext, 0) as TableSourceItemContext;
	}
	public LEFT(): TerminalNode {
		return this.getToken(MySqlParser.LEFT, 0);
	}
	public RIGHT(): TerminalNode {
		return this.getToken(MySqlParser.RIGHT, 0);
	}
	public OUTER(): TerminalNode {
		return this.getToken(MySqlParser.OUTER, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterNaturalJoin) {
	 		listener.enterNaturalJoin(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitNaturalJoin) {
	 		listener.exitNaturalJoin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNaturalJoin) {
			return visitor.visitNaturalJoin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class OuterJoinContext extends JoinPartContext {
	constructor(parser: MySqlParser, ctx: JoinPartContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public JOIN(): TerminalNode {
		return this.getToken(MySqlParser.JOIN, 0);
	}
	public tableSourceItem(): TableSourceItemContext {
		return this.getTypedRuleContext(TableSourceItemContext, 0) as TableSourceItemContext;
	}
	public LEFT(): TerminalNode {
		return this.getToken(MySqlParser.LEFT, 0);
	}
	public RIGHT(): TerminalNode {
		return this.getToken(MySqlParser.RIGHT, 0);
	}
	public OUTER(): TerminalNode {
		return this.getToken(MySqlParser.OUTER, 0);
	}
	public LATERAL(): TerminalNode {
		return this.getToken(MySqlParser.LATERAL, 0);
	}
	public joinSpec_list(): JoinSpecContext[] {
		return this.getTypedRuleContexts(JoinSpecContext) as JoinSpecContext[];
	}
	public joinSpec(i: number): JoinSpecContext {
		return this.getTypedRuleContext(JoinSpecContext, i) as JoinSpecContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterOuterJoin) {
	 		listener.enterOuterJoin(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitOuterJoin) {
	 		listener.exitOuterJoin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOuterJoin) {
			return visitor.visitOuterJoin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class StraightJoinContext extends JoinPartContext {
	constructor(parser: MySqlParser, ctx: JoinPartContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public STRAIGHT_JOIN(): TerminalNode {
		return this.getToken(MySqlParser.STRAIGHT_JOIN, 0);
	}
	public tableSourceItem(): TableSourceItemContext {
		return this.getTypedRuleContext(TableSourceItemContext, 0) as TableSourceItemContext;
	}
	public ON_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ON);
	}
	public ON(i: number): TerminalNode {
		return this.getToken(MySqlParser.ON, i);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStraightJoin) {
	 		listener.enterStraightJoin(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStraightJoin) {
	 		listener.exitStraightJoin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStraightJoin) {
			return visitor.visitStraightJoin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinSpecContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public USING(): TerminalNode {
		return this.getToken(MySqlParser.USING, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_joinSpec;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterJoinSpec) {
	 		listener.enterJoinSpec(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitJoinSpec) {
	 		listener.exitJoinSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitJoinSpec) {
			return visitor.visitJoinSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryExpressionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public querySpecification(): QuerySpecificationContext {
		return this.getTypedRuleContext(QuerySpecificationContext, 0) as QuerySpecificationContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public queryExpression(): QueryExpressionContext {
		return this.getTypedRuleContext(QueryExpressionContext, 0) as QueryExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_queryExpression;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterQueryExpression) {
	 		listener.enterQueryExpression(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitQueryExpression) {
	 		listener.exitQueryExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitQueryExpression) {
			return visitor.visitQueryExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryExpressionNointoContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		return this.getTypedRuleContext(QuerySpecificationNointoContext, 0) as QuerySpecificationNointoContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getTypedRuleContext(QueryExpressionNointoContext, 0) as QueryExpressionNointoContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_queryExpressionNointo;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterQueryExpressionNointo) {
	 		listener.enterQueryExpressionNointo(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitQueryExpressionNointo) {
	 		listener.exitQueryExpressionNointo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitQueryExpressionNointo) {
			return visitor.visitQueryExpressionNointo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QuerySpecificationContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SELECT(): TerminalNode {
		return this.getToken(MySqlParser.SELECT, 0);
	}
	public selectElements(): SelectElementsContext {
		return this.getTypedRuleContext(SelectElementsContext, 0) as SelectElementsContext;
	}
	public fromClause(): FromClauseContext {
		return this.getTypedRuleContext(FromClauseContext, 0) as FromClauseContext;
	}
	public selectSpec_list(): SelectSpecContext[] {
		return this.getTypedRuleContexts(SelectSpecContext) as SelectSpecContext[];
	}
	public selectSpec(i: number): SelectSpecContext {
		return this.getTypedRuleContext(SelectSpecContext, i) as SelectSpecContext;
	}
	public selectIntoExpression(): SelectIntoExpressionContext {
		return this.getTypedRuleContext(SelectIntoExpressionContext, 0) as SelectIntoExpressionContext;
	}
	public groupByClause(): GroupByClauseContext {
		return this.getTypedRuleContext(GroupByClauseContext, 0) as GroupByClauseContext;
	}
	public havingClause(): HavingClauseContext {
		return this.getTypedRuleContext(HavingClauseContext, 0) as HavingClauseContext;
	}
	public windowClause(): WindowClauseContext {
		return this.getTypedRuleContext(WindowClauseContext, 0) as WindowClauseContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_querySpecification;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterQuerySpecification) {
	 		listener.enterQuerySpecification(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitQuerySpecification) {
	 		listener.exitQuerySpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitQuerySpecification) {
			return visitor.visitQuerySpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QuerySpecificationNointoContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SELECT(): TerminalNode {
		return this.getToken(MySqlParser.SELECT, 0);
	}
	public selectElements(): SelectElementsContext {
		return this.getTypedRuleContext(SelectElementsContext, 0) as SelectElementsContext;
	}
	public fromClause(): FromClauseContext {
		return this.getTypedRuleContext(FromClauseContext, 0) as FromClauseContext;
	}
	public selectSpec_list(): SelectSpecContext[] {
		return this.getTypedRuleContexts(SelectSpecContext) as SelectSpecContext[];
	}
	public selectSpec(i: number): SelectSpecContext {
		return this.getTypedRuleContext(SelectSpecContext, i) as SelectSpecContext;
	}
	public groupByClause(): GroupByClauseContext {
		return this.getTypedRuleContext(GroupByClauseContext, 0) as GroupByClauseContext;
	}
	public havingClause(): HavingClauseContext {
		return this.getTypedRuleContext(HavingClauseContext, 0) as HavingClauseContext;
	}
	public windowClause(): WindowClauseContext {
		return this.getTypedRuleContext(WindowClauseContext, 0) as WindowClauseContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
	public unionStatement(): UnionStatementContext {
		return this.getTypedRuleContext(UnionStatementContext, 0) as UnionStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_querySpecificationNointo;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterQuerySpecificationNointo) {
	 		listener.enterQuerySpecificationNointo(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitQuerySpecificationNointo) {
	 		listener.exitQuerySpecificationNointo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitQuerySpecificationNointo) {
			return visitor.visitQuerySpecificationNointo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnionParenthesisContext extends ParserRuleContext {
	public _unionType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNION(): TerminalNode {
		return this.getToken(MySqlParser.UNION, 0);
	}
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getTypedRuleContext(QueryExpressionNointoContext, 0) as QueryExpressionNointoContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public DISTINCT(): TerminalNode {
		return this.getToken(MySqlParser.DISTINCT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_unionParenthesis;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUnionParenthesis) {
	 		listener.enterUnionParenthesis(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUnionParenthesis) {
	 		listener.exitUnionParenthesis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnionParenthesis) {
			return visitor.visitUnionParenthesis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnionStatementContext extends ParserRuleContext {
	public _unionType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNION(): TerminalNode {
		return this.getToken(MySqlParser.UNION, 0);
	}
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		return this.getTypedRuleContext(QuerySpecificationNointoContext, 0) as QuerySpecificationNointoContext;
	}
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getTypedRuleContext(QueryExpressionNointoContext, 0) as QueryExpressionNointoContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public DISTINCT(): TerminalNode {
		return this.getToken(MySqlParser.DISTINCT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_unionStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUnionStatement) {
	 		listener.enterUnionStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUnionStatement) {
	 		listener.exitUnionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnionStatement) {
			return visitor.visitUnionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LateralStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LATERAL(): TerminalNode {
		return this.getToken(MySqlParser.LATERAL, 0);
	}
	public querySpecificationNointo(): QuerySpecificationNointoContext {
		return this.getTypedRuleContext(QuerySpecificationNointoContext, 0) as QuerySpecificationNointoContext;
	}
	public queryExpressionNointo(): QueryExpressionNointoContext {
		return this.getTypedRuleContext(QueryExpressionNointoContext, 0) as QueryExpressionNointoContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_lateralStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLateralStatement) {
	 		listener.enterLateralStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLateralStatement) {
	 		listener.exitLateralStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLateralStatement) {
			return visitor.visitLateralStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonTableContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public JSON_TABLE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_TABLE, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public STRING_LITERAL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.STRING_LITERAL);
	}
	public STRING_LITERAL(i: number): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, i);
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
	public COLUMNS(): TerminalNode {
		return this.getToken(MySqlParser.COLUMNS, 0);
	}
	public jsonColumnList(): JsonColumnListContext {
		return this.getTypedRuleContext(JsonColumnListContext, 0) as JsonColumnListContext;
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_jsonTable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterJsonTable) {
	 		listener.enterJsonTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitJsonTable) {
	 		listener.exitJsonTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitJsonTable) {
			return visitor.visitJsonTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonColumnListContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public jsonColumn_list(): JsonColumnContext[] {
		return this.getTypedRuleContexts(JsonColumnContext) as JsonColumnContext[];
	}
	public jsonColumn(i: number): JsonColumnContext {
		return this.getTypedRuleContext(JsonColumnContext, i) as JsonColumnContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_jsonColumnList;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterJsonColumnList) {
	 		listener.enterJsonColumnList(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitJsonColumnList) {
	 		listener.exitJsonColumnList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitJsonColumnList) {
			return visitor.visitJsonColumnList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonColumnContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullColumnName(): FullColumnNameContext {
		return this.getTypedRuleContext(FullColumnNameContext, 0) as FullColumnNameContext;
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public ORDINALITY(): TerminalNode {
		return this.getToken(MySqlParser.ORDINALITY, 0);
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
	public PATH(): TerminalNode {
		return this.getToken(MySqlParser.PATH, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public EXISTS(): TerminalNode {
		return this.getToken(MySqlParser.EXISTS, 0);
	}
	public jsonOnEmpty(): JsonOnEmptyContext {
		return this.getTypedRuleContext(JsonOnEmptyContext, 0) as JsonOnEmptyContext;
	}
	public jsonOnError(): JsonOnErrorContext {
		return this.getTypedRuleContext(JsonOnErrorContext, 0) as JsonOnErrorContext;
	}
	public NESTED(): TerminalNode {
		return this.getToken(MySqlParser.NESTED, 0);
	}
	public COLUMNS(): TerminalNode {
		return this.getToken(MySqlParser.COLUMNS, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public jsonColumnList(): JsonColumnListContext {
		return this.getTypedRuleContext(JsonColumnListContext, 0) as JsonColumnListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_jsonColumn;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterJsonColumn) {
	 		listener.enterJsonColumn(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitJsonColumn) {
	 		listener.exitJsonColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitJsonColumn) {
			return visitor.visitJsonColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonOnEmptyContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public EMPTY(): TerminalNode {
		return this.getToken(MySqlParser.EMPTY, 0);
	}
	public NULL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.NULL_LITERAL, 0);
	}
	public ERROR(): TerminalNode {
		return this.getToken(MySqlParser.ERROR, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public defaultValue(): DefaultValueContext {
		return this.getTypedRuleContext(DefaultValueContext, 0) as DefaultValueContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_jsonOnEmpty;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterJsonOnEmpty) {
	 		listener.enterJsonOnEmpty(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitJsonOnEmpty) {
	 		listener.exitJsonOnEmpty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitJsonOnEmpty) {
			return visitor.visitJsonOnEmpty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonOnErrorContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public ERROR_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ERROR);
	}
	public ERROR(i: number): TerminalNode {
		return this.getToken(MySqlParser.ERROR, i);
	}
	public NULL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.NULL_LITERAL, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public defaultValue(): DefaultValueContext {
		return this.getTypedRuleContext(DefaultValueContext, 0) as DefaultValueContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_jsonOnError;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterJsonOnError) {
	 		listener.enterJsonOnError(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitJsonOnError) {
	 		listener.exitJsonOnError(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitJsonOnError) {
			return visitor.visitJsonOnError(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectSpecContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public DISTINCT(): TerminalNode {
		return this.getToken(MySqlParser.DISTINCT, 0);
	}
	public DISTINCTROW(): TerminalNode {
		return this.getToken(MySqlParser.DISTINCTROW, 0);
	}
	public HIGH_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.HIGH_PRIORITY, 0);
	}
	public STRAIGHT_JOIN(): TerminalNode {
		return this.getToken(MySqlParser.STRAIGHT_JOIN, 0);
	}
	public SQL_SMALL_RESULT(): TerminalNode {
		return this.getToken(MySqlParser.SQL_SMALL_RESULT, 0);
	}
	public SQL_BIG_RESULT(): TerminalNode {
		return this.getToken(MySqlParser.SQL_BIG_RESULT, 0);
	}
	public SQL_BUFFER_RESULT(): TerminalNode {
		return this.getToken(MySqlParser.SQL_BUFFER_RESULT, 0);
	}
	public SQL_CACHE(): TerminalNode {
		return this.getToken(MySqlParser.SQL_CACHE, 0);
	}
	public SQL_NO_CACHE(): TerminalNode {
		return this.getToken(MySqlParser.SQL_NO_CACHE, 0);
	}
	public SQL_CALC_FOUND_ROWS(): TerminalNode {
		return this.getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_selectSpec;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectSpec) {
	 		listener.enterSelectSpec(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectSpec) {
	 		listener.exitSelectSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectSpec) {
			return visitor.visitSelectSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectElementsContext extends ParserRuleContext {
	public _star!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectElement_list(): SelectElementContext[] {
		return this.getTypedRuleContexts(SelectElementContext) as SelectElementContext[];
	}
	public selectElement(i: number): SelectElementContext {
		return this.getTypedRuleContext(SelectElementContext, i) as SelectElementContext;
	}
	public STAR(): TerminalNode {
		return this.getToken(MySqlParser.STAR, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_selectElements;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectElements) {
	 		listener.enterSelectElements(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectElements) {
	 		listener.exitSelectElements(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectElements) {
			return visitor.visitSelectElements(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectElementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_selectElement;
	}
	public copyFrom(ctx: SelectElementContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectExpressionElementContext extends SelectElementContext {
	constructor(parser: MySqlParser, ctx: SelectElementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public LOCAL_ID(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL_ID, 0);
	}
	public VAR_ASSIGN(): TerminalNode {
		return this.getToken(MySqlParser.VAR_ASSIGN, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectExpressionElement) {
	 		listener.enterSelectExpressionElement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectExpressionElement) {
	 		listener.exitSelectExpressionElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectExpressionElement) {
			return visitor.visitSelectExpressionElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectFunctionElementContext extends SelectElementContext {
	constructor(parser: MySqlParser, ctx: SelectElementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public functionCall(): FunctionCallContext {
		return this.getTypedRuleContext(FunctionCallContext, 0) as FunctionCallContext;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectFunctionElement) {
	 		listener.enterSelectFunctionElement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectFunctionElement) {
	 		listener.exitSelectFunctionElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectFunctionElement) {
			return visitor.visitSelectFunctionElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectStarElementContext extends SelectElementContext {
	constructor(parser: MySqlParser, ctx: SelectElementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public DOT(): TerminalNode {
		return this.getToken(MySqlParser.DOT, 0);
	}
	public STAR(): TerminalNode {
		return this.getToken(MySqlParser.STAR, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectStarElement) {
	 		listener.enterSelectStarElement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectStarElement) {
	 		listener.exitSelectStarElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectStarElement) {
			return visitor.visitSelectStarElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectColumnElementContext extends SelectElementContext {
	constructor(parser: MySqlParser, ctx: SelectElementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public fullColumnName(): FullColumnNameContext {
		return this.getTypedRuleContext(FullColumnNameContext, 0) as FullColumnNameContext;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectColumnElement) {
	 		listener.enterSelectColumnElement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectColumnElement) {
	 		listener.exitSelectColumnElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectColumnElement) {
			return visitor.visitSelectColumnElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectIntoExpressionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_selectIntoExpression;
	}
	public copyFrom(ctx: SelectIntoExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectIntoVariablesContext extends SelectIntoExpressionContext {
	constructor(parser: MySqlParser, ctx: SelectIntoExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public assignmentField_list(): AssignmentFieldContext[] {
		return this.getTypedRuleContexts(AssignmentFieldContext) as AssignmentFieldContext[];
	}
	public assignmentField(i: number): AssignmentFieldContext {
		return this.getTypedRuleContext(AssignmentFieldContext, i) as AssignmentFieldContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectIntoVariables) {
	 		listener.enterSelectIntoVariables(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectIntoVariables) {
	 		listener.exitSelectIntoVariables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectIntoVariables) {
			return visitor.visitSelectIntoVariables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectIntoTextFileContext extends SelectIntoExpressionContext {
	public _filename!: Token;
	public _charset!: CharsetNameContext;
	public _fieldsFormat!: Token;
	constructor(parser: MySqlParser, ctx: SelectIntoExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public OUTFILE(): TerminalNode {
		return this.getToken(MySqlParser.OUTFILE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public CHARACTER(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public LINES(): TerminalNode {
		return this.getToken(MySqlParser.LINES, 0);
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public FIELDS(): TerminalNode {
		return this.getToken(MySqlParser.FIELDS, 0);
	}
	public COLUMNS(): TerminalNode {
		return this.getToken(MySqlParser.COLUMNS, 0);
	}
	public selectFieldsInto_list(): SelectFieldsIntoContext[] {
		return this.getTypedRuleContexts(SelectFieldsIntoContext) as SelectFieldsIntoContext[];
	}
	public selectFieldsInto(i: number): SelectFieldsIntoContext {
		return this.getTypedRuleContext(SelectFieldsIntoContext, i) as SelectFieldsIntoContext;
	}
	public selectLinesInto_list(): SelectLinesIntoContext[] {
		return this.getTypedRuleContexts(SelectLinesIntoContext) as SelectLinesIntoContext[];
	}
	public selectLinesInto(i: number): SelectLinesIntoContext {
		return this.getTypedRuleContext(SelectLinesIntoContext, i) as SelectLinesIntoContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectIntoTextFile) {
	 		listener.enterSelectIntoTextFile(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectIntoTextFile) {
	 		listener.exitSelectIntoTextFile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectIntoTextFile) {
			return visitor.visitSelectIntoTextFile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
	constructor(parser: MySqlParser, ctx: SelectIntoExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public DUMPFILE(): TerminalNode {
		return this.getToken(MySqlParser.DUMPFILE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectIntoDumpFile) {
	 		listener.enterSelectIntoDumpFile(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectIntoDumpFile) {
	 		listener.exitSelectIntoDumpFile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectIntoDumpFile) {
			return visitor.visitSelectIntoDumpFile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectFieldsIntoContext extends ParserRuleContext {
	public _terminationField!: Token;
	public _enclosion!: Token;
	public _escaping!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TERMINATED(): TerminalNode {
		return this.getToken(MySqlParser.TERMINATED, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public ENCLOSED(): TerminalNode {
		return this.getToken(MySqlParser.ENCLOSED, 0);
	}
	public OPTIONALLY(): TerminalNode {
		return this.getToken(MySqlParser.OPTIONALLY, 0);
	}
	public ESCAPED(): TerminalNode {
		return this.getToken(MySqlParser.ESCAPED, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_selectFieldsInto;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectFieldsInto) {
	 		listener.enterSelectFieldsInto(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectFieldsInto) {
	 		listener.exitSelectFieldsInto(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectFieldsInto) {
			return visitor.visitSelectFieldsInto(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectLinesIntoContext extends ParserRuleContext {
	public _starting!: Token;
	public _terminationLine!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STARTING(): TerminalNode {
		return this.getToken(MySqlParser.STARTING, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public TERMINATED(): TerminalNode {
		return this.getToken(MySqlParser.TERMINATED, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_selectLinesInto;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSelectLinesInto) {
	 		listener.enterSelectLinesInto(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSelectLinesInto) {
	 		listener.exitSelectLinesInto(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSelectLinesInto) {
			return visitor.visitSelectLinesInto(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FromClauseContext extends ParserRuleContext {
	public _whereExpr!: ExpressionContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public tableSources(): TableSourcesContext {
		return this.getTypedRuleContext(TableSourcesContext, 0) as TableSourcesContext;
	}
	public WHERE(): TerminalNode {
		return this.getToken(MySqlParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_fromClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFromClause) {
	 		listener.enterFromClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFromClause) {
	 		listener.exitFromClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFromClause) {
			return visitor.visitFromClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupByClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GROUP(): TerminalNode {
		return this.getToken(MySqlParser.GROUP, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public groupByItem_list(): GroupByItemContext[] {
		return this.getTypedRuleContexts(GroupByItemContext) as GroupByItemContext[];
	}
	public groupByItem(i: number): GroupByItemContext {
		return this.getTypedRuleContext(GroupByItemContext, i) as GroupByItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public ROLLUP(): TerminalNode {
		return this.getToken(MySqlParser.ROLLUP, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_groupByClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterGroupByClause) {
	 		listener.enterGroupByClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitGroupByClause) {
	 		listener.exitGroupByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGroupByClause) {
			return visitor.visitGroupByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HavingClauseContext extends ParserRuleContext {
	public _havingExpr!: ExpressionContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HAVING(): TerminalNode {
		return this.getToken(MySqlParser.HAVING, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_havingClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHavingClause) {
	 		listener.enterHavingClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHavingClause) {
	 		listener.exitHavingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHavingClause) {
			return visitor.visitHavingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WindowClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WINDOW(): TerminalNode {
		return this.getToken(MySqlParser.WINDOW, 0);
	}
	public windowName_list(): WindowNameContext[] {
		return this.getTypedRuleContexts(WindowNameContext) as WindowNameContext[];
	}
	public windowName(i: number): WindowNameContext {
		return this.getTypedRuleContext(WindowNameContext, i) as WindowNameContext;
	}
	public AS_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.AS);
	}
	public AS(i: number): TerminalNode {
		return this.getToken(MySqlParser.AS, i);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public windowSpec_list(): WindowSpecContext[] {
		return this.getTypedRuleContexts(WindowSpecContext) as WindowSpecContext[];
	}
	public windowSpec(i: number): WindowSpecContext {
		return this.getTypedRuleContext(WindowSpecContext, i) as WindowSpecContext;
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_windowClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWindowClause) {
	 		listener.enterWindowClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWindowClause) {
	 		listener.exitWindowClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWindowClause) {
			return visitor.visitWindowClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupByItemContext extends ParserRuleContext {
	public _order!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public ASC(): TerminalNode {
		return this.getToken(MySqlParser.ASC, 0);
	}
	public DESC(): TerminalNode {
		return this.getToken(MySqlParser.DESC, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_groupByItem;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterGroupByItem) {
	 		listener.enterGroupByItem(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitGroupByItem) {
	 		listener.exitGroupByItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGroupByItem) {
			return visitor.visitGroupByItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LimitClauseContext extends ParserRuleContext {
	public _offset!: LimitClauseAtomContext;
	public _limit!: LimitClauseAtomContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIMIT(): TerminalNode {
		return this.getToken(MySqlParser.LIMIT, 0);
	}
	public OFFSET(): TerminalNode {
		return this.getToken(MySqlParser.OFFSET, 0);
	}
	public limitClauseAtom_list(): LimitClauseAtomContext[] {
		return this.getTypedRuleContexts(LimitClauseAtomContext) as LimitClauseAtomContext[];
	}
	public limitClauseAtom(i: number): LimitClauseAtomContext {
		return this.getTypedRuleContext(LimitClauseAtomContext, i) as LimitClauseAtomContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_limitClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLimitClause) {
	 		listener.enterLimitClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLimitClause) {
	 		listener.exitLimitClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLimitClause) {
			return visitor.visitLimitClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LimitClauseAtomContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public mysqlVariable(): MysqlVariableContext {
		return this.getTypedRuleContext(MysqlVariableContext, 0) as MysqlVariableContext;
	}
	public simpleId(): SimpleIdContext {
		return this.getTypedRuleContext(SimpleIdContext, 0) as SimpleIdContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_limitClauseAtom;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLimitClauseAtom) {
	 		listener.enterLimitClauseAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLimitClauseAtom) {
	 		listener.exitLimitClauseAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLimitClauseAtom) {
			return visitor.visitLimitClauseAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartTransactionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public START(): TerminalNode {
		return this.getToken(MySqlParser.START, 0);
	}
	public TRANSACTION(): TerminalNode {
		return this.getToken(MySqlParser.TRANSACTION, 0);
	}
	public transactionMode_list(): TransactionModeContext[] {
		return this.getTypedRuleContexts(TransactionModeContext) as TransactionModeContext[];
	}
	public transactionMode(i: number): TransactionModeContext {
		return this.getTypedRuleContext(TransactionModeContext, i) as TransactionModeContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_startTransaction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStartTransaction) {
	 		listener.enterStartTransaction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStartTransaction) {
	 		listener.exitStartTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStartTransaction) {
			return visitor.visitStartTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BeginWorkContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BEGIN(): TerminalNode {
		return this.getToken(MySqlParser.BEGIN, 0);
	}
	public WORK(): TerminalNode {
		return this.getToken(MySqlParser.WORK, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_beginWork;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterBeginWork) {
	 		listener.enterBeginWork(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitBeginWork) {
	 		listener.exitBeginWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBeginWork) {
			return visitor.visitBeginWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommitWorkContext extends ParserRuleContext {
	public _nochain!: Token;
	public _norelease!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMIT(): TerminalNode {
		return this.getToken(MySqlParser.COMMIT, 0);
	}
	public WORK(): TerminalNode {
		return this.getToken(MySqlParser.WORK, 0);
	}
	public AND(): TerminalNode {
		return this.getToken(MySqlParser.AND, 0);
	}
	public CHAIN(): TerminalNode {
		return this.getToken(MySqlParser.CHAIN, 0);
	}
	public RELEASE(): TerminalNode {
		return this.getToken(MySqlParser.RELEASE, 0);
	}
	public NO_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.NO);
	}
	public NO(i: number): TerminalNode {
		return this.getToken(MySqlParser.NO, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_commitWork;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCommitWork) {
	 		listener.enterCommitWork(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCommitWork) {
	 		listener.exitCommitWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCommitWork) {
			return visitor.visitCommitWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollbackWorkContext extends ParserRuleContext {
	public _nochain!: Token;
	public _norelease!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ROLLBACK(): TerminalNode {
		return this.getToken(MySqlParser.ROLLBACK, 0);
	}
	public WORK(): TerminalNode {
		return this.getToken(MySqlParser.WORK, 0);
	}
	public AND(): TerminalNode {
		return this.getToken(MySqlParser.AND, 0);
	}
	public CHAIN(): TerminalNode {
		return this.getToken(MySqlParser.CHAIN, 0);
	}
	public RELEASE(): TerminalNode {
		return this.getToken(MySqlParser.RELEASE, 0);
	}
	public NO_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.NO);
	}
	public NO(i: number): TerminalNode {
		return this.getToken(MySqlParser.NO, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_rollbackWork;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRollbackWork) {
	 		listener.enterRollbackWork(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRollbackWork) {
	 		listener.exitRollbackWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRollbackWork) {
			return visitor.visitRollbackWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SavepointStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SAVEPOINT(): TerminalNode {
		return this.getToken(MySqlParser.SAVEPOINT, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_savepointStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSavepointStatement) {
	 		listener.enterSavepointStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSavepointStatement) {
	 		listener.exitSavepointStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSavepointStatement) {
			return visitor.visitSavepointStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollbackStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ROLLBACK(): TerminalNode {
		return this.getToken(MySqlParser.ROLLBACK, 0);
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public WORK(): TerminalNode {
		return this.getToken(MySqlParser.WORK, 0);
	}
	public SAVEPOINT(): TerminalNode {
		return this.getToken(MySqlParser.SAVEPOINT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_rollbackStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRollbackStatement) {
	 		listener.enterRollbackStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRollbackStatement) {
	 		listener.exitRollbackStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRollbackStatement) {
			return visitor.visitRollbackStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReleaseStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RELEASE(): TerminalNode {
		return this.getToken(MySqlParser.RELEASE, 0);
	}
	public SAVEPOINT(): TerminalNode {
		return this.getToken(MySqlParser.SAVEPOINT, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_releaseStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterReleaseStatement) {
	 		listener.enterReleaseStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitReleaseStatement) {
	 		listener.exitReleaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReleaseStatement) {
			return visitor.visitReleaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockTablesContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCK(): TerminalNode {
		return this.getToken(MySqlParser.LOCK, 0);
	}
	public lockTableElement_list(): LockTableElementContext[] {
		return this.getTypedRuleContexts(LockTableElementContext) as LockTableElementContext[];
	}
	public lockTableElement(i: number): LockTableElementContext {
		return this.getTypedRuleContext(LockTableElementContext, i) as LockTableElementContext;
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public TABLES(): TerminalNode {
		return this.getToken(MySqlParser.TABLES, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public waitNowaitClause(): WaitNowaitClauseContext {
		return this.getTypedRuleContext(WaitNowaitClauseContext, 0) as WaitNowaitClauseContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_lockTables;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLockTables) {
	 		listener.enterLockTables(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLockTables) {
	 		listener.exitLockTables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLockTables) {
			return visitor.visitLockTables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnlockTablesContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNLOCK(): TerminalNode {
		return this.getToken(MySqlParser.UNLOCK, 0);
	}
	public TABLES(): TerminalNode {
		return this.getToken(MySqlParser.TABLES, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_unlockTables;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUnlockTables) {
	 		listener.enterUnlockTables(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUnlockTables) {
	 		listener.exitUnlockTables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnlockTables) {
			return visitor.visitUnlockTables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetAutocommitStatementContext extends ParserRuleContext {
	public _autocommitValue!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public AUTOCOMMIT(): TerminalNode {
		return this.getToken(MySqlParser.AUTOCOMMIT, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_setAutocommitStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetAutocommitStatement) {
	 		listener.enterSetAutocommitStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetAutocommitStatement) {
	 		listener.exitSetAutocommitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetAutocommitStatement) {
			return visitor.visitSetAutocommitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetTransactionStatementContext extends ParserRuleContext {
	public _transactionContext!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public TRANSACTION(): TerminalNode {
		return this.getToken(MySqlParser.TRANSACTION, 0);
	}
	public transactionOption_list(): TransactionOptionContext[] {
		return this.getTypedRuleContexts(TransactionOptionContext) as TransactionOptionContext[];
	}
	public transactionOption(i: number): TransactionOptionContext {
		return this.getTypedRuleContext(TransactionOptionContext, i) as TransactionOptionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public GLOBAL(): TerminalNode {
		return this.getToken(MySqlParser.GLOBAL, 0);
	}
	public SESSION(): TerminalNode {
		return this.getToken(MySqlParser.SESSION, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_setTransactionStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetTransactionStatement) {
	 		listener.enterSetTransactionStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetTransactionStatement) {
	 		listener.exitSetTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetTransactionStatement) {
			return visitor.visitSetTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionModeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public CONSISTENT(): TerminalNode {
		return this.getToken(MySqlParser.CONSISTENT, 0);
	}
	public SNAPSHOT(): TerminalNode {
		return this.getToken(MySqlParser.SNAPSHOT, 0);
	}
	public READ(): TerminalNode {
		return this.getToken(MySqlParser.READ, 0);
	}
	public WRITE(): TerminalNode {
		return this.getToken(MySqlParser.WRITE, 0);
	}
	public ONLY(): TerminalNode {
		return this.getToken(MySqlParser.ONLY, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_transactionMode;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTransactionMode) {
	 		listener.enterTransactionMode(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTransactionMode) {
	 		listener.exitTransactionMode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTransactionMode) {
			return visitor.visitTransactionMode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockTableElementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public lockAction(): LockActionContext {
		return this.getTypedRuleContext(LockActionContext, 0) as LockActionContext;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_lockTableElement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLockTableElement) {
	 		listener.enterLockTableElement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLockTableElement) {
	 		listener.exitLockTableElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLockTableElement) {
			return visitor.visitLockTableElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockActionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public READ(): TerminalNode {
		return this.getToken(MySqlParser.READ, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
	public WRITE(): TerminalNode {
		return this.getToken(MySqlParser.WRITE, 0);
	}
	public LOW_PRIORITY(): TerminalNode {
		return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_lockAction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLockAction) {
	 		listener.enterLockAction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLockAction) {
	 		listener.exitLockAction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLockAction) {
			return visitor.visitLockAction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ISOLATION(): TerminalNode {
		return this.getToken(MySqlParser.ISOLATION, 0);
	}
	public LEVEL(): TerminalNode {
		return this.getToken(MySqlParser.LEVEL, 0);
	}
	public transactionLevel(): TransactionLevelContext {
		return this.getTypedRuleContext(TransactionLevelContext, 0) as TransactionLevelContext;
	}
	public READ(): TerminalNode {
		return this.getToken(MySqlParser.READ, 0);
	}
	public WRITE(): TerminalNode {
		return this.getToken(MySqlParser.WRITE, 0);
	}
	public ONLY(): TerminalNode {
		return this.getToken(MySqlParser.ONLY, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_transactionOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTransactionOption) {
	 		listener.enterTransactionOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTransactionOption) {
	 		listener.exitTransactionOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTransactionOption) {
			return visitor.visitTransactionOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionLevelContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPEATABLE(): TerminalNode {
		return this.getToken(MySqlParser.REPEATABLE, 0);
	}
	public READ(): TerminalNode {
		return this.getToken(MySqlParser.READ, 0);
	}
	public COMMITTED(): TerminalNode {
		return this.getToken(MySqlParser.COMMITTED, 0);
	}
	public UNCOMMITTED(): TerminalNode {
		return this.getToken(MySqlParser.UNCOMMITTED, 0);
	}
	public SERIALIZABLE(): TerminalNode {
		return this.getToken(MySqlParser.SERIALIZABLE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_transactionLevel;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTransactionLevel) {
	 		listener.enterTransactionLevel(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTransactionLevel) {
	 		listener.exitTransactionLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTransactionLevel) {
			return visitor.visitTransactionLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ChangeMasterContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHANGE(): TerminalNode {
		return this.getToken(MySqlParser.CHANGE, 0);
	}
	public MASTER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER, 0);
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public masterOption_list(): MasterOptionContext[] {
		return this.getTypedRuleContexts(MasterOptionContext) as MasterOptionContext[];
	}
	public masterOption(i: number): MasterOptionContext {
		return this.getTypedRuleContext(MasterOptionContext, i) as MasterOptionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public channelOption(): ChannelOptionContext {
		return this.getTypedRuleContext(ChannelOptionContext, 0) as ChannelOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_changeMaster;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterChangeMaster) {
	 		listener.enterChangeMaster(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitChangeMaster) {
	 		listener.exitChangeMaster(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitChangeMaster) {
			return visitor.visitChangeMaster(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ChangeReplicationFilterContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHANGE(): TerminalNode {
		return this.getToken(MySqlParser.CHANGE, 0);
	}
	public REPLICATION(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATION, 0);
	}
	public FILTER(): TerminalNode {
		return this.getToken(MySqlParser.FILTER, 0);
	}
	public replicationFilter_list(): ReplicationFilterContext[] {
		return this.getTypedRuleContexts(ReplicationFilterContext) as ReplicationFilterContext[];
	}
	public replicationFilter(i: number): ReplicationFilterContext {
		return this.getTypedRuleContext(ReplicationFilterContext, i) as ReplicationFilterContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_changeReplicationFilter;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterChangeReplicationFilter) {
	 		listener.enterChangeReplicationFilter(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitChangeReplicationFilter) {
	 		listener.exitChangeReplicationFilter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitChangeReplicationFilter) {
			return visitor.visitChangeReplicationFilter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PurgeBinaryLogsContext extends ParserRuleContext {
	public _purgeFormat!: Token;
	public _fileName!: Token;
	public _timeValue!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PURGE(): TerminalNode {
		return this.getToken(MySqlParser.PURGE, 0);
	}
	public LOGS(): TerminalNode {
		return this.getToken(MySqlParser.LOGS, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public MASTER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER, 0);
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public BEFORE(): TerminalNode {
		return this.getToken(MySqlParser.BEFORE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_purgeBinaryLogs;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPurgeBinaryLogs) {
	 		listener.enterPurgeBinaryLogs(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPurgeBinaryLogs) {
	 		listener.exitPurgeBinaryLogs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPurgeBinaryLogs) {
			return visitor.visitPurgeBinaryLogs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResetMasterContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESET(): TerminalNode {
		return this.getToken(MySqlParser.RESET, 0);
	}
	public MASTER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_resetMaster;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterResetMaster) {
	 		listener.enterResetMaster(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitResetMaster) {
	 		listener.exitResetMaster(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitResetMaster) {
			return visitor.visitResetMaster(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResetSlaveContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESET(): TerminalNode {
		return this.getToken(MySqlParser.RESET, 0);
	}
	public SLAVE(): TerminalNode {
		return this.getToken(MySqlParser.SLAVE, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public channelOption(): ChannelOptionContext {
		return this.getTypedRuleContext(ChannelOptionContext, 0) as ChannelOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_resetSlave;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterResetSlave) {
	 		listener.enterResetSlave(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitResetSlave) {
	 		listener.exitResetSlave(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitResetSlave) {
			return visitor.visitResetSlave(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartSlaveContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public START(): TerminalNode {
		return this.getToken(MySqlParser.START, 0);
	}
	public SLAVE(): TerminalNode {
		return this.getToken(MySqlParser.SLAVE, 0);
	}
	public threadType_list(): ThreadTypeContext[] {
		return this.getTypedRuleContexts(ThreadTypeContext) as ThreadTypeContext[];
	}
	public threadType(i: number): ThreadTypeContext {
		return this.getTypedRuleContext(ThreadTypeContext, i) as ThreadTypeContext;
	}
	public UNTIL(): TerminalNode {
		return this.getToken(MySqlParser.UNTIL, 0);
	}
	public untilOption(): UntilOptionContext {
		return this.getTypedRuleContext(UntilOptionContext, 0) as UntilOptionContext;
	}
	public connectionOption_list(): ConnectionOptionContext[] {
		return this.getTypedRuleContexts(ConnectionOptionContext) as ConnectionOptionContext[];
	}
	public connectionOption(i: number): ConnectionOptionContext {
		return this.getTypedRuleContext(ConnectionOptionContext, i) as ConnectionOptionContext;
	}
	public channelOption(): ChannelOptionContext {
		return this.getTypedRuleContext(ChannelOptionContext, 0) as ChannelOptionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_startSlave;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStartSlave) {
	 		listener.enterStartSlave(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStartSlave) {
	 		listener.exitStartSlave(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStartSlave) {
			return visitor.visitStartSlave(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StopSlaveContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STOP(): TerminalNode {
		return this.getToken(MySqlParser.STOP, 0);
	}
	public SLAVE(): TerminalNode {
		return this.getToken(MySqlParser.SLAVE, 0);
	}
	public threadType_list(): ThreadTypeContext[] {
		return this.getTypedRuleContexts(ThreadTypeContext) as ThreadTypeContext[];
	}
	public threadType(i: number): ThreadTypeContext {
		return this.getTypedRuleContext(ThreadTypeContext, i) as ThreadTypeContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_stopSlave;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStopSlave) {
	 		listener.enterStopSlave(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStopSlave) {
	 		listener.exitStopSlave(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStopSlave) {
			return visitor.visitStopSlave(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartGroupReplicationContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public START(): TerminalNode {
		return this.getToken(MySqlParser.START, 0);
	}
	public GROUP_REPLICATION(): TerminalNode {
		return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_startGroupReplication;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStartGroupReplication) {
	 		listener.enterStartGroupReplication(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStartGroupReplication) {
	 		listener.exitStartGroupReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStartGroupReplication) {
			return visitor.visitStartGroupReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StopGroupReplicationContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STOP(): TerminalNode {
		return this.getToken(MySqlParser.STOP, 0);
	}
	public GROUP_REPLICATION(): TerminalNode {
		return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_stopGroupReplication;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStopGroupReplication) {
	 		listener.enterStopGroupReplication(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStopGroupReplication) {
	 		listener.exitStopGroupReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStopGroupReplication) {
			return visitor.visitStopGroupReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MasterOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_masterOption;
	}
	public copyFrom(ctx: MasterOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class MasterStringOptionContext extends MasterOptionContext {
	constructor(parser: MySqlParser, ctx: MasterOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public stringMasterOption(): StringMasterOptionContext {
		return this.getTypedRuleContext(StringMasterOptionContext, 0) as StringMasterOptionContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMasterStringOption) {
	 		listener.enterMasterStringOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMasterStringOption) {
	 		listener.exitMasterStringOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterStringOption) {
			return visitor.visitMasterStringOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MasterRealOptionContext extends MasterOptionContext {
	constructor(parser: MySqlParser, ctx: MasterOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MASTER_HEARTBEAT_PERIOD(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public REAL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.REAL_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMasterRealOption) {
	 		listener.enterMasterRealOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMasterRealOption) {
	 		listener.exitMasterRealOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterRealOption) {
			return visitor.visitMasterRealOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MasterBoolOptionContext extends MasterOptionContext {
	public _boolVal!: Token;
	constructor(parser: MySqlParser, ctx: MasterOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public boolMasterOption(): BoolMasterOptionContext {
		return this.getTypedRuleContext(BoolMasterOptionContext, 0) as BoolMasterOptionContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMasterBoolOption) {
	 		listener.enterMasterBoolOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMasterBoolOption) {
	 		listener.exitMasterBoolOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterBoolOption) {
			return visitor.visitMasterBoolOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MasterUidListOptionContext extends MasterOptionContext {
	constructor(parser: MySqlParser, ctx: MasterOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public IGNORE_SERVER_IDS(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMasterUidListOption) {
	 		listener.enterMasterUidListOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMasterUidListOption) {
	 		listener.exitMasterUidListOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterUidListOption) {
			return visitor.visitMasterUidListOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MasterDecimalOptionContext extends MasterOptionContext {
	constructor(parser: MySqlParser, ctx: MasterOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public decimalMasterOption(): DecimalMasterOptionContext {
		return this.getTypedRuleContext(DecimalMasterOptionContext, 0) as DecimalMasterOptionContext;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMasterDecimalOption) {
	 		listener.enterMasterDecimalOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMasterDecimalOption) {
	 		listener.exitMasterDecimalOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterDecimalOption) {
			return visitor.visitMasterDecimalOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringMasterOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MASTER_BIND(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_BIND, 0);
	}
	public MASTER_HOST(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_HOST, 0);
	}
	public MASTER_USER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_USER, 0);
	}
	public MASTER_PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_PASSWORD, 0);
	}
	public MASTER_LOG_FILE(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	}
	public RELAY_LOG_FILE(): TerminalNode {
		return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	}
	public MASTER_SSL_CA(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CA, 0);
	}
	public MASTER_SSL_CAPATH(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CAPATH, 0);
	}
	public MASTER_SSL_CERT(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CERT, 0);
	}
	public MASTER_SSL_CRL(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CRL, 0);
	}
	public MASTER_SSL_CRLPATH(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0);
	}
	public MASTER_SSL_KEY(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_KEY, 0);
	}
	public MASTER_SSL_CIPHER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CIPHER, 0);
	}
	public MASTER_TLS_VERSION(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_TLS_VERSION, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_stringMasterOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStringMasterOption) {
	 		listener.enterStringMasterOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStringMasterOption) {
	 		listener.exitStringMasterOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStringMasterOption) {
			return visitor.visitStringMasterOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DecimalMasterOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MASTER_PORT(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_PORT, 0);
	}
	public MASTER_CONNECT_RETRY(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0);
	}
	public MASTER_RETRY_COUNT(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_RETRY_COUNT, 0);
	}
	public MASTER_DELAY(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_DELAY, 0);
	}
	public MASTER_LOG_POS(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	}
	public RELAY_LOG_POS(): TerminalNode {
		return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_decimalMasterOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDecimalMasterOption) {
	 		listener.enterDecimalMasterOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDecimalMasterOption) {
	 		listener.exitDecimalMasterOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDecimalMasterOption) {
			return visitor.visitDecimalMasterOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BoolMasterOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MASTER_AUTO_POSITION(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_AUTO_POSITION, 0);
	}
	public MASTER_SSL(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL, 0);
	}
	public MASTER_SSL_VERIFY_SERVER_CERT(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_boolMasterOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterBoolMasterOption) {
	 		listener.enterBoolMasterOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitBoolMasterOption) {
	 		listener.exitBoolMasterOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBoolMasterOption) {
			return visitor.visitBoolMasterOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ChannelOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public CHANNEL(): TerminalNode {
		return this.getToken(MySqlParser.CHANNEL, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_channelOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterChannelOption) {
	 		listener.enterChannelOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitChannelOption) {
	 		listener.exitChannelOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitChannelOption) {
			return visitor.visitChannelOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplicationFilterContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_replicationFilter;
	}
	public copyFrom(ctx: ReplicationFilterContext): void {
		super.copyFrom(ctx);
	}
}
export class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
	constructor(parser: MySqlParser, ctx: ReplicationFilterContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REPLICATE_WILD_IGNORE_TABLE(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public simpleStrings(): SimpleStringsContext {
		return this.getTypedRuleContext(SimpleStringsContext, 0) as SimpleStringsContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWildIgnoreTableReplication) {
	 		listener.enterWildIgnoreTableReplication(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWildIgnoreTableReplication) {
	 		listener.exitWildIgnoreTableReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWildIgnoreTableReplication) {
			return visitor.visitWildIgnoreTableReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DoTableReplicationContext extends ReplicationFilterContext {
	constructor(parser: MySqlParser, ctx: ReplicationFilterContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REPLICATE_DO_TABLE(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public tables(): TablesContext {
		return this.getTypedRuleContext(TablesContext, 0) as TablesContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDoTableReplication) {
	 		listener.enterDoTableReplication(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDoTableReplication) {
	 		listener.exitDoTableReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDoTableReplication) {
			return visitor.visitDoTableReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IgnoreTableReplicationContext extends ReplicationFilterContext {
	constructor(parser: MySqlParser, ctx: ReplicationFilterContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REPLICATE_IGNORE_TABLE(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public tables(): TablesContext {
		return this.getTypedRuleContext(TablesContext, 0) as TablesContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIgnoreTableReplication) {
	 		listener.enterIgnoreTableReplication(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIgnoreTableReplication) {
	 		listener.exitIgnoreTableReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIgnoreTableReplication) {
			return visitor.visitIgnoreTableReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RewriteDbReplicationContext extends ReplicationFilterContext {
	constructor(parser: MySqlParser, ctx: ReplicationFilterContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REPLICATE_REWRITE_DB(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public tablePair_list(): TablePairContext[] {
		return this.getTypedRuleContexts(TablePairContext) as TablePairContext[];
	}
	public tablePair(i: number): TablePairContext {
		return this.getTypedRuleContext(TablePairContext, i) as TablePairContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRewriteDbReplication) {
	 		listener.enterRewriteDbReplication(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRewriteDbReplication) {
	 		listener.exitRewriteDbReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRewriteDbReplication) {
			return visitor.visitRewriteDbReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DoDbReplicationContext extends ReplicationFilterContext {
	constructor(parser: MySqlParser, ctx: ReplicationFilterContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REPLICATE_DO_DB(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_DO_DB, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDoDbReplication) {
	 		listener.enterDoDbReplication(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDoDbReplication) {
	 		listener.exitDoDbReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDoDbReplication) {
			return visitor.visitDoDbReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IgnoreDbReplicationContext extends ReplicationFilterContext {
	constructor(parser: MySqlParser, ctx: ReplicationFilterContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REPLICATE_IGNORE_DB(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIgnoreDbReplication) {
	 		listener.enterIgnoreDbReplication(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIgnoreDbReplication) {
	 		listener.exitIgnoreDbReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIgnoreDbReplication) {
			return visitor.visitIgnoreDbReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class WildDoTableReplicationContext extends ReplicationFilterContext {
	constructor(parser: MySqlParser, ctx: ReplicationFilterContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REPLICATE_WILD_DO_TABLE(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public simpleStrings(): SimpleStringsContext {
		return this.getTypedRuleContext(SimpleStringsContext, 0) as SimpleStringsContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWildDoTableReplication) {
	 		listener.enterWildDoTableReplication(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWildDoTableReplication) {
	 		listener.exitWildDoTableReplication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWildDoTableReplication) {
			return visitor.visitWildDoTableReplication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePairContext extends ParserRuleContext {
	public _firstTable!: TableNameContext;
	public _secondTable!: TableNameContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public tableName_list(): TableNameContext[] {
		return this.getTypedRuleContexts(TableNameContext) as TableNameContext[];
	}
	public tableName(i: number): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, i) as TableNameContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tablePair;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTablePair) {
	 		listener.enterTablePair(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTablePair) {
	 		listener.exitTablePair(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTablePair) {
			return visitor.visitTablePair(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ThreadTypeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IO_THREAD(): TerminalNode {
		return this.getToken(MySqlParser.IO_THREAD, 0);
	}
	public SQL_THREAD(): TerminalNode {
		return this.getToken(MySqlParser.SQL_THREAD, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_threadType;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterThreadType) {
	 		listener.enterThreadType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitThreadType) {
	 		listener.exitThreadType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitThreadType) {
			return visitor.visitThreadType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UntilOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_untilOption;
	}
	public copyFrom(ctx: UntilOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class GtidsUntilOptionContext extends UntilOptionContext {
	public _gtids!: Token;
	constructor(parser: MySqlParser, ctx: UntilOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public gtuidSet(): GtuidSetContext {
		return this.getTypedRuleContext(GtuidSetContext, 0) as GtuidSetContext;
	}
	public SQL_BEFORE_GTIDS(): TerminalNode {
		return this.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0);
	}
	public SQL_AFTER_GTIDS(): TerminalNode {
		return this.getToken(MySqlParser.SQL_AFTER_GTIDS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterGtidsUntilOption) {
	 		listener.enterGtidsUntilOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitGtidsUntilOption) {
	 		listener.exitGtidsUntilOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGtidsUntilOption) {
			return visitor.visitGtidsUntilOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SqlGapsUntilOptionContext extends UntilOptionContext {
	constructor(parser: MySqlParser, ctx: UntilOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SQL_AFTER_MTS_GAPS(): TerminalNode {
		return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSqlGapsUntilOption) {
	 		listener.enterSqlGapsUntilOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSqlGapsUntilOption) {
	 		listener.exitSqlGapsUntilOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSqlGapsUntilOption) {
			return visitor.visitSqlGapsUntilOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MasterLogUntilOptionContext extends UntilOptionContext {
	constructor(parser: MySqlParser, ctx: UntilOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public MASTER_LOG_FILE(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
	public MASTER_LOG_POS(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMasterLogUntilOption) {
	 		listener.enterMasterLogUntilOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMasterLogUntilOption) {
	 		listener.exitMasterLogUntilOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMasterLogUntilOption) {
			return visitor.visitMasterLogUntilOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RelayLogUntilOptionContext extends UntilOptionContext {
	constructor(parser: MySqlParser, ctx: UntilOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RELAY_LOG_FILE(): TerminalNode {
		return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
	public RELAY_LOG_POS(): TerminalNode {
		return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRelayLogUntilOption) {
	 		listener.enterRelayLogUntilOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRelayLogUntilOption) {
	 		listener.exitRelayLogUntilOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRelayLogUntilOption) {
			return visitor.visitRelayLogUntilOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConnectionOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_connectionOption;
	}
	public copyFrom(ctx: ConnectionOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class PluginDirConnectionOptionContext extends ConnectionOptionContext {
	public _conOptPluginDir!: Token;
	constructor(parser: MySqlParser, ctx: ConnectionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PLUGIN_DIR(): TerminalNode {
		return this.getToken(MySqlParser.PLUGIN_DIR, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPluginDirConnectionOption) {
	 		listener.enterPluginDirConnectionOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPluginDirConnectionOption) {
	 		listener.exitPluginDirConnectionOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPluginDirConnectionOption) {
			return visitor.visitPluginDirConnectionOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UserConnectionOptionContext extends ConnectionOptionContext {
	public _conOptUser!: Token;
	constructor(parser: MySqlParser, ctx: ConnectionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUserConnectionOption) {
	 		listener.enterUserConnectionOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUserConnectionOption) {
	 		listener.exitUserConnectionOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserConnectionOption) {
			return visitor.visitUserConnectionOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
	public _conOptDefAuth!: Token;
	constructor(parser: MySqlParser, ctx: ConnectionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DEFAULT_AUTH(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT_AUTH, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDefaultAuthConnectionOption) {
	 		listener.enterDefaultAuthConnectionOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDefaultAuthConnectionOption) {
	 		listener.exitDefaultAuthConnectionOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefaultAuthConnectionOption) {
			return visitor.visitDefaultAuthConnectionOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PasswordConnectionOptionContext extends ConnectionOptionContext {
	public _conOptPassword!: Token;
	constructor(parser: MySqlParser, ctx: ConnectionOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPasswordConnectionOption) {
	 		listener.enterPasswordConnectionOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPasswordConnectionOption) {
	 		listener.exitPasswordConnectionOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPasswordConnectionOption) {
			return visitor.visitPasswordConnectionOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GtuidSetContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uuidSet_list(): UuidSetContext[] {
		return this.getTypedRuleContexts(UuidSetContext) as UuidSetContext[];
	}
	public uuidSet(i: number): UuidSetContext {
		return this.getTypedRuleContext(UuidSetContext, i) as UuidSetContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_gtuidSet;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterGtuidSet) {
	 		listener.enterGtuidSet(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitGtuidSet) {
	 		listener.exitGtuidSet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGtuidSet) {
			return visitor.visitGtuidSet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaStartTransactionContext extends ParserRuleContext {
	public _xaStart!: Token;
	public _xaAction!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public XA(): TerminalNode {
		return this.getToken(MySqlParser.XA, 0);
	}
	public xid(): XidContext {
		return this.getTypedRuleContext(XidContext, 0) as XidContext;
	}
	public START(): TerminalNode {
		return this.getToken(MySqlParser.START, 0);
	}
	public BEGIN(): TerminalNode {
		return this.getToken(MySqlParser.BEGIN, 0);
	}
	public JOIN(): TerminalNode {
		return this.getToken(MySqlParser.JOIN, 0);
	}
	public RESUME(): TerminalNode {
		return this.getToken(MySqlParser.RESUME, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_xaStartTransaction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterXaStartTransaction) {
	 		listener.enterXaStartTransaction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitXaStartTransaction) {
	 		listener.exitXaStartTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaStartTransaction) {
			return visitor.visitXaStartTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaEndTransactionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public XA(): TerminalNode {
		return this.getToken(MySqlParser.XA, 0);
	}
	public END(): TerminalNode {
		return this.getToken(MySqlParser.END, 0);
	}
	public xid(): XidContext {
		return this.getTypedRuleContext(XidContext, 0) as XidContext;
	}
	public SUSPEND(): TerminalNode {
		return this.getToken(MySqlParser.SUSPEND, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public MIGRATE(): TerminalNode {
		return this.getToken(MySqlParser.MIGRATE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_xaEndTransaction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterXaEndTransaction) {
	 		listener.enterXaEndTransaction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitXaEndTransaction) {
	 		listener.exitXaEndTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaEndTransaction) {
			return visitor.visitXaEndTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaPrepareStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public XA(): TerminalNode {
		return this.getToken(MySqlParser.XA, 0);
	}
	public PREPARE(): TerminalNode {
		return this.getToken(MySqlParser.PREPARE, 0);
	}
	public xid(): XidContext {
		return this.getTypedRuleContext(XidContext, 0) as XidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_xaPrepareStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterXaPrepareStatement) {
	 		listener.enterXaPrepareStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitXaPrepareStatement) {
	 		listener.exitXaPrepareStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaPrepareStatement) {
			return visitor.visitXaPrepareStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaCommitWorkContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public XA(): TerminalNode {
		return this.getToken(MySqlParser.XA, 0);
	}
	public COMMIT(): TerminalNode {
		return this.getToken(MySqlParser.COMMIT, 0);
	}
	public xid(): XidContext {
		return this.getTypedRuleContext(XidContext, 0) as XidContext;
	}
	public ONE(): TerminalNode {
		return this.getToken(MySqlParser.ONE, 0);
	}
	public PHASE(): TerminalNode {
		return this.getToken(MySqlParser.PHASE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_xaCommitWork;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterXaCommitWork) {
	 		listener.enterXaCommitWork(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitXaCommitWork) {
	 		listener.exitXaCommitWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaCommitWork) {
			return visitor.visitXaCommitWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaRollbackWorkContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public XA(): TerminalNode {
		return this.getToken(MySqlParser.XA, 0);
	}
	public ROLLBACK(): TerminalNode {
		return this.getToken(MySqlParser.ROLLBACK, 0);
	}
	public xid(): XidContext {
		return this.getTypedRuleContext(XidContext, 0) as XidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_xaRollbackWork;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterXaRollbackWork) {
	 		listener.enterXaRollbackWork(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitXaRollbackWork) {
	 		listener.exitXaRollbackWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaRollbackWork) {
			return visitor.visitXaRollbackWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XaRecoverWorkContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public XA(): TerminalNode {
		return this.getToken(MySqlParser.XA, 0);
	}
	public RECOVER(): TerminalNode {
		return this.getToken(MySqlParser.RECOVER, 0);
	}
	public CONVERT(): TerminalNode {
		return this.getToken(MySqlParser.CONVERT, 0);
	}
	public xid(): XidContext {
		return this.getTypedRuleContext(XidContext, 0) as XidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_xaRecoverWork;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterXaRecoverWork) {
	 		listener.enterXaRecoverWork(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitXaRecoverWork) {
	 		listener.exitXaRecoverWork(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXaRecoverWork) {
			return visitor.visitXaRecoverWork(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrepareStatementContext extends ParserRuleContext {
	public _query!: Token;
	public _variable!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PREPARE(): TerminalNode {
		return this.getToken(MySqlParser.PREPARE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public LOCAL_ID(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL_ID, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_prepareStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPrepareStatement) {
	 		listener.enterPrepareStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPrepareStatement) {
	 		listener.exitPrepareStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrepareStatement) {
			return visitor.visitPrepareStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecuteStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXECUTE(): TerminalNode {
		return this.getToken(MySqlParser.EXECUTE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public USING(): TerminalNode {
		return this.getToken(MySqlParser.USING, 0);
	}
	public userVariables(): UserVariablesContext {
		return this.getTypedRuleContext(UserVariablesContext, 0) as UserVariablesContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_executeStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterExecuteStatement) {
	 		listener.enterExecuteStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitExecuteStatement) {
	 		listener.exitExecuteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExecuteStatement) {
			return visitor.visitExecuteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeallocatePrepareContext extends ParserRuleContext {
	public _dropFormat!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PREPARE(): TerminalNode {
		return this.getToken(MySqlParser.PREPARE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public DEALLOCATE(): TerminalNode {
		return this.getToken(MySqlParser.DEALLOCATE, 0);
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_deallocatePrepare;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDeallocatePrepare) {
	 		listener.enterDeallocatePrepare(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDeallocatePrepare) {
	 		listener.exitDeallocatePrepare(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeallocatePrepare) {
			return visitor.visitDeallocatePrepare(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoutineBodyContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public blockStatement(): BlockStatementContext {
		return this.getTypedRuleContext(BlockStatementContext, 0) as BlockStatementContext;
	}
	public sqlStatement(): SqlStatementContext {
		return this.getTypedRuleContext(SqlStatementContext, 0) as SqlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_routineBody;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRoutineBody) {
	 		listener.enterRoutineBody(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRoutineBody) {
	 		listener.exitRoutineBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoutineBody) {
			return visitor.visitRoutineBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BEGIN(): TerminalNode {
		return this.getToken(MySqlParser.BEGIN, 0);
	}
	public END(): TerminalNode {
		return this.getToken(MySqlParser.END, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public COLON_SYMB(): TerminalNode {
		return this.getToken(MySqlParser.COLON_SYMB, 0);
	}
	public declareVariable_list(): DeclareVariableContext[] {
		return this.getTypedRuleContexts(DeclareVariableContext) as DeclareVariableContext[];
	}
	public declareVariable(i: number): DeclareVariableContext {
		return this.getTypedRuleContext(DeclareVariableContext, i) as DeclareVariableContext;
	}
	public SEMI_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.SEMI);
	}
	public SEMI(i: number): TerminalNode {
		return this.getToken(MySqlParser.SEMI, i);
	}
	public declareCondition_list(): DeclareConditionContext[] {
		return this.getTypedRuleContexts(DeclareConditionContext) as DeclareConditionContext[];
	}
	public declareCondition(i: number): DeclareConditionContext {
		return this.getTypedRuleContext(DeclareConditionContext, i) as DeclareConditionContext;
	}
	public declareCursor_list(): DeclareCursorContext[] {
		return this.getTypedRuleContexts(DeclareCursorContext) as DeclareCursorContext[];
	}
	public declareCursor(i: number): DeclareCursorContext {
		return this.getTypedRuleContext(DeclareCursorContext, i) as DeclareCursorContext;
	}
	public declareHandler_list(): DeclareHandlerContext[] {
		return this.getTypedRuleContexts(DeclareHandlerContext) as DeclareHandlerContext[];
	}
	public declareHandler(i: number): DeclareHandlerContext {
		return this.getTypedRuleContext(DeclareHandlerContext, i) as DeclareHandlerContext;
	}
	public procedureSqlStatement_list(): ProcedureSqlStatementContext[] {
		return this.getTypedRuleContexts(ProcedureSqlStatementContext) as ProcedureSqlStatementContext[];
	}
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext {
		return this.getTypedRuleContext(ProcedureSqlStatementContext, i) as ProcedureSqlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_blockStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterBlockStatement) {
	 		listener.enterBlockStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitBlockStatement) {
	 		listener.exitBlockStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBlockStatement) {
			return visitor.visitBlockStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CaseStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CASE_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.CASE);
	}
	public CASE(i: number): TerminalNode {
		return this.getToken(MySqlParser.CASE, i);
	}
	public END(): TerminalNode {
		return this.getToken(MySqlParser.END, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public caseAlternative_list(): CaseAlternativeContext[] {
		return this.getTypedRuleContexts(CaseAlternativeContext) as CaseAlternativeContext[];
	}
	public caseAlternative(i: number): CaseAlternativeContext {
		return this.getTypedRuleContext(CaseAlternativeContext, i) as CaseAlternativeContext;
	}
	public ELSE(): TerminalNode {
		return this.getToken(MySqlParser.ELSE, 0);
	}
	public procedureSqlStatement_list(): ProcedureSqlStatementContext[] {
		return this.getTypedRuleContexts(ProcedureSqlStatementContext) as ProcedureSqlStatementContext[];
	}
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext {
		return this.getTypedRuleContext(ProcedureSqlStatementContext, i) as ProcedureSqlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_caseStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCaseStatement) {
	 		listener.enterCaseStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCaseStatement) {
	 		listener.exitCaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCaseStatement) {
			return visitor.visitCaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfStatementContext extends ParserRuleContext {
	public _procedureSqlStatement!: ProcedureSqlStatementContext;
	public _thenStatements: ProcedureSqlStatementContext[] = [];
	public _elseStatements: ProcedureSqlStatementContext[] = [];
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IF_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.IF);
	}
	public IF(i: number): TerminalNode {
		return this.getToken(MySqlParser.IF, i);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public THEN(): TerminalNode {
		return this.getToken(MySqlParser.THEN, 0);
	}
	public END(): TerminalNode {
		return this.getToken(MySqlParser.END, 0);
	}
	public elifAlternative_list(): ElifAlternativeContext[] {
		return this.getTypedRuleContexts(ElifAlternativeContext) as ElifAlternativeContext[];
	}
	public elifAlternative(i: number): ElifAlternativeContext {
		return this.getTypedRuleContext(ElifAlternativeContext, i) as ElifAlternativeContext;
	}
	public ELSE(): TerminalNode {
		return this.getToken(MySqlParser.ELSE, 0);
	}
	public procedureSqlStatement_list(): ProcedureSqlStatementContext[] {
		return this.getTypedRuleContexts(ProcedureSqlStatementContext) as ProcedureSqlStatementContext[];
	}
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext {
		return this.getTypedRuleContext(ProcedureSqlStatementContext, i) as ProcedureSqlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_ifStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIfStatement) {
	 		listener.enterIfStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIfStatement) {
	 		listener.exitIfStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIfStatement) {
			return visitor.visitIfStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IterateStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ITERATE(): TerminalNode {
		return this.getToken(MySqlParser.ITERATE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_iterateStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIterateStatement) {
	 		listener.enterIterateStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIterateStatement) {
	 		listener.exitIterateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIterateStatement) {
			return visitor.visitIterateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LeaveStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LEAVE(): TerminalNode {
		return this.getToken(MySqlParser.LEAVE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_leaveStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLeaveStatement) {
	 		listener.enterLeaveStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLeaveStatement) {
	 		listener.exitLeaveStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLeaveStatement) {
			return visitor.visitLeaveStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoopStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOOP_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LOOP);
	}
	public LOOP(i: number): TerminalNode {
		return this.getToken(MySqlParser.LOOP, i);
	}
	public END(): TerminalNode {
		return this.getToken(MySqlParser.END, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public COLON_SYMB(): TerminalNode {
		return this.getToken(MySqlParser.COLON_SYMB, 0);
	}
	public procedureSqlStatement_list(): ProcedureSqlStatementContext[] {
		return this.getTypedRuleContexts(ProcedureSqlStatementContext) as ProcedureSqlStatementContext[];
	}
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext {
		return this.getTypedRuleContext(ProcedureSqlStatementContext, i) as ProcedureSqlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_loopStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLoopStatement) {
	 		listener.enterLoopStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLoopStatement) {
	 		listener.exitLoopStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLoopStatement) {
			return visitor.visitLoopStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RepeatStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPEAT_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.REPEAT);
	}
	public REPEAT(i: number): TerminalNode {
		return this.getToken(MySqlParser.REPEAT, i);
	}
	public UNTIL(): TerminalNode {
		return this.getToken(MySqlParser.UNTIL, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public END(): TerminalNode {
		return this.getToken(MySqlParser.END, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public COLON_SYMB(): TerminalNode {
		return this.getToken(MySqlParser.COLON_SYMB, 0);
	}
	public procedureSqlStatement_list(): ProcedureSqlStatementContext[] {
		return this.getTypedRuleContexts(ProcedureSqlStatementContext) as ProcedureSqlStatementContext[];
	}
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext {
		return this.getTypedRuleContext(ProcedureSqlStatementContext, i) as ProcedureSqlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_repeatStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRepeatStatement) {
	 		listener.enterRepeatStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRepeatStatement) {
	 		listener.exitRepeatStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRepeatStatement) {
			return visitor.visitRepeatStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReturnStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RETURN(): TerminalNode {
		return this.getToken(MySqlParser.RETURN, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_returnStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterReturnStatement) {
	 		listener.enterReturnStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitReturnStatement) {
	 		listener.exitReturnStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitReturnStatement) {
			return visitor.visitReturnStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhileStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHILE_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.WHILE);
	}
	public WHILE(i: number): TerminalNode {
		return this.getToken(MySqlParser.WHILE, i);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public DO(): TerminalNode {
		return this.getToken(MySqlParser.DO, 0);
	}
	public END(): TerminalNode {
		return this.getToken(MySqlParser.END, 0);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public COLON_SYMB(): TerminalNode {
		return this.getToken(MySqlParser.COLON_SYMB, 0);
	}
	public procedureSqlStatement_list(): ProcedureSqlStatementContext[] {
		return this.getTypedRuleContexts(ProcedureSqlStatementContext) as ProcedureSqlStatementContext[];
	}
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext {
		return this.getTypedRuleContext(ProcedureSqlStatementContext, i) as ProcedureSqlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_whileStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWhileStatement) {
	 		listener.enterWhileStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWhileStatement) {
	 		listener.exitWhileStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWhileStatement) {
			return visitor.visitWhileStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CursorStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_cursorStatement;
	}
	public copyFrom(ctx: CursorStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class CloseCursorContext extends CursorStatementContext {
	constructor(parser: MySqlParser, ctx: CursorStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CLOSE(): TerminalNode {
		return this.getToken(MySqlParser.CLOSE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCloseCursor) {
	 		listener.enterCloseCursor(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCloseCursor) {
	 		listener.exitCloseCursor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCloseCursor) {
			return visitor.visitCloseCursor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class OpenCursorContext extends CursorStatementContext {
	constructor(parser: MySqlParser, ctx: CursorStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public OPEN(): TerminalNode {
		return this.getToken(MySqlParser.OPEN, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterOpenCursor) {
	 		listener.enterOpenCursor(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitOpenCursor) {
	 		listener.exitOpenCursor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOpenCursor) {
			return visitor.visitOpenCursor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FetchCursorContext extends CursorStatementContext {
	constructor(parser: MySqlParser, ctx: CursorStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public FETCH(): TerminalNode {
		return this.getToken(MySqlParser.FETCH, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public NEXT(): TerminalNode {
		return this.getToken(MySqlParser.NEXT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFetchCursor) {
	 		listener.enterFetchCursor(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFetchCursor) {
	 		listener.exitFetchCursor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFetchCursor) {
			return visitor.visitFetchCursor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclareVariableContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECLARE(): TerminalNode {
		return this.getToken(MySqlParser.DECLARE, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public dataType(): DataTypeContext {
		return this.getTypedRuleContext(DataTypeContext, 0) as DataTypeContext;
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_declareVariable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDeclareVariable) {
	 		listener.enterDeclareVariable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDeclareVariable) {
	 		listener.exitDeclareVariable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeclareVariable) {
			return visitor.visitDeclareVariable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclareConditionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECLARE(): TerminalNode {
		return this.getToken(MySqlParser.DECLARE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public CONDITION(): TerminalNode {
		return this.getToken(MySqlParser.CONDITION, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public SQLSTATE(): TerminalNode {
		return this.getToken(MySqlParser.SQLSTATE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public VALUE(): TerminalNode {
		return this.getToken(MySqlParser.VALUE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_declareCondition;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDeclareCondition) {
	 		listener.enterDeclareCondition(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDeclareCondition) {
	 		listener.exitDeclareCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeclareCondition) {
			return visitor.visitDeclareCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclareCursorContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECLARE(): TerminalNode {
		return this.getToken(MySqlParser.DECLARE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public CURSOR(): TerminalNode {
		return this.getToken(MySqlParser.CURSOR, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_declareCursor;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDeclareCursor) {
	 		listener.enterDeclareCursor(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDeclareCursor) {
	 		listener.exitDeclareCursor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeclareCursor) {
			return visitor.visitDeclareCursor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclareHandlerContext extends ParserRuleContext {
	public _handlerAction!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECLARE(): TerminalNode {
		return this.getToken(MySqlParser.DECLARE, 0);
	}
	public HANDLER(): TerminalNode {
		return this.getToken(MySqlParser.HANDLER, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public handlerConditionValue_list(): HandlerConditionValueContext[] {
		return this.getTypedRuleContexts(HandlerConditionValueContext) as HandlerConditionValueContext[];
	}
	public handlerConditionValue(i: number): HandlerConditionValueContext {
		return this.getTypedRuleContext(HandlerConditionValueContext, i) as HandlerConditionValueContext;
	}
	public routineBody(): RoutineBodyContext {
		return this.getTypedRuleContext(RoutineBodyContext, 0) as RoutineBodyContext;
	}
	public CONTINUE(): TerminalNode {
		return this.getToken(MySqlParser.CONTINUE, 0);
	}
	public EXIT(): TerminalNode {
		return this.getToken(MySqlParser.EXIT, 0);
	}
	public UNDO(): TerminalNode {
		return this.getToken(MySqlParser.UNDO, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_declareHandler;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDeclareHandler) {
	 		listener.enterDeclareHandler(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDeclareHandler) {
	 		listener.exitDeclareHandler(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDeclareHandler) {
			return visitor.visitDeclareHandler(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HandlerConditionValueContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_handlerConditionValue;
	}
	public copyFrom(ctx: HandlerConditionValueContext): void {
		super.copyFrom(ctx);
	}
}
export class HandlerConditionWarningContext extends HandlerConditionValueContext {
	constructor(parser: MySqlParser, ctx: HandlerConditionValueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SQLWARNING(): TerminalNode {
		return this.getToken(MySqlParser.SQLWARNING, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerConditionWarning) {
	 		listener.enterHandlerConditionWarning(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerConditionWarning) {
	 		listener.exitHandlerConditionWarning(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionWarning) {
			return visitor.visitHandlerConditionWarning(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HandlerConditionCodeContext extends HandlerConditionValueContext {
	constructor(parser: MySqlParser, ctx: HandlerConditionValueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerConditionCode) {
	 		listener.enterHandlerConditionCode(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerConditionCode) {
	 		listener.exitHandlerConditionCode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionCode) {
			return visitor.visitHandlerConditionCode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
	constructor(parser: MySqlParser, ctx: HandlerConditionValueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public FOUND(): TerminalNode {
		return this.getToken(MySqlParser.FOUND, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerConditionNotfound) {
	 		listener.enterHandlerConditionNotfound(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerConditionNotfound) {
	 		listener.exitHandlerConditionNotfound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionNotfound) {
			return visitor.visitHandlerConditionNotfound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HandlerConditionStateContext extends HandlerConditionValueContext {
	constructor(parser: MySqlParser, ctx: HandlerConditionValueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SQLSTATE(): TerminalNode {
		return this.getToken(MySqlParser.SQLSTATE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public VALUE(): TerminalNode {
		return this.getToken(MySqlParser.VALUE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerConditionState) {
	 		listener.enterHandlerConditionState(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerConditionState) {
	 		listener.exitHandlerConditionState(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionState) {
			return visitor.visitHandlerConditionState(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HandlerConditionExceptionContext extends HandlerConditionValueContext {
	constructor(parser: MySqlParser, ctx: HandlerConditionValueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SQLEXCEPTION(): TerminalNode {
		return this.getToken(MySqlParser.SQLEXCEPTION, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerConditionException) {
	 		listener.enterHandlerConditionException(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerConditionException) {
	 		listener.exitHandlerConditionException(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionException) {
			return visitor.visitHandlerConditionException(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HandlerConditionNameContext extends HandlerConditionValueContext {
	constructor(parser: MySqlParser, ctx: HandlerConditionValueContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHandlerConditionName) {
	 		listener.enterHandlerConditionName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHandlerConditionName) {
	 		listener.exitHandlerConditionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHandlerConditionName) {
			return visitor.visitHandlerConditionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureSqlStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SEMI(): TerminalNode {
		return this.getToken(MySqlParser.SEMI, 0);
	}
	public compoundStatement(): CompoundStatementContext {
		return this.getTypedRuleContext(CompoundStatementContext, 0) as CompoundStatementContext;
	}
	public sqlStatement(): SqlStatementContext {
		return this.getTypedRuleContext(SqlStatementContext, 0) as SqlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_procedureSqlStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterProcedureSqlStatement) {
	 		listener.enterProcedureSqlStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitProcedureSqlStatement) {
	 		listener.exitProcedureSqlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitProcedureSqlStatement) {
			return visitor.visitProcedureSqlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CaseAlternativeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHEN(): TerminalNode {
		return this.getToken(MySqlParser.WHEN, 0);
	}
	public THEN(): TerminalNode {
		return this.getToken(MySqlParser.THEN, 0);
	}
	public constant(): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, 0) as ConstantContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public procedureSqlStatement_list(): ProcedureSqlStatementContext[] {
		return this.getTypedRuleContexts(ProcedureSqlStatementContext) as ProcedureSqlStatementContext[];
	}
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext {
		return this.getTypedRuleContext(ProcedureSqlStatementContext, i) as ProcedureSqlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_caseAlternative;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCaseAlternative) {
	 		listener.enterCaseAlternative(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCaseAlternative) {
	 		listener.exitCaseAlternative(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCaseAlternative) {
			return visitor.visitCaseAlternative(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ElifAlternativeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ELSEIF(): TerminalNode {
		return this.getToken(MySqlParser.ELSEIF, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public THEN(): TerminalNode {
		return this.getToken(MySqlParser.THEN, 0);
	}
	public procedureSqlStatement_list(): ProcedureSqlStatementContext[] {
		return this.getTypedRuleContexts(ProcedureSqlStatementContext) as ProcedureSqlStatementContext[];
	}
	public procedureSqlStatement(i: number): ProcedureSqlStatementContext {
		return this.getTypedRuleContext(ProcedureSqlStatementContext, i) as ProcedureSqlStatementContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_elifAlternative;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterElifAlternative) {
	 		listener.enterElifAlternative(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitElifAlternative) {
	 		listener.exitElifAlternative(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitElifAlternative) {
			return visitor.visitElifAlternative(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterUserContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_alterUser;
	}
	public copyFrom(ctx: AlterUserContext): void {
		super.copyFrom(ctx);
	}
}
export class AlterUserMysqlV80Context extends AlterUserContext {
	public _tlsNone!: Token;
	constructor(parser: MySqlParser, ctx: AlterUserContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public userAuthOption_list(): UserAuthOptionContext[] {
		return this.getTypedRuleContexts(UserAuthOptionContext) as UserAuthOptionContext[];
	}
	public userAuthOption(i: number): UserAuthOptionContext {
		return this.getTypedRuleContext(UserAuthOptionContext, i) as UserAuthOptionContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public REQUIRE(): TerminalNode {
		return this.getToken(MySqlParser.REQUIRE, 0);
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public userPasswordOption_list(): UserPasswordOptionContext[] {
		return this.getTypedRuleContexts(UserPasswordOptionContext) as UserPasswordOptionContext[];
	}
	public userPasswordOption(i: number): UserPasswordOptionContext {
		return this.getTypedRuleContext(UserPasswordOptionContext, i) as UserPasswordOptionContext;
	}
	public userLockOption_list(): UserLockOptionContext[] {
		return this.getTypedRuleContexts(UserLockOptionContext) as UserLockOptionContext[];
	}
	public userLockOption(i: number): UserLockOptionContext {
		return this.getTypedRuleContext(UserLockOptionContext, i) as UserLockOptionContext;
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public ATTRIBUTE(): TerminalNode {
		return this.getToken(MySqlParser.ATTRIBUTE, 0);
	}
	public tlsOption_list(): TlsOptionContext[] {
		return this.getTypedRuleContexts(TlsOptionContext) as TlsOptionContext[];
	}
	public tlsOption(i: number): TlsOptionContext {
		return this.getTypedRuleContext(TlsOptionContext, i) as TlsOptionContext;
	}
	public NONE(): TerminalNode {
		return this.getToken(MySqlParser.NONE, 0);
	}
	public userResourceOption_list(): UserResourceOptionContext[] {
		return this.getTypedRuleContexts(UserResourceOptionContext) as UserResourceOptionContext[];
	}
	public userResourceOption(i: number): UserResourceOptionContext {
		return this.getTypedRuleContext(UserResourceOptionContext, i) as UserResourceOptionContext;
	}
	public AND_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.AND);
	}
	public AND(i: number): TerminalNode {
		return this.getToken(MySqlParser.AND, i);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public ROLE(): TerminalNode {
		return this.getToken(MySqlParser.ROLE, 0);
	}
	public roleOption(): RoleOptionContext {
		return this.getTypedRuleContext(RoleOptionContext, 0) as RoleOptionContext;
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterUserMysqlV80) {
	 		listener.enterAlterUserMysqlV80(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterUserMysqlV80) {
	 		listener.exitAlterUserMysqlV80(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterUserMysqlV80) {
			return visitor.visitAlterUserMysqlV80(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AlterUserMysqlV56Context extends AlterUserContext {
	constructor(parser: MySqlParser, ctx: AlterUserContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public userSpecification_list(): UserSpecificationContext[] {
		return this.getTypedRuleContexts(UserSpecificationContext) as UserSpecificationContext[];
	}
	public userSpecification(i: number): UserSpecificationContext {
		return this.getTypedRuleContext(UserSpecificationContext, i) as UserSpecificationContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAlterUserMysqlV56) {
	 		listener.enterAlterUserMysqlV56(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAlterUserMysqlV56) {
	 		listener.exitAlterUserMysqlV56(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAlterUserMysqlV56) {
			return visitor.visitAlterUserMysqlV56(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateUserContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createUser;
	}
	public copyFrom(ctx: CreateUserContext): void {
		super.copyFrom(ctx);
	}
}
export class CreateUserMysqlV56Context extends CreateUserContext {
	constructor(parser: MySqlParser, ctx: CreateUserContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public userAuthOption_list(): UserAuthOptionContext[] {
		return this.getTypedRuleContexts(UserAuthOptionContext) as UserAuthOptionContext[];
	}
	public userAuthOption(i: number): UserAuthOptionContext {
		return this.getTypedRuleContext(UserAuthOptionContext, i) as UserAuthOptionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateUserMysqlV56) {
	 		listener.enterCreateUserMysqlV56(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateUserMysqlV56) {
	 		listener.exitCreateUserMysqlV56(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateUserMysqlV56) {
			return visitor.visitCreateUserMysqlV56(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CreateUserMysqlV80Context extends CreateUserContext {
	public _tlsNone!: Token;
	constructor(parser: MySqlParser, ctx: CreateUserContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public userAuthOption_list(): UserAuthOptionContext[] {
		return this.getTypedRuleContexts(UserAuthOptionContext) as UserAuthOptionContext[];
	}
	public userAuthOption(i: number): UserAuthOptionContext {
		return this.getTypedRuleContext(UserAuthOptionContext, i) as UserAuthOptionContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public ROLE(): TerminalNode {
		return this.getToken(MySqlParser.ROLE, 0);
	}
	public roleOption(): RoleOptionContext {
		return this.getTypedRuleContext(RoleOptionContext, 0) as RoleOptionContext;
	}
	public REQUIRE(): TerminalNode {
		return this.getToken(MySqlParser.REQUIRE, 0);
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public userPasswordOption_list(): UserPasswordOptionContext[] {
		return this.getTypedRuleContexts(UserPasswordOptionContext) as UserPasswordOptionContext[];
	}
	public userPasswordOption(i: number): UserPasswordOptionContext {
		return this.getTypedRuleContext(UserPasswordOptionContext, i) as UserPasswordOptionContext;
	}
	public userLockOption_list(): UserLockOptionContext[] {
		return this.getTypedRuleContexts(UserLockOptionContext) as UserLockOptionContext[];
	}
	public userLockOption(i: number): UserLockOptionContext {
		return this.getTypedRuleContext(UserLockOptionContext, i) as UserLockOptionContext;
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public ATTRIBUTE(): TerminalNode {
		return this.getToken(MySqlParser.ATTRIBUTE, 0);
	}
	public tlsOption_list(): TlsOptionContext[] {
		return this.getTypedRuleContexts(TlsOptionContext) as TlsOptionContext[];
	}
	public tlsOption(i: number): TlsOptionContext {
		return this.getTypedRuleContext(TlsOptionContext, i) as TlsOptionContext;
	}
	public NONE(): TerminalNode {
		return this.getToken(MySqlParser.NONE, 0);
	}
	public userResourceOption_list(): UserResourceOptionContext[] {
		return this.getTypedRuleContexts(UserResourceOptionContext) as UserResourceOptionContext[];
	}
	public userResourceOption(i: number): UserResourceOptionContext {
		return this.getTypedRuleContext(UserResourceOptionContext, i) as UserResourceOptionContext;
	}
	public AND_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.AND);
	}
	public AND(i: number): TerminalNode {
		return this.getToken(MySqlParser.AND, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateUserMysqlV80) {
	 		listener.enterCreateUserMysqlV80(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateUserMysqlV80) {
	 		listener.exitCreateUserMysqlV80(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateUserMysqlV80) {
			return visitor.visitCreateUserMysqlV80(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropUserContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public userName_list(): UserNameContext[] {
		return this.getTypedRuleContexts(UserNameContext) as UserNameContext[];
	}
	public userName(i: number): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, i) as UserNameContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dropUser;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDropUser) {
	 		listener.enterDropUser(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDropUser) {
	 		listener.exitDropUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDropUser) {
			return visitor.visitDropUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantStatementContext extends ParserRuleContext {
	public _privilegeObject!: Token;
	public _tlsNone!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRANT_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.GRANT);
	}
	public GRANT(i: number): TerminalNode {
		return this.getToken(MySqlParser.GRANT, i);
	}
	public privelegeClause_list(): PrivelegeClauseContext[] {
		return this.getTypedRuleContexts(PrivelegeClauseContext) as PrivelegeClauseContext[];
	}
	public privelegeClause(i: number): PrivelegeClauseContext {
		return this.getTypedRuleContext(PrivelegeClauseContext, i) as PrivelegeClauseContext;
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public privilegeLevel(): PrivilegeLevelContext {
		return this.getTypedRuleContext(PrivilegeLevelContext, 0) as PrivilegeLevelContext;
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public userAuthOption_list(): UserAuthOptionContext[] {
		return this.getTypedRuleContexts(UserAuthOptionContext) as UserAuthOptionContext[];
	}
	public userAuthOption(i: number): UserAuthOptionContext {
		return this.getTypedRuleContext(UserAuthOptionContext, i) as UserAuthOptionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public REQUIRE(): TerminalNode {
		return this.getToken(MySqlParser.REQUIRE, 0);
	}
	public WITH_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.WITH);
	}
	public WITH(i: number): TerminalNode {
		return this.getToken(MySqlParser.WITH, i);
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public userName_list(): UserNameContext[] {
		return this.getTypedRuleContexts(UserNameContext) as UserNameContext[];
	}
	public userName(i: number): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, i) as UserNameContext;
	}
	public ROLE(): TerminalNode {
		return this.getToken(MySqlParser.ROLE, 0);
	}
	public roleOption(): RoleOptionContext {
		return this.getTypedRuleContext(RoleOptionContext, 0) as RoleOptionContext;
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.FUNCTION, 0);
	}
	public PROCEDURE(): TerminalNode {
		return this.getToken(MySqlParser.PROCEDURE, 0);
	}
	public tlsOption_list(): TlsOptionContext[] {
		return this.getTypedRuleContexts(TlsOptionContext) as TlsOptionContext[];
	}
	public tlsOption(i: number): TlsOptionContext {
		return this.getTypedRuleContext(TlsOptionContext, i) as TlsOptionContext;
	}
	public NONE(): TerminalNode {
		return this.getToken(MySqlParser.NONE, 0);
	}
	public OPTION_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.OPTION);
	}
	public OPTION(i: number): TerminalNode {
		return this.getToken(MySqlParser.OPTION, i);
	}
	public userResourceOption_list(): UserResourceOptionContext[] {
		return this.getTypedRuleContexts(UserResourceOptionContext) as UserResourceOptionContext[];
	}
	public userResourceOption(i: number): UserResourceOptionContext {
		return this.getTypedRuleContext(UserResourceOptionContext, i) as UserResourceOptionContext;
	}
	public AND_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.AND);
	}
	public AND(i: number): TerminalNode {
		return this.getToken(MySqlParser.AND, i);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.ADMIN, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_grantStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterGrantStatement) {
	 		listener.enterGrantStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitGrantStatement) {
	 		listener.exitGrantStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGrantStatement) {
			return visitor.visitGrantStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoleOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public NONE(): TerminalNode {
		return this.getToken(MySqlParser.NONE, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public EXCEPT(): TerminalNode {
		return this.getToken(MySqlParser.EXCEPT, 0);
	}
	public userName_list(): UserNameContext[] {
		return this.getTypedRuleContexts(UserNameContext) as UserNameContext[];
	}
	public userName(i: number): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, i) as UserNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_roleOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRoleOption) {
	 		listener.enterRoleOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRoleOption) {
	 		listener.exitRoleOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoleOption) {
			return visitor.visitRoleOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantProxyContext extends ParserRuleContext {
	public _fromFirst!: UserNameContext;
	public _toFirst!: UserNameContext;
	public _userName!: UserNameContext;
	public _toOther: UserNameContext[] = [];
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GRANT_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.GRANT);
	}
	public GRANT(i: number): TerminalNode {
		return this.getToken(MySqlParser.GRANT, i);
	}
	public PROXY(): TerminalNode {
		return this.getToken(MySqlParser.PROXY, 0);
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public userName_list(): UserNameContext[] {
		return this.getTypedRuleContexts(UserNameContext) as UserNameContext[];
	}
	public userName(i: number): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, i) as UserNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public OPTION(): TerminalNode {
		return this.getToken(MySqlParser.OPTION, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_grantProxy;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterGrantProxy) {
	 		listener.enterGrantProxy(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitGrantProxy) {
	 		listener.exitGrantProxy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGrantProxy) {
			return visitor.visitGrantProxy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameUserContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RENAME(): TerminalNode {
		return this.getToken(MySqlParser.RENAME, 0);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public renameUserClause_list(): RenameUserClauseContext[] {
		return this.getTypedRuleContexts(RenameUserClauseContext) as RenameUserClauseContext[];
	}
	public renameUserClause(i: number): RenameUserClauseContext {
		return this.getTypedRuleContext(RenameUserClauseContext, i) as RenameUserClauseContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_renameUser;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRenameUser) {
	 		listener.enterRenameUser(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRenameUser) {
	 		listener.exitRenameUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRenameUser) {
			return visitor.visitRenameUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokeStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_revokeStatement;
	}
	public copyFrom(ctx: RevokeStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class DetailRevokeContext extends RevokeStatementContext {
	public _privilegeObject!: Token;
	constructor(parser: MySqlParser, ctx: RevokeStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REVOKE(): TerminalNode {
		return this.getToken(MySqlParser.REVOKE, 0);
	}
	public privelegeClause_list(): PrivelegeClauseContext[] {
		return this.getTypedRuleContexts(PrivelegeClauseContext) as PrivelegeClauseContext[];
	}
	public privelegeClause(i: number): PrivelegeClauseContext {
		return this.getTypedRuleContext(PrivelegeClauseContext, i) as PrivelegeClauseContext;
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public privilegeLevel(): PrivilegeLevelContext {
		return this.getTypedRuleContext(PrivilegeLevelContext, 0) as PrivilegeLevelContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public userName_list(): UserNameContext[] {
		return this.getTypedRuleContexts(UserNameContext) as UserNameContext[];
	}
	public userName(i: number): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, i) as UserNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.FUNCTION, 0);
	}
	public PROCEDURE(): TerminalNode {
		return this.getToken(MySqlParser.PROCEDURE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDetailRevoke) {
	 		listener.enterDetailRevoke(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDetailRevoke) {
	 		listener.exitDetailRevoke(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDetailRevoke) {
			return visitor.visitDetailRevoke(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RoleRevokeContext extends RevokeStatementContext {
	constructor(parser: MySqlParser, ctx: RevokeStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REVOKE(): TerminalNode {
		return this.getToken(MySqlParser.REVOKE, 0);
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public userName_list(): UserNameContext[] {
		return this.getTypedRuleContexts(UserNameContext) as UserNameContext[];
	}
	public userName(i: number): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, i) as UserNameContext;
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRoleRevoke) {
	 		listener.enterRoleRevoke(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRoleRevoke) {
	 		listener.exitRoleRevoke(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoleRevoke) {
			return visitor.visitRoleRevoke(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShortRevokeContext extends RevokeStatementContext {
	constructor(parser: MySqlParser, ctx: RevokeStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public REVOKE(): TerminalNode {
		return this.getToken(MySqlParser.REVOKE, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public GRANT(): TerminalNode {
		return this.getToken(MySqlParser.GRANT, 0);
	}
	public OPTION(): TerminalNode {
		return this.getToken(MySqlParser.OPTION, 0);
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public userName_list(): UserNameContext[] {
		return this.getTypedRuleContexts(UserNameContext) as UserNameContext[];
	}
	public userName(i: number): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, i) as UserNameContext;
	}
	public PRIVILEGES(): TerminalNode {
		return this.getToken(MySqlParser.PRIVILEGES, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShortRevoke) {
	 		listener.enterShortRevoke(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShortRevoke) {
	 		listener.exitShortRevoke(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShortRevoke) {
			return visitor.visitShortRevoke(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokeProxyContext extends ParserRuleContext {
	public _onUser!: UserNameContext;
	public _fromFirst!: UserNameContext;
	public _userName!: UserNameContext;
	public _fromOther: UserNameContext[] = [];
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REVOKE(): TerminalNode {
		return this.getToken(MySqlParser.REVOKE, 0);
	}
	public PROXY(): TerminalNode {
		return this.getToken(MySqlParser.PROXY, 0);
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public userName_list(): UserNameContext[] {
		return this.getTypedRuleContexts(UserNameContext) as UserNameContext[];
	}
	public userName(i: number): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, i) as UserNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_revokeProxy;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRevokeProxy) {
	 		listener.enterRevokeProxy(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRevokeProxy) {
	 		listener.exitRevokeProxy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRevokeProxy) {
			return visitor.visitRevokeProxy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetPasswordStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		return this.getTypedRuleContext(PasswordFunctionClauseContext, 0) as PasswordFunctionClauseContext;
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_setPasswordStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetPasswordStatement) {
	 		listener.enterSetPasswordStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetPasswordStatement) {
	 		listener.exitSetPasswordStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetPasswordStatement) {
			return visitor.visitSetPasswordStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserSpecificationContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public userPasswordOption(): UserPasswordOptionContext {
		return this.getTypedRuleContext(UserPasswordOptionContext, 0) as UserPasswordOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_userSpecification;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUserSpecification) {
	 		listener.enterUserSpecification(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUserSpecification) {
	 		listener.exitUserSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserSpecification) {
			return visitor.visitUserSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserAuthOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_userAuthOption;
	}
	public copyFrom(ctx: UserAuthOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class SimpleAuthOptionContext extends UserAuthOptionContext {
	constructor(parser: MySqlParser, ctx: UserAuthOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSimpleAuthOption) {
	 		listener.enterSimpleAuthOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSimpleAuthOption) {
	 		listener.exitSimpleAuthOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleAuthOption) {
			return visitor.visitSimpleAuthOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ModuleAuthOptionContext extends UserAuthOptionContext {
	constructor(parser: MySqlParser, ctx: UserAuthOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public IDENTIFIED(): TerminalNode {
		return this.getToken(MySqlParser.IDENTIFIED, 0);
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public authenticationRule(): AuthenticationRuleContext {
		return this.getTypedRuleContext(AuthenticationRuleContext, 0) as AuthenticationRuleContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterModuleAuthOption) {
	 		listener.enterModuleAuthOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitModuleAuthOption) {
	 		listener.exitModuleAuthOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitModuleAuthOption) {
			return visitor.visitModuleAuthOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RandomAuthOptionContext extends UserAuthOptionContext {
	constructor(parser: MySqlParser, ctx: UserAuthOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public IDENTIFIED(): TerminalNode {
		return this.getToken(MySqlParser.IDENTIFIED, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public RANDOM(): TerminalNode {
		return this.getToken(MySqlParser.RANDOM, 0);
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
	public authOptionClause(): AuthOptionClauseContext {
		return this.getTypedRuleContext(AuthOptionClauseContext, 0) as AuthOptionClauseContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRandomAuthOption) {
	 		listener.enterRandomAuthOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRandomAuthOption) {
	 		listener.exitRandomAuthOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRandomAuthOption) {
			return visitor.visitRandomAuthOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class StringAuthOptionContext extends UserAuthOptionContext {
	constructor(parser: MySqlParser, ctx: UserAuthOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public IDENTIFIED(): TerminalNode {
		return this.getToken(MySqlParser.IDENTIFIED, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public authOptionClause(): AuthOptionClauseContext {
		return this.getTypedRuleContext(AuthOptionClauseContext, 0) as AuthOptionClauseContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStringAuthOption) {
	 		listener.enterStringAuthOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStringAuthOption) {
	 		listener.exitStringAuthOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStringAuthOption) {
			return visitor.visitStringAuthOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class HashAuthOptionContext extends UserAuthOptionContext {
	public _hashed!: Token;
	constructor(parser: MySqlParser, ctx: UserAuthOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public IDENTIFIED(): TerminalNode {
		return this.getToken(MySqlParser.IDENTIFIED, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHashAuthOption) {
	 		listener.enterHashAuthOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHashAuthOption) {
	 		listener.exitHashAuthOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHashAuthOption) {
			return visitor.visitHashAuthOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthOptionClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPLACE(): TerminalNode {
		return this.getToken(MySqlParser.REPLACE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public RETAIN(): TerminalNode {
		return this.getToken(MySqlParser.RETAIN, 0);
	}
	public CURRENT(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT, 0);
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_authOptionClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAuthOptionClause) {
	 		listener.enterAuthOptionClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAuthOptionClause) {
	 		listener.exitAuthOptionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAuthOptionClause) {
			return visitor.visitAuthOptionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthenticationRuleContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_authenticationRule;
	}
	public copyFrom(ctx: AuthenticationRuleContext): void {
		super.copyFrom(ctx);
	}
}
export class PasswordModuleOptionContext extends AuthenticationRuleContext {
	constructor(parser: MySqlParser, ctx: AuthenticationRuleContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public authPlugin(): AuthPluginContext {
		return this.getTypedRuleContext(AuthPluginContext, 0) as AuthPluginContext;
	}
	public USING(): TerminalNode {
		return this.getToken(MySqlParser.USING, 0);
	}
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		return this.getTypedRuleContext(PasswordFunctionClauseContext, 0) as PasswordFunctionClauseContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPasswordModuleOption) {
	 		listener.enterPasswordModuleOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPasswordModuleOption) {
	 		listener.exitPasswordModuleOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPasswordModuleOption) {
			return visitor.visitPasswordModuleOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ModuleContext extends AuthenticationRuleContext {
	constructor(parser: MySqlParser, ctx: AuthenticationRuleContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public authPlugin(): AuthPluginContext {
		return this.getTypedRuleContext(AuthPluginContext, 0) as AuthPluginContext;
	}
	public authOptionClause(): AuthOptionClauseContext {
		return this.getTypedRuleContext(AuthOptionClauseContext, 0) as AuthOptionClauseContext;
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public USING(): TerminalNode {
		return this.getToken(MySqlParser.USING, 0);
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public RANDOM(): TerminalNode {
		return this.getToken(MySqlParser.RANDOM, 0);
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterModule) {
	 		listener.enterModule(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitModule) {
	 		listener.exitModule(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitModule) {
			return visitor.visitModule(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TlsOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SSL(): TerminalNode {
		return this.getToken(MySqlParser.SSL, 0);
	}
	public X509(): TerminalNode {
		return this.getToken(MySqlParser.X509, 0);
	}
	public CIPHER(): TerminalNode {
		return this.getToken(MySqlParser.CIPHER, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public ISSUER(): TerminalNode {
		return this.getToken(MySqlParser.ISSUER, 0);
	}
	public SUBJECT(): TerminalNode {
		return this.getToken(MySqlParser.SUBJECT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tlsOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTlsOption) {
	 		listener.enterTlsOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTlsOption) {
	 		listener.exitTlsOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTlsOption) {
			return visitor.visitTlsOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserResourceOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MAX_QUERIES_PER_HOUR(): TerminalNode {
		return this.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public MAX_UPDATES_PER_HOUR(): TerminalNode {
		return this.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0);
	}
	public MAX_CONNECTIONS_PER_HOUR(): TerminalNode {
		return this.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0);
	}
	public MAX_USER_CONNECTIONS(): TerminalNode {
		return this.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_userResourceOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUserResourceOption) {
	 		listener.enterUserResourceOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUserResourceOption) {
	 		listener.exitUserResourceOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserResourceOption) {
			return visitor.visitUserResourceOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserPasswordOptionContext extends ParserRuleContext {
	public _expireType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
	public EXPIRE(): TerminalNode {
		return this.getToken(MySqlParser.EXPIRE, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public DAY(): TerminalNode {
		return this.getToken(MySqlParser.DAY, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public NEVER(): TerminalNode {
		return this.getToken(MySqlParser.NEVER, 0);
	}
	public INTERVAL(): TerminalNode {
		return this.getToken(MySqlParser.INTERVAL, 0);
	}
	public HISTORY(): TerminalNode {
		return this.getToken(MySqlParser.HISTORY, 0);
	}
	public REUSE(): TerminalNode {
		return this.getToken(MySqlParser.REUSE, 0);
	}
	public REQUIRE(): TerminalNode {
		return this.getToken(MySqlParser.REQUIRE, 0);
	}
	public CURRENT(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT, 0);
	}
	public OPTIONAL(): TerminalNode {
		return this.getToken(MySqlParser.OPTIONAL, 0);
	}
	public FAILED_LOGIN_ATTEMPTS(): TerminalNode {
		return this.getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0);
	}
	public PASSWORD_LOCK_TIME(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD_LOCK_TIME, 0);
	}
	public UNBOUNDED(): TerminalNode {
		return this.getToken(MySqlParser.UNBOUNDED, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_userPasswordOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUserPasswordOption) {
	 		listener.enterUserPasswordOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUserPasswordOption) {
	 		listener.exitUserPasswordOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserPasswordOption) {
			return visitor.visitUserPasswordOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserLockOptionContext extends ParserRuleContext {
	public _lockType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ACCOUNT(): TerminalNode {
		return this.getToken(MySqlParser.ACCOUNT, 0);
	}
	public LOCK(): TerminalNode {
		return this.getToken(MySqlParser.LOCK, 0);
	}
	public UNLOCK(): TerminalNode {
		return this.getToken(MySqlParser.UNLOCK, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_userLockOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUserLockOption) {
	 		listener.enterUserLockOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUserLockOption) {
	 		listener.exitUserLockOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserLockOption) {
			return visitor.visitUserLockOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivelegeClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public privilege(): PrivilegeContext {
		return this.getTypedRuleContext(PrivilegeContext, 0) as PrivilegeContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_privelegeClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPrivelegeClause) {
	 		listener.enterPrivelegeClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPrivelegeClause) {
	 		listener.exitPrivelegeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrivelegeClause) {
			return visitor.visitPrivelegeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public PRIVILEGES(): TerminalNode {
		return this.getToken(MySqlParser.PRIVILEGES, 0);
	}
	public ALTER(): TerminalNode {
		return this.getToken(MySqlParser.ALTER, 0);
	}
	public ROUTINE(): TerminalNode {
		return this.getToken(MySqlParser.ROUTINE, 0);
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public TEMPORARY(): TerminalNode {
		return this.getToken(MySqlParser.TEMPORARY, 0);
	}
	public TABLES(): TerminalNode {
		return this.getToken(MySqlParser.TABLES, 0);
	}
	public VIEW(): TerminalNode {
		return this.getToken(MySqlParser.VIEW, 0);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public ROLE(): TerminalNode {
		return this.getToken(MySqlParser.ROLE, 0);
	}
	public DELETE(): TerminalNode {
		return this.getToken(MySqlParser.DELETE, 0);
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public EVENT(): TerminalNode {
		return this.getToken(MySqlParser.EVENT, 0);
	}
	public EXECUTE(): TerminalNode {
		return this.getToken(MySqlParser.EXECUTE, 0);
	}
	public FILE(): TerminalNode {
		return this.getToken(MySqlParser.FILE, 0);
	}
	public GRANT(): TerminalNode {
		return this.getToken(MySqlParser.GRANT, 0);
	}
	public OPTION(): TerminalNode {
		return this.getToken(MySqlParser.OPTION, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public INSERT(): TerminalNode {
		return this.getToken(MySqlParser.INSERT, 0);
	}
	public LOCK(): TerminalNode {
		return this.getToken(MySqlParser.LOCK, 0);
	}
	public PROCESS(): TerminalNode {
		return this.getToken(MySqlParser.PROCESS, 0);
	}
	public PROXY(): TerminalNode {
		return this.getToken(MySqlParser.PROXY, 0);
	}
	public REFERENCES(): TerminalNode {
		return this.getToken(MySqlParser.REFERENCES, 0);
	}
	public RELOAD(): TerminalNode {
		return this.getToken(MySqlParser.RELOAD, 0);
	}
	public REPLICATION(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATION, 0);
	}
	public CLIENT(): TerminalNode {
		return this.getToken(MySqlParser.CLIENT, 0);
	}
	public SLAVE(): TerminalNode {
		return this.getToken(MySqlParser.SLAVE, 0);
	}
	public SELECT(): TerminalNode {
		return this.getToken(MySqlParser.SELECT, 0);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public DATABASES(): TerminalNode {
		return this.getToken(MySqlParser.DATABASES, 0);
	}
	public SHUTDOWN(): TerminalNode {
		return this.getToken(MySqlParser.SHUTDOWN, 0);
	}
	public SUPER(): TerminalNode {
		return this.getToken(MySqlParser.SUPER, 0);
	}
	public TRIGGER(): TerminalNode {
		return this.getToken(MySqlParser.TRIGGER, 0);
	}
	public UPDATE(): TerminalNode {
		return this.getToken(MySqlParser.UPDATE, 0);
	}
	public USAGE(): TerminalNode {
		return this.getToken(MySqlParser.USAGE, 0);
	}
	public APPLICATION_PASSWORD_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0);
	}
	public AUDIT_ABORT_EXEMPT(): TerminalNode {
		return this.getToken(MySqlParser.AUDIT_ABORT_EXEMPT, 0);
	}
	public AUDIT_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.AUDIT_ADMIN, 0);
	}
	public AUTHENTICATION_POLICY_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.AUTHENTICATION_POLICY_ADMIN, 0);
	}
	public BACKUP_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.BACKUP_ADMIN, 0);
	}
	public BINLOG_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.BINLOG_ADMIN, 0);
	}
	public BINLOG_ENCRYPTION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0);
	}
	public CLONE_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.CLONE_ADMIN, 0);
	}
	public CONNECTION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.CONNECTION_ADMIN, 0);
	}
	public ENCRYPTION_KEY_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0);
	}
	public FIREWALL_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.FIREWALL_ADMIN, 0);
	}
	public FIREWALL_EXEMPT(): TerminalNode {
		return this.getToken(MySqlParser.FIREWALL_EXEMPT, 0);
	}
	public FIREWALL_USER(): TerminalNode {
		return this.getToken(MySqlParser.FIREWALL_USER, 0);
	}
	public FLUSH_OPTIMIZER_COSTS(): TerminalNode {
		return this.getToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0);
	}
	public FLUSH_STATUS(): TerminalNode {
		return this.getToken(MySqlParser.FLUSH_STATUS, 0);
	}
	public FLUSH_TABLES(): TerminalNode {
		return this.getToken(MySqlParser.FLUSH_TABLES, 0);
	}
	public FLUSH_USER_RESOURCES(): TerminalNode {
		return this.getToken(MySqlParser.FLUSH_USER_RESOURCES, 0);
	}
	public GROUP_REPLICATION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0);
	}
	public INNODB_REDO_LOG_ARCHIVE(): TerminalNode {
		return this.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0);
	}
	public INNODB_REDO_LOG_ENABLE(): TerminalNode {
		return this.getToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0);
	}
	public NDB_STORED_USER(): TerminalNode {
		return this.getToken(MySqlParser.NDB_STORED_USER, 0);
	}
	public PASSWORDLESS_USER_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0);
	}
	public PERSIST_RO_VARIABLES_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0);
	}
	public REPLICATION_APPLIER(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATION_APPLIER, 0);
	}
	public REPLICATION_SLAVE_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0);
	}
	public RESOURCE_GROUP_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0);
	}
	public RESOURCE_GROUP_USER(): TerminalNode {
		return this.getToken(MySqlParser.RESOURCE_GROUP_USER, 0);
	}
	public ROLE_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.ROLE_ADMIN, 0);
	}
	public SERVICE_CONNECTION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0);
	}
	public SESSION_VARIABLES_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
	}
	public SET_USER_ID(): TerminalNode {
		return this.getToken(MySqlParser.SET_USER_ID, 0);
	}
	public SKIP_QUERY_REWRITE(): TerminalNode {
		return this.getToken(MySqlParser.SKIP_QUERY_REWRITE, 0);
	}
	public SHOW_ROUTINE(): TerminalNode {
		return this.getToken(MySqlParser.SHOW_ROUTINE, 0);
	}
	public SYSTEM_USER(): TerminalNode {
		return this.getToken(MySqlParser.SYSTEM_USER, 0);
	}
	public SYSTEM_VARIABLES_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0);
	}
	public TABLE_ENCRYPTION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0);
	}
	public TP_CONNECTION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.TP_CONNECTION_ADMIN, 0);
	}
	public VERSION_TOKEN_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0);
	}
	public XA_RECOVER_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.XA_RECOVER_ADMIN, 0);
	}
	public LOAD(): TerminalNode {
		return this.getToken(MySqlParser.LOAD, 0);
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public S3(): TerminalNode {
		return this.getToken(MySqlParser.S3, 0);
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public INVOKE(): TerminalNode {
		return this.getToken(MySqlParser.INVOKE, 0);
	}
	public LAMBDA(): TerminalNode {
		return this.getToken(MySqlParser.LAMBDA, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_privilege;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPrivilege) {
	 		listener.enterPrivilege(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPrivilege) {
	 		listener.exitPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrivilege) {
			return visitor.visitPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeLevelContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_privilegeLevel;
	}
	public copyFrom(ctx: PrivilegeLevelContext): void {
		super.copyFrom(ctx);
	}
}
export class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
	constructor(parser: MySqlParser, ctx: PrivilegeLevelContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public DOT(): TerminalNode {
		return this.getToken(MySqlParser.DOT, 0);
	}
	public STAR(): TerminalNode {
		return this.getToken(MySqlParser.STAR, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDefiniteSchemaPrivLevel) {
	 		listener.enterDefiniteSchemaPrivLevel(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDefiniteSchemaPrivLevel) {
	 		listener.exitDefiniteSchemaPrivLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefiniteSchemaPrivLevel) {
			return visitor.visitDefiniteSchemaPrivLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
	constructor(parser: MySqlParser, ctx: PrivilegeLevelContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public dottedId(): DottedIdContext {
		return this.getTypedRuleContext(DottedIdContext, 0) as DottedIdContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDefiniteFullTablePrivLevel2) {
	 		listener.enterDefiniteFullTablePrivLevel2(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDefiniteFullTablePrivLevel2) {
	 		listener.exitDefiniteFullTablePrivLevel2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefiniteFullTablePrivLevel2) {
			return visitor.visitDefiniteFullTablePrivLevel2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
	constructor(parser: MySqlParser, ctx: PrivilegeLevelContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public DOT(): TerminalNode {
		return this.getToken(MySqlParser.DOT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDefiniteFullTablePrivLevel) {
	 		listener.enterDefiniteFullTablePrivLevel(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDefiniteFullTablePrivLevel) {
	 		listener.exitDefiniteFullTablePrivLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefiniteFullTablePrivLevel) {
			return visitor.visitDefiniteFullTablePrivLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GlobalPrivLevelContext extends PrivilegeLevelContext {
	constructor(parser: MySqlParser, ctx: PrivilegeLevelContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public STAR_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.STAR);
	}
	public STAR(i: number): TerminalNode {
		return this.getToken(MySqlParser.STAR, i);
	}
	public DOT(): TerminalNode {
		return this.getToken(MySqlParser.DOT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterGlobalPrivLevel) {
	 		listener.enterGlobalPrivLevel(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitGlobalPrivLevel) {
	 		listener.exitGlobalPrivLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGlobalPrivLevel) {
			return visitor.visitGlobalPrivLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
	constructor(parser: MySqlParser, ctx: PrivilegeLevelContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDefiniteTablePrivLevel) {
	 		listener.enterDefiniteTablePrivLevel(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDefiniteTablePrivLevel) {
	 		listener.exitDefiniteTablePrivLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefiniteTablePrivLevel) {
			return visitor.visitDefiniteTablePrivLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
	constructor(parser: MySqlParser, ctx: PrivilegeLevelContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public STAR(): TerminalNode {
		return this.getToken(MySqlParser.STAR, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCurrentSchemaPriviLevel) {
	 		listener.enterCurrentSchemaPriviLevel(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCurrentSchemaPriviLevel) {
	 		listener.exitCurrentSchemaPriviLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCurrentSchemaPriviLevel) {
			return visitor.visitCurrentSchemaPriviLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameUserClauseContext extends ParserRuleContext {
	public _fromFirst!: UserNameContext;
	public _toFirst!: UserNameContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TO(): TerminalNode {
		return this.getToken(MySqlParser.TO, 0);
	}
	public userName_list(): UserNameContext[] {
		return this.getTypedRuleContexts(UserNameContext) as UserNameContext[];
	}
	public userName(i: number): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, i) as UserNameContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_renameUserClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRenameUserClause) {
	 		listener.enterRenameUserClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRenameUserClause) {
	 		listener.exitRenameUserClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRenameUserClause) {
			return visitor.visitRenameUserClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnalyzeTableContext extends ParserRuleContext {
	public _actionOption!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ANALYZE(): TerminalNode {
		return this.getToken(MySqlParser.ANALYZE, 0);
	}
	public tables(): TablesContext {
		return this.getTypedRuleContext(TablesContext, 0) as TablesContext;
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public TABLES(): TerminalNode {
		return this.getToken(MySqlParser.TABLES, 0);
	}
	public UPDATE(): TerminalNode {
		return this.getToken(MySqlParser.UPDATE, 0);
	}
	public HISTOGRAM_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.HISTOGRAM);
	}
	public HISTOGRAM(i: number): TerminalNode {
		return this.getToken(MySqlParser.HISTOGRAM, i);
	}
	public ON_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ON);
	}
	public ON(i: number): TerminalNode {
		return this.getToken(MySqlParser.ON, i);
	}
	public fullColumnName_list(): FullColumnNameContext[] {
		return this.getTypedRuleContexts(FullColumnNameContext) as FullColumnNameContext[];
	}
	public fullColumnName(i: number): FullColumnNameContext {
		return this.getTypedRuleContext(FullColumnNameContext, i) as FullColumnNameContext;
	}
	public DROP(): TerminalNode {
		return this.getToken(MySqlParser.DROP, 0);
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode {
		return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public BUCKETS(): TerminalNode {
		return this.getToken(MySqlParser.BUCKETS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_analyzeTable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAnalyzeTable) {
	 		listener.enterAnalyzeTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAnalyzeTable) {
	 		listener.exitAnalyzeTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAnalyzeTable) {
			return visitor.visitAnalyzeTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CheckTableContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHECK(): TerminalNode {
		return this.getToken(MySqlParser.CHECK, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tables(): TablesContext {
		return this.getTypedRuleContext(TablesContext, 0) as TablesContext;
	}
	public checkTableOption_list(): CheckTableOptionContext[] {
		return this.getTypedRuleContexts(CheckTableOptionContext) as CheckTableOptionContext[];
	}
	public checkTableOption(i: number): CheckTableOptionContext {
		return this.getTypedRuleContext(CheckTableOptionContext, i) as CheckTableOptionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_checkTable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCheckTable) {
	 		listener.enterCheckTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCheckTable) {
	 		listener.exitCheckTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCheckTable) {
			return visitor.visitCheckTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ChecksumTableContext extends ParserRuleContext {
	public _actionOption!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHECKSUM(): TerminalNode {
		return this.getToken(MySqlParser.CHECKSUM, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tables(): TablesContext {
		return this.getTypedRuleContext(TablesContext, 0) as TablesContext;
	}
	public QUICK(): TerminalNode {
		return this.getToken(MySqlParser.QUICK, 0);
	}
	public EXTENDED(): TerminalNode {
		return this.getToken(MySqlParser.EXTENDED, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_checksumTable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterChecksumTable) {
	 		listener.enterChecksumTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitChecksumTable) {
	 		listener.exitChecksumTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitChecksumTable) {
			return visitor.visitChecksumTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptimizeTableContext extends ParserRuleContext {
	public _actionOption!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OPTIMIZE(): TerminalNode {
		return this.getToken(MySqlParser.OPTIMIZE, 0);
	}
	public tables(): TablesContext {
		return this.getTypedRuleContext(TablesContext, 0) as TablesContext;
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public TABLES(): TerminalNode {
		return this.getToken(MySqlParser.TABLES, 0);
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode {
		return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_optimizeTable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterOptimizeTable) {
	 		listener.enterOptimizeTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitOptimizeTable) {
	 		listener.exitOptimizeTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOptimizeTable) {
			return visitor.visitOptimizeTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RepairTableContext extends ParserRuleContext {
	public _actionOption!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPAIR(): TerminalNode {
		return this.getToken(MySqlParser.REPAIR, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tables(): TablesContext {
		return this.getTypedRuleContext(TablesContext, 0) as TablesContext;
	}
	public QUICK(): TerminalNode {
		return this.getToken(MySqlParser.QUICK, 0);
	}
	public EXTENDED(): TerminalNode {
		return this.getToken(MySqlParser.EXTENDED, 0);
	}
	public USE_FRM(): TerminalNode {
		return this.getToken(MySqlParser.USE_FRM, 0);
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode {
		return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_repairTable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRepairTable) {
	 		listener.enterRepairTable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRepairTable) {
	 		listener.exitRepairTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRepairTable) {
			return visitor.visitRepairTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CheckTableOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public UPGRADE(): TerminalNode {
		return this.getToken(MySqlParser.UPGRADE, 0);
	}
	public QUICK(): TerminalNode {
		return this.getToken(MySqlParser.QUICK, 0);
	}
	public FAST(): TerminalNode {
		return this.getToken(MySqlParser.FAST, 0);
	}
	public MEDIUM(): TerminalNode {
		return this.getToken(MySqlParser.MEDIUM, 0);
	}
	public EXTENDED(): TerminalNode {
		return this.getToken(MySqlParser.EXTENDED, 0);
	}
	public CHANGED(): TerminalNode {
		return this.getToken(MySqlParser.CHANGED, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_checkTableOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCheckTableOption) {
	 		listener.enterCheckTableOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCheckTableOption) {
	 		listener.exitCheckTableOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCheckTableOption) {
			return visitor.visitCheckTableOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateUdfunctionContext extends ParserRuleContext {
	public _returnType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.FUNCTION, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public RETURNS(): TerminalNode {
		return this.getToken(MySqlParser.RETURNS, 0);
	}
	public SONAME(): TerminalNode {
		return this.getToken(MySqlParser.SONAME, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public STRING(): TerminalNode {
		return this.getToken(MySqlParser.STRING, 0);
	}
	public INTEGER(): TerminalNode {
		return this.getToken(MySqlParser.INTEGER, 0);
	}
	public REAL(): TerminalNode {
		return this.getToken(MySqlParser.REAL, 0);
	}
	public DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.DECIMAL, 0);
	}
	public AGGREGATE(): TerminalNode {
		return this.getToken(MySqlParser.AGGREGATE, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_createUdfunction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCreateUdfunction) {
	 		listener.enterCreateUdfunction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCreateUdfunction) {
	 		listener.exitCreateUdfunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCreateUdfunction) {
			return visitor.visitCreateUdfunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InstallPluginContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public INSTALL(): TerminalNode {
		return this.getToken(MySqlParser.INSTALL, 0);
	}
	public PLUGIN(): TerminalNode {
		return this.getToken(MySqlParser.PLUGIN, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public SONAME(): TerminalNode {
		return this.getToken(MySqlParser.SONAME, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_installPlugin;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterInstallPlugin) {
	 		listener.enterInstallPlugin(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitInstallPlugin) {
	 		listener.exitInstallPlugin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInstallPlugin) {
			return visitor.visitInstallPlugin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UninstallPluginContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public UNINSTALL(): TerminalNode {
		return this.getToken(MySqlParser.UNINSTALL, 0);
	}
	public PLUGIN(): TerminalNode {
		return this.getToken(MySqlParser.PLUGIN, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_uninstallPlugin;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUninstallPlugin) {
	 		listener.enterUninstallPlugin(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUninstallPlugin) {
	 		listener.exitUninstallPlugin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUninstallPlugin) {
			return visitor.visitUninstallPlugin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_setStatement;
	}
	public copyFrom(ctx: SetStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class SetTransactionContext extends SetStatementContext {
	constructor(parser: MySqlParser, ctx: SetStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public setTransactionStatement(): SetTransactionStatementContext {
		return this.getTypedRuleContext(SetTransactionStatementContext, 0) as SetTransactionStatementContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetTransaction) {
	 		listener.enterSetTransaction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetTransaction) {
	 		listener.exitSetTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetTransaction) {
			return visitor.visitSetTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetCharsetContext extends SetStatementContext {
	constructor(parser: MySqlParser, ctx: SetStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public charSet(): CharSetContext {
		return this.getTypedRuleContext(CharSetContext, 0) as CharSetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetCharset) {
	 		listener.enterSetCharset(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetCharset) {
	 		listener.exitSetCharset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetCharset) {
			return visitor.visitSetCharset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetNamesContext extends SetStatementContext {
	constructor(parser: MySqlParser, ctx: SetStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public NAMES(): TerminalNode {
		return this.getToken(MySqlParser.NAMES, 0);
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public COLLATE(): TerminalNode {
		return this.getToken(MySqlParser.COLLATE, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetNames) {
	 		listener.enterSetNames(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetNames) {
	 		listener.exitSetNames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetNames) {
			return visitor.visitSetNames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetPasswordContext extends SetStatementContext {
	constructor(parser: MySqlParser, ctx: SetStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public setPasswordStatement(): SetPasswordStatementContext {
		return this.getTypedRuleContext(SetPasswordStatementContext, 0) as SetPasswordStatementContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetPassword) {
	 		listener.enterSetPassword(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetPassword) {
	 		listener.exitSetPassword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetPassword) {
			return visitor.visitSetPassword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetAutocommitContext extends SetStatementContext {
	constructor(parser: MySqlParser, ctx: SetStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public setAutocommitStatement(): SetAutocommitStatementContext {
		return this.getTypedRuleContext(SetAutocommitStatementContext, 0) as SetAutocommitStatementContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetAutocommit) {
	 		listener.enterSetAutocommit(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetAutocommit) {
	 		listener.exitSetAutocommit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetAutocommit) {
			return visitor.visitSetAutocommit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetNewValueInsideTriggerContext extends SetStatementContext {
	constructor(parser: MySqlParser, ctx: SetStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public fullId_list(): FullIdContext[] {
		return this.getTypedRuleContexts(FullIdContext) as FullIdContext[];
	}
	public fullId(i: number): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, i) as FullIdContext;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
	public VAR_ASSIGN_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.VAR_ASSIGN);
	}
	public VAR_ASSIGN(i: number): TerminalNode {
		return this.getToken(MySqlParser.VAR_ASSIGN, i);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetNewValueInsideTrigger) {
	 		listener.enterSetNewValueInsideTrigger(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetNewValueInsideTrigger) {
	 		listener.exitSetNewValueInsideTrigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetNewValueInsideTrigger) {
			return visitor.visitSetNewValueInsideTrigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetVariableContext extends SetStatementContext {
	constructor(parser: MySqlParser, ctx: SetStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public variableClause_list(): VariableClauseContext[] {
		return this.getTypedRuleContexts(VariableClauseContext) as VariableClauseContext[];
	}
	public variableClause(i: number): VariableClauseContext {
		return this.getTypedRuleContext(VariableClauseContext, i) as VariableClauseContext;
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
	public VAR_ASSIGN_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.VAR_ASSIGN);
	}
	public VAR_ASSIGN(i: number): TerminalNode {
		return this.getToken(MySqlParser.VAR_ASSIGN, i);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public ON_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ON);
	}
	public ON(i: number): TerminalNode {
		return this.getToken(MySqlParser.ON, i);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSetVariable) {
	 		listener.enterSetVariable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSetVariable) {
	 		listener.exitSetVariable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSetVariable) {
			return visitor.visitSetVariable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_showStatement;
	}
	public copyFrom(ctx: ShowStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ShowOpenTablesContext extends ShowStatementContext {
	public _schemaFormat!: Token;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public OPEN(): TerminalNode {
		return this.getToken(MySqlParser.OPEN, 0);
	}
	public TABLES(): TerminalNode {
		return this.getToken(MySqlParser.TABLES, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public showFilter(): ShowFilterContext {
		return this.getTypedRuleContext(ShowFilterContext, 0) as ShowFilterContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public IN(): TerminalNode {
		return this.getToken(MySqlParser.IN, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowOpenTables) {
	 		listener.enterShowOpenTables(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowOpenTables) {
	 		listener.exitShowOpenTables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowOpenTables) {
			return visitor.visitShowOpenTables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowGlobalInfoContext extends ShowStatementContext {
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public showGlobalInfoClause(): ShowGlobalInfoClauseContext {
		return this.getTypedRuleContext(ShowGlobalInfoClauseContext, 0) as ShowGlobalInfoClauseContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowGlobalInfo) {
	 		listener.enterShowGlobalInfo(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowGlobalInfo) {
	 		listener.exitShowGlobalInfo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowGlobalInfo) {
			return visitor.visitShowGlobalInfo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCreateFullIdObjectContext extends ShowStatementContext {
	public _namedEntity!: Token;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public EVENT(): TerminalNode {
		return this.getToken(MySqlParser.EVENT, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.FUNCTION, 0);
	}
	public PROCEDURE(): TerminalNode {
		return this.getToken(MySqlParser.PROCEDURE, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public TRIGGER(): TerminalNode {
		return this.getToken(MySqlParser.TRIGGER, 0);
	}
	public VIEW(): TerminalNode {
		return this.getToken(MySqlParser.VIEW, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowCreateFullIdObject) {
	 		listener.enterShowCreateFullIdObject(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowCreateFullIdObject) {
	 		listener.exitShowCreateFullIdObject(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateFullIdObject) {
			return visitor.visitShowCreateFullIdObject(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCreateUserContext extends ShowStatementContext {
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowCreateUser) {
	 		listener.enterShowCreateUser(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowCreateUser) {
	 		listener.exitShowCreateUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateUser) {
			return visitor.visitShowCreateUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowErrorsContext extends ShowStatementContext {
	public _errorFormat!: Token;
	public _offset!: DecimalLiteralContext;
	public _rowCount!: DecimalLiteralContext;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public ERRORS(): TerminalNode {
		return this.getToken(MySqlParser.ERRORS, 0);
	}
	public WARNINGS(): TerminalNode {
		return this.getToken(MySqlParser.WARNINGS, 0);
	}
	public LIMIT(): TerminalNode {
		return this.getToken(MySqlParser.LIMIT, 0);
	}
	public decimalLiteral_list(): DecimalLiteralContext[] {
		return this.getTypedRuleContexts(DecimalLiteralContext) as DecimalLiteralContext[];
	}
	public decimalLiteral(i: number): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, i) as DecimalLiteralContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowErrors) {
	 		listener.enterShowErrors(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowErrors) {
	 		listener.exitShowErrors(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowErrors) {
			return visitor.visitShowErrors(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCountErrorsContext extends ShowStatementContext {
	public _errorFormat!: Token;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public COUNT(): TerminalNode {
		return this.getToken(MySqlParser.COUNT, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public STAR(): TerminalNode {
		return this.getToken(MySqlParser.STAR, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public ERRORS(): TerminalNode {
		return this.getToken(MySqlParser.ERRORS, 0);
	}
	public WARNINGS(): TerminalNode {
		return this.getToken(MySqlParser.WARNINGS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowCountErrors) {
	 		listener.enterShowCountErrors(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowCountErrors) {
	 		listener.exitShowCountErrors(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowCountErrors) {
			return visitor.visitShowCountErrors(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowObjectFilterContext extends ShowStatementContext {
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public showCommonEntity(): ShowCommonEntityContext {
		return this.getTypedRuleContext(ShowCommonEntityContext, 0) as ShowCommonEntityContext;
	}
	public showFilter(): ShowFilterContext {
		return this.getTypedRuleContext(ShowFilterContext, 0) as ShowFilterContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowObjectFilter) {
	 		listener.enterShowObjectFilter(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowObjectFilter) {
	 		listener.exitShowObjectFilter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowObjectFilter) {
			return visitor.visitShowObjectFilter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCreateDbContext extends ShowStatementContext {
	public _schemaFormat!: Token;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public CREATE(): TerminalNode {
		return this.getToken(MySqlParser.CREATE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public DATABASE(): TerminalNode {
		return this.getToken(MySqlParser.DATABASE, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMA, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowCreateDb) {
	 		listener.enterShowCreateDb(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowCreateDb) {
	 		listener.exitShowCreateDb(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowCreateDb) {
			return visitor.visitShowCreateDb(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowEngineContext extends ShowStatementContext {
	public _engineOption!: Token;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public engineName(): EngineNameContext {
		return this.getTypedRuleContext(EngineNameContext, 0) as EngineNameContext;
	}
	public STATUS(): TerminalNode {
		return this.getToken(MySqlParser.STATUS, 0);
	}
	public MUTEX(): TerminalNode {
		return this.getToken(MySqlParser.MUTEX, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowEngine) {
	 		listener.enterShowEngine(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowEngine) {
	 		listener.exitShowEngine(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowEngine) {
			return visitor.visitShowEngine(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowSchemaFilterContext extends ShowStatementContext {
	public _schemaFormat!: Token;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public showSchemaEntity(): ShowSchemaEntityContext {
		return this.getTypedRuleContext(ShowSchemaEntityContext, 0) as ShowSchemaEntityContext;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public showFilter(): ShowFilterContext {
		return this.getTypedRuleContext(ShowFilterContext, 0) as ShowFilterContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public IN(): TerminalNode {
		return this.getToken(MySqlParser.IN, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowSchemaFilter) {
	 		listener.enterShowSchemaFilter(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowSchemaFilter) {
	 		listener.exitShowSchemaFilter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowSchemaFilter) {
			return visitor.visitShowSchemaFilter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowIndexesContext extends ShowStatementContext {
	public _indexFormat!: Token;
	public _tableFormat!: Token;
	public _schemaFormat!: Token;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public INDEXES(): TerminalNode {
		return this.getToken(MySqlParser.INDEXES, 0);
	}
	public KEYS(): TerminalNode {
		return this.getToken(MySqlParser.KEYS, 0);
	}
	public FROM_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.FROM);
	}
	public FROM(i: number): TerminalNode {
		return this.getToken(MySqlParser.FROM, i);
	}
	public IN_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.IN);
	}
	public IN(i: number): TerminalNode {
		return this.getToken(MySqlParser.IN, i);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public WHERE(): TerminalNode {
		return this.getToken(MySqlParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowIndexes) {
	 		listener.enterShowIndexes(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowIndexes) {
	 		listener.exitShowIndexes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowIndexes) {
			return visitor.visitShowIndexes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowLogEventsContext extends ShowStatementContext {
	public _logFormat!: Token;
	public _filename!: Token;
	public _fromPosition!: DecimalLiteralContext;
	public _offset!: DecimalLiteralContext;
	public _rowCount!: DecimalLiteralContext;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public EVENTS(): TerminalNode {
		return this.getToken(MySqlParser.EVENTS, 0);
	}
	public BINLOG(): TerminalNode {
		return this.getToken(MySqlParser.BINLOG, 0);
	}
	public RELAYLOG(): TerminalNode {
		return this.getToken(MySqlParser.RELAYLOG, 0);
	}
	public IN(): TerminalNode {
		return this.getToken(MySqlParser.IN, 0);
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public LIMIT(): TerminalNode {
		return this.getToken(MySqlParser.LIMIT, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public decimalLiteral_list(): DecimalLiteralContext[] {
		return this.getTypedRuleContexts(DecimalLiteralContext) as DecimalLiteralContext[];
	}
	public decimalLiteral(i: number): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, i) as DecimalLiteralContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowLogEvents) {
	 		listener.enterShowLogEvents(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowLogEvents) {
	 		listener.exitShowLogEvents(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowLogEvents) {
			return visitor.visitShowLogEvents(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowMasterLogsContext extends ShowStatementContext {
	public _logFormat!: Token;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public LOGS(): TerminalNode {
		return this.getToken(MySqlParser.LOGS, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public MASTER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowMasterLogs) {
	 		listener.enterShowMasterLogs(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowMasterLogs) {
	 		listener.exitShowMasterLogs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowMasterLogs) {
			return visitor.visitShowMasterLogs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowGrantsContext extends ShowStatementContext {
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public GRANTS(): TerminalNode {
		return this.getToken(MySqlParser.GRANTS, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowGrants) {
	 		listener.enterShowGrants(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowGrants) {
	 		listener.exitShowGrants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowGrants) {
			return visitor.visitShowGrants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowSlaveStatusContext extends ShowStatementContext {
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public SLAVE(): TerminalNode {
		return this.getToken(MySqlParser.SLAVE, 0);
	}
	public STATUS(): TerminalNode {
		return this.getToken(MySqlParser.STATUS, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public CHANNEL(): TerminalNode {
		return this.getToken(MySqlParser.CHANNEL, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowSlaveStatus) {
	 		listener.enterShowSlaveStatus(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowSlaveStatus) {
	 		listener.exitShowSlaveStatus(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowSlaveStatus) {
			return visitor.visitShowSlaveStatus(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowRoutineContext extends ShowStatementContext {
	public _routine!: Token;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public CODE(): TerminalNode {
		return this.getToken(MySqlParser.CODE, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.FUNCTION, 0);
	}
	public PROCEDURE(): TerminalNode {
		return this.getToken(MySqlParser.PROCEDURE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowRoutine) {
	 		listener.enterShowRoutine(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowRoutine) {
	 		listener.exitShowRoutine(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowRoutine) {
			return visitor.visitShowRoutine(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowProfileContext extends ShowStatementContext {
	public _queryCount!: DecimalLiteralContext;
	public _offset!: DecimalLiteralContext;
	public _rowCount!: DecimalLiteralContext;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public PROFILE(): TerminalNode {
		return this.getToken(MySqlParser.PROFILE, 0);
	}
	public showProfileType_list(): ShowProfileTypeContext[] {
		return this.getTypedRuleContexts(ShowProfileTypeContext) as ShowProfileTypeContext[];
	}
	public showProfileType(i: number): ShowProfileTypeContext {
		return this.getTypedRuleContext(ShowProfileTypeContext, i) as ShowProfileTypeContext;
	}
	public LIMIT(): TerminalNode {
		return this.getToken(MySqlParser.LIMIT, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public QUERY(): TerminalNode {
		return this.getToken(MySqlParser.QUERY, 0);
	}
	public decimalLiteral_list(): DecimalLiteralContext[] {
		return this.getTypedRuleContexts(DecimalLiteralContext) as DecimalLiteralContext[];
	}
	public decimalLiteral(i: number): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, i) as DecimalLiteralContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowProfile) {
	 		listener.enterShowProfile(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowProfile) {
	 		listener.exitShowProfile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowProfile) {
			return visitor.visitShowProfile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowColumnsContext extends ShowStatementContext {
	public _columnsFormat!: Token;
	public _tableFormat!: Token;
	public _schemaFormat!: Token;
	constructor(parser: MySqlParser, ctx: ShowStatementContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public SHOW(): TerminalNode {
		return this.getToken(MySqlParser.SHOW, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public COLUMNS(): TerminalNode {
		return this.getToken(MySqlParser.COLUMNS, 0);
	}
	public FIELDS(): TerminalNode {
		return this.getToken(MySqlParser.FIELDS, 0);
	}
	public FROM_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.FROM);
	}
	public FROM(i: number): TerminalNode {
		return this.getToken(MySqlParser.FROM, i);
	}
	public IN_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.IN);
	}
	public IN(i: number): TerminalNode {
		return this.getToken(MySqlParser.IN, i);
	}
	public FULL(): TerminalNode {
		return this.getToken(MySqlParser.FULL, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public showFilter(): ShowFilterContext {
		return this.getTypedRuleContext(ShowFilterContext, 0) as ShowFilterContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowColumns) {
	 		listener.enterShowColumns(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowColumns) {
	 		listener.exitShowColumns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowColumns) {
			return visitor.visitShowColumns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VariableClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL_ID(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL_ID, 0);
	}
	public GLOBAL_ID(): TerminalNode {
		return this.getToken(MySqlParser.GLOBAL_ID, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public GLOBAL(): TerminalNode {
		return this.getToken(MySqlParser.GLOBAL, 0);
	}
	public SESSION(): TerminalNode {
		return this.getToken(MySqlParser.SESSION, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
	public AT_SIGN_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.AT_SIGN);
	}
	public AT_SIGN(i: number): TerminalNode {
		return this.getToken(MySqlParser.AT_SIGN, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_variableClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterVariableClause) {
	 		listener.enterVariableClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitVariableClause) {
	 		listener.exitVariableClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitVariableClause) {
			return visitor.visitVariableClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCommonEntityContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHARACTER(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public COLLATION(): TerminalNode {
		return this.getToken(MySqlParser.COLLATION, 0);
	}
	public DATABASES(): TerminalNode {
		return this.getToken(MySqlParser.DATABASES, 0);
	}
	public SCHEMAS(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMAS, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.FUNCTION, 0);
	}
	public STATUS(): TerminalNode {
		return this.getToken(MySqlParser.STATUS, 0);
	}
	public PROCEDURE(): TerminalNode {
		return this.getToken(MySqlParser.PROCEDURE, 0);
	}
	public VARIABLES(): TerminalNode {
		return this.getToken(MySqlParser.VARIABLES, 0);
	}
	public GLOBAL(): TerminalNode {
		return this.getToken(MySqlParser.GLOBAL, 0);
	}
	public SESSION(): TerminalNode {
		return this.getToken(MySqlParser.SESSION, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_showCommonEntity;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowCommonEntity) {
	 		listener.enterShowCommonEntity(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowCommonEntity) {
	 		listener.exitShowCommonEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowCommonEntity) {
			return visitor.visitShowCommonEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowFilterContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LIKE(): TerminalNode {
		return this.getToken(MySqlParser.LIKE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public WHERE(): TerminalNode {
		return this.getToken(MySqlParser.WHERE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_showFilter;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowFilter) {
	 		listener.enterShowFilter(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowFilter) {
	 		listener.exitShowFilter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowFilter) {
			return visitor.visitShowFilter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowGlobalInfoClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ENGINES(): TerminalNode {
		return this.getToken(MySqlParser.ENGINES, 0);
	}
	public STORAGE(): TerminalNode {
		return this.getToken(MySqlParser.STORAGE, 0);
	}
	public MASTER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER, 0);
	}
	public STATUS(): TerminalNode {
		return this.getToken(MySqlParser.STATUS, 0);
	}
	public PLUGINS(): TerminalNode {
		return this.getToken(MySqlParser.PLUGINS, 0);
	}
	public PRIVILEGES(): TerminalNode {
		return this.getToken(MySqlParser.PRIVILEGES, 0);
	}
	public PROCESSLIST(): TerminalNode {
		return this.getToken(MySqlParser.PROCESSLIST, 0);
	}
	public FULL(): TerminalNode {
		return this.getToken(MySqlParser.FULL, 0);
	}
	public PROFILES(): TerminalNode {
		return this.getToken(MySqlParser.PROFILES, 0);
	}
	public SLAVE(): TerminalNode {
		return this.getToken(MySqlParser.SLAVE, 0);
	}
	public HOSTS(): TerminalNode {
		return this.getToken(MySqlParser.HOSTS, 0);
	}
	public AUTHORS(): TerminalNode {
		return this.getToken(MySqlParser.AUTHORS, 0);
	}
	public CONTRIBUTORS(): TerminalNode {
		return this.getToken(MySqlParser.CONTRIBUTORS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_showGlobalInfoClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowGlobalInfoClause) {
	 		listener.enterShowGlobalInfoClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowGlobalInfoClause) {
	 		listener.exitShowGlobalInfoClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowGlobalInfoClause) {
			return visitor.visitShowGlobalInfoClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowSchemaEntityContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EVENTS(): TerminalNode {
		return this.getToken(MySqlParser.EVENTS, 0);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public STATUS(): TerminalNode {
		return this.getToken(MySqlParser.STATUS, 0);
	}
	public TABLES(): TerminalNode {
		return this.getToken(MySqlParser.TABLES, 0);
	}
	public FULL(): TerminalNode {
		return this.getToken(MySqlParser.FULL, 0);
	}
	public TRIGGERS(): TerminalNode {
		return this.getToken(MySqlParser.TRIGGERS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_showSchemaEntity;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowSchemaEntity) {
	 		listener.enterShowSchemaEntity(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowSchemaEntity) {
	 		listener.exitShowSchemaEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowSchemaEntity) {
			return visitor.visitShowSchemaEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowProfileTypeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public BLOCK(): TerminalNode {
		return this.getToken(MySqlParser.BLOCK, 0);
	}
	public IO(): TerminalNode {
		return this.getToken(MySqlParser.IO, 0);
	}
	public CONTEXT(): TerminalNode {
		return this.getToken(MySqlParser.CONTEXT, 0);
	}
	public SWITCHES(): TerminalNode {
		return this.getToken(MySqlParser.SWITCHES, 0);
	}
	public CPU(): TerminalNode {
		return this.getToken(MySqlParser.CPU, 0);
	}
	public IPC(): TerminalNode {
		return this.getToken(MySqlParser.IPC, 0);
	}
	public MEMORY(): TerminalNode {
		return this.getToken(MySqlParser.MEMORY, 0);
	}
	public PAGE(): TerminalNode {
		return this.getToken(MySqlParser.PAGE, 0);
	}
	public FAULTS(): TerminalNode {
		return this.getToken(MySqlParser.FAULTS, 0);
	}
	public SOURCE(): TerminalNode {
		return this.getToken(MySqlParser.SOURCE, 0);
	}
	public SWAPS(): TerminalNode {
		return this.getToken(MySqlParser.SWAPS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_showProfileType;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShowProfileType) {
	 		listener.enterShowProfileType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShowProfileType) {
	 		listener.exitShowProfileType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShowProfileType) {
			return visitor.visitShowProfileType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BinlogStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BINLOG(): TerminalNode {
		return this.getToken(MySqlParser.BINLOG, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_binlogStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterBinlogStatement) {
	 		listener.enterBinlogStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitBinlogStatement) {
	 		listener.exitBinlogStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBinlogStatement) {
			return visitor.visitBinlogStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CacheIndexStatementContext extends ParserRuleContext {
	public _schema!: UidContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CACHE(): TerminalNode {
		return this.getToken(MySqlParser.CACHE, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public tableIndexes_list(): TableIndexesContext[] {
		return this.getTypedRuleContexts(TableIndexesContext) as TableIndexesContext[];
	}
	public tableIndexes(i: number): TableIndexesContext {
		return this.getTypedRuleContext(TableIndexesContext, i) as TableIndexesContext;
	}
	public IN(): TerminalNode {
		return this.getToken(MySqlParser.IN, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_cacheIndexStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCacheIndexStatement) {
	 		listener.enterCacheIndexStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCacheIndexStatement) {
	 		listener.exitCacheIndexStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCacheIndexStatement) {
			return visitor.visitCacheIndexStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FlushStatementContext extends ParserRuleContext {
	public _flushFormat!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FLUSH(): TerminalNode {
		return this.getToken(MySqlParser.FLUSH, 0);
	}
	public flushOption_list(): FlushOptionContext[] {
		return this.getTypedRuleContexts(FlushOptionContext) as FlushOptionContext[];
	}
	public flushOption(i: number): FlushOptionContext {
		return this.getTypedRuleContext(FlushOptionContext, i) as FlushOptionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public NO_WRITE_TO_BINLOG(): TerminalNode {
		return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_flushStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFlushStatement) {
	 		listener.enterFlushStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFlushStatement) {
	 		listener.exitFlushStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFlushStatement) {
			return visitor.visitFlushStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KillStatementContext extends ParserRuleContext {
	public _connectionFormat!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KILL(): TerminalNode {
		return this.getToken(MySqlParser.KILL, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public CONNECTION(): TerminalNode {
		return this.getToken(MySqlParser.CONNECTION, 0);
	}
	public QUERY(): TerminalNode {
		return this.getToken(MySqlParser.QUERY, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_killStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterKillStatement) {
	 		listener.enterKillStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitKillStatement) {
	 		listener.exitKillStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitKillStatement) {
			return visitor.visitKillStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadIndexIntoCacheContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOAD(): TerminalNode {
		return this.getToken(MySqlParser.LOAD, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public INTO(): TerminalNode {
		return this.getToken(MySqlParser.INTO, 0);
	}
	public CACHE(): TerminalNode {
		return this.getToken(MySqlParser.CACHE, 0);
	}
	public loadedTableIndexes_list(): LoadedTableIndexesContext[] {
		return this.getTypedRuleContexts(LoadedTableIndexesContext) as LoadedTableIndexesContext[];
	}
	public loadedTableIndexes(i: number): LoadedTableIndexesContext {
		return this.getTypedRuleContext(LoadedTableIndexesContext, i) as LoadedTableIndexesContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_loadIndexIntoCache;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLoadIndexIntoCache) {
	 		listener.enterLoadIndexIntoCache(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLoadIndexIntoCache) {
	 		listener.exitLoadIndexIntoCache(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLoadIndexIntoCache) {
			return visitor.visitLoadIndexIntoCache(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResetStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESET(): TerminalNode {
		return this.getToken(MySqlParser.RESET, 0);
	}
	public QUERY(): TerminalNode {
		return this.getToken(MySqlParser.QUERY, 0);
	}
	public CACHE(): TerminalNode {
		return this.getToken(MySqlParser.CACHE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_resetStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterResetStatement) {
	 		listener.enterResetStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitResetStatement) {
	 		listener.exitResetStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitResetStatement) {
			return visitor.visitResetStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShutdownStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SHUTDOWN(): TerminalNode {
		return this.getToken(MySqlParser.SHUTDOWN, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_shutdownStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterShutdownStatement) {
	 		listener.enterShutdownStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitShutdownStatement) {
	 		listener.exitShutdownStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitShutdownStatement) {
			return visitor.visitShutdownStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableIndexesContext extends ParserRuleContext {
	public _indexFormat!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public uidList(): UidListContext {
		return this.getTypedRuleContext(UidListContext, 0) as UidListContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tableIndexes;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableIndexes) {
	 		listener.enterTableIndexes(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableIndexes) {
	 		listener.exitTableIndexes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableIndexes) {
			return visitor.visitTableIndexes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FlushOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_flushOption;
	}
	public copyFrom(ctx: FlushOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class TableFlushOptionContext extends FlushOptionContext {
	constructor(parser: MySqlParser, ctx: FlushOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public TABLES(): TerminalNode {
		return this.getToken(MySqlParser.TABLES, 0);
	}
	public tables(): TablesContext {
		return this.getTypedRuleContext(TablesContext, 0) as TablesContext;
	}
	public flushTableOption(): FlushTableOptionContext {
		return this.getTypedRuleContext(FlushTableOptionContext, 0) as FlushTableOptionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableFlushOption) {
	 		listener.enterTableFlushOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableFlushOption) {
	 		listener.exitTableFlushOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableFlushOption) {
			return visitor.visitTableFlushOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ChannelFlushOptionContext extends FlushOptionContext {
	constructor(parser: MySqlParser, ctx: FlushOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public RELAY(): TerminalNode {
		return this.getToken(MySqlParser.RELAY, 0);
	}
	public LOGS(): TerminalNode {
		return this.getToken(MySqlParser.LOGS, 0);
	}
	public channelOption(): ChannelOptionContext {
		return this.getTypedRuleContext(ChannelOptionContext, 0) as ChannelOptionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterChannelFlushOption) {
	 		listener.enterChannelFlushOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitChannelFlushOption) {
	 		listener.exitChannelFlushOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitChannelFlushOption) {
			return visitor.visitChannelFlushOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleFlushOptionContext extends FlushOptionContext {
	constructor(parser: MySqlParser, ctx: FlushOptionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DES_KEY_FILE(): TerminalNode {
		return this.getToken(MySqlParser.DES_KEY_FILE, 0);
	}
	public HOSTS(): TerminalNode {
		return this.getToken(MySqlParser.HOSTS, 0);
	}
	public LOGS(): TerminalNode {
		return this.getToken(MySqlParser.LOGS, 0);
	}
	public OPTIMIZER_COSTS(): TerminalNode {
		return this.getToken(MySqlParser.OPTIMIZER_COSTS, 0);
	}
	public PRIVILEGES(): TerminalNode {
		return this.getToken(MySqlParser.PRIVILEGES, 0);
	}
	public QUERY(): TerminalNode {
		return this.getToken(MySqlParser.QUERY, 0);
	}
	public CACHE(): TerminalNode {
		return this.getToken(MySqlParser.CACHE, 0);
	}
	public STATUS(): TerminalNode {
		return this.getToken(MySqlParser.STATUS, 0);
	}
	public USER_RESOURCES(): TerminalNode {
		return this.getToken(MySqlParser.USER_RESOURCES, 0);
	}
	public TABLES(): TerminalNode {
		return this.getToken(MySqlParser.TABLES, 0);
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public READ(): TerminalNode {
		return this.getToken(MySqlParser.READ, 0);
	}
	public LOCK(): TerminalNode {
		return this.getToken(MySqlParser.LOCK, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public ERROR(): TerminalNode {
		return this.getToken(MySqlParser.ERROR, 0);
	}
	public GENERAL(): TerminalNode {
		return this.getToken(MySqlParser.GENERAL, 0);
	}
	public RELAY(): TerminalNode {
		return this.getToken(MySqlParser.RELAY, 0);
	}
	public SLOW(): TerminalNode {
		return this.getToken(MySqlParser.SLOW, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSimpleFlushOption) {
	 		listener.enterSimpleFlushOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSimpleFlushOption) {
	 		listener.exitSimpleFlushOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleFlushOption) {
			return visitor.visitSimpleFlushOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FlushTableOptionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public READ(): TerminalNode {
		return this.getToken(MySqlParser.READ, 0);
	}
	public LOCK(): TerminalNode {
		return this.getToken(MySqlParser.LOCK, 0);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public EXPORT(): TerminalNode {
		return this.getToken(MySqlParser.EXPORT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_flushTableOption;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFlushTableOption) {
	 		listener.enterFlushTableOption(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFlushTableOption) {
	 		listener.exitFlushTableOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFlushTableOption) {
			return visitor.visitFlushTableOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadedTableIndexesContext extends ParserRuleContext {
	public _partitionList!: UidListContext;
	public _indexFormat!: Token;
	public _indexList!: UidListContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public IGNORE(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE, 0);
	}
	public LEAVES(): TerminalNode {
		return this.getToken(MySqlParser.LEAVES, 0);
	}
	public uidList_list(): UidListContext[] {
		return this.getTypedRuleContexts(UidListContext) as UidListContext[];
	}
	public uidList(i: number): UidListContext {
		return this.getTypedRuleContext(UidListContext, i) as UidListContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public INDEX(): TerminalNode {
		return this.getToken(MySqlParser.INDEX, 0);
	}
	public KEY(): TerminalNode {
		return this.getToken(MySqlParser.KEY, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_loadedTableIndexes;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLoadedTableIndexes) {
	 		listener.enterLoadedTableIndexes(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLoadedTableIndexes) {
	 		listener.exitLoadedTableIndexes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLoadedTableIndexes) {
			return visitor.visitLoadedTableIndexes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SimpleDescribeStatementContext extends ParserRuleContext {
	public _command!: Token;
	public _column!: UidContext;
	public _pattern!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public EXPLAIN(): TerminalNode {
		return this.getToken(MySqlParser.EXPLAIN, 0);
	}
	public DESCRIBE(): TerminalNode {
		return this.getToken(MySqlParser.DESCRIBE, 0);
	}
	public DESC(): TerminalNode {
		return this.getToken(MySqlParser.DESC, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_simpleDescribeStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSimpleDescribeStatement) {
	 		listener.enterSimpleDescribeStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSimpleDescribeStatement) {
	 		listener.exitSimpleDescribeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleDescribeStatement) {
			return visitor.visitSimpleDescribeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FullDescribeStatementContext extends ParserRuleContext {
	public _command!: Token;
	public _formatType!: Token;
	public _formatValue!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public describeObjectClause(): DescribeObjectClauseContext {
		return this.getTypedRuleContext(DescribeObjectClauseContext, 0) as DescribeObjectClauseContext;
	}
	public EXPLAIN(): TerminalNode {
		return this.getToken(MySqlParser.EXPLAIN, 0);
	}
	public DESCRIBE(): TerminalNode {
		return this.getToken(MySqlParser.DESCRIBE, 0);
	}
	public DESC(): TerminalNode {
		return this.getToken(MySqlParser.DESC, 0);
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public EXTENDED(): TerminalNode {
		return this.getToken(MySqlParser.EXTENDED, 0);
	}
	public PARTITIONS(): TerminalNode {
		return this.getToken(MySqlParser.PARTITIONS, 0);
	}
	public FORMAT(): TerminalNode {
		return this.getToken(MySqlParser.FORMAT, 0);
	}
	public TRADITIONAL(): TerminalNode {
		return this.getToken(MySqlParser.TRADITIONAL, 0);
	}
	public JSON(): TerminalNode {
		return this.getToken(MySqlParser.JSON, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_fullDescribeStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFullDescribeStatement) {
	 		listener.enterFullDescribeStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFullDescribeStatement) {
	 		listener.exitFullDescribeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFullDescribeStatement) {
			return visitor.visitFullDescribeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HelpStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HELP(): TerminalNode {
		return this.getToken(MySqlParser.HELP, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_helpStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHelpStatement) {
	 		listener.enterHelpStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHelpStatement) {
	 		listener.exitHelpStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHelpStatement) {
			return visitor.visitHelpStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UseStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public USE(): TerminalNode {
		return this.getToken(MySqlParser.USE, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_useStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUseStatement) {
	 		listener.enterUseStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUseStatement) {
	 		listener.exitUseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUseStatement) {
			return visitor.visitUseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SignalStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public SIGNAL(): TerminalNode {
		return this.getToken(MySqlParser.SIGNAL, 0);
	}
	public ID(): TerminalNode {
		return this.getToken(MySqlParser.ID, 0);
	}
	public REVERSE_QUOTE_ID(): TerminalNode {
		return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public signalConditionInformation_list(): SignalConditionInformationContext[] {
		return this.getTypedRuleContexts(SignalConditionInformationContext) as SignalConditionInformationContext[];
	}
	public signalConditionInformation(i: number): SignalConditionInformationContext {
		return this.getTypedRuleContext(SignalConditionInformationContext, i) as SignalConditionInformationContext;
	}
	public SQLSTATE(): TerminalNode {
		return this.getToken(MySqlParser.SQLSTATE, 0);
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public VALUE(): TerminalNode {
		return this.getToken(MySqlParser.VALUE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_signalStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSignalStatement) {
	 		listener.enterSignalStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSignalStatement) {
	 		listener.exitSignalStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSignalStatement) {
			return visitor.visitSignalStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResignalStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public RESIGNAL(): TerminalNode {
		return this.getToken(MySqlParser.RESIGNAL, 0);
	}
	public ID(): TerminalNode {
		return this.getToken(MySqlParser.ID, 0);
	}
	public REVERSE_QUOTE_ID(): TerminalNode {
		return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public signalConditionInformation_list(): SignalConditionInformationContext[] {
		return this.getTypedRuleContexts(SignalConditionInformationContext) as SignalConditionInformationContext[];
	}
	public signalConditionInformation(i: number): SignalConditionInformationContext {
		return this.getTypedRuleContext(SignalConditionInformationContext, i) as SignalConditionInformationContext;
	}
	public SQLSTATE(): TerminalNode {
		return this.getToken(MySqlParser.SQLSTATE, 0);
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public VALUE(): TerminalNode {
		return this.getToken(MySqlParser.VALUE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_resignalStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterResignalStatement) {
	 		listener.enterResignalStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitResignalStatement) {
	 		listener.exitResignalStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitResignalStatement) {
			return visitor.visitResignalStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SignalConditionInformationContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public CLASS_ORIGIN(): TerminalNode {
		return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
	}
	public SUBCLASS_ORIGIN(): TerminalNode {
		return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
	}
	public MESSAGE_TEXT(): TerminalNode {
		return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
	}
	public MYSQL_ERRNO(): TerminalNode {
		return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
	}
	public CONSTRAINT_CATALOG(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
	}
	public CONSTRAINT_SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
	}
	public CONSTRAINT_NAME(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
	}
	public CATALOG_NAME(): TerminalNode {
		return this.getToken(MySqlParser.CATALOG_NAME, 0);
	}
	public SCHEMA_NAME(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMA_NAME, 0);
	}
	public TABLE_NAME(): TerminalNode {
		return this.getToken(MySqlParser.TABLE_NAME, 0);
	}
	public COLUMN_NAME(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN_NAME, 0);
	}
	public CURSOR_NAME(): TerminalNode {
		return this.getToken(MySqlParser.CURSOR_NAME, 0);
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public DECIMAL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.DECIMAL_LITERAL, 0);
	}
	public mysqlVariable(): MysqlVariableContext {
		return this.getTypedRuleContext(MysqlVariableContext, 0) as MysqlVariableContext;
	}
	public simpleId(): SimpleIdContext {
		return this.getTypedRuleContext(SimpleIdContext, 0) as SimpleIdContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_signalConditionInformation;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSignalConditionInformation) {
	 		listener.enterSignalConditionInformation(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSignalConditionInformation) {
	 		listener.exitSignalConditionInformation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSignalConditionInformation) {
			return visitor.visitSignalConditionInformation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WITH(): TerminalNode {
		return this.getToken(MySqlParser.WITH, 0);
	}
	public commonTableExpressions_list(): CommonTableExpressionsContext[] {
		return this.getTypedRuleContexts(CommonTableExpressionsContext) as CommonTableExpressionsContext[];
	}
	public commonTableExpressions(i: number): CommonTableExpressionsContext {
		return this.getTypedRuleContext(CommonTableExpressionsContext, i) as CommonTableExpressionsContext;
	}
	public RECURSIVE(): TerminalNode {
		return this.getToken(MySqlParser.RECURSIVE, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_withStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWithStatement) {
	 		listener.enterWithStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWithStatement) {
	 		listener.exitWithStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWithStatement) {
			return visitor.visitWithStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tableStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableStatement) {
	 		listener.enterTableStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableStatement) {
	 		listener.exitTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableStatement) {
			return visitor.visitTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DiagnosticsStatementContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GET(): TerminalNode {
		return this.getToken(MySqlParser.GET, 0);
	}
	public DIAGNOSTICS(): TerminalNode {
		return this.getToken(MySqlParser.DIAGNOSTICS, 0);
	}
	public CURRENT(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT, 0);
	}
	public STACKED(): TerminalNode {
		return this.getToken(MySqlParser.STACKED, 0);
	}
	public variableClause_list(): VariableClauseContext[] {
		return this.getTypedRuleContexts(VariableClauseContext) as VariableClauseContext[];
	}
	public variableClause(i: number): VariableClauseContext {
		return this.getTypedRuleContext(VariableClauseContext, i) as VariableClauseContext;
	}
	public EQUAL_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	}
	public EQUAL_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	}
	public CONDITION(): TerminalNode {
		return this.getToken(MySqlParser.CONDITION, 0);
	}
	public diagnosticsConditionInformationName_list(): DiagnosticsConditionInformationNameContext[] {
		return this.getTypedRuleContexts(DiagnosticsConditionInformationNameContext) as DiagnosticsConditionInformationNameContext[];
	}
	public diagnosticsConditionInformationName(i: number): DiagnosticsConditionInformationNameContext {
		return this.getTypedRuleContext(DiagnosticsConditionInformationNameContext, i) as DiagnosticsConditionInformationNameContext;
	}
	public NUMBER_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.NUMBER);
	}
	public NUMBER(i: number): TerminalNode {
		return this.getToken(MySqlParser.NUMBER, i);
	}
	public ROW_COUNT_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ROW_COUNT);
	}
	public ROW_COUNT(i: number): TerminalNode {
		return this.getToken(MySqlParser.ROW_COUNT, i);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_diagnosticsStatement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDiagnosticsStatement) {
	 		listener.enterDiagnosticsStatement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDiagnosticsStatement) {
	 		listener.exitDiagnosticsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDiagnosticsStatement) {
			return visitor.visitDiagnosticsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CLASS_ORIGIN(): TerminalNode {
		return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
	}
	public SUBCLASS_ORIGIN(): TerminalNode {
		return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
	}
	public RETURNED_SQLSTATE(): TerminalNode {
		return this.getToken(MySqlParser.RETURNED_SQLSTATE, 0);
	}
	public MESSAGE_TEXT(): TerminalNode {
		return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
	}
	public MYSQL_ERRNO(): TerminalNode {
		return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
	}
	public CONSTRAINT_CATALOG(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
	}
	public CONSTRAINT_SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
	}
	public CONSTRAINT_NAME(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
	}
	public CATALOG_NAME(): TerminalNode {
		return this.getToken(MySqlParser.CATALOG_NAME, 0);
	}
	public SCHEMA_NAME(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMA_NAME, 0);
	}
	public TABLE_NAME(): TerminalNode {
		return this.getToken(MySqlParser.TABLE_NAME, 0);
	}
	public COLUMN_NAME(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN_NAME, 0);
	}
	public CURSOR_NAME(): TerminalNode {
		return this.getToken(MySqlParser.CURSOR_NAME, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_diagnosticsConditionInformationName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDiagnosticsConditionInformationName) {
	 		listener.enterDiagnosticsConditionInformationName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDiagnosticsConditionInformationName) {
	 		listener.exitDiagnosticsConditionInformationName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDiagnosticsConditionInformationName) {
			return visitor.visitDiagnosticsConditionInformationName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DescribeObjectClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_describeObjectClause;
	}
	public copyFrom(ctx: DescribeObjectClauseContext): void {
		super.copyFrom(ctx);
	}
}
export class DescribeStatementsContext extends DescribeObjectClauseContext {
	constructor(parser: MySqlParser, ctx: DescribeObjectClauseContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public deleteStatement(): DeleteStatementContext {
		return this.getTypedRuleContext(DeleteStatementContext, 0) as DeleteStatementContext;
	}
	public insertStatement(): InsertStatementContext {
		return this.getTypedRuleContext(InsertStatementContext, 0) as InsertStatementContext;
	}
	public replaceStatement(): ReplaceStatementContext {
		return this.getTypedRuleContext(ReplaceStatementContext, 0) as ReplaceStatementContext;
	}
	public updateStatement(): UpdateStatementContext {
		return this.getTypedRuleContext(UpdateStatementContext, 0) as UpdateStatementContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDescribeStatements) {
	 		listener.enterDescribeStatements(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDescribeStatements) {
	 		listener.exitDescribeStatements(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDescribeStatements) {
			return visitor.visitDescribeStatements(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DescribeConnectionContext extends DescribeObjectClauseContext {
	constructor(parser: MySqlParser, ctx: DescribeObjectClauseContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public CONNECTION(): TerminalNode {
		return this.getToken(MySqlParser.CONNECTION, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDescribeConnection) {
	 		listener.enterDescribeConnection(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDescribeConnection) {
	 		listener.exitDescribeConnection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDescribeConnection) {
			return visitor.visitDescribeConnection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FullIdContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public DOT_ID(): TerminalNode {
		return this.getToken(MySqlParser.DOT_ID, 0);
	}
	public DOT(): TerminalNode {
		return this.getToken(MySqlParser.DOT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_fullId;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFullId) {
	 		listener.enterFullId(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFullId) {
	 		listener.exitFullId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFullId) {
			return visitor.visitFullId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tableName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTableName) {
	 		listener.enterTableName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTableName) {
	 		listener.exitTableName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTableName) {
			return visitor.visitTableName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoleNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public userName(): UserNameContext {
		return this.getTypedRuleContext(UserNameContext, 0) as UserNameContext;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_roleName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRoleName) {
	 		listener.enterRoleName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRoleName) {
	 		listener.exitRoleName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRoleName) {
			return visitor.visitRoleName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FullColumnNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public dottedId_list(): DottedIdContext[] {
		return this.getTypedRuleContexts(DottedIdContext) as DottedIdContext[];
	}
	public dottedId(i: number): DottedIdContext {
		return this.getTypedRuleContext(DottedIdContext, i) as DottedIdContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_fullColumnName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFullColumnName) {
	 		listener.enterFullColumnName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFullColumnName) {
	 		listener.exitFullColumnName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFullColumnName) {
			return visitor.visitFullColumnName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexColumnNameContext extends ParserRuleContext {
	public _sortType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public ASC(): TerminalNode {
		return this.getToken(MySqlParser.ASC, 0);
	}
	public DESC(): TerminalNode {
		return this.getToken(MySqlParser.DESC, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_indexColumnName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIndexColumnName) {
	 		listener.enterIndexColumnName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIndexColumnName) {
	 		listener.exitIndexColumnName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexColumnName) {
			return visitor.visitIndexColumnName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SimpleUserNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public ID(): TerminalNode {
		return this.getToken(MySqlParser.ID, 0);
	}
	public ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.ADMIN, 0);
	}
	public keywordsCanBeId(): KeywordsCanBeIdContext {
		return this.getTypedRuleContext(KeywordsCanBeIdContext, 0) as KeywordsCanBeIdContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_simpleUserName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSimpleUserName) {
	 		listener.enterSimpleUserName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSimpleUserName) {
	 		listener.exitSimpleUserName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleUserName) {
			return visitor.visitSimpleUserName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HostNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL_ID(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL_ID, 0);
	}
	public HOST_IP_ADDRESS(): TerminalNode {
		return this.getToken(MySqlParser.HOST_IP_ADDRESS, 0);
	}
	public AT_SIGN(): TerminalNode {
		return this.getToken(MySqlParser.AT_SIGN, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_hostName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHostName) {
	 		listener.enterHostName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHostName) {
	 		listener.exitHostName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHostName) {
			return visitor.visitHostName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleUserName(): SimpleUserNameContext {
		return this.getTypedRuleContext(SimpleUserNameContext, 0) as SimpleUserNameContext;
	}
	public hostName(): HostNameContext {
		return this.getTypedRuleContext(HostNameContext, 0) as HostNameContext;
	}
	public currentUserExpression(): CurrentUserExpressionContext {
		return this.getTypedRuleContext(CurrentUserExpressionContext, 0) as CurrentUserExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_userName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUserName) {
	 		listener.enterUserName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUserName) {
	 		listener.exitUserName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserName) {
			return visitor.visitUserName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MysqlVariableContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL_ID(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL_ID, 0);
	}
	public GLOBAL_ID(): TerminalNode {
		return this.getToken(MySqlParser.GLOBAL_ID, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_mysqlVariable;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMysqlVariable) {
	 		listener.enterMysqlVariable(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMysqlVariable) {
	 		listener.exitMysqlVariable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMysqlVariable) {
			return visitor.visitMysqlVariable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharsetNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public charsetNameBase(): CharsetNameBaseContext {
		return this.getTypedRuleContext(CharsetNameBaseContext, 0) as CharsetNameBaseContext;
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public CHARSET_REVERSE_QOUTE_STRING(): TerminalNode {
		return this.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_charsetName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCharsetName) {
	 		listener.enterCharsetName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCharsetName) {
	 		listener.exitCharsetName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCharsetName) {
			return visitor.visitCharsetName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CollationNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_collationName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCollationName) {
	 		listener.enterCollationName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCollationName) {
	 		listener.exitCollationName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCollationName) {
			return visitor.visitCollationName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EngineNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public engineNameBase(): EngineNameBaseContext {
		return this.getTypedRuleContext(EngineNameBaseContext, 0) as EngineNameBaseContext;
	}
	public ID(): TerminalNode {
		return this.getToken(MySqlParser.ID, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_engineName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterEngineName) {
	 		listener.enterEngineName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitEngineName) {
	 		listener.exitEngineName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitEngineName) {
			return visitor.visitEngineName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EngineNameBaseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ARCHIVE(): TerminalNode {
		return this.getToken(MySqlParser.ARCHIVE, 0);
	}
	public BLACKHOLE(): TerminalNode {
		return this.getToken(MySqlParser.BLACKHOLE, 0);
	}
	public CONNECT(): TerminalNode {
		return this.getToken(MySqlParser.CONNECT, 0);
	}
	public CSV(): TerminalNode {
		return this.getToken(MySqlParser.CSV, 0);
	}
	public FEDERATED(): TerminalNode {
		return this.getToken(MySqlParser.FEDERATED, 0);
	}
	public INNODB(): TerminalNode {
		return this.getToken(MySqlParser.INNODB, 0);
	}
	public MEMORY(): TerminalNode {
		return this.getToken(MySqlParser.MEMORY, 0);
	}
	public MRG_MYISAM(): TerminalNode {
		return this.getToken(MySqlParser.MRG_MYISAM, 0);
	}
	public MYISAM(): TerminalNode {
		return this.getToken(MySqlParser.MYISAM, 0);
	}
	public NDB(): TerminalNode {
		return this.getToken(MySqlParser.NDB, 0);
	}
	public NDBCLUSTER(): TerminalNode {
		return this.getToken(MySqlParser.NDBCLUSTER, 0);
	}
	public PERFORMANCE_SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.PERFORMANCE_SCHEMA, 0);
	}
	public TOKUDB(): TerminalNode {
		return this.getToken(MySqlParser.TOKUDB, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_engineNameBase;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterEngineNameBase) {
	 		listener.enterEngineNameBase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitEngineNameBase) {
	 		listener.exitEngineNameBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitEngineNameBase) {
			return visitor.visitEngineNameBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UuidSetContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public decimalLiteral_list(): DecimalLiteralContext[] {
		return this.getTypedRuleContexts(DecimalLiteralContext) as DecimalLiteralContext[];
	}
	public decimalLiteral(i: number): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, i) as DecimalLiteralContext;
	}
	public MINUS_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.MINUS);
	}
	public MINUS(i: number): TerminalNode {
		return this.getToken(MySqlParser.MINUS, i);
	}
	public COLON_SYMB_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COLON_SYMB);
	}
	public COLON_SYMB(i: number): TerminalNode {
		return this.getToken(MySqlParser.COLON_SYMB, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_uuidSet;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUuidSet) {
	 		listener.enterUuidSet(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUuidSet) {
	 		listener.exitUuidSet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUuidSet) {
			return visitor.visitUuidSet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XidContext extends ParserRuleContext {
	public _globalTableUid!: XuidStringIdContext;
	public _qualifier!: XuidStringIdContext;
	public _idFormat!: DecimalLiteralContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public xuidStringId_list(): XuidStringIdContext[] {
		return this.getTypedRuleContexts(XuidStringIdContext) as XuidStringIdContext[];
	}
	public xuidStringId(i: number): XuidStringIdContext {
		return this.getTypedRuleContext(XuidStringIdContext, i) as XuidStringIdContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_xid;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterXid) {
	 		listener.enterXid(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitXid) {
	 		listener.exitXid(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXid) {
			return visitor.visitXid(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XuidStringIdContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public BIT_STRING(): TerminalNode {
		return this.getToken(MySqlParser.BIT_STRING, 0);
	}
	public HEXADECIMAL_LITERAL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.HEXADECIMAL_LITERAL);
	}
	public HEXADECIMAL_LITERAL(i: number): TerminalNode {
		return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_xuidStringId;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterXuidStringId) {
	 		listener.enterXuidStringId(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitXuidStringId) {
	 		listener.exitXuidStringId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitXuidStringId) {
			return visitor.visitXuidStringId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthPluginContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_authPlugin;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAuthPlugin) {
	 		listener.enterAuthPlugin(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAuthPlugin) {
	 		listener.exitAuthPlugin(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAuthPlugin) {
			return visitor.visitAuthPlugin(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UidContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public simpleId(): SimpleIdContext {
		return this.getTypedRuleContext(SimpleIdContext, 0) as SimpleIdContext;
	}
	public CHARSET_REVERSE_QOUTE_STRING(): TerminalNode {
		return this.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_uid;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUid) {
	 		listener.enterUid(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUid) {
	 		listener.exitUid(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUid) {
			return visitor.visitUid(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SimpleIdContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ID(): TerminalNode {
		return this.getToken(MySqlParser.ID, 0);
	}
	public charsetNameBase(): CharsetNameBaseContext {
		return this.getTypedRuleContext(CharsetNameBaseContext, 0) as CharsetNameBaseContext;
	}
	public transactionLevelBase(): TransactionLevelBaseContext {
		return this.getTypedRuleContext(TransactionLevelBaseContext, 0) as TransactionLevelBaseContext;
	}
	public engineNameBase(): EngineNameBaseContext {
		return this.getTypedRuleContext(EngineNameBaseContext, 0) as EngineNameBaseContext;
	}
	public privilegesBase(): PrivilegesBaseContext {
		return this.getTypedRuleContext(PrivilegesBaseContext, 0) as PrivilegesBaseContext;
	}
	public intervalTypeBase(): IntervalTypeBaseContext {
		return this.getTypedRuleContext(IntervalTypeBaseContext, 0) as IntervalTypeBaseContext;
	}
	public dataTypeBase(): DataTypeBaseContext {
		return this.getTypedRuleContext(DataTypeBaseContext, 0) as DataTypeBaseContext;
	}
	public keywordsCanBeId(): KeywordsCanBeIdContext {
		return this.getTypedRuleContext(KeywordsCanBeIdContext, 0) as KeywordsCanBeIdContext;
	}
	public scalarFunctionName(): ScalarFunctionNameContext {
		return this.getTypedRuleContext(ScalarFunctionNameContext, 0) as ScalarFunctionNameContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_simpleId;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSimpleId) {
	 		listener.enterSimpleId(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSimpleId) {
	 		listener.exitSimpleId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleId) {
			return visitor.visitSimpleId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DottedIdContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOT_ID(): TerminalNode {
		return this.getToken(MySqlParser.DOT_ID, 0);
	}
	public DOT(): TerminalNode {
		return this.getToken(MySqlParser.DOT, 0);
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dottedId;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDottedId) {
	 		listener.enterDottedId(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDottedId) {
	 		listener.exitDottedId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDottedId) {
			return visitor.visitDottedId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DecimalLiteralContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DECIMAL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.DECIMAL_LITERAL, 0);
	}
	public ZERO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	}
	public ONE_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	}
	public TWO_DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	}
	public REAL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.REAL_LITERAL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_decimalLiteral;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDecimalLiteral) {
	 		listener.enterDecimalLiteral(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDecimalLiteral) {
	 		listener.exitDecimalLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDecimalLiteral) {
			return visitor.visitDecimalLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileSizeLiteralContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public FILESIZE_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.FILESIZE_LITERAL, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_fileSizeLiteral;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFileSizeLiteral) {
	 		listener.enterFileSizeLiteral(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFileSizeLiteral) {
	 		listener.exitFileSizeLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFileSizeLiteral) {
			return visitor.visitFileSizeLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringLiteralContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STRING_LITERAL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.STRING_LITERAL);
	}
	public STRING_LITERAL(i: number): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, i);
	}
	public START_NATIONAL_STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0);
	}
	public STRING_CHARSET_NAME(): TerminalNode {
		return this.getToken(MySqlParser.STRING_CHARSET_NAME, 0);
	}
	public COLLATE(): TerminalNode {
		return this.getToken(MySqlParser.COLLATE, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_stringLiteral;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStringLiteral) {
	 		listener.enterStringLiteral(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStringLiteral) {
	 		listener.exitStringLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStringLiteral) {
			return visitor.visitStringLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanLiteralContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TRUE(): TerminalNode {
		return this.getToken(MySqlParser.TRUE, 0);
	}
	public FALSE(): TerminalNode {
		return this.getToken(MySqlParser.FALSE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_booleanLiteral;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterBooleanLiteral) {
	 		listener.enterBooleanLiteral(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitBooleanLiteral) {
	 		listener.exitBooleanLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBooleanLiteral) {
			return visitor.visitBooleanLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HexadecimalLiteralContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public HEXADECIMAL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0);
	}
	public STRING_CHARSET_NAME(): TerminalNode {
		return this.getToken(MySqlParser.STRING_CHARSET_NAME, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_hexadecimalLiteral;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterHexadecimalLiteral) {
	 		listener.enterHexadecimalLiteral(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitHexadecimalLiteral) {
	 		listener.exitHexadecimalLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitHexadecimalLiteral) {
			return visitor.visitHexadecimalLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NullNotnullContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NULL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.NULL_LITERAL, 0);
	}
	public NULL_SPEC_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.NULL_SPEC_LITERAL, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_nullNotnull;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterNullNotnull) {
	 		listener.enterNullNotnull(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitNullNotnull) {
	 		listener.exitNullNotnull(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNullNotnull) {
			return visitor.visitNullNotnull(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	public _nullLiteral!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public MINUS(): TerminalNode {
		return this.getToken(MySqlParser.MINUS, 0);
	}
	public hexadecimalLiteral(): HexadecimalLiteralContext {
		return this.getTypedRuleContext(HexadecimalLiteralContext, 0) as HexadecimalLiteralContext;
	}
	public booleanLiteral(): BooleanLiteralContext {
		return this.getTypedRuleContext(BooleanLiteralContext, 0) as BooleanLiteralContext;
	}
	public REAL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.REAL_LITERAL, 0);
	}
	public BIT_STRING(): TerminalNode {
		return this.getToken(MySqlParser.BIT_STRING, 0);
	}
	public NULL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.NULL_LITERAL, 0);
	}
	public NULL_SPEC_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.NULL_SPEC_LITERAL, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_constant;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterConstant) {
	 		listener.enterConstant(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitConstant) {
	 		listener.exitConstant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitConstant) {
			return visitor.visitConstant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataTypeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dataType;
	}
	public copyFrom(ctx: DataTypeContext): void {
		super.copyFrom(ctx);
	}
}
export class SpatialDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	constructor(parser: MySqlParser, ctx: DataTypeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public GEOMETRYCOLLECTION(): TerminalNode {
		return this.getToken(MySqlParser.GEOMETRYCOLLECTION, 0);
	}
	public GEOMCOLLECTION(): TerminalNode {
		return this.getToken(MySqlParser.GEOMCOLLECTION, 0);
	}
	public LINESTRING(): TerminalNode {
		return this.getToken(MySqlParser.LINESTRING, 0);
	}
	public MULTILINESTRING(): TerminalNode {
		return this.getToken(MySqlParser.MULTILINESTRING, 0);
	}
	public MULTIPOINT(): TerminalNode {
		return this.getToken(MySqlParser.MULTIPOINT, 0);
	}
	public MULTIPOLYGON(): TerminalNode {
		return this.getToken(MySqlParser.MULTIPOLYGON, 0);
	}
	public POINT(): TerminalNode {
		return this.getToken(MySqlParser.POINT, 0);
	}
	public POLYGON(): TerminalNode {
		return this.getToken(MySqlParser.POLYGON, 0);
	}
	public JSON(): TerminalNode {
		return this.getToken(MySqlParser.JSON, 0);
	}
	public GEOMETRY(): TerminalNode {
		return this.getToken(MySqlParser.GEOMETRY, 0);
	}
	public SRID(): TerminalNode {
		return this.getToken(MySqlParser.SRID, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSpatialDataType) {
	 		listener.enterSpatialDataType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSpatialDataType) {
	 		listener.exitSpatialDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSpatialDataType) {
			return visitor.visitSpatialDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LongVarbinaryDataTypeContext extends DataTypeContext {
	constructor(parser: MySqlParser, ctx: DataTypeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LONG(): TerminalNode {
		return this.getToken(MySqlParser.LONG, 0);
	}
	public VARBINARY(): TerminalNode {
		return this.getToken(MySqlParser.VARBINARY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLongVarbinaryDataType) {
	 		listener.enterLongVarbinaryDataType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLongVarbinaryDataType) {
	 		listener.exitLongVarbinaryDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLongVarbinaryDataType) {
			return visitor.visitLongVarbinaryDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CollectionDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	constructor(parser: MySqlParser, ctx: DataTypeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public collectionOptions(): CollectionOptionsContext {
		return this.getTypedRuleContext(CollectionOptionsContext, 0) as CollectionOptionsContext;
	}
	public ENUM(): TerminalNode {
		return this.getToken(MySqlParser.ENUM, 0);
	}
	public SET(): TerminalNode {
		return this.getToken(MySqlParser.SET, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public charSet(): CharSetContext {
		return this.getTypedRuleContext(CharSetContext, 0) as CharSetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCollectionDataType) {
	 		listener.enterCollectionDataType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCollectionDataType) {
	 		listener.exitCollectionDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCollectionDataType) {
			return visitor.visitCollectionDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NationalVaryingStringDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	constructor(parser: MySqlParser, ctx: DataTypeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public NATIONAL(): TerminalNode {
		return this.getToken(MySqlParser.NATIONAL, 0);
	}
	public VARYING(): TerminalNode {
		return this.getToken(MySqlParser.VARYING, 0);
	}
	public CHAR(): TerminalNode {
		return this.getToken(MySqlParser.CHAR, 0);
	}
	public CHARACTER(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER, 0);
	}
	public lengthOneDimension(): LengthOneDimensionContext {
		return this.getTypedRuleContext(LengthOneDimensionContext, 0) as LengthOneDimensionContext;
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterNationalVaryingStringDataType) {
	 		listener.enterNationalVaryingStringDataType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitNationalVaryingStringDataType) {
	 		listener.exitNationalVaryingStringDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNationalVaryingStringDataType) {
			return visitor.visitNationalVaryingStringDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DimensionDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	constructor(parser: MySqlParser, ctx: DataTypeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TINYINT(): TerminalNode {
		return this.getToken(MySqlParser.TINYINT, 0);
	}
	public SMALLINT(): TerminalNode {
		return this.getToken(MySqlParser.SMALLINT, 0);
	}
	public MEDIUMINT(): TerminalNode {
		return this.getToken(MySqlParser.MEDIUMINT, 0);
	}
	public INT(): TerminalNode {
		return this.getToken(MySqlParser.INT, 0);
	}
	public INTEGER(): TerminalNode {
		return this.getToken(MySqlParser.INTEGER, 0);
	}
	public BIGINT(): TerminalNode {
		return this.getToken(MySqlParser.BIGINT, 0);
	}
	public MIDDLEINT(): TerminalNode {
		return this.getToken(MySqlParser.MIDDLEINT, 0);
	}
	public INT1(): TerminalNode {
		return this.getToken(MySqlParser.INT1, 0);
	}
	public INT2(): TerminalNode {
		return this.getToken(MySqlParser.INT2, 0);
	}
	public INT3(): TerminalNode {
		return this.getToken(MySqlParser.INT3, 0);
	}
	public INT4(): TerminalNode {
		return this.getToken(MySqlParser.INT4, 0);
	}
	public INT8(): TerminalNode {
		return this.getToken(MySqlParser.INT8, 0);
	}
	public lengthOneDimension(): LengthOneDimensionContext {
		return this.getTypedRuleContext(LengthOneDimensionContext, 0) as LengthOneDimensionContext;
	}
	public SIGNED_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.SIGNED);
	}
	public SIGNED(i: number): TerminalNode {
		return this.getToken(MySqlParser.SIGNED, i);
	}
	public UNSIGNED_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.UNSIGNED);
	}
	public UNSIGNED(i: number): TerminalNode {
		return this.getToken(MySqlParser.UNSIGNED, i);
	}
	public ZEROFILL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.ZEROFILL);
	}
	public ZEROFILL(i: number): TerminalNode {
		return this.getToken(MySqlParser.ZEROFILL, i);
	}
	public REAL(): TerminalNode {
		return this.getToken(MySqlParser.REAL, 0);
	}
	public lengthTwoDimension(): LengthTwoDimensionContext {
		return this.getTypedRuleContext(LengthTwoDimensionContext, 0) as LengthTwoDimensionContext;
	}
	public DOUBLE(): TerminalNode {
		return this.getToken(MySqlParser.DOUBLE, 0);
	}
	public PRECISION(): TerminalNode {
		return this.getToken(MySqlParser.PRECISION, 0);
	}
	public DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.DECIMAL, 0);
	}
	public DEC(): TerminalNode {
		return this.getToken(MySqlParser.DEC, 0);
	}
	public FIXED(): TerminalNode {
		return this.getToken(MySqlParser.FIXED, 0);
	}
	public NUMERIC(): TerminalNode {
		return this.getToken(MySqlParser.NUMERIC, 0);
	}
	public FLOAT(): TerminalNode {
		return this.getToken(MySqlParser.FLOAT, 0);
	}
	public FLOAT4(): TerminalNode {
		return this.getToken(MySqlParser.FLOAT4, 0);
	}
	public FLOAT8(): TerminalNode {
		return this.getToken(MySqlParser.FLOAT8, 0);
	}
	public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext {
		return this.getTypedRuleContext(LengthTwoOptionalDimensionContext, 0) as LengthTwoOptionalDimensionContext;
	}
	public BIT(): TerminalNode {
		return this.getToken(MySqlParser.BIT, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(MySqlParser.TIME, 0);
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.TIMESTAMP, 0);
	}
	public DATETIME(): TerminalNode {
		return this.getToken(MySqlParser.DATETIME, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public VARBINARY(): TerminalNode {
		return this.getToken(MySqlParser.VARBINARY, 0);
	}
	public BLOB(): TerminalNode {
		return this.getToken(MySqlParser.BLOB, 0);
	}
	public YEAR(): TerminalNode {
		return this.getToken(MySqlParser.YEAR, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDimensionDataType) {
	 		listener.enterDimensionDataType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDimensionDataType) {
	 		listener.exitDimensionDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDimensionDataType) {
			return visitor.visitDimensionDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class StringDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	constructor(parser: MySqlParser, ctx: DataTypeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHAR(): TerminalNode {
		return this.getToken(MySqlParser.CHAR, 0);
	}
	public CHARACTER(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER, 0);
	}
	public VARCHAR(): TerminalNode {
		return this.getToken(MySqlParser.VARCHAR, 0);
	}
	public TINYTEXT(): TerminalNode {
		return this.getToken(MySqlParser.TINYTEXT, 0);
	}
	public TEXT(): TerminalNode {
		return this.getToken(MySqlParser.TEXT, 0);
	}
	public MEDIUMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.MEDIUMTEXT, 0);
	}
	public LONGTEXT(): TerminalNode {
		return this.getToken(MySqlParser.LONGTEXT, 0);
	}
	public NCHAR(): TerminalNode {
		return this.getToken(MySqlParser.NCHAR, 0);
	}
	public NVARCHAR(): TerminalNode {
		return this.getToken(MySqlParser.NVARCHAR, 0);
	}
	public LONG(): TerminalNode {
		return this.getToken(MySqlParser.LONG, 0);
	}
	public VARYING(): TerminalNode {
		return this.getToken(MySqlParser.VARYING, 0);
	}
	public lengthOneDimension(): LengthOneDimensionContext {
		return this.getTypedRuleContext(LengthOneDimensionContext, 0) as LengthOneDimensionContext;
	}
	public BINARY_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.BINARY);
	}
	public BINARY(i: number): TerminalNode {
		return this.getToken(MySqlParser.BINARY, i);
	}
	public charSet(): CharSetContext {
		return this.getTypedRuleContext(CharSetContext, 0) as CharSetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public COLLATE(): TerminalNode {
		return this.getToken(MySqlParser.COLLATE, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterStringDataType) {
	 		listener.enterStringDataType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitStringDataType) {
	 		listener.exitStringDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitStringDataType) {
			return visitor.visitStringDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LongVarcharDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	constructor(parser: MySqlParser, ctx: DataTypeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LONG(): TerminalNode {
		return this.getToken(MySqlParser.LONG, 0);
	}
	public VARCHAR(): TerminalNode {
		return this.getToken(MySqlParser.VARCHAR, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public charSet(): CharSetContext {
		return this.getTypedRuleContext(CharSetContext, 0) as CharSetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public COLLATE(): TerminalNode {
		return this.getToken(MySqlParser.COLLATE, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLongVarcharDataType) {
	 		listener.enterLongVarcharDataType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLongVarcharDataType) {
	 		listener.exitLongVarcharDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLongVarcharDataType) {
			return visitor.visitLongVarcharDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NationalStringDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	constructor(parser: MySqlParser, ctx: DataTypeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public NATIONAL(): TerminalNode {
		return this.getToken(MySqlParser.NATIONAL, 0);
	}
	public VARCHAR(): TerminalNode {
		return this.getToken(MySqlParser.VARCHAR, 0);
	}
	public CHARACTER(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER, 0);
	}
	public CHAR(): TerminalNode {
		return this.getToken(MySqlParser.CHAR, 0);
	}
	public lengthOneDimension(): LengthOneDimensionContext {
		return this.getTypedRuleContext(LengthOneDimensionContext, 0) as LengthOneDimensionContext;
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public NCHAR(): TerminalNode {
		return this.getToken(MySqlParser.NCHAR, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterNationalStringDataType) {
	 		listener.enterNationalStringDataType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitNationalStringDataType) {
	 		listener.exitNationalStringDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNationalStringDataType) {
			return visitor.visitNationalStringDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleDataTypeContext extends DataTypeContext {
	public _typeName!: Token;
	constructor(parser: MySqlParser, ctx: DataTypeContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public DATE(): TerminalNode {
		return this.getToken(MySqlParser.DATE, 0);
	}
	public TINYBLOB(): TerminalNode {
		return this.getToken(MySqlParser.TINYBLOB, 0);
	}
	public MEDIUMBLOB(): TerminalNode {
		return this.getToken(MySqlParser.MEDIUMBLOB, 0);
	}
	public LONGBLOB(): TerminalNode {
		return this.getToken(MySqlParser.LONGBLOB, 0);
	}
	public BOOL(): TerminalNode {
		return this.getToken(MySqlParser.BOOL, 0);
	}
	public BOOLEAN(): TerminalNode {
		return this.getToken(MySqlParser.BOOLEAN, 0);
	}
	public SERIAL(): TerminalNode {
		return this.getToken(MySqlParser.SERIAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSimpleDataType) {
	 		listener.enterSimpleDataType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSimpleDataType) {
	 		listener.exitSimpleDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleDataType) {
			return visitor.visitSimpleDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CollectionOptionsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public STRING_LITERAL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.STRING_LITERAL);
	}
	public STRING_LITERAL(i: number): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, i);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_collectionOptions;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCollectionOptions) {
	 		listener.enterCollectionOptions(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCollectionOptions) {
	 		listener.exitCollectionOptions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCollectionOptions) {
			return visitor.visitCollectionOptions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConvertedDataTypeContext extends ParserRuleContext {
	public _typeName!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CHAR(): TerminalNode {
		return this.getToken(MySqlParser.CHAR, 0);
	}
	public SIGNED(): TerminalNode {
		return this.getToken(MySqlParser.SIGNED, 0);
	}
	public UNSIGNED(): TerminalNode {
		return this.getToken(MySqlParser.UNSIGNED, 0);
	}
	public ARRAY(): TerminalNode {
		return this.getToken(MySqlParser.ARRAY, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public NCHAR(): TerminalNode {
		return this.getToken(MySqlParser.NCHAR, 0);
	}
	public FLOAT(): TerminalNode {
		return this.getToken(MySqlParser.FLOAT, 0);
	}
	public DATE(): TerminalNode {
		return this.getToken(MySqlParser.DATE, 0);
	}
	public DATETIME(): TerminalNode {
		return this.getToken(MySqlParser.DATETIME, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(MySqlParser.TIME, 0);
	}
	public YEAR(): TerminalNode {
		return this.getToken(MySqlParser.YEAR, 0);
	}
	public JSON(): TerminalNode {
		return this.getToken(MySqlParser.JSON, 0);
	}
	public INT(): TerminalNode {
		return this.getToken(MySqlParser.INT, 0);
	}
	public INTEGER(): TerminalNode {
		return this.getToken(MySqlParser.INTEGER, 0);
	}
	public DOUBLE(): TerminalNode {
		return this.getToken(MySqlParser.DOUBLE, 0);
	}
	public DECIMAL(): TerminalNode {
		return this.getToken(MySqlParser.DECIMAL, 0);
	}
	public DEC(): TerminalNode {
		return this.getToken(MySqlParser.DEC, 0);
	}
	public lengthOneDimension(): LengthOneDimensionContext {
		return this.getTypedRuleContext(LengthOneDimensionContext, 0) as LengthOneDimensionContext;
	}
	public charSet(): CharSetContext {
		return this.getTypedRuleContext(CharSetContext, 0) as CharSetContext;
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext {
		return this.getTypedRuleContext(LengthTwoOptionalDimensionContext, 0) as LengthTwoOptionalDimensionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_convertedDataType;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterConvertedDataType) {
	 		listener.enterConvertedDataType(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitConvertedDataType) {
	 		listener.exitConvertedDataType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitConvertedDataType) {
			return visitor.visitConvertedDataType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthOneDimensionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_lengthOneDimension;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLengthOneDimension) {
	 		listener.enterLengthOneDimension(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLengthOneDimension) {
	 		listener.exitLengthOneDimension(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLengthOneDimension) {
			return visitor.visitLengthOneDimension(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthTwoDimensionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public decimalLiteral_list(): DecimalLiteralContext[] {
		return this.getTypedRuleContexts(DecimalLiteralContext) as DecimalLiteralContext[];
	}
	public decimalLiteral(i: number): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, i) as DecimalLiteralContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_lengthTwoDimension;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLengthTwoDimension) {
	 		listener.enterLengthTwoDimension(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLengthTwoDimension) {
	 		listener.exitLengthTwoDimension(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLengthTwoDimension) {
			return visitor.visitLengthTwoDimension(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LengthTwoOptionalDimensionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public decimalLiteral_list(): DecimalLiteralContext[] {
		return this.getTypedRuleContexts(DecimalLiteralContext) as DecimalLiteralContext[];
	}
	public decimalLiteral(i: number): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, i) as DecimalLiteralContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_lengthTwoOptionalDimension;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLengthTwoOptionalDimension) {
	 		listener.enterLengthTwoOptionalDimension(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLengthTwoOptionalDimension) {
	 		listener.exitLengthTwoOptionalDimension(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLengthTwoOptionalDimension) {
			return visitor.visitLengthTwoOptionalDimension(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UidListContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid_list(): UidContext[] {
		return this.getTypedRuleContexts(UidContext) as UidContext[];
	}
	public uid(i: number): UidContext {
		return this.getTypedRuleContext(UidContext, i) as UidContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_uidList;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUidList) {
	 		listener.enterUidList(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUidList) {
	 		listener.exitUidList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUidList) {
			return visitor.visitUidList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FullColumnNameListContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fullColumnName_list(): FullColumnNameContext[] {
		return this.getTypedRuleContexts(FullColumnNameContext) as FullColumnNameContext[];
	}
	public fullColumnName(i: number): FullColumnNameContext {
		return this.getTypedRuleContext(FullColumnNameContext, i) as FullColumnNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_fullColumnNameList;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFullColumnNameList) {
	 		listener.enterFullColumnNameList(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFullColumnNameList) {
	 		listener.exitFullColumnNameList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFullColumnNameList) {
			return visitor.visitFullColumnNameList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablesContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName_list(): TableNameContext[] {
		return this.getTypedRuleContexts(TableNameContext) as TableNameContext[];
	}
	public tableName(i: number): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, i) as TableNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_tables;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTables) {
	 		listener.enterTables(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTables) {
	 		listener.exitTables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTables) {
			return visitor.visitTables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexColumnNamesContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public indexColumnName_list(): IndexColumnNameContext[] {
		return this.getTypedRuleContexts(IndexColumnNameContext) as IndexColumnNameContext[];
	}
	public indexColumnName(i: number): IndexColumnNameContext {
		return this.getTypedRuleContext(IndexColumnNameContext, i) as IndexColumnNameContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_indexColumnNames;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIndexColumnNames) {
	 		listener.enterIndexColumnNames(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIndexColumnNames) {
	 		listener.exitIndexColumnNames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIndexColumnNames) {
			return visitor.visitIndexColumnNames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_expressions;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterExpressions) {
	 		listener.enterExpressions(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitExpressions) {
	 		listener.exitExpressions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExpressions) {
			return visitor.visitExpressions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsWithDefaultsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expressionOrDefault_list(): ExpressionOrDefaultContext[] {
		return this.getTypedRuleContexts(ExpressionOrDefaultContext) as ExpressionOrDefaultContext[];
	}
	public expressionOrDefault(i: number): ExpressionOrDefaultContext {
		return this.getTypedRuleContext(ExpressionOrDefaultContext, i) as ExpressionOrDefaultContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_expressionsWithDefaults;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterExpressionsWithDefaults) {
	 		listener.enterExpressionsWithDefaults(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitExpressionsWithDefaults) {
	 		listener.exitExpressionsWithDefaults(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionsWithDefaults) {
			return visitor.visitExpressionsWithDefaults(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public constant_list(): ConstantContext[] {
		return this.getTypedRuleContexts(ConstantContext) as ConstantContext[];
	}
	public constant(i: number): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, i) as ConstantContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_constants;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterConstants) {
	 		listener.enterConstants(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitConstants) {
	 		listener.exitConstants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitConstants) {
			return visitor.visitConstants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SimpleStringsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STRING_LITERAL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.STRING_LITERAL);
	}
	public STRING_LITERAL(i: number): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, i);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_simpleStrings;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSimpleStrings) {
	 		listener.enterSimpleStrings(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSimpleStrings) {
	 		listener.exitSimpleStrings(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleStrings) {
			return visitor.visitSimpleStrings(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserVariablesContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LOCAL_ID_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LOCAL_ID);
	}
	public LOCAL_ID(i: number): TerminalNode {
		return this.getToken(MySqlParser.LOCAL_ID, i);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_userVariables;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUserVariables) {
	 		listener.enterUserVariables(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUserVariables) {
	 		listener.exitUserVariables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUserVariables) {
			return visitor.visitUserVariables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefaultValueContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NULL_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.NULL_LITERAL, 0);
	}
	public CAST(): TerminalNode {
		return this.getToken(MySqlParser.CAST, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public convertedDataType(): ConvertedDataTypeContext {
		return this.getTypedRuleContext(ConvertedDataTypeContext, 0) as ConvertedDataTypeContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public constant(): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, 0) as ConstantContext;
	}
	public unaryOperator(): UnaryOperatorContext {
		return this.getTypedRuleContext(UnaryOperatorContext, 0) as UnaryOperatorContext;
	}
	public currentTimestamp_list(): CurrentTimestampContext[] {
		return this.getTypedRuleContexts(CurrentTimestampContext) as CurrentTimestampContext[];
	}
	public currentTimestamp(i: number): CurrentTimestampContext {
		return this.getTypedRuleContext(CurrentTimestampContext, i) as CurrentTimestampContext;
	}
	public ON(): TerminalNode {
		return this.getToken(MySqlParser.ON, 0);
	}
	public UPDATE(): TerminalNode {
		return this.getToken(MySqlParser.UPDATE, 0);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_defaultValue;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDefaultValue) {
	 		listener.enterDefaultValue(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDefaultValue) {
	 		listener.exitDefaultValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDefaultValue) {
			return visitor.visitDefaultValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CurrentTimestampContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public NOW(): TerminalNode {
		return this.getToken(MySqlParser.NOW, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public CURRENT_TIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	}
	public LOCALTIME(): TerminalNode {
		return this.getToken(MySqlParser.LOCALTIME, 0);
	}
	public LOCALTIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.LOCALTIMESTAMP, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_currentTimestamp;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCurrentTimestamp) {
	 		listener.enterCurrentTimestamp(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCurrentTimestamp) {
	 		listener.exitCurrentTimestamp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCurrentTimestamp) {
			return visitor.visitCurrentTimestamp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionOrDefaultContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_expressionOrDefault;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterExpressionOrDefault) {
	 		listener.enterExpressionOrDefault(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitExpressionOrDefault) {
	 		listener.exitExpressionOrDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionOrDefault) {
			return visitor.visitExpressionOrDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfExistsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IF(): TerminalNode {
		return this.getToken(MySqlParser.IF, 0);
	}
	public EXISTS(): TerminalNode {
		return this.getToken(MySqlParser.EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_ifExists;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIfExists) {
	 		listener.enterIfExists(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIfExists) {
	 		listener.exitIfExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIfExists) {
			return visitor.visitIfExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfNotExistsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public IF(): TerminalNode {
		return this.getToken(MySqlParser.IF, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public EXISTS(): TerminalNode {
		return this.getToken(MySqlParser.EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_ifNotExists;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIfNotExists) {
	 		listener.enterIfNotExists(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIfNotExists) {
	 		listener.exitIfNotExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIfNotExists) {
			return visitor.visitIfNotExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrReplaceContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OR(): TerminalNode {
		return this.getToken(MySqlParser.OR, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(MySqlParser.REPLACE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_orReplace;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterOrReplace) {
	 		listener.enterOrReplace(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitOrReplace) {
	 		listener.exitOrReplace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOrReplace) {
			return visitor.visitOrReplace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WaitNowaitClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WAIT(): TerminalNode {
		return this.getToken(MySqlParser.WAIT, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public NOWAIT(): TerminalNode {
		return this.getToken(MySqlParser.NOWAIT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_waitNowaitClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWaitNowaitClause) {
	 		listener.enterWaitNowaitClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWaitNowaitClause) {
	 		listener.exitWaitNowaitClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWaitNowaitClause) {
			return visitor.visitWaitNowaitClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionCallContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_functionCall;
	}
	public copyFrom(ctx: FunctionCallContext): void {
		super.copyFrom(ctx);
	}
}
export class SpecificFunctionCallContext extends FunctionCallContext {
	constructor(parser: MySqlParser, ctx: FunctionCallContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public specificFunction(): SpecificFunctionContext {
		return this.getTypedRuleContext(SpecificFunctionContext, 0) as SpecificFunctionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSpecificFunctionCall) {
	 		listener.enterSpecificFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSpecificFunctionCall) {
	 		listener.exitSpecificFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSpecificFunctionCall) {
			return visitor.visitSpecificFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PasswordFunctionCallContext extends FunctionCallContext {
	constructor(parser: MySqlParser, ctx: FunctionCallContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public passwordFunctionClause(): PasswordFunctionClauseContext {
		return this.getTypedRuleContext(PasswordFunctionClauseContext, 0) as PasswordFunctionClauseContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPasswordFunctionCall) {
	 		listener.enterPasswordFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPasswordFunctionCall) {
	 		listener.exitPasswordFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPasswordFunctionCall) {
			return visitor.visitPasswordFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UdfFunctionCallContext extends FunctionCallContext {
	constructor(parser: MySqlParser, ctx: FunctionCallContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public fullId(): FullIdContext {
		return this.getTypedRuleContext(FullIdContext, 0) as FullIdContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public functionArgs(): FunctionArgsContext {
		return this.getTypedRuleContext(FunctionArgsContext, 0) as FunctionArgsContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUdfFunctionCall) {
	 		listener.enterUdfFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUdfFunctionCall) {
	 		listener.exitUdfFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUdfFunctionCall) {
			return visitor.visitUdfFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NonAggregateFunctionCallContext extends FunctionCallContext {
	constructor(parser: MySqlParser, ctx: FunctionCallContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public nonAggregateWindowedFunction(): NonAggregateWindowedFunctionContext {
		return this.getTypedRuleContext(NonAggregateWindowedFunctionContext, 0) as NonAggregateWindowedFunctionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterNonAggregateFunctionCall) {
	 		listener.enterNonAggregateFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitNonAggregateFunctionCall) {
	 		listener.exitNonAggregateFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNonAggregateFunctionCall) {
			return visitor.visitNonAggregateFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AggregateFunctionCallContext extends FunctionCallContext {
	constructor(parser: MySqlParser, ctx: FunctionCallContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public aggregateWindowedFunction(): AggregateWindowedFunctionContext {
		return this.getTypedRuleContext(AggregateWindowedFunctionContext, 0) as AggregateWindowedFunctionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAggregateFunctionCall) {
	 		listener.enterAggregateFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAggregateFunctionCall) {
	 		listener.exitAggregateFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAggregateFunctionCall) {
			return visitor.visitAggregateFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScalarFunctionCallContext extends FunctionCallContext {
	constructor(parser: MySqlParser, ctx: FunctionCallContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public scalarFunctionName(): ScalarFunctionNameContext {
		return this.getTypedRuleContext(ScalarFunctionNameContext, 0) as ScalarFunctionNameContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public functionArgs(): FunctionArgsContext {
		return this.getTypedRuleContext(FunctionArgsContext, 0) as FunctionArgsContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterScalarFunctionCall) {
	 		listener.enterScalarFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitScalarFunctionCall) {
	 		listener.exitScalarFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitScalarFunctionCall) {
			return visitor.visitScalarFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SpecificFunctionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_specificFunction;
	}
	public copyFrom(ctx: SpecificFunctionContext): void {
		super.copyFrom(ctx);
	}
}
export class PositionFunctionCallContext extends SpecificFunctionContext {
	public _positionString!: StringLiteralContext;
	public _positionExpression!: ExpressionContext;
	public _inString!: StringLiteralContext;
	public _inExpression!: ExpressionContext;
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public POSITION(): TerminalNode {
		return this.getToken(MySqlParser.POSITION, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public IN(): TerminalNode {
		return this.getToken(MySqlParser.IN, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public stringLiteral_list(): StringLiteralContext[] {
		return this.getTypedRuleContexts(StringLiteralContext) as StringLiteralContext[];
	}
	public stringLiteral(i: number): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, i) as StringLiteralContext;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPositionFunctionCall) {
	 		listener.enterPositionFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPositionFunctionCall) {
	 		listener.exitPositionFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPositionFunctionCall) {
			return visitor.visitPositionFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TrimFunctionCallContext extends SpecificFunctionContext {
	public _positioinForm!: Token;
	public _sourceString!: StringLiteralContext;
	public _sourceExpression!: ExpressionContext;
	public _fromString!: StringLiteralContext;
	public _fromExpression!: ExpressionContext;
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public TRIM(): TerminalNode {
		return this.getToken(MySqlParser.TRIM, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public BOTH(): TerminalNode {
		return this.getToken(MySqlParser.BOTH, 0);
	}
	public LEADING(): TerminalNode {
		return this.getToken(MySqlParser.LEADING, 0);
	}
	public TRAILING(): TerminalNode {
		return this.getToken(MySqlParser.TRAILING, 0);
	}
	public stringLiteral_list(): StringLiteralContext[] {
		return this.getTypedRuleContexts(StringLiteralContext) as StringLiteralContext[];
	}
	public stringLiteral(i: number): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, i) as StringLiteralContext;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTrimFunctionCall) {
	 		listener.enterTrimFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTrimFunctionCall) {
	 		listener.exitTrimFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTrimFunctionCall) {
			return visitor.visitTrimFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class JsonValueFunctionCallContext extends SpecificFunctionContext {
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public JSON_VALUE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_VALUE, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public RETURNING(): TerminalNode {
		return this.getToken(MySqlParser.RETURNING, 0);
	}
	public convertedDataType(): ConvertedDataTypeContext {
		return this.getTypedRuleContext(ConvertedDataTypeContext, 0) as ConvertedDataTypeContext;
	}
	public jsonOnEmpty(): JsonOnEmptyContext {
		return this.getTypedRuleContext(JsonOnEmptyContext, 0) as JsonOnEmptyContext;
	}
	public jsonOnError(): JsonOnErrorContext {
		return this.getTypedRuleContext(JsonOnErrorContext, 0) as JsonOnErrorContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterJsonValueFunctionCall) {
	 		listener.enterJsonValueFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitJsonValueFunctionCall) {
	 		listener.exitJsonValueFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitJsonValueFunctionCall) {
			return visitor.visitJsonValueFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CaseFunctionCallContext extends SpecificFunctionContext {
	public _elseArg!: FunctionArgContext;
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CASE(): TerminalNode {
		return this.getToken(MySqlParser.CASE, 0);
	}
	public END(): TerminalNode {
		return this.getToken(MySqlParser.END, 0);
	}
	public caseFuncAlternative_list(): CaseFuncAlternativeContext[] {
		return this.getTypedRuleContexts(CaseFuncAlternativeContext) as CaseFuncAlternativeContext[];
	}
	public caseFuncAlternative(i: number): CaseFuncAlternativeContext {
		return this.getTypedRuleContext(CaseFuncAlternativeContext, i) as CaseFuncAlternativeContext;
	}
	public ELSE(): TerminalNode {
		return this.getToken(MySqlParser.ELSE, 0);
	}
	public functionArg(): FunctionArgContext {
		return this.getTypedRuleContext(FunctionArgContext, 0) as FunctionArgContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCaseFunctionCall) {
	 		listener.enterCaseFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCaseFunctionCall) {
	 		listener.exitCaseFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCaseFunctionCall) {
			return visitor.visitCaseFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExtractFunctionCallContext extends SpecificFunctionContext {
	public _sourceString!: StringLiteralContext;
	public _sourceExpression!: ExpressionContext;
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public EXTRACT(): TerminalNode {
		return this.getToken(MySqlParser.EXTRACT, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public intervalType(): IntervalTypeContext {
		return this.getTypedRuleContext(IntervalTypeContext, 0) as IntervalTypeContext;
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterExtractFunctionCall) {
	 		listener.enterExtractFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitExtractFunctionCall) {
	 		listener.exitExtractFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExtractFunctionCall) {
			return visitor.visitExtractFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataTypeFunctionCallContext extends SpecificFunctionContext {
	public _separator!: Token;
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CONVERT(): TerminalNode {
		return this.getToken(MySqlParser.CONVERT, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public convertedDataType(): ConvertedDataTypeContext {
		return this.getTypedRuleContext(ConvertedDataTypeContext, 0) as ConvertedDataTypeContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
	public USING(): TerminalNode {
		return this.getToken(MySqlParser.USING, 0);
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public CAST(): TerminalNode {
		return this.getToken(MySqlParser.CAST, 0);
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDataTypeFunctionCall) {
	 		listener.enterDataTypeFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDataTypeFunctionCall) {
	 		listener.exitDataTypeFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDataTypeFunctionCall) {
			return visitor.visitDataTypeFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ValuesFunctionCallContext extends SpecificFunctionContext {
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public VALUES(): TerminalNode {
		return this.getToken(MySqlParser.VALUES, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public fullColumnName(): FullColumnNameContext {
		return this.getTypedRuleContext(FullColumnNameContext, 0) as FullColumnNameContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterValuesFunctionCall) {
	 		listener.enterValuesFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitValuesFunctionCall) {
	 		listener.exitValuesFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitValuesFunctionCall) {
			return visitor.visitValuesFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
	public _elseArg!: FunctionArgContext;
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CASE(): TerminalNode {
		return this.getToken(MySqlParser.CASE, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public END(): TerminalNode {
		return this.getToken(MySqlParser.END, 0);
	}
	public caseFuncAlternative_list(): CaseFuncAlternativeContext[] {
		return this.getTypedRuleContexts(CaseFuncAlternativeContext) as CaseFuncAlternativeContext[];
	}
	public caseFuncAlternative(i: number): CaseFuncAlternativeContext {
		return this.getTypedRuleContext(CaseFuncAlternativeContext, i) as CaseFuncAlternativeContext;
	}
	public ELSE(): TerminalNode {
		return this.getToken(MySqlParser.ELSE, 0);
	}
	public functionArg(): FunctionArgContext {
		return this.getTypedRuleContext(FunctionArgContext, 0) as FunctionArgContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCaseExpressionFunctionCall) {
	 		listener.enterCaseExpressionFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCaseExpressionFunctionCall) {
	 		listener.exitCaseExpressionFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCaseExpressionFunctionCall) {
			return visitor.visitCaseExpressionFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentUserContext extends SpecificFunctionContext {
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public currentUserExpression(): CurrentUserExpressionContext {
		return this.getTypedRuleContext(CurrentUserExpressionContext, 0) as CurrentUserExpressionContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCurrentUser) {
	 		listener.enterCurrentUser(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCurrentUser) {
	 		listener.exitCurrentUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCurrentUser) {
			return visitor.visitCurrentUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleFunctionCallContext extends SpecificFunctionContext {
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CURRENT_DATE(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT_DATE, 0);
	}
	public CURRENT_TIME(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT_TIME, 0);
	}
	public CURRENT_TIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	}
	public LOCALTIME(): TerminalNode {
		return this.getToken(MySqlParser.LOCALTIME, 0);
	}
	public UTC_TIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.UTC_TIMESTAMP, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMA, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSimpleFunctionCall) {
	 		listener.enterSimpleFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSimpleFunctionCall) {
	 		listener.exitSimpleFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSimpleFunctionCall) {
			return visitor.visitSimpleFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CharFunctionCallContext extends SpecificFunctionContext {
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public CHAR(): TerminalNode {
		return this.getToken(MySqlParser.CHAR, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public functionArgs(): FunctionArgsContext {
		return this.getTypedRuleContext(FunctionArgsContext, 0) as FunctionArgsContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public USING(): TerminalNode {
		return this.getToken(MySqlParser.USING, 0);
	}
	public charsetName(): CharsetNameContext {
		return this.getTypedRuleContext(CharsetNameContext, 0) as CharsetNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCharFunctionCall) {
	 		listener.enterCharFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCharFunctionCall) {
	 		listener.exitCharFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCharFunctionCall) {
			return visitor.visitCharFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class WeightFunctionCallContext extends SpecificFunctionContext {
	public _stringFormat!: Token;
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public WEIGHT_STRING(): TerminalNode {
		return this.getToken(MySqlParser.WEIGHT_STRING, 0);
	}
	public LR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LR_BRACKET);
	}
	public LR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, i);
	}
	public RR_BRACKET_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.RR_BRACKET);
	}
	public RR_BRACKET(i: number): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, i);
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public AS(): TerminalNode {
		return this.getToken(MySqlParser.AS, 0);
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public levelsInWeightString(): LevelsInWeightStringContext {
		return this.getTypedRuleContext(LevelsInWeightStringContext, 0) as LevelsInWeightStringContext;
	}
	public CHAR(): TerminalNode {
		return this.getToken(MySqlParser.CHAR, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWeightFunctionCall) {
	 		listener.enterWeightFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWeightFunctionCall) {
	 		listener.exitWeightFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWeightFunctionCall) {
			return visitor.visitWeightFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GetFormatFunctionCallContext extends SpecificFunctionContext {
	public _datetimeFormat!: Token;
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public GET_FORMAT(): TerminalNode {
		return this.getToken(MySqlParser.GET_FORMAT, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(MySqlParser.COMMA, 0);
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public DATE(): TerminalNode {
		return this.getToken(MySqlParser.DATE, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(MySqlParser.TIME, 0);
	}
	public DATETIME(): TerminalNode {
		return this.getToken(MySqlParser.DATETIME, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterGetFormatFunctionCall) {
	 		listener.enterGetFormatFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitGetFormatFunctionCall) {
	 		listener.exitGetFormatFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitGetFormatFunctionCall) {
			return visitor.visitGetFormatFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubstrFunctionCallContext extends SpecificFunctionContext {
	public _sourceString!: StringLiteralContext;
	public _sourceExpression!: ExpressionContext;
	public _fromDecimal!: DecimalLiteralContext;
	public _fromExpression!: ExpressionContext;
	public _forDecimal!: DecimalLiteralContext;
	public _forExpression!: ExpressionContext;
	constructor(parser: MySqlParser, ctx: SpecificFunctionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public FROM(): TerminalNode {
		return this.getToken(MySqlParser.FROM, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public SUBSTR(): TerminalNode {
		return this.getToken(MySqlParser.SUBSTR, 0);
	}
	public SUBSTRING(): TerminalNode {
		return this.getToken(MySqlParser.SUBSTRING, 0);
	}
	public stringLiteral(): StringLiteralContext {
		return this.getTypedRuleContext(StringLiteralContext, 0) as StringLiteralContext;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public decimalLiteral_list(): DecimalLiteralContext[] {
		return this.getTypedRuleContexts(DecimalLiteralContext) as DecimalLiteralContext[];
	}
	public decimalLiteral(i: number): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, i) as DecimalLiteralContext;
	}
	public FOR(): TerminalNode {
		return this.getToken(MySqlParser.FOR, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSubstrFunctionCall) {
	 		listener.enterSubstrFunctionCall(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSubstrFunctionCall) {
	 		listener.exitSubstrFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubstrFunctionCall) {
			return visitor.visitSubstrFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CaseFuncAlternativeContext extends ParserRuleContext {
	public _condition!: FunctionArgContext;
	public _consequent!: FunctionArgContext;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public WHEN(): TerminalNode {
		return this.getToken(MySqlParser.WHEN, 0);
	}
	public THEN(): TerminalNode {
		return this.getToken(MySqlParser.THEN, 0);
	}
	public functionArg_list(): FunctionArgContext[] {
		return this.getTypedRuleContexts(FunctionArgContext) as FunctionArgContext[];
	}
	public functionArg(i: number): FunctionArgContext {
		return this.getTypedRuleContext(FunctionArgContext, i) as FunctionArgContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_caseFuncAlternative;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCaseFuncAlternative) {
	 		listener.enterCaseFuncAlternative(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCaseFuncAlternative) {
	 		listener.exitCaseFuncAlternative(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCaseFuncAlternative) {
			return visitor.visitCaseFuncAlternative(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LevelsInWeightStringContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_levelsInWeightString;
	}
	public copyFrom(ctx: LevelsInWeightStringContext): void {
		super.copyFrom(ctx);
	}
}
export class LevelWeightRangeContext extends LevelsInWeightStringContext {
	public _firstLevel!: DecimalLiteralContext;
	public _lastLevel!: DecimalLiteralContext;
	constructor(parser: MySqlParser, ctx: LevelsInWeightStringContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LEVEL(): TerminalNode {
		return this.getToken(MySqlParser.LEVEL, 0);
	}
	public MINUS(): TerminalNode {
		return this.getToken(MySqlParser.MINUS, 0);
	}
	public decimalLiteral_list(): DecimalLiteralContext[] {
		return this.getTypedRuleContexts(DecimalLiteralContext) as DecimalLiteralContext[];
	}
	public decimalLiteral(i: number): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, i) as DecimalLiteralContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLevelWeightRange) {
	 		listener.enterLevelWeightRange(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLevelWeightRange) {
	 		listener.exitLevelWeightRange(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLevelWeightRange) {
			return visitor.visitLevelWeightRange(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LevelWeightListContext extends LevelsInWeightStringContext {
	constructor(parser: MySqlParser, ctx: LevelsInWeightStringContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LEVEL(): TerminalNode {
		return this.getToken(MySqlParser.LEVEL, 0);
	}
	public levelInWeightListElement_list(): LevelInWeightListElementContext[] {
		return this.getTypedRuleContexts(LevelInWeightListElementContext) as LevelInWeightListElementContext[];
	}
	public levelInWeightListElement(i: number): LevelInWeightListElementContext {
		return this.getTypedRuleContext(LevelInWeightListElementContext, i) as LevelInWeightListElementContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLevelWeightList) {
	 		listener.enterLevelWeightList(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLevelWeightList) {
	 		listener.exitLevelWeightList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLevelWeightList) {
			return visitor.visitLevelWeightList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LevelInWeightListElementContext extends ParserRuleContext {
	public _orderType!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public decimalLiteral(): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, 0) as DecimalLiteralContext;
	}
	public ASC(): TerminalNode {
		return this.getToken(MySqlParser.ASC, 0);
	}
	public DESC(): TerminalNode {
		return this.getToken(MySqlParser.DESC, 0);
	}
	public REVERSE(): TerminalNode {
		return this.getToken(MySqlParser.REVERSE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_levelInWeightListElement;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLevelInWeightListElement) {
	 		listener.enterLevelInWeightListElement(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLevelInWeightListElement) {
	 		listener.exitLevelInWeightListElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLevelInWeightListElement) {
			return visitor.visitLevelInWeightListElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AggregateWindowedFunctionContext extends ParserRuleContext {
	public _aggregator!: Token;
	public _starArg!: Token;
	public _separator!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public functionArg(): FunctionArgContext {
		return this.getTypedRuleContext(FunctionArgContext, 0) as FunctionArgContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public AVG(): TerminalNode {
		return this.getToken(MySqlParser.AVG, 0);
	}
	public MAX(): TerminalNode {
		return this.getToken(MySqlParser.MAX, 0);
	}
	public MIN(): TerminalNode {
		return this.getToken(MySqlParser.MIN, 0);
	}
	public SUM(): TerminalNode {
		return this.getToken(MySqlParser.SUM, 0);
	}
	public overClause(): OverClauseContext {
		return this.getTypedRuleContext(OverClauseContext, 0) as OverClauseContext;
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public DISTINCT(): TerminalNode {
		return this.getToken(MySqlParser.DISTINCT, 0);
	}
	public COUNT(): TerminalNode {
		return this.getToken(MySqlParser.COUNT, 0);
	}
	public functionArgs(): FunctionArgsContext {
		return this.getTypedRuleContext(FunctionArgsContext, 0) as FunctionArgsContext;
	}
	public STAR(): TerminalNode {
		return this.getToken(MySqlParser.STAR, 0);
	}
	public BIT_AND(): TerminalNode {
		return this.getToken(MySqlParser.BIT_AND, 0);
	}
	public BIT_OR(): TerminalNode {
		return this.getToken(MySqlParser.BIT_OR, 0);
	}
	public BIT_XOR(): TerminalNode {
		return this.getToken(MySqlParser.BIT_XOR, 0);
	}
	public STD(): TerminalNode {
		return this.getToken(MySqlParser.STD, 0);
	}
	public STDDEV(): TerminalNode {
		return this.getToken(MySqlParser.STDDEV, 0);
	}
	public STDDEV_POP(): TerminalNode {
		return this.getToken(MySqlParser.STDDEV_POP, 0);
	}
	public STDDEV_SAMP(): TerminalNode {
		return this.getToken(MySqlParser.STDDEV_SAMP, 0);
	}
	public VAR_POP(): TerminalNode {
		return this.getToken(MySqlParser.VAR_POP, 0);
	}
	public VAR_SAMP(): TerminalNode {
		return this.getToken(MySqlParser.VAR_SAMP, 0);
	}
	public VARIANCE(): TerminalNode {
		return this.getToken(MySqlParser.VARIANCE, 0);
	}
	public GROUP_CONCAT(): TerminalNode {
		return this.getToken(MySqlParser.GROUP_CONCAT, 0);
	}
	public ORDER(): TerminalNode {
		return this.getToken(MySqlParser.ORDER, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public orderByExpression_list(): OrderByExpressionContext[] {
		return this.getTypedRuleContexts(OrderByExpressionContext) as OrderByExpressionContext[];
	}
	public orderByExpression(i: number): OrderByExpressionContext {
		return this.getTypedRuleContext(OrderByExpressionContext, i) as OrderByExpressionContext;
	}
	public SEPARATOR(): TerminalNode {
		return this.getToken(MySqlParser.SEPARATOR, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_aggregateWindowedFunction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAggregateWindowedFunction) {
	 		listener.enterAggregateWindowedFunction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAggregateWindowedFunction) {
	 		listener.exitAggregateWindowedFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAggregateWindowedFunction) {
			return visitor.visitAggregateWindowedFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NonAggregateWindowedFunctionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public overClause(): OverClauseContext {
		return this.getTypedRuleContext(OverClauseContext, 0) as OverClauseContext;
	}
	public LAG(): TerminalNode {
		return this.getToken(MySqlParser.LAG, 0);
	}
	public LEAD(): TerminalNode {
		return this.getToken(MySqlParser.LEAD, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public decimalLiteral_list(): DecimalLiteralContext[] {
		return this.getTypedRuleContexts(DecimalLiteralContext) as DecimalLiteralContext[];
	}
	public decimalLiteral(i: number): DecimalLiteralContext {
		return this.getTypedRuleContext(DecimalLiteralContext, i) as DecimalLiteralContext;
	}
	public FIRST_VALUE(): TerminalNode {
		return this.getToken(MySqlParser.FIRST_VALUE, 0);
	}
	public LAST_VALUE(): TerminalNode {
		return this.getToken(MySqlParser.LAST_VALUE, 0);
	}
	public CUME_DIST(): TerminalNode {
		return this.getToken(MySqlParser.CUME_DIST, 0);
	}
	public DENSE_RANK(): TerminalNode {
		return this.getToken(MySqlParser.DENSE_RANK, 0);
	}
	public PERCENT_RANK(): TerminalNode {
		return this.getToken(MySqlParser.PERCENT_RANK, 0);
	}
	public RANK(): TerminalNode {
		return this.getToken(MySqlParser.RANK, 0);
	}
	public ROW_NUMBER(): TerminalNode {
		return this.getToken(MySqlParser.ROW_NUMBER, 0);
	}
	public NTH_VALUE(): TerminalNode {
		return this.getToken(MySqlParser.NTH_VALUE, 0);
	}
	public NTILE(): TerminalNode {
		return this.getToken(MySqlParser.NTILE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_nonAggregateWindowedFunction;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterNonAggregateWindowedFunction) {
	 		listener.enterNonAggregateWindowedFunction(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitNonAggregateWindowedFunction) {
	 		listener.exitNonAggregateWindowedFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNonAggregateWindowedFunction) {
			return visitor.visitNonAggregateWindowedFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OverClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public OVER(): TerminalNode {
		return this.getToken(MySqlParser.OVER, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public windowSpec(): WindowSpecContext {
		return this.getTypedRuleContext(WindowSpecContext, 0) as WindowSpecContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public windowName(): WindowNameContext {
		return this.getTypedRuleContext(WindowNameContext, 0) as WindowNameContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_overClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterOverClause) {
	 		listener.enterOverClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitOverClause) {
	 		listener.exitOverClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitOverClause) {
			return visitor.visitOverClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WindowSpecContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public windowName(): WindowNameContext {
		return this.getTypedRuleContext(WindowNameContext, 0) as WindowNameContext;
	}
	public partitionClause(): PartitionClauseContext {
		return this.getTypedRuleContext(PartitionClauseContext, 0) as PartitionClauseContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public frameClause(): FrameClauseContext {
		return this.getTypedRuleContext(FrameClauseContext, 0) as FrameClauseContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_windowSpec;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWindowSpec) {
	 		listener.enterWindowSpec(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWindowSpec) {
	 		listener.exitWindowSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWindowSpec) {
			return visitor.visitWindowSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WindowNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uid(): UidContext {
		return this.getTypedRuleContext(UidContext, 0) as UidContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_windowName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterWindowName) {
	 		listener.enterWindowName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitWindowName) {
	 		listener.exitWindowName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitWindowName) {
			return visitor.visitWindowName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FrameClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public frameUnits(): FrameUnitsContext {
		return this.getTypedRuleContext(FrameUnitsContext, 0) as FrameUnitsContext;
	}
	public frameExtent(): FrameExtentContext {
		return this.getTypedRuleContext(FrameExtentContext, 0) as FrameExtentContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_frameClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFrameClause) {
	 		listener.enterFrameClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFrameClause) {
	 		listener.exitFrameClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFrameClause) {
			return visitor.visitFrameClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FrameUnitsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ROWS(): TerminalNode {
		return this.getToken(MySqlParser.ROWS, 0);
	}
	public RANGE(): TerminalNode {
		return this.getToken(MySqlParser.RANGE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_frameUnits;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFrameUnits) {
	 		listener.enterFrameUnits(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFrameUnits) {
	 		listener.exitFrameUnits(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFrameUnits) {
			return visitor.visitFrameUnits(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FrameExtentContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public frameRange(): FrameRangeContext {
		return this.getTypedRuleContext(FrameRangeContext, 0) as FrameRangeContext;
	}
	public frameBetween(): FrameBetweenContext {
		return this.getTypedRuleContext(FrameBetweenContext, 0) as FrameBetweenContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_frameExtent;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFrameExtent) {
	 		listener.enterFrameExtent(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFrameExtent) {
	 		listener.exitFrameExtent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFrameExtent) {
			return visitor.visitFrameExtent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FrameBetweenContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BETWEEN(): TerminalNode {
		return this.getToken(MySqlParser.BETWEEN, 0);
	}
	public frameRange_list(): FrameRangeContext[] {
		return this.getTypedRuleContexts(FrameRangeContext) as FrameRangeContext[];
	}
	public frameRange(i: number): FrameRangeContext {
		return this.getTypedRuleContext(FrameRangeContext, i) as FrameRangeContext;
	}
	public AND(): TerminalNode {
		return this.getToken(MySqlParser.AND, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_frameBetween;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFrameBetween) {
	 		listener.enterFrameBetween(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFrameBetween) {
	 		listener.exitFrameBetween(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFrameBetween) {
			return visitor.visitFrameBetween(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FrameRangeContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CURRENT(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT, 0);
	}
	public ROW(): TerminalNode {
		return this.getToken(MySqlParser.ROW, 0);
	}
	public UNBOUNDED(): TerminalNode {
		return this.getToken(MySqlParser.UNBOUNDED, 0);
	}
	public PRECEDING(): TerminalNode {
		return this.getToken(MySqlParser.PRECEDING, 0);
	}
	public FOLLOWING(): TerminalNode {
		return this.getToken(MySqlParser.FOLLOWING, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_frameRange;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFrameRange) {
	 		listener.enterFrameRange(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFrameRange) {
	 		listener.exitFrameRange(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFrameRange) {
			return visitor.visitFrameRange(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionClauseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PARTITION(): TerminalNode {
		return this.getToken(MySqlParser.PARTITION, 0);
	}
	public BY(): TerminalNode {
		return this.getToken(MySqlParser.BY, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_partitionClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPartitionClause) {
	 		listener.enterPartitionClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPartitionClause) {
	 		listener.exitPartitionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPartitionClause) {
			return visitor.visitPartitionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScalarFunctionNameContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public functionNameBase(): FunctionNameBaseContext {
		return this.getTypedRuleContext(FunctionNameBaseContext, 0) as FunctionNameBaseContext;
	}
	public ASCII(): TerminalNode {
		return this.getToken(MySqlParser.ASCII, 0);
	}
	public CURDATE(): TerminalNode {
		return this.getToken(MySqlParser.CURDATE, 0);
	}
	public CURRENT_DATE(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT_DATE, 0);
	}
	public CURRENT_TIME(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT_TIME, 0);
	}
	public CURRENT_TIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	}
	public CURTIME(): TerminalNode {
		return this.getToken(MySqlParser.CURTIME, 0);
	}
	public DATE_ADD(): TerminalNode {
		return this.getToken(MySqlParser.DATE_ADD, 0);
	}
	public DATE_SUB(): TerminalNode {
		return this.getToken(MySqlParser.DATE_SUB, 0);
	}
	public IF(): TerminalNode {
		return this.getToken(MySqlParser.IF, 0);
	}
	public INSERT(): TerminalNode {
		return this.getToken(MySqlParser.INSERT, 0);
	}
	public LOCALTIME(): TerminalNode {
		return this.getToken(MySqlParser.LOCALTIME, 0);
	}
	public LOCALTIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.LOCALTIMESTAMP, 0);
	}
	public MID(): TerminalNode {
		return this.getToken(MySqlParser.MID, 0);
	}
	public NOW(): TerminalNode {
		return this.getToken(MySqlParser.NOW, 0);
	}
	public REPEAT(): TerminalNode {
		return this.getToken(MySqlParser.REPEAT, 0);
	}
	public REPLACE(): TerminalNode {
		return this.getToken(MySqlParser.REPLACE, 0);
	}
	public SUBSTR(): TerminalNode {
		return this.getToken(MySqlParser.SUBSTR, 0);
	}
	public SUBSTRING(): TerminalNode {
		return this.getToken(MySqlParser.SUBSTRING, 0);
	}
	public SYSDATE(): TerminalNode {
		return this.getToken(MySqlParser.SYSDATE, 0);
	}
	public TRIM(): TerminalNode {
		return this.getToken(MySqlParser.TRIM, 0);
	}
	public UTC_DATE(): TerminalNode {
		return this.getToken(MySqlParser.UTC_DATE, 0);
	}
	public UTC_TIME(): TerminalNode {
		return this.getToken(MySqlParser.UTC_TIME, 0);
	}
	public UTC_TIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.UTC_TIMESTAMP, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_scalarFunctionName;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterScalarFunctionName) {
	 		listener.enterScalarFunctionName(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitScalarFunctionName) {
	 		listener.exitScalarFunctionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitScalarFunctionName) {
			return visitor.visitScalarFunctionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PasswordFunctionClauseContext extends ParserRuleContext {
	public _functionName!: Token;
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public functionArg(): FunctionArgContext {
		return this.getTypedRuleContext(FunctionArgContext, 0) as FunctionArgContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
	public OLD_PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.OLD_PASSWORD, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_passwordFunctionClause;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPasswordFunctionClause) {
	 		listener.enterPasswordFunctionClause(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPasswordFunctionClause) {
	 		listener.exitPasswordFunctionClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPasswordFunctionClause) {
			return visitor.visitPasswordFunctionClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionArgsContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public constant_list(): ConstantContext[] {
		return this.getTypedRuleContexts(ConstantContext) as ConstantContext[];
	}
	public constant(i: number): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, i) as ConstantContext;
	}
	public fullColumnName_list(): FullColumnNameContext[] {
		return this.getTypedRuleContexts(FullColumnNameContext) as FullColumnNameContext[];
	}
	public fullColumnName(i: number): FullColumnNameContext {
		return this.getTypedRuleContext(FullColumnNameContext, i) as FullColumnNameContext;
	}
	public functionCall_list(): FunctionCallContext[] {
		return this.getTypedRuleContexts(FunctionCallContext) as FunctionCallContext[];
	}
	public functionCall(i: number): FunctionCallContext {
		return this.getTypedRuleContext(FunctionCallContext, i) as FunctionCallContext;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_functionArgs;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFunctionArgs) {
	 		listener.enterFunctionArgs(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFunctionArgs) {
	 		listener.exitFunctionArgs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionArgs) {
			return visitor.visitFunctionArgs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionArgContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public constant(): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, 0) as ConstantContext;
	}
	public fullColumnName(): FullColumnNameContext {
		return this.getTypedRuleContext(FullColumnNameContext, 0) as FullColumnNameContext;
	}
	public functionCall(): FunctionCallContext {
		return this.getTypedRuleContext(FunctionCallContext, 0) as FunctionCallContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_functionArg;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFunctionArg) {
	 		listener.enterFunctionArg(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFunctionArg) {
	 		listener.exitFunctionArg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionArg) {
			return visitor.visitFunctionArg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_expression;
	}
	public copyFrom(ctx: ExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class IsExpressionContext extends ExpressionContext {
	public _testValue!: Token;
	constructor(parser: MySqlParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate(): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, 0) as PredicateContext;
	}
	public IS(): TerminalNode {
		return this.getToken(MySqlParser.IS, 0);
	}
	public TRUE(): TerminalNode {
		return this.getToken(MySqlParser.TRUE, 0);
	}
	public FALSE(): TerminalNode {
		return this.getToken(MySqlParser.FALSE, 0);
	}
	public UNKNOWN(): TerminalNode {
		return this.getToken(MySqlParser.UNKNOWN, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIsExpression) {
	 		listener.enterIsExpression(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIsExpression) {
	 		listener.exitIsExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIsExpression) {
			return visitor.visitIsExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NotExpressionContext extends ExpressionContext {
	public _notOperator!: Token;
	constructor(parser: MySqlParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public EXCLAMATION_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterNotExpression) {
	 		listener.enterNotExpression(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitNotExpression) {
	 		listener.exitNotExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNotExpression) {
			return visitor.visitNotExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LogicalExpressionContext extends ExpressionContext {
	constructor(parser: MySqlParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public logicalOperator(): LogicalOperatorContext {
		return this.getTypedRuleContext(LogicalOperatorContext, 0) as LogicalOperatorContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLogicalExpression) {
	 		listener.enterLogicalExpression(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLogicalExpression) {
	 		listener.exitLogicalExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLogicalExpression) {
			return visitor.visitLogicalExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PredicateExpressionContext extends ExpressionContext {
	constructor(parser: MySqlParser, ctx: ExpressionContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate(): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, 0) as PredicateContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPredicateExpression) {
	 		listener.enterPredicateExpression(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPredicateExpression) {
	 		listener.exitPredicateExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPredicateExpression) {
			return visitor.visitPredicateExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_predicate;
	}
	public copyFrom(ctx: PredicateContext): void {
		super.copyFrom(ctx);
	}
}
export class SoundsLikePredicateContext extends PredicateContext {
	constructor(parser: MySqlParser, ctx: PredicateContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate_list(): PredicateContext[] {
		return this.getTypedRuleContexts(PredicateContext) as PredicateContext[];
	}
	public predicate(i: number): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, i) as PredicateContext;
	}
	public SOUNDS(): TerminalNode {
		return this.getToken(MySqlParser.SOUNDS, 0);
	}
	public LIKE(): TerminalNode {
		return this.getToken(MySqlParser.LIKE, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSoundsLikePredicate) {
	 		listener.enterSoundsLikePredicate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSoundsLikePredicate) {
	 		listener.exitSoundsLikePredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSoundsLikePredicate) {
			return visitor.visitSoundsLikePredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExpressionAtomPredicateContext extends PredicateContext {
	constructor(parser: MySqlParser, ctx: PredicateContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expressionAtom(): ExpressionAtomContext {
		return this.getTypedRuleContext(ExpressionAtomContext, 0) as ExpressionAtomContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterExpressionAtomPredicate) {
	 		listener.enterExpressionAtomPredicate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitExpressionAtomPredicate) {
	 		listener.exitExpressionAtomPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExpressionAtomPredicate) {
			return visitor.visitExpressionAtomPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubqueryComparisonPredicateContext extends PredicateContext {
	public _quantifier!: Token;
	constructor(parser: MySqlParser, ctx: PredicateContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate(): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, 0) as PredicateContext;
	}
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getTypedRuleContext(ComparisonOperatorContext, 0) as ComparisonOperatorContext;
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public ALL(): TerminalNode {
		return this.getToken(MySqlParser.ALL, 0);
	}
	public ANY(): TerminalNode {
		return this.getToken(MySqlParser.ANY, 0);
	}
	public SOME(): TerminalNode {
		return this.getToken(MySqlParser.SOME, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSubqueryComparisonPredicate) {
	 		listener.enterSubqueryComparisonPredicate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSubqueryComparisonPredicate) {
	 		listener.exitSubqueryComparisonPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubqueryComparisonPredicate) {
			return visitor.visitSubqueryComparisonPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class JsonMemberOfPredicateContext extends PredicateContext {
	constructor(parser: MySqlParser, ctx: PredicateContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate_list(): PredicateContext[] {
		return this.getTypedRuleContexts(PredicateContext) as PredicateContext[];
	}
	public predicate(i: number): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, i) as PredicateContext;
	}
	public MEMBER(): TerminalNode {
		return this.getToken(MySqlParser.MEMBER, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(MySqlParser.OF, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterJsonMemberOfPredicate) {
	 		listener.enterJsonMemberOfPredicate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitJsonMemberOfPredicate) {
	 		listener.exitJsonMemberOfPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitJsonMemberOfPredicate) {
			return visitor.visitJsonMemberOfPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BinaryComparisonPredicateContext extends PredicateContext {
	public _left!: PredicateContext;
	public _right!: PredicateContext;
	constructor(parser: MySqlParser, ctx: PredicateContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getTypedRuleContext(ComparisonOperatorContext, 0) as ComparisonOperatorContext;
	}
	public predicate_list(): PredicateContext[] {
		return this.getTypedRuleContexts(PredicateContext) as PredicateContext[];
	}
	public predicate(i: number): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, i) as PredicateContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterBinaryComparisonPredicate) {
	 		listener.enterBinaryComparisonPredicate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitBinaryComparisonPredicate) {
	 		listener.exitBinaryComparisonPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBinaryComparisonPredicate) {
			return visitor.visitBinaryComparisonPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class InPredicateContext extends PredicateContext {
	constructor(parser: MySqlParser, ctx: PredicateContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate(): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, 0) as PredicateContext;
	}
	public IN(): TerminalNode {
		return this.getToken(MySqlParser.IN, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public expressions(): ExpressionsContext {
		return this.getTypedRuleContext(ExpressionsContext, 0) as ExpressionsContext;
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterInPredicate) {
	 		listener.enterInPredicate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitInPredicate) {
	 		listener.exitInPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitInPredicate) {
			return visitor.visitInPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BetweenPredicateContext extends PredicateContext {
	constructor(parser: MySqlParser, ctx: PredicateContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate_list(): PredicateContext[] {
		return this.getTypedRuleContexts(PredicateContext) as PredicateContext[];
	}
	public predicate(i: number): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, i) as PredicateContext;
	}
	public BETWEEN(): TerminalNode {
		return this.getToken(MySqlParser.BETWEEN, 0);
	}
	public AND(): TerminalNode {
		return this.getToken(MySqlParser.AND, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterBetweenPredicate) {
	 		listener.enterBetweenPredicate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitBetweenPredicate) {
	 		listener.exitBetweenPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBetweenPredicate) {
			return visitor.visitBetweenPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IsNullPredicateContext extends PredicateContext {
	constructor(parser: MySqlParser, ctx: PredicateContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate(): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, 0) as PredicateContext;
	}
	public IS(): TerminalNode {
		return this.getToken(MySqlParser.IS, 0);
	}
	public nullNotnull(): NullNotnullContext {
		return this.getTypedRuleContext(NullNotnullContext, 0) as NullNotnullContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIsNullPredicate) {
	 		listener.enterIsNullPredicate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIsNullPredicate) {
	 		listener.exitIsNullPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIsNullPredicate) {
			return visitor.visitIsNullPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LikePredicateContext extends PredicateContext {
	constructor(parser: MySqlParser, ctx: PredicateContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate_list(): PredicateContext[] {
		return this.getTypedRuleContexts(PredicateContext) as PredicateContext[];
	}
	public predicate(i: number): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, i) as PredicateContext;
	}
	public LIKE(): TerminalNode {
		return this.getToken(MySqlParser.LIKE, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public ESCAPE(): TerminalNode {
		return this.getToken(MySqlParser.ESCAPE, 0);
	}
	public STRING_LITERAL(): TerminalNode {
		return this.getToken(MySqlParser.STRING_LITERAL, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLikePredicate) {
	 		listener.enterLikePredicate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLikePredicate) {
	 		listener.exitLikePredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLikePredicate) {
			return visitor.visitLikePredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RegexpPredicateContext extends PredicateContext {
	public _regex!: Token;
	constructor(parser: MySqlParser, ctx: PredicateContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public predicate_list(): PredicateContext[] {
		return this.getTypedRuleContexts(PredicateContext) as PredicateContext[];
	}
	public predicate(i: number): PredicateContext {
		return this.getTypedRuleContext(PredicateContext, i) as PredicateContext;
	}
	public REGEXP(): TerminalNode {
		return this.getToken(MySqlParser.REGEXP, 0);
	}
	public RLIKE(): TerminalNode {
		return this.getToken(MySqlParser.RLIKE, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterRegexpPredicate) {
	 		listener.enterRegexpPredicate(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitRegexpPredicate) {
	 		listener.exitRegexpPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitRegexpPredicate) {
			return visitor.visitRegexpPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionAtomContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_expressionAtom;
	}
	public copyFrom(ctx: ExpressionAtomContext): void {
		super.copyFrom(ctx);
	}
}
export class UnaryExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public unaryOperator(): UnaryOperatorContext {
		return this.getTypedRuleContext(UnaryOperatorContext, 0) as UnaryOperatorContext;
	}
	public expressionAtom(): ExpressionAtomContext {
		return this.getTypedRuleContext(ExpressionAtomContext, 0) as ExpressionAtomContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUnaryExpressionAtom) {
	 		listener.enterUnaryExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUnaryExpressionAtom) {
	 		listener.exitUnaryExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnaryExpressionAtom) {
			return visitor.visitUnaryExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CollateExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public expressionAtom(): ExpressionAtomContext {
		return this.getTypedRuleContext(ExpressionAtomContext, 0) as ExpressionAtomContext;
	}
	public COLLATE(): TerminalNode {
		return this.getToken(MySqlParser.COLLATE, 0);
	}
	public collationName(): CollationNameContext {
		return this.getTypedRuleContext(CollationNameContext, 0) as CollationNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCollateExpressionAtom) {
	 		listener.enterCollateExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCollateExpressionAtom) {
	 		listener.exitCollateExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCollateExpressionAtom) {
			return visitor.visitCollateExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class VariableAssignExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LOCAL_ID(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL_ID, 0);
	}
	public VAR_ASSIGN(): TerminalNode {
		return this.getToken(MySqlParser.VAR_ASSIGN, 0);
	}
	public expressionAtom(): ExpressionAtomContext {
		return this.getTypedRuleContext(ExpressionAtomContext, 0) as ExpressionAtomContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterVariableAssignExpressionAtom) {
	 		listener.enterVariableAssignExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitVariableAssignExpressionAtom) {
	 		listener.exitVariableAssignExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitVariableAssignExpressionAtom) {
			return visitor.visitVariableAssignExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public mysqlVariable(): MysqlVariableContext {
		return this.getTypedRuleContext(MysqlVariableContext, 0) as MysqlVariableContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMysqlVariableExpressionAtom) {
	 		listener.enterMysqlVariableExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMysqlVariableExpressionAtom) {
	 		listener.exitMysqlVariableExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMysqlVariableExpressionAtom) {
			return visitor.visitMysqlVariableExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NestedExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterNestedExpressionAtom) {
	 		listener.enterNestedExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitNestedExpressionAtom) {
	 		listener.exitNestedExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNestedExpressionAtom) {
			return visitor.visitNestedExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NestedRowExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public ROW(): TerminalNode {
		return this.getToken(MySqlParser.ROW, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(MySqlParser.COMMA, i);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterNestedRowExpressionAtom) {
	 		listener.enterNestedRowExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitNestedRowExpressionAtom) {
	 		listener.exitNestedRowExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitNestedRowExpressionAtom) {
			return visitor.visitNestedRowExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MathExpressionAtomContext extends ExpressionAtomContext {
	public _left!: ExpressionAtomContext;
	public _right!: ExpressionAtomContext;
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public multOperator(): MultOperatorContext {
		return this.getTypedRuleContext(MultOperatorContext, 0) as MultOperatorContext;
	}
	public expressionAtom_list(): ExpressionAtomContext[] {
		return this.getTypedRuleContexts(ExpressionAtomContext) as ExpressionAtomContext[];
	}
	public expressionAtom(i: number): ExpressionAtomContext {
		return this.getTypedRuleContext(ExpressionAtomContext, i) as ExpressionAtomContext;
	}
	public addOperator(): AddOperatorContext {
		return this.getTypedRuleContext(AddOperatorContext, 0) as AddOperatorContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMathExpressionAtom) {
	 		listener.enterMathExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMathExpressionAtom) {
	 		listener.exitMathExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMathExpressionAtom) {
			return visitor.visitMathExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistsExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public EXISTS(): TerminalNode {
		return this.getToken(MySqlParser.EXISTS, 0);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterExistsExpressionAtom) {
	 		listener.enterExistsExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitExistsExpressionAtom) {
	 		listener.exitExistsExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitExistsExpressionAtom) {
			return visitor.visitExistsExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IntervalExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public INTERVAL(): TerminalNode {
		return this.getToken(MySqlParser.INTERVAL, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public intervalType(): IntervalTypeContext {
		return this.getTypedRuleContext(IntervalTypeContext, 0) as IntervalTypeContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIntervalExpressionAtom) {
	 		listener.enterIntervalExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIntervalExpressionAtom) {
	 		listener.exitIntervalExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalExpressionAtom) {
			return visitor.visitIntervalExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class JsonExpressionAtomContext extends ExpressionAtomContext {
	public _left!: ExpressionAtomContext;
	public _right!: ExpressionAtomContext;
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public jsonOperator(): JsonOperatorContext {
		return this.getTypedRuleContext(JsonOperatorContext, 0) as JsonOperatorContext;
	}
	public expressionAtom_list(): ExpressionAtomContext[] {
		return this.getTypedRuleContexts(ExpressionAtomContext) as ExpressionAtomContext[];
	}
	public expressionAtom(i: number): ExpressionAtomContext {
		return this.getTypedRuleContext(ExpressionAtomContext, i) as ExpressionAtomContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterJsonExpressionAtom) {
	 		listener.enterJsonExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitJsonExpressionAtom) {
	 		listener.exitJsonExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitJsonExpressionAtom) {
			return visitor.visitJsonExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubqueryExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public LR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.LR_BRACKET, 0);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public RR_BRACKET(): TerminalNode {
		return this.getToken(MySqlParser.RR_BRACKET, 0);
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterSubqueryExpressionAtom) {
	 		listener.enterSubqueryExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitSubqueryExpressionAtom) {
	 		listener.exitSubqueryExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitSubqueryExpressionAtom) {
			return visitor.visitSubqueryExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ConstantExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public constant(): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, 0) as ConstantContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterConstantExpressionAtom) {
	 		listener.enterConstantExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitConstantExpressionAtom) {
	 		listener.exitConstantExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitConstantExpressionAtom) {
			return visitor.visitConstantExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public functionCall(): FunctionCallContext {
		return this.getTypedRuleContext(FunctionCallContext, 0) as FunctionCallContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFunctionCallExpressionAtom) {
	 		listener.enterFunctionCallExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFunctionCallExpressionAtom) {
	 		listener.exitFunctionCallExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionCallExpressionAtom) {
			return visitor.visitFunctionCallExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BinaryExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public expressionAtom(): ExpressionAtomContext {
		return this.getTypedRuleContext(ExpressionAtomContext, 0) as ExpressionAtomContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterBinaryExpressionAtom) {
	 		listener.enterBinaryExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitBinaryExpressionAtom) {
	 		listener.exitBinaryExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBinaryExpressionAtom) {
			return visitor.visitBinaryExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public fullColumnName(): FullColumnNameContext {
		return this.getTypedRuleContext(FullColumnNameContext, 0) as FullColumnNameContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFullColumnNameExpressionAtom) {
	 		listener.enterFullColumnNameExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFullColumnNameExpressionAtom) {
	 		listener.exitFullColumnNameExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFullColumnNameExpressionAtom) {
			return visitor.visitFullColumnNameExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BitExpressionAtomContext extends ExpressionAtomContext {
	public _left!: ExpressionAtomContext;
	public _right!: ExpressionAtomContext;
	constructor(parser: MySqlParser, ctx: ExpressionAtomContext) {
		super(parser, ctx.parentCtx, ctx.invokingState);
		super.copyFrom(ctx);
	}
	public bitOperator(): BitOperatorContext {
		return this.getTypedRuleContext(BitOperatorContext, 0) as BitOperatorContext;
	}
	public expressionAtom_list(): ExpressionAtomContext[] {
		return this.getTypedRuleContexts(ExpressionAtomContext) as ExpressionAtomContext[];
	}
	public expressionAtom(i: number): ExpressionAtomContext {
		return this.getTypedRuleContext(ExpressionAtomContext, i) as ExpressionAtomContext;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterBitExpressionAtom) {
	 		listener.enterBitExpressionAtom(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitBitExpressionAtom) {
	 		listener.exitBitExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBitExpressionAtom) {
			return visitor.visitBitExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnaryOperatorContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EXCLAMATION_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	}
	public BIT_NOT_OP(): TerminalNode {
		return this.getToken(MySqlParser.BIT_NOT_OP, 0);
	}
	public PLUS(): TerminalNode {
		return this.getToken(MySqlParser.PLUS, 0);
	}
	public MINUS(): TerminalNode {
		return this.getToken(MySqlParser.MINUS, 0);
	}
	public NOT(): TerminalNode {
		return this.getToken(MySqlParser.NOT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_unaryOperator;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterUnaryOperator) {
	 		listener.enterUnaryOperator(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitUnaryOperator) {
	 		listener.exitUnaryOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitUnaryOperator) {
			return visitor.visitUnaryOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ComparisonOperatorContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUAL_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	}
	public GREATER_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	}
	public LESS_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	}
	public EXCLAMATION_SYMBOL(): TerminalNode {
		return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_comparisonOperator;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterComparisonOperator) {
	 		listener.enterComparisonOperator(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitComparisonOperator) {
	 		listener.exitComparisonOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitComparisonOperator) {
			return visitor.visitComparisonOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LogicalOperatorContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AND(): TerminalNode {
		return this.getToken(MySqlParser.AND, 0);
	}
	public BIT_AND_OP_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.BIT_AND_OP);
	}
	public BIT_AND_OP(i: number): TerminalNode {
		return this.getToken(MySqlParser.BIT_AND_OP, i);
	}
	public XOR(): TerminalNode {
		return this.getToken(MySqlParser.XOR, 0);
	}
	public OR(): TerminalNode {
		return this.getToken(MySqlParser.OR, 0);
	}
	public BIT_OR_OP_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.BIT_OR_OP);
	}
	public BIT_OR_OP(i: number): TerminalNode {
		return this.getToken(MySqlParser.BIT_OR_OP, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_logicalOperator;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterLogicalOperator) {
	 		listener.enterLogicalOperator(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitLogicalOperator) {
	 		listener.exitLogicalOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitLogicalOperator) {
			return visitor.visitLogicalOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BitOperatorContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LESS_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.LESS_SYMBOL);
	}
	public LESS_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.LESS_SYMBOL, i);
	}
	public GREATER_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.GREATER_SYMBOL);
	}
	public GREATER_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.GREATER_SYMBOL, i);
	}
	public BIT_AND_OP(): TerminalNode {
		return this.getToken(MySqlParser.BIT_AND_OP, 0);
	}
	public BIT_XOR_OP(): TerminalNode {
		return this.getToken(MySqlParser.BIT_XOR_OP, 0);
	}
	public BIT_OR_OP(): TerminalNode {
		return this.getToken(MySqlParser.BIT_OR_OP, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_bitOperator;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterBitOperator) {
	 		listener.enterBitOperator(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitBitOperator) {
	 		listener.exitBitOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitBitOperator) {
			return visitor.visitBitOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MultOperatorContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STAR(): TerminalNode {
		return this.getToken(MySqlParser.STAR, 0);
	}
	public DIVIDE(): TerminalNode {
		return this.getToken(MySqlParser.DIVIDE, 0);
	}
	public MODULE(): TerminalNode {
		return this.getToken(MySqlParser.MODULE, 0);
	}
	public DIV(): TerminalNode {
		return this.getToken(MySqlParser.DIV, 0);
	}
	public MOD(): TerminalNode {
		return this.getToken(MySqlParser.MOD, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_multOperator;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterMultOperator) {
	 		listener.enterMultOperator(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitMultOperator) {
	 		listener.exitMultOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitMultOperator) {
			return visitor.visitMultOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AddOperatorContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PLUS(): TerminalNode {
		return this.getToken(MySqlParser.PLUS, 0);
	}
	public MINUS(): TerminalNode {
		return this.getToken(MySqlParser.MINUS, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_addOperator;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterAddOperator) {
	 		listener.enterAddOperator(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitAddOperator) {
	 		listener.exitAddOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitAddOperator) {
			return visitor.visitAddOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonOperatorContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public MINUS(): TerminalNode {
		return this.getToken(MySqlParser.MINUS, 0);
	}
	public GREATER_SYMBOL_list(): TerminalNode[] {
	    	return this.getTokens(MySqlParser.GREATER_SYMBOL);
	}
	public GREATER_SYMBOL(i: number): TerminalNode {
		return this.getToken(MySqlParser.GREATER_SYMBOL, i);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_jsonOperator;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterJsonOperator) {
	 		listener.enterJsonOperator(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitJsonOperator) {
	 		listener.exitJsonOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitJsonOperator) {
			return visitor.visitJsonOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharsetNameBaseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ARMSCII8(): TerminalNode {
		return this.getToken(MySqlParser.ARMSCII8, 0);
	}
	public ASCII(): TerminalNode {
		return this.getToken(MySqlParser.ASCII, 0);
	}
	public BIG5(): TerminalNode {
		return this.getToken(MySqlParser.BIG5, 0);
	}
	public BINARY(): TerminalNode {
		return this.getToken(MySqlParser.BINARY, 0);
	}
	public CP1250(): TerminalNode {
		return this.getToken(MySqlParser.CP1250, 0);
	}
	public CP1251(): TerminalNode {
		return this.getToken(MySqlParser.CP1251, 0);
	}
	public CP1256(): TerminalNode {
		return this.getToken(MySqlParser.CP1256, 0);
	}
	public CP1257(): TerminalNode {
		return this.getToken(MySqlParser.CP1257, 0);
	}
	public CP850(): TerminalNode {
		return this.getToken(MySqlParser.CP850, 0);
	}
	public CP852(): TerminalNode {
		return this.getToken(MySqlParser.CP852, 0);
	}
	public CP866(): TerminalNode {
		return this.getToken(MySqlParser.CP866, 0);
	}
	public CP932(): TerminalNode {
		return this.getToken(MySqlParser.CP932, 0);
	}
	public DEC8(): TerminalNode {
		return this.getToken(MySqlParser.DEC8, 0);
	}
	public EUCJPMS(): TerminalNode {
		return this.getToken(MySqlParser.EUCJPMS, 0);
	}
	public EUCKR(): TerminalNode {
		return this.getToken(MySqlParser.EUCKR, 0);
	}
	public GB18030(): TerminalNode {
		return this.getToken(MySqlParser.GB18030, 0);
	}
	public GB2312(): TerminalNode {
		return this.getToken(MySqlParser.GB2312, 0);
	}
	public GBK(): TerminalNode {
		return this.getToken(MySqlParser.GBK, 0);
	}
	public GEOSTD8(): TerminalNode {
		return this.getToken(MySqlParser.GEOSTD8, 0);
	}
	public GREEK(): TerminalNode {
		return this.getToken(MySqlParser.GREEK, 0);
	}
	public HEBREW(): TerminalNode {
		return this.getToken(MySqlParser.HEBREW, 0);
	}
	public HP8(): TerminalNode {
		return this.getToken(MySqlParser.HP8, 0);
	}
	public KEYBCS2(): TerminalNode {
		return this.getToken(MySqlParser.KEYBCS2, 0);
	}
	public KOI8R(): TerminalNode {
		return this.getToken(MySqlParser.KOI8R, 0);
	}
	public KOI8U(): TerminalNode {
		return this.getToken(MySqlParser.KOI8U, 0);
	}
	public LATIN1(): TerminalNode {
		return this.getToken(MySqlParser.LATIN1, 0);
	}
	public LATIN2(): TerminalNode {
		return this.getToken(MySqlParser.LATIN2, 0);
	}
	public LATIN5(): TerminalNode {
		return this.getToken(MySqlParser.LATIN5, 0);
	}
	public LATIN7(): TerminalNode {
		return this.getToken(MySqlParser.LATIN7, 0);
	}
	public MACCE(): TerminalNode {
		return this.getToken(MySqlParser.MACCE, 0);
	}
	public MACROMAN(): TerminalNode {
		return this.getToken(MySqlParser.MACROMAN, 0);
	}
	public SJIS(): TerminalNode {
		return this.getToken(MySqlParser.SJIS, 0);
	}
	public SWE7(): TerminalNode {
		return this.getToken(MySqlParser.SWE7, 0);
	}
	public TIS620(): TerminalNode {
		return this.getToken(MySqlParser.TIS620, 0);
	}
	public UCS2(): TerminalNode {
		return this.getToken(MySqlParser.UCS2, 0);
	}
	public UJIS(): TerminalNode {
		return this.getToken(MySqlParser.UJIS, 0);
	}
	public UTF16(): TerminalNode {
		return this.getToken(MySqlParser.UTF16, 0);
	}
	public UTF16LE(): TerminalNode {
		return this.getToken(MySqlParser.UTF16LE, 0);
	}
	public UTF32(): TerminalNode {
		return this.getToken(MySqlParser.UTF32, 0);
	}
	public UTF8(): TerminalNode {
		return this.getToken(MySqlParser.UTF8, 0);
	}
	public UTF8MB3(): TerminalNode {
		return this.getToken(MySqlParser.UTF8MB3, 0);
	}
	public UTF8MB4(): TerminalNode {
		return this.getToken(MySqlParser.UTF8MB4, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_charsetNameBase;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterCharsetNameBase) {
	 		listener.enterCharsetNameBase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitCharsetNameBase) {
	 		listener.exitCharsetNameBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitCharsetNameBase) {
			return visitor.visitCharsetNameBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionLevelBaseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public REPEATABLE(): TerminalNode {
		return this.getToken(MySqlParser.REPEATABLE, 0);
	}
	public COMMITTED(): TerminalNode {
		return this.getToken(MySqlParser.COMMITTED, 0);
	}
	public UNCOMMITTED(): TerminalNode {
		return this.getToken(MySqlParser.UNCOMMITTED, 0);
	}
	public SERIALIZABLE(): TerminalNode {
		return this.getToken(MySqlParser.SERIALIZABLE, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_transactionLevelBase;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterTransactionLevelBase) {
	 		listener.enterTransactionLevelBase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitTransactionLevelBase) {
	 		listener.exitTransactionLevelBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitTransactionLevelBase) {
			return visitor.visitTransactionLevelBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegesBaseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public TABLES(): TerminalNode {
		return this.getToken(MySqlParser.TABLES, 0);
	}
	public ROUTINE(): TerminalNode {
		return this.getToken(MySqlParser.ROUTINE, 0);
	}
	public EXECUTE(): TerminalNode {
		return this.getToken(MySqlParser.EXECUTE, 0);
	}
	public FILE(): TerminalNode {
		return this.getToken(MySqlParser.FILE, 0);
	}
	public PROCESS(): TerminalNode {
		return this.getToken(MySqlParser.PROCESS, 0);
	}
	public RELOAD(): TerminalNode {
		return this.getToken(MySqlParser.RELOAD, 0);
	}
	public SHUTDOWN(): TerminalNode {
		return this.getToken(MySqlParser.SHUTDOWN, 0);
	}
	public SUPER(): TerminalNode {
		return this.getToken(MySqlParser.SUPER, 0);
	}
	public PRIVILEGES(): TerminalNode {
		return this.getToken(MySqlParser.PRIVILEGES, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_privilegesBase;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterPrivilegesBase) {
	 		listener.enterPrivilegesBase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitPrivilegesBase) {
	 		listener.exitPrivilegesBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitPrivilegesBase) {
			return visitor.visitPrivilegesBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalTypeBaseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public QUARTER(): TerminalNode {
		return this.getToken(MySqlParser.QUARTER, 0);
	}
	public MONTH(): TerminalNode {
		return this.getToken(MySqlParser.MONTH, 0);
	}
	public DAY(): TerminalNode {
		return this.getToken(MySqlParser.DAY, 0);
	}
	public HOUR(): TerminalNode {
		return this.getToken(MySqlParser.HOUR, 0);
	}
	public MINUTE(): TerminalNode {
		return this.getToken(MySqlParser.MINUTE, 0);
	}
	public WEEK(): TerminalNode {
		return this.getToken(MySqlParser.WEEK, 0);
	}
	public SECOND(): TerminalNode {
		return this.getToken(MySqlParser.SECOND, 0);
	}
	public MICROSECOND(): TerminalNode {
		return this.getToken(MySqlParser.MICROSECOND, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_intervalTypeBase;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterIntervalTypeBase) {
	 		listener.enterIntervalTypeBase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitIntervalTypeBase) {
	 		listener.exitIntervalTypeBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitIntervalTypeBase) {
			return visitor.visitIntervalTypeBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataTypeBaseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DATE(): TerminalNode {
		return this.getToken(MySqlParser.DATE, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(MySqlParser.TIME, 0);
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.TIMESTAMP, 0);
	}
	public DATETIME(): TerminalNode {
		return this.getToken(MySqlParser.DATETIME, 0);
	}
	public YEAR(): TerminalNode {
		return this.getToken(MySqlParser.YEAR, 0);
	}
	public ENUM(): TerminalNode {
		return this.getToken(MySqlParser.ENUM, 0);
	}
	public TEXT(): TerminalNode {
		return this.getToken(MySqlParser.TEXT, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_dataTypeBase;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterDataTypeBase) {
	 		listener.enterDataTypeBase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitDataTypeBase) {
	 		listener.exitDataTypeBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitDataTypeBase) {
			return visitor.visitDataTypeBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KeywordsCanBeIdContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ACCOUNT(): TerminalNode {
		return this.getToken(MySqlParser.ACCOUNT, 0);
	}
	public ACTION(): TerminalNode {
		return this.getToken(MySqlParser.ACTION, 0);
	}
	public ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.ADMIN, 0);
	}
	public AFTER(): TerminalNode {
		return this.getToken(MySqlParser.AFTER, 0);
	}
	public AGGREGATE(): TerminalNode {
		return this.getToken(MySqlParser.AGGREGATE, 0);
	}
	public ALGORITHM(): TerminalNode {
		return this.getToken(MySqlParser.ALGORITHM, 0);
	}
	public ANY(): TerminalNode {
		return this.getToken(MySqlParser.ANY, 0);
	}
	public ARRAY(): TerminalNode {
		return this.getToken(MySqlParser.ARRAY, 0);
	}
	public AT(): TerminalNode {
		return this.getToken(MySqlParser.AT, 0);
	}
	public AUDIT_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.AUDIT_ADMIN, 0);
	}
	public AUDIT_ABORT_EXEMPT(): TerminalNode {
		return this.getToken(MySqlParser.AUDIT_ABORT_EXEMPT, 0);
	}
	public AUTHORS(): TerminalNode {
		return this.getToken(MySqlParser.AUTHORS, 0);
	}
	public AUTOCOMMIT(): TerminalNode {
		return this.getToken(MySqlParser.AUTOCOMMIT, 0);
	}
	public AUTOEXTEND_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
	}
	public AUTO_INCREMENT(): TerminalNode {
		return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	}
	public AUTHENTICATION_POLICY_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.AUTHENTICATION_POLICY_ADMIN, 0);
	}
	public AVG(): TerminalNode {
		return this.getToken(MySqlParser.AVG, 0);
	}
	public AVG_ROW_LENGTH(): TerminalNode {
		return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0);
	}
	public ATTRIBUTE(): TerminalNode {
		return this.getToken(MySqlParser.ATTRIBUTE, 0);
	}
	public BACKUP_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.BACKUP_ADMIN, 0);
	}
	public BEGIN(): TerminalNode {
		return this.getToken(MySqlParser.BEGIN, 0);
	}
	public BINLOG(): TerminalNode {
		return this.getToken(MySqlParser.BINLOG, 0);
	}
	public BINLOG_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.BINLOG_ADMIN, 0);
	}
	public BINLOG_ENCRYPTION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0);
	}
	public BIT(): TerminalNode {
		return this.getToken(MySqlParser.BIT, 0);
	}
	public BIT_AND(): TerminalNode {
		return this.getToken(MySqlParser.BIT_AND, 0);
	}
	public BIT_OR(): TerminalNode {
		return this.getToken(MySqlParser.BIT_OR, 0);
	}
	public BIT_XOR(): TerminalNode {
		return this.getToken(MySqlParser.BIT_XOR, 0);
	}
	public BLOCK(): TerminalNode {
		return this.getToken(MySqlParser.BLOCK, 0);
	}
	public BOOL(): TerminalNode {
		return this.getToken(MySqlParser.BOOL, 0);
	}
	public BOOLEAN(): TerminalNode {
		return this.getToken(MySqlParser.BOOLEAN, 0);
	}
	public BTREE(): TerminalNode {
		return this.getToken(MySqlParser.BTREE, 0);
	}
	public BUCKETS(): TerminalNode {
		return this.getToken(MySqlParser.BUCKETS, 0);
	}
	public CACHE(): TerminalNode {
		return this.getToken(MySqlParser.CACHE, 0);
	}
	public CASCADED(): TerminalNode {
		return this.getToken(MySqlParser.CASCADED, 0);
	}
	public CHAIN(): TerminalNode {
		return this.getToken(MySqlParser.CHAIN, 0);
	}
	public CHANGED(): TerminalNode {
		return this.getToken(MySqlParser.CHANGED, 0);
	}
	public CHANNEL(): TerminalNode {
		return this.getToken(MySqlParser.CHANNEL, 0);
	}
	public CHECKSUM(): TerminalNode {
		return this.getToken(MySqlParser.CHECKSUM, 0);
	}
	public PAGE_CHECKSUM(): TerminalNode {
		return this.getToken(MySqlParser.PAGE_CHECKSUM, 0);
	}
	public CATALOG_NAME(): TerminalNode {
		return this.getToken(MySqlParser.CATALOG_NAME, 0);
	}
	public CIPHER(): TerminalNode {
		return this.getToken(MySqlParser.CIPHER, 0);
	}
	public CLASS_ORIGIN(): TerminalNode {
		return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
	}
	public CLIENT(): TerminalNode {
		return this.getToken(MySqlParser.CLIENT, 0);
	}
	public CLONE_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.CLONE_ADMIN, 0);
	}
	public CLOSE(): TerminalNode {
		return this.getToken(MySqlParser.CLOSE, 0);
	}
	public CLUSTERING(): TerminalNode {
		return this.getToken(MySqlParser.CLUSTERING, 0);
	}
	public COALESCE(): TerminalNode {
		return this.getToken(MySqlParser.COALESCE, 0);
	}
	public CODE(): TerminalNode {
		return this.getToken(MySqlParser.CODE, 0);
	}
	public COLUMNS(): TerminalNode {
		return this.getToken(MySqlParser.COLUMNS, 0);
	}
	public COLUMN_FORMAT(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN_FORMAT, 0);
	}
	public COLUMN_NAME(): TerminalNode {
		return this.getToken(MySqlParser.COLUMN_NAME, 0);
	}
	public COMMENT(): TerminalNode {
		return this.getToken(MySqlParser.COMMENT, 0);
	}
	public COMMIT(): TerminalNode {
		return this.getToken(MySqlParser.COMMIT, 0);
	}
	public COMPACT(): TerminalNode {
		return this.getToken(MySqlParser.COMPACT, 0);
	}
	public COMPLETION(): TerminalNode {
		return this.getToken(MySqlParser.COMPLETION, 0);
	}
	public COMPRESSED(): TerminalNode {
		return this.getToken(MySqlParser.COMPRESSED, 0);
	}
	public COMPRESSION(): TerminalNode {
		return this.getToken(MySqlParser.COMPRESSION, 0);
	}
	public CONCURRENT(): TerminalNode {
		return this.getToken(MySqlParser.CONCURRENT, 0);
	}
	public CONDITION(): TerminalNode {
		return this.getToken(MySqlParser.CONDITION, 0);
	}
	public CONNECT(): TerminalNode {
		return this.getToken(MySqlParser.CONNECT, 0);
	}
	public CONNECTION(): TerminalNode {
		return this.getToken(MySqlParser.CONNECTION, 0);
	}
	public CONNECTION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.CONNECTION_ADMIN, 0);
	}
	public CONSISTENT(): TerminalNode {
		return this.getToken(MySqlParser.CONSISTENT, 0);
	}
	public CONSTRAINT_CATALOG(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
	}
	public CONSTRAINT_NAME(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
	}
	public CONSTRAINT_SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
	}
	public CONTAINS(): TerminalNode {
		return this.getToken(MySqlParser.CONTAINS, 0);
	}
	public CONTEXT(): TerminalNode {
		return this.getToken(MySqlParser.CONTEXT, 0);
	}
	public CONTRIBUTORS(): TerminalNode {
		return this.getToken(MySqlParser.CONTRIBUTORS, 0);
	}
	public COPY(): TerminalNode {
		return this.getToken(MySqlParser.COPY, 0);
	}
	public COUNT(): TerminalNode {
		return this.getToken(MySqlParser.COUNT, 0);
	}
	public CPU(): TerminalNode {
		return this.getToken(MySqlParser.CPU, 0);
	}
	public CURRENT(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT, 0);
	}
	public CURRENT_USER(): TerminalNode {
		return this.getToken(MySqlParser.CURRENT_USER, 0);
	}
	public CURSOR_NAME(): TerminalNode {
		return this.getToken(MySqlParser.CURSOR_NAME, 0);
	}
	public DATA(): TerminalNode {
		return this.getToken(MySqlParser.DATA, 0);
	}
	public DATAFILE(): TerminalNode {
		return this.getToken(MySqlParser.DATAFILE, 0);
	}
	public DEALLOCATE(): TerminalNode {
		return this.getToken(MySqlParser.DEALLOCATE, 0);
	}
	public DEFAULT(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT, 0);
	}
	public DEFAULT_AUTH(): TerminalNode {
		return this.getToken(MySqlParser.DEFAULT_AUTH, 0);
	}
	public DEFINER(): TerminalNode {
		return this.getToken(MySqlParser.DEFINER, 0);
	}
	public DELAY_KEY_WRITE(): TerminalNode {
		return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0);
	}
	public DES_KEY_FILE(): TerminalNode {
		return this.getToken(MySqlParser.DES_KEY_FILE, 0);
	}
	public DIAGNOSTICS(): TerminalNode {
		return this.getToken(MySqlParser.DIAGNOSTICS, 0);
	}
	public DIRECTORY(): TerminalNode {
		return this.getToken(MySqlParser.DIRECTORY, 0);
	}
	public DISABLE(): TerminalNode {
		return this.getToken(MySqlParser.DISABLE, 0);
	}
	public DISCARD(): TerminalNode {
		return this.getToken(MySqlParser.DISCARD, 0);
	}
	public DISK(): TerminalNode {
		return this.getToken(MySqlParser.DISK, 0);
	}
	public DO(): TerminalNode {
		return this.getToken(MySqlParser.DO, 0);
	}
	public DUMPFILE(): TerminalNode {
		return this.getToken(MySqlParser.DUMPFILE, 0);
	}
	public DUPLICATE(): TerminalNode {
		return this.getToken(MySqlParser.DUPLICATE, 0);
	}
	public DYNAMIC(): TerminalNode {
		return this.getToken(MySqlParser.DYNAMIC, 0);
	}
	public EMPTY(): TerminalNode {
		return this.getToken(MySqlParser.EMPTY, 0);
	}
	public ENABLE(): TerminalNode {
		return this.getToken(MySqlParser.ENABLE, 0);
	}
	public ENCRYPTION(): TerminalNode {
		return this.getToken(MySqlParser.ENCRYPTION, 0);
	}
	public ENCRYPTION_KEY_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0);
	}
	public END(): TerminalNode {
		return this.getToken(MySqlParser.END, 0);
	}
	public ENDS(): TerminalNode {
		return this.getToken(MySqlParser.ENDS, 0);
	}
	public ENGINE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE, 0);
	}
	public ENGINE_ATTRIBUTE(): TerminalNode {
		return this.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0);
	}
	public ENGINES(): TerminalNode {
		return this.getToken(MySqlParser.ENGINES, 0);
	}
	public ENFORCED(): TerminalNode {
		return this.getToken(MySqlParser.ENFORCED, 0);
	}
	public ERROR(): TerminalNode {
		return this.getToken(MySqlParser.ERROR, 0);
	}
	public ERRORS(): TerminalNode {
		return this.getToken(MySqlParser.ERRORS, 0);
	}
	public ESCAPE(): TerminalNode {
		return this.getToken(MySqlParser.ESCAPE, 0);
	}
	public EUR(): TerminalNode {
		return this.getToken(MySqlParser.EUR, 0);
	}
	public EVEN(): TerminalNode {
		return this.getToken(MySqlParser.EVEN, 0);
	}
	public EVENT(): TerminalNode {
		return this.getToken(MySqlParser.EVENT, 0);
	}
	public EVENTS(): TerminalNode {
		return this.getToken(MySqlParser.EVENTS, 0);
	}
	public EVERY(): TerminalNode {
		return this.getToken(MySqlParser.EVERY, 0);
	}
	public EXCEPT(): TerminalNode {
		return this.getToken(MySqlParser.EXCEPT, 0);
	}
	public EXCHANGE(): TerminalNode {
		return this.getToken(MySqlParser.EXCHANGE, 0);
	}
	public EXCLUSIVE(): TerminalNode {
		return this.getToken(MySqlParser.EXCLUSIVE, 0);
	}
	public EXPIRE(): TerminalNode {
		return this.getToken(MySqlParser.EXPIRE, 0);
	}
	public EXPORT(): TerminalNode {
		return this.getToken(MySqlParser.EXPORT, 0);
	}
	public EXTENDED(): TerminalNode {
		return this.getToken(MySqlParser.EXTENDED, 0);
	}
	public EXTENT_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.EXTENT_SIZE, 0);
	}
	public FAILED_LOGIN_ATTEMPTS(): TerminalNode {
		return this.getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0);
	}
	public FAST(): TerminalNode {
		return this.getToken(MySqlParser.FAST, 0);
	}
	public FAULTS(): TerminalNode {
		return this.getToken(MySqlParser.FAULTS, 0);
	}
	public FIELDS(): TerminalNode {
		return this.getToken(MySqlParser.FIELDS, 0);
	}
	public FILE_BLOCK_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.FILE_BLOCK_SIZE, 0);
	}
	public FILTER(): TerminalNode {
		return this.getToken(MySqlParser.FILTER, 0);
	}
	public FIREWALL_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.FIREWALL_ADMIN, 0);
	}
	public FIREWALL_EXEMPT(): TerminalNode {
		return this.getToken(MySqlParser.FIREWALL_EXEMPT, 0);
	}
	public FIREWALL_USER(): TerminalNode {
		return this.getToken(MySqlParser.FIREWALL_USER, 0);
	}
	public FIRST(): TerminalNode {
		return this.getToken(MySqlParser.FIRST, 0);
	}
	public FIXED(): TerminalNode {
		return this.getToken(MySqlParser.FIXED, 0);
	}
	public FLUSH(): TerminalNode {
		return this.getToken(MySqlParser.FLUSH, 0);
	}
	public FOLLOWS(): TerminalNode {
		return this.getToken(MySqlParser.FOLLOWS, 0);
	}
	public FOUND(): TerminalNode {
		return this.getToken(MySqlParser.FOUND, 0);
	}
	public FULL(): TerminalNode {
		return this.getToken(MySqlParser.FULL, 0);
	}
	public FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.FUNCTION, 0);
	}
	public GENERAL(): TerminalNode {
		return this.getToken(MySqlParser.GENERAL, 0);
	}
	public GLOBAL(): TerminalNode {
		return this.getToken(MySqlParser.GLOBAL, 0);
	}
	public GRANTS(): TerminalNode {
		return this.getToken(MySqlParser.GRANTS, 0);
	}
	public GROUP(): TerminalNode {
		return this.getToken(MySqlParser.GROUP, 0);
	}
	public GROUP_CONCAT(): TerminalNode {
		return this.getToken(MySqlParser.GROUP_CONCAT, 0);
	}
	public GROUP_REPLICATION(): TerminalNode {
		return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	}
	public GROUP_REPLICATION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0);
	}
	public HANDLER(): TerminalNode {
		return this.getToken(MySqlParser.HANDLER, 0);
	}
	public HASH(): TerminalNode {
		return this.getToken(MySqlParser.HASH, 0);
	}
	public HELP(): TerminalNode {
		return this.getToken(MySqlParser.HELP, 0);
	}
	public HISTORY(): TerminalNode {
		return this.getToken(MySqlParser.HISTORY, 0);
	}
	public HOST(): TerminalNode {
		return this.getToken(MySqlParser.HOST, 0);
	}
	public HOSTS(): TerminalNode {
		return this.getToken(MySqlParser.HOSTS, 0);
	}
	public IDENTIFIED(): TerminalNode {
		return this.getToken(MySqlParser.IDENTIFIED, 0);
	}
	public IGNORED(): TerminalNode {
		return this.getToken(MySqlParser.IGNORED, 0);
	}
	public IGNORE_SERVER_IDS(): TerminalNode {
		return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0);
	}
	public IMPORT(): TerminalNode {
		return this.getToken(MySqlParser.IMPORT, 0);
	}
	public INDEXES(): TerminalNode {
		return this.getToken(MySqlParser.INDEXES, 0);
	}
	public INITIAL_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	}
	public INNODB_REDO_LOG_ARCHIVE(): TerminalNode {
		return this.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0);
	}
	public INPLACE(): TerminalNode {
		return this.getToken(MySqlParser.INPLACE, 0);
	}
	public INSERT_METHOD(): TerminalNode {
		return this.getToken(MySqlParser.INSERT_METHOD, 0);
	}
	public INSTALL(): TerminalNode {
		return this.getToken(MySqlParser.INSTALL, 0);
	}
	public INSTANCE(): TerminalNode {
		return this.getToken(MySqlParser.INSTANCE, 0);
	}
	public INSTANT(): TerminalNode {
		return this.getToken(MySqlParser.INSTANT, 0);
	}
	public INTERNAL(): TerminalNode {
		return this.getToken(MySqlParser.INTERNAL, 0);
	}
	public INVOKE(): TerminalNode {
		return this.getToken(MySqlParser.INVOKE, 0);
	}
	public INVOKER(): TerminalNode {
		return this.getToken(MySqlParser.INVOKER, 0);
	}
	public IO(): TerminalNode {
		return this.getToken(MySqlParser.IO, 0);
	}
	public IO_THREAD(): TerminalNode {
		return this.getToken(MySqlParser.IO_THREAD, 0);
	}
	public IPC(): TerminalNode {
		return this.getToken(MySqlParser.IPC, 0);
	}
	public ISO(): TerminalNode {
		return this.getToken(MySqlParser.ISO, 0);
	}
	public ISOLATION(): TerminalNode {
		return this.getToken(MySqlParser.ISOLATION, 0);
	}
	public ISSUER(): TerminalNode {
		return this.getToken(MySqlParser.ISSUER, 0);
	}
	public JIS(): TerminalNode {
		return this.getToken(MySqlParser.JIS, 0);
	}
	public JSON(): TerminalNode {
		return this.getToken(MySqlParser.JSON, 0);
	}
	public KEY_BLOCK_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	}
	public LAMBDA(): TerminalNode {
		return this.getToken(MySqlParser.LAMBDA, 0);
	}
	public LANGUAGE(): TerminalNode {
		return this.getToken(MySqlParser.LANGUAGE, 0);
	}
	public LAST(): TerminalNode {
		return this.getToken(MySqlParser.LAST, 0);
	}
	public LATERAL(): TerminalNode {
		return this.getToken(MySqlParser.LATERAL, 0);
	}
	public LEAVES(): TerminalNode {
		return this.getToken(MySqlParser.LEAVES, 0);
	}
	public LESS(): TerminalNode {
		return this.getToken(MySqlParser.LESS, 0);
	}
	public LEVEL(): TerminalNode {
		return this.getToken(MySqlParser.LEVEL, 0);
	}
	public LIST(): TerminalNode {
		return this.getToken(MySqlParser.LIST, 0);
	}
	public LOCAL(): TerminalNode {
		return this.getToken(MySqlParser.LOCAL, 0);
	}
	public LOGFILE(): TerminalNode {
		return this.getToken(MySqlParser.LOGFILE, 0);
	}
	public LOGS(): TerminalNode {
		return this.getToken(MySqlParser.LOGS, 0);
	}
	public MASTER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER, 0);
	}
	public MASTER_AUTO_POSITION(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_AUTO_POSITION, 0);
	}
	public MASTER_CONNECT_RETRY(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0);
	}
	public MASTER_DELAY(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_DELAY, 0);
	}
	public MASTER_HEARTBEAT_PERIOD(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0);
	}
	public MASTER_HOST(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_HOST, 0);
	}
	public MASTER_LOG_FILE(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	}
	public MASTER_LOG_POS(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	}
	public MASTER_PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_PASSWORD, 0);
	}
	public MASTER_PORT(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_PORT, 0);
	}
	public MASTER_RETRY_COUNT(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_RETRY_COUNT, 0);
	}
	public MASTER_SSL(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL, 0);
	}
	public MASTER_SSL_CA(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CA, 0);
	}
	public MASTER_SSL_CAPATH(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CAPATH, 0);
	}
	public MASTER_SSL_CERT(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CERT, 0);
	}
	public MASTER_SSL_CIPHER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CIPHER, 0);
	}
	public MASTER_SSL_CRL(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CRL, 0);
	}
	public MASTER_SSL_CRLPATH(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0);
	}
	public MASTER_SSL_KEY(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_SSL_KEY, 0);
	}
	public MASTER_TLS_VERSION(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_TLS_VERSION, 0);
	}
	public MASTER_USER(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_USER, 0);
	}
	public MAX_CONNECTIONS_PER_HOUR(): TerminalNode {
		return this.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0);
	}
	public MAX_QUERIES_PER_HOUR(): TerminalNode {
		return this.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0);
	}
	public MAX(): TerminalNode {
		return this.getToken(MySqlParser.MAX, 0);
	}
	public MAX_ROWS(): TerminalNode {
		return this.getToken(MySqlParser.MAX_ROWS, 0);
	}
	public MAX_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.MAX_SIZE, 0);
	}
	public MAX_UPDATES_PER_HOUR(): TerminalNode {
		return this.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0);
	}
	public MAX_USER_CONNECTIONS(): TerminalNode {
		return this.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0);
	}
	public MEDIUM(): TerminalNode {
		return this.getToken(MySqlParser.MEDIUM, 0);
	}
	public MEMBER(): TerminalNode {
		return this.getToken(MySqlParser.MEMBER, 0);
	}
	public MEMORY(): TerminalNode {
		return this.getToken(MySqlParser.MEMORY, 0);
	}
	public MERGE(): TerminalNode {
		return this.getToken(MySqlParser.MERGE, 0);
	}
	public MESSAGE_TEXT(): TerminalNode {
		return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
	}
	public MID(): TerminalNode {
		return this.getToken(MySqlParser.MID, 0);
	}
	public MIGRATE(): TerminalNode {
		return this.getToken(MySqlParser.MIGRATE, 0);
	}
	public MIN(): TerminalNode {
		return this.getToken(MySqlParser.MIN, 0);
	}
	public MIN_ROWS(): TerminalNode {
		return this.getToken(MySqlParser.MIN_ROWS, 0);
	}
	public MODE(): TerminalNode {
		return this.getToken(MySqlParser.MODE, 0);
	}
	public MODIFY(): TerminalNode {
		return this.getToken(MySqlParser.MODIFY, 0);
	}
	public MUTEX(): TerminalNode {
		return this.getToken(MySqlParser.MUTEX, 0);
	}
	public MYSQL(): TerminalNode {
		return this.getToken(MySqlParser.MYSQL, 0);
	}
	public MYSQL_ERRNO(): TerminalNode {
		return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
	}
	public NAME(): TerminalNode {
		return this.getToken(MySqlParser.NAME, 0);
	}
	public NAMES(): TerminalNode {
		return this.getToken(MySqlParser.NAMES, 0);
	}
	public NCHAR(): TerminalNode {
		return this.getToken(MySqlParser.NCHAR, 0);
	}
	public NDB_STORED_USER(): TerminalNode {
		return this.getToken(MySqlParser.NDB_STORED_USER, 0);
	}
	public NESTED(): TerminalNode {
		return this.getToken(MySqlParser.NESTED, 0);
	}
	public NEVER(): TerminalNode {
		return this.getToken(MySqlParser.NEVER, 0);
	}
	public NEXT(): TerminalNode {
		return this.getToken(MySqlParser.NEXT, 0);
	}
	public NO(): TerminalNode {
		return this.getToken(MySqlParser.NO, 0);
	}
	public NOCOPY(): TerminalNode {
		return this.getToken(MySqlParser.NOCOPY, 0);
	}
	public NODEGROUP(): TerminalNode {
		return this.getToken(MySqlParser.NODEGROUP, 0);
	}
	public NONE(): TerminalNode {
		return this.getToken(MySqlParser.NONE, 0);
	}
	public NOWAIT(): TerminalNode {
		return this.getToken(MySqlParser.NOWAIT, 0);
	}
	public NUMBER(): TerminalNode {
		return this.getToken(MySqlParser.NUMBER, 0);
	}
	public ODBC(): TerminalNode {
		return this.getToken(MySqlParser.ODBC, 0);
	}
	public OFFLINE(): TerminalNode {
		return this.getToken(MySqlParser.OFFLINE, 0);
	}
	public OFFSET(): TerminalNode {
		return this.getToken(MySqlParser.OFFSET, 0);
	}
	public OF(): TerminalNode {
		return this.getToken(MySqlParser.OF, 0);
	}
	public OJ(): TerminalNode {
		return this.getToken(MySqlParser.OJ, 0);
	}
	public OLD_PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.OLD_PASSWORD, 0);
	}
	public ONE(): TerminalNode {
		return this.getToken(MySqlParser.ONE, 0);
	}
	public ONLINE(): TerminalNode {
		return this.getToken(MySqlParser.ONLINE, 0);
	}
	public ONLY(): TerminalNode {
		return this.getToken(MySqlParser.ONLY, 0);
	}
	public OPEN(): TerminalNode {
		return this.getToken(MySqlParser.OPEN, 0);
	}
	public OPTIMIZER_COSTS(): TerminalNode {
		return this.getToken(MySqlParser.OPTIMIZER_COSTS, 0);
	}
	public OPTIONAL(): TerminalNode {
		return this.getToken(MySqlParser.OPTIONAL, 0);
	}
	public OPTIONS(): TerminalNode {
		return this.getToken(MySqlParser.OPTIONS, 0);
	}
	public ORDER(): TerminalNode {
		return this.getToken(MySqlParser.ORDER, 0);
	}
	public ORDINALITY(): TerminalNode {
		return this.getToken(MySqlParser.ORDINALITY, 0);
	}
	public OWNER(): TerminalNode {
		return this.getToken(MySqlParser.OWNER, 0);
	}
	public PACK_KEYS(): TerminalNode {
		return this.getToken(MySqlParser.PACK_KEYS, 0);
	}
	public PAGE(): TerminalNode {
		return this.getToken(MySqlParser.PAGE, 0);
	}
	public PARSER(): TerminalNode {
		return this.getToken(MySqlParser.PARSER, 0);
	}
	public PARTIAL(): TerminalNode {
		return this.getToken(MySqlParser.PARTIAL, 0);
	}
	public PARTITIONING(): TerminalNode {
		return this.getToken(MySqlParser.PARTITIONING, 0);
	}
	public PARTITIONS(): TerminalNode {
		return this.getToken(MySqlParser.PARTITIONS, 0);
	}
	public PASSWORD(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD, 0);
	}
	public PASSWORDLESS_USER_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0);
	}
	public PASSWORD_LOCK_TIME(): TerminalNode {
		return this.getToken(MySqlParser.PASSWORD_LOCK_TIME, 0);
	}
	public PATH(): TerminalNode {
		return this.getToken(MySqlParser.PATH, 0);
	}
	public PERSIST_RO_VARIABLES_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0);
	}
	public PHASE(): TerminalNode {
		return this.getToken(MySqlParser.PHASE, 0);
	}
	public PLUGINS(): TerminalNode {
		return this.getToken(MySqlParser.PLUGINS, 0);
	}
	public PLUGIN_DIR(): TerminalNode {
		return this.getToken(MySqlParser.PLUGIN_DIR, 0);
	}
	public PLUGIN(): TerminalNode {
		return this.getToken(MySqlParser.PLUGIN, 0);
	}
	public PORT(): TerminalNode {
		return this.getToken(MySqlParser.PORT, 0);
	}
	public PRECEDES(): TerminalNode {
		return this.getToken(MySqlParser.PRECEDES, 0);
	}
	public PREPARE(): TerminalNode {
		return this.getToken(MySqlParser.PREPARE, 0);
	}
	public PRESERVE(): TerminalNode {
		return this.getToken(MySqlParser.PRESERVE, 0);
	}
	public PREV(): TerminalNode {
		return this.getToken(MySqlParser.PREV, 0);
	}
	public PRIMARY(): TerminalNode {
		return this.getToken(MySqlParser.PRIMARY, 0);
	}
	public PROCESSLIST(): TerminalNode {
		return this.getToken(MySqlParser.PROCESSLIST, 0);
	}
	public PROFILE(): TerminalNode {
		return this.getToken(MySqlParser.PROFILE, 0);
	}
	public PROFILES(): TerminalNode {
		return this.getToken(MySqlParser.PROFILES, 0);
	}
	public PROXY(): TerminalNode {
		return this.getToken(MySqlParser.PROXY, 0);
	}
	public QUERY(): TerminalNode {
		return this.getToken(MySqlParser.QUERY, 0);
	}
	public QUICK(): TerminalNode {
		return this.getToken(MySqlParser.QUICK, 0);
	}
	public REBUILD(): TerminalNode {
		return this.getToken(MySqlParser.REBUILD, 0);
	}
	public RECOVER(): TerminalNode {
		return this.getToken(MySqlParser.RECOVER, 0);
	}
	public RECURSIVE(): TerminalNode {
		return this.getToken(MySqlParser.RECURSIVE, 0);
	}
	public REDO_BUFFER_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.REDO_BUFFER_SIZE, 0);
	}
	public REDUNDANT(): TerminalNode {
		return this.getToken(MySqlParser.REDUNDANT, 0);
	}
	public RELAY(): TerminalNode {
		return this.getToken(MySqlParser.RELAY, 0);
	}
	public RELAYLOG(): TerminalNode {
		return this.getToken(MySqlParser.RELAYLOG, 0);
	}
	public RELAY_LOG_FILE(): TerminalNode {
		return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	}
	public RELAY_LOG_POS(): TerminalNode {
		return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	}
	public REMOVE(): TerminalNode {
		return this.getToken(MySqlParser.REMOVE, 0);
	}
	public REORGANIZE(): TerminalNode {
		return this.getToken(MySqlParser.REORGANIZE, 0);
	}
	public REPAIR(): TerminalNode {
		return this.getToken(MySqlParser.REPAIR, 0);
	}
	public REPLICATE_DO_DB(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_DO_DB, 0);
	}
	public REPLICATE_DO_TABLE(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0);
	}
	public REPLICATE_IGNORE_DB(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0);
	}
	public REPLICATE_IGNORE_TABLE(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0);
	}
	public REPLICATE_REWRITE_DB(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0);
	}
	public REPLICATE_WILD_DO_TABLE(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0);
	}
	public REPLICATE_WILD_IGNORE_TABLE(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0);
	}
	public REPLICATION(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATION, 0);
	}
	public REPLICATION_APPLIER(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATION_APPLIER, 0);
	}
	public REPLICATION_SLAVE_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0);
	}
	public RESET(): TerminalNode {
		return this.getToken(MySqlParser.RESET, 0);
	}
	public RESOURCE_GROUP_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0);
	}
	public RESOURCE_GROUP_USER(): TerminalNode {
		return this.getToken(MySqlParser.RESOURCE_GROUP_USER, 0);
	}
	public RESUME(): TerminalNode {
		return this.getToken(MySqlParser.RESUME, 0);
	}
	public RETURNED_SQLSTATE(): TerminalNode {
		return this.getToken(MySqlParser.RETURNED_SQLSTATE, 0);
	}
	public RETURNING(): TerminalNode {
		return this.getToken(MySqlParser.RETURNING, 0);
	}
	public RETURNS(): TerminalNode {
		return this.getToken(MySqlParser.RETURNS, 0);
	}
	public REUSE(): TerminalNode {
		return this.getToken(MySqlParser.REUSE, 0);
	}
	public ROLE(): TerminalNode {
		return this.getToken(MySqlParser.ROLE, 0);
	}
	public ROLE_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.ROLE_ADMIN, 0);
	}
	public ROLLBACK(): TerminalNode {
		return this.getToken(MySqlParser.ROLLBACK, 0);
	}
	public ROLLUP(): TerminalNode {
		return this.getToken(MySqlParser.ROLLUP, 0);
	}
	public ROTATE(): TerminalNode {
		return this.getToken(MySqlParser.ROTATE, 0);
	}
	public ROW(): TerminalNode {
		return this.getToken(MySqlParser.ROW, 0);
	}
	public ROWS(): TerminalNode {
		return this.getToken(MySqlParser.ROWS, 0);
	}
	public ROW_FORMAT(): TerminalNode {
		return this.getToken(MySqlParser.ROW_FORMAT, 0);
	}
	public RTREE(): TerminalNode {
		return this.getToken(MySqlParser.RTREE, 0);
	}
	public S3(): TerminalNode {
		return this.getToken(MySqlParser.S3, 0);
	}
	public SAVEPOINT(): TerminalNode {
		return this.getToken(MySqlParser.SAVEPOINT, 0);
	}
	public SCHEDULE(): TerminalNode {
		return this.getToken(MySqlParser.SCHEDULE, 0);
	}
	public SCHEMA_NAME(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMA_NAME, 0);
	}
	public SECURITY(): TerminalNode {
		return this.getToken(MySqlParser.SECURITY, 0);
	}
	public SECONDARY_ENGINE_ATTRIBUTE(): TerminalNode {
		return this.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0);
	}
	public SERIAL(): TerminalNode {
		return this.getToken(MySqlParser.SERIAL, 0);
	}
	public SERVER(): TerminalNode {
		return this.getToken(MySqlParser.SERVER, 0);
	}
	public SESSION(): TerminalNode {
		return this.getToken(MySqlParser.SESSION, 0);
	}
	public SESSION_VARIABLES_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
	}
	public SET_USER_ID(): TerminalNode {
		return this.getToken(MySqlParser.SET_USER_ID, 0);
	}
	public SHARE(): TerminalNode {
		return this.getToken(MySqlParser.SHARE, 0);
	}
	public SHARED(): TerminalNode {
		return this.getToken(MySqlParser.SHARED, 0);
	}
	public SHOW_ROUTINE(): TerminalNode {
		return this.getToken(MySqlParser.SHOW_ROUTINE, 0);
	}
	public SIGNED(): TerminalNode {
		return this.getToken(MySqlParser.SIGNED, 0);
	}
	public SIMPLE(): TerminalNode {
		return this.getToken(MySqlParser.SIMPLE, 0);
	}
	public SLAVE(): TerminalNode {
		return this.getToken(MySqlParser.SLAVE, 0);
	}
	public SLOW(): TerminalNode {
		return this.getToken(MySqlParser.SLOW, 0);
	}
	public SKIP_QUERY_REWRITE(): TerminalNode {
		return this.getToken(MySqlParser.SKIP_QUERY_REWRITE, 0);
	}
	public SNAPSHOT(): TerminalNode {
		return this.getToken(MySqlParser.SNAPSHOT, 0);
	}
	public SOCKET(): TerminalNode {
		return this.getToken(MySqlParser.SOCKET, 0);
	}
	public SOME(): TerminalNode {
		return this.getToken(MySqlParser.SOME, 0);
	}
	public SONAME(): TerminalNode {
		return this.getToken(MySqlParser.SONAME, 0);
	}
	public SOUNDS(): TerminalNode {
		return this.getToken(MySqlParser.SOUNDS, 0);
	}
	public SOURCE(): TerminalNode {
		return this.getToken(MySqlParser.SOURCE, 0);
	}
	public SQL_AFTER_GTIDS(): TerminalNode {
		return this.getToken(MySqlParser.SQL_AFTER_GTIDS, 0);
	}
	public SQL_AFTER_MTS_GAPS(): TerminalNode {
		return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0);
	}
	public SQL_BEFORE_GTIDS(): TerminalNode {
		return this.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0);
	}
	public SQL_BUFFER_RESULT(): TerminalNode {
		return this.getToken(MySqlParser.SQL_BUFFER_RESULT, 0);
	}
	public SQL_CACHE(): TerminalNode {
		return this.getToken(MySqlParser.SQL_CACHE, 0);
	}
	public SQL_NO_CACHE(): TerminalNode {
		return this.getToken(MySqlParser.SQL_NO_CACHE, 0);
	}
	public SQL_THREAD(): TerminalNode {
		return this.getToken(MySqlParser.SQL_THREAD, 0);
	}
	public STACKED(): TerminalNode {
		return this.getToken(MySqlParser.STACKED, 0);
	}
	public START(): TerminalNode {
		return this.getToken(MySqlParser.START, 0);
	}
	public STARTS(): TerminalNode {
		return this.getToken(MySqlParser.STARTS, 0);
	}
	public STATS_AUTO_RECALC(): TerminalNode {
		return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0);
	}
	public STATS_PERSISTENT(): TerminalNode {
		return this.getToken(MySqlParser.STATS_PERSISTENT, 0);
	}
	public STATS_SAMPLE_PAGES(): TerminalNode {
		return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0);
	}
	public STATUS(): TerminalNode {
		return this.getToken(MySqlParser.STATUS, 0);
	}
	public STD(): TerminalNode {
		return this.getToken(MySqlParser.STD, 0);
	}
	public STDDEV(): TerminalNode {
		return this.getToken(MySqlParser.STDDEV, 0);
	}
	public STDDEV_POP(): TerminalNode {
		return this.getToken(MySqlParser.STDDEV_POP, 0);
	}
	public STDDEV_SAMP(): TerminalNode {
		return this.getToken(MySqlParser.STDDEV_SAMP, 0);
	}
	public STOP(): TerminalNode {
		return this.getToken(MySqlParser.STOP, 0);
	}
	public STORAGE(): TerminalNode {
		return this.getToken(MySqlParser.STORAGE, 0);
	}
	public STRING(): TerminalNode {
		return this.getToken(MySqlParser.STRING, 0);
	}
	public SUBCLASS_ORIGIN(): TerminalNode {
		return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
	}
	public SUBJECT(): TerminalNode {
		return this.getToken(MySqlParser.SUBJECT, 0);
	}
	public SUBPARTITION(): TerminalNode {
		return this.getToken(MySqlParser.SUBPARTITION, 0);
	}
	public SUBPARTITIONS(): TerminalNode {
		return this.getToken(MySqlParser.SUBPARTITIONS, 0);
	}
	public SUM(): TerminalNode {
		return this.getToken(MySqlParser.SUM, 0);
	}
	public SUSPEND(): TerminalNode {
		return this.getToken(MySqlParser.SUSPEND, 0);
	}
	public SWAPS(): TerminalNode {
		return this.getToken(MySqlParser.SWAPS, 0);
	}
	public SWITCHES(): TerminalNode {
		return this.getToken(MySqlParser.SWITCHES, 0);
	}
	public SYSTEM_VARIABLES_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0);
	}
	public TABLE_NAME(): TerminalNode {
		return this.getToken(MySqlParser.TABLE_NAME, 0);
	}
	public TABLESPACE(): TerminalNode {
		return this.getToken(MySqlParser.TABLESPACE, 0);
	}
	public TABLE_ENCRYPTION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0);
	}
	public TABLE_TYPE(): TerminalNode {
		return this.getToken(MySqlParser.TABLE_TYPE, 0);
	}
	public TEMPORARY(): TerminalNode {
		return this.getToken(MySqlParser.TEMPORARY, 0);
	}
	public TEMPTABLE(): TerminalNode {
		return this.getToken(MySqlParser.TEMPTABLE, 0);
	}
	public THAN(): TerminalNode {
		return this.getToken(MySqlParser.THAN, 0);
	}
	public TP_CONNECTION_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.TP_CONNECTION_ADMIN, 0);
	}
	public TRADITIONAL(): TerminalNode {
		return this.getToken(MySqlParser.TRADITIONAL, 0);
	}
	public TRANSACTION(): TerminalNode {
		return this.getToken(MySqlParser.TRANSACTION, 0);
	}
	public TRANSACTIONAL(): TerminalNode {
		return this.getToken(MySqlParser.TRANSACTIONAL, 0);
	}
	public TRIGGERS(): TerminalNode {
		return this.getToken(MySqlParser.TRIGGERS, 0);
	}
	public TRUNCATE(): TerminalNode {
		return this.getToken(MySqlParser.TRUNCATE, 0);
	}
	public UNBOUNDED(): TerminalNode {
		return this.getToken(MySqlParser.UNBOUNDED, 0);
	}
	public UNDEFINED(): TerminalNode {
		return this.getToken(MySqlParser.UNDEFINED, 0);
	}
	public UNDOFILE(): TerminalNode {
		return this.getToken(MySqlParser.UNDOFILE, 0);
	}
	public UNDO_BUFFER_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0);
	}
	public UNINSTALL(): TerminalNode {
		return this.getToken(MySqlParser.UNINSTALL, 0);
	}
	public UNKNOWN(): TerminalNode {
		return this.getToken(MySqlParser.UNKNOWN, 0);
	}
	public UNTIL(): TerminalNode {
		return this.getToken(MySqlParser.UNTIL, 0);
	}
	public UPGRADE(): TerminalNode {
		return this.getToken(MySqlParser.UPGRADE, 0);
	}
	public USA(): TerminalNode {
		return this.getToken(MySqlParser.USA, 0);
	}
	public USER(): TerminalNode {
		return this.getToken(MySqlParser.USER, 0);
	}
	public USE_FRM(): TerminalNode {
		return this.getToken(MySqlParser.USE_FRM, 0);
	}
	public USER_RESOURCES(): TerminalNode {
		return this.getToken(MySqlParser.USER_RESOURCES, 0);
	}
	public VALIDATION(): TerminalNode {
		return this.getToken(MySqlParser.VALIDATION, 0);
	}
	public VALUE(): TerminalNode {
		return this.getToken(MySqlParser.VALUE, 0);
	}
	public VAR_POP(): TerminalNode {
		return this.getToken(MySqlParser.VAR_POP, 0);
	}
	public VAR_SAMP(): TerminalNode {
		return this.getToken(MySqlParser.VAR_SAMP, 0);
	}
	public VARIABLES(): TerminalNode {
		return this.getToken(MySqlParser.VARIABLES, 0);
	}
	public VARIANCE(): TerminalNode {
		return this.getToken(MySqlParser.VARIANCE, 0);
	}
	public VERSION_TOKEN_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0);
	}
	public VIEW(): TerminalNode {
		return this.getToken(MySqlParser.VIEW, 0);
	}
	public VIRTUAL(): TerminalNode {
		return this.getToken(MySqlParser.VIRTUAL, 0);
	}
	public WAIT(): TerminalNode {
		return this.getToken(MySqlParser.WAIT, 0);
	}
	public WARNINGS(): TerminalNode {
		return this.getToken(MySqlParser.WARNINGS, 0);
	}
	public WITHOUT(): TerminalNode {
		return this.getToken(MySqlParser.WITHOUT, 0);
	}
	public WORK(): TerminalNode {
		return this.getToken(MySqlParser.WORK, 0);
	}
	public WRAPPER(): TerminalNode {
		return this.getToken(MySqlParser.WRAPPER, 0);
	}
	public X509(): TerminalNode {
		return this.getToken(MySqlParser.X509, 0);
	}
	public XA(): TerminalNode {
		return this.getToken(MySqlParser.XA, 0);
	}
	public XA_RECOVER_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.XA_RECOVER_ADMIN, 0);
	}
	public XML(): TerminalNode {
		return this.getToken(MySqlParser.XML, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_keywordsCanBeId;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterKeywordsCanBeId) {
	 		listener.enterKeywordsCanBeId(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitKeywordsCanBeId) {
	 		listener.exitKeywordsCanBeId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitKeywordsCanBeId) {
			return visitor.visitKeywordsCanBeId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionNameBaseContext extends ParserRuleContext {
	constructor(parser?: MySqlParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public ABS(): TerminalNode {
		return this.getToken(MySqlParser.ABS, 0);
	}
	public ACOS(): TerminalNode {
		return this.getToken(MySqlParser.ACOS, 0);
	}
	public ADDDATE(): TerminalNode {
		return this.getToken(MySqlParser.ADDDATE, 0);
	}
	public ADDTIME(): TerminalNode {
		return this.getToken(MySqlParser.ADDTIME, 0);
	}
	public AES_DECRYPT(): TerminalNode {
		return this.getToken(MySqlParser.AES_DECRYPT, 0);
	}
	public AES_ENCRYPT(): TerminalNode {
		return this.getToken(MySqlParser.AES_ENCRYPT, 0);
	}
	public AREA(): TerminalNode {
		return this.getToken(MySqlParser.AREA, 0);
	}
	public ASBINARY(): TerminalNode {
		return this.getToken(MySqlParser.ASBINARY, 0);
	}
	public ASIN(): TerminalNode {
		return this.getToken(MySqlParser.ASIN, 0);
	}
	public ASTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ASTEXT, 0);
	}
	public ASWKB(): TerminalNode {
		return this.getToken(MySqlParser.ASWKB, 0);
	}
	public ASWKT(): TerminalNode {
		return this.getToken(MySqlParser.ASWKT, 0);
	}
	public ASYMMETRIC_DECRYPT(): TerminalNode {
		return this.getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0);
	}
	public ASYMMETRIC_DERIVE(): TerminalNode {
		return this.getToken(MySqlParser.ASYMMETRIC_DERIVE, 0);
	}
	public ASYMMETRIC_ENCRYPT(): TerminalNode {
		return this.getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0);
	}
	public ASYMMETRIC_SIGN(): TerminalNode {
		return this.getToken(MySqlParser.ASYMMETRIC_SIGN, 0);
	}
	public ASYMMETRIC_VERIFY(): TerminalNode {
		return this.getToken(MySqlParser.ASYMMETRIC_VERIFY, 0);
	}
	public ATAN(): TerminalNode {
		return this.getToken(MySqlParser.ATAN, 0);
	}
	public ATAN2(): TerminalNode {
		return this.getToken(MySqlParser.ATAN2, 0);
	}
	public BENCHMARK(): TerminalNode {
		return this.getToken(MySqlParser.BENCHMARK, 0);
	}
	public BIN(): TerminalNode {
		return this.getToken(MySqlParser.BIN, 0);
	}
	public BIT_COUNT(): TerminalNode {
		return this.getToken(MySqlParser.BIT_COUNT, 0);
	}
	public BIT_LENGTH(): TerminalNode {
		return this.getToken(MySqlParser.BIT_LENGTH, 0);
	}
	public BUFFER(): TerminalNode {
		return this.getToken(MySqlParser.BUFFER, 0);
	}
	public CEIL(): TerminalNode {
		return this.getToken(MySqlParser.CEIL, 0);
	}
	public CEILING(): TerminalNode {
		return this.getToken(MySqlParser.CEILING, 0);
	}
	public CENTROID(): TerminalNode {
		return this.getToken(MySqlParser.CENTROID, 0);
	}
	public CHARACTER_LENGTH(): TerminalNode {
		return this.getToken(MySqlParser.CHARACTER_LENGTH, 0);
	}
	public CHARSET(): TerminalNode {
		return this.getToken(MySqlParser.CHARSET, 0);
	}
	public CHAR_LENGTH(): TerminalNode {
		return this.getToken(MySqlParser.CHAR_LENGTH, 0);
	}
	public COERCIBILITY(): TerminalNode {
		return this.getToken(MySqlParser.COERCIBILITY, 0);
	}
	public COLLATION(): TerminalNode {
		return this.getToken(MySqlParser.COLLATION, 0);
	}
	public COMPRESS(): TerminalNode {
		return this.getToken(MySqlParser.COMPRESS, 0);
	}
	public CONCAT(): TerminalNode {
		return this.getToken(MySqlParser.CONCAT, 0);
	}
	public CONCAT_WS(): TerminalNode {
		return this.getToken(MySqlParser.CONCAT_WS, 0);
	}
	public CONNECTION_ID(): TerminalNode {
		return this.getToken(MySqlParser.CONNECTION_ID, 0);
	}
	public CONV(): TerminalNode {
		return this.getToken(MySqlParser.CONV, 0);
	}
	public CONVERT_TZ(): TerminalNode {
		return this.getToken(MySqlParser.CONVERT_TZ, 0);
	}
	public COS(): TerminalNode {
		return this.getToken(MySqlParser.COS, 0);
	}
	public COT(): TerminalNode {
		return this.getToken(MySqlParser.COT, 0);
	}
	public COUNT(): TerminalNode {
		return this.getToken(MySqlParser.COUNT, 0);
	}
	public CRC32(): TerminalNode {
		return this.getToken(MySqlParser.CRC32, 0);
	}
	public CREATE_ASYMMETRIC_PRIV_KEY(): TerminalNode {
		return this.getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0);
	}
	public CREATE_ASYMMETRIC_PUB_KEY(): TerminalNode {
		return this.getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0);
	}
	public CREATE_DH_PARAMETERS(): TerminalNode {
		return this.getToken(MySqlParser.CREATE_DH_PARAMETERS, 0);
	}
	public CREATE_DIGEST(): TerminalNode {
		return this.getToken(MySqlParser.CREATE_DIGEST, 0);
	}
	public CROSSES(): TerminalNode {
		return this.getToken(MySqlParser.CROSSES, 0);
	}
	public CUME_DIST(): TerminalNode {
		return this.getToken(MySqlParser.CUME_DIST, 0);
	}
	public DATABASE(): TerminalNode {
		return this.getToken(MySqlParser.DATABASE, 0);
	}
	public DATE(): TerminalNode {
		return this.getToken(MySqlParser.DATE, 0);
	}
	public DATEDIFF(): TerminalNode {
		return this.getToken(MySqlParser.DATEDIFF, 0);
	}
	public DATE_FORMAT(): TerminalNode {
		return this.getToken(MySqlParser.DATE_FORMAT, 0);
	}
	public DAY(): TerminalNode {
		return this.getToken(MySqlParser.DAY, 0);
	}
	public DAYNAME(): TerminalNode {
		return this.getToken(MySqlParser.DAYNAME, 0);
	}
	public DAYOFMONTH(): TerminalNode {
		return this.getToken(MySqlParser.DAYOFMONTH, 0);
	}
	public DAYOFWEEK(): TerminalNode {
		return this.getToken(MySqlParser.DAYOFWEEK, 0);
	}
	public DAYOFYEAR(): TerminalNode {
		return this.getToken(MySqlParser.DAYOFYEAR, 0);
	}
	public DECODE(): TerminalNode {
		return this.getToken(MySqlParser.DECODE, 0);
	}
	public DEGREES(): TerminalNode {
		return this.getToken(MySqlParser.DEGREES, 0);
	}
	public DENSE_RANK(): TerminalNode {
		return this.getToken(MySqlParser.DENSE_RANK, 0);
	}
	public DES_DECRYPT(): TerminalNode {
		return this.getToken(MySqlParser.DES_DECRYPT, 0);
	}
	public DES_ENCRYPT(): TerminalNode {
		return this.getToken(MySqlParser.DES_ENCRYPT, 0);
	}
	public DIMENSION(): TerminalNode {
		return this.getToken(MySqlParser.DIMENSION, 0);
	}
	public DISJOINT(): TerminalNode {
		return this.getToken(MySqlParser.DISJOINT, 0);
	}
	public ELT(): TerminalNode {
		return this.getToken(MySqlParser.ELT, 0);
	}
	public ENCODE(): TerminalNode {
		return this.getToken(MySqlParser.ENCODE, 0);
	}
	public ENCRYPT(): TerminalNode {
		return this.getToken(MySqlParser.ENCRYPT, 0);
	}
	public ENDPOINT(): TerminalNode {
		return this.getToken(MySqlParser.ENDPOINT, 0);
	}
	public ENVELOPE(): TerminalNode {
		return this.getToken(MySqlParser.ENVELOPE, 0);
	}
	public EQUALS(): TerminalNode {
		return this.getToken(MySqlParser.EQUALS, 0);
	}
	public EXP(): TerminalNode {
		return this.getToken(MySqlParser.EXP, 0);
	}
	public EXPORT_SET(): TerminalNode {
		return this.getToken(MySqlParser.EXPORT_SET, 0);
	}
	public EXTERIORRING(): TerminalNode {
		return this.getToken(MySqlParser.EXTERIORRING, 0);
	}
	public EXTRACTVALUE(): TerminalNode {
		return this.getToken(MySqlParser.EXTRACTVALUE, 0);
	}
	public FIELD(): TerminalNode {
		return this.getToken(MySqlParser.FIELD, 0);
	}
	public FIND_IN_SET(): TerminalNode {
		return this.getToken(MySqlParser.FIND_IN_SET, 0);
	}
	public FIRST_VALUE(): TerminalNode {
		return this.getToken(MySqlParser.FIRST_VALUE, 0);
	}
	public FLOOR(): TerminalNode {
		return this.getToken(MySqlParser.FLOOR, 0);
	}
	public FORMAT(): TerminalNode {
		return this.getToken(MySqlParser.FORMAT, 0);
	}
	public FOUND_ROWS(): TerminalNode {
		return this.getToken(MySqlParser.FOUND_ROWS, 0);
	}
	public FROM_BASE64(): TerminalNode {
		return this.getToken(MySqlParser.FROM_BASE64, 0);
	}
	public FROM_DAYS(): TerminalNode {
		return this.getToken(MySqlParser.FROM_DAYS, 0);
	}
	public FROM_UNIXTIME(): TerminalNode {
		return this.getToken(MySqlParser.FROM_UNIXTIME, 0);
	}
	public GEOMCOLLFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.GEOMCOLLFROMTEXT, 0);
	}
	public GEOMCOLLFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.GEOMCOLLFROMWKB, 0);
	}
	public GEOMETRYCOLLECTION(): TerminalNode {
		return this.getToken(MySqlParser.GEOMETRYCOLLECTION, 0);
	}
	public GEOMETRYCOLLECTIONFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0);
	}
	public GEOMETRYCOLLECTIONFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0);
	}
	public GEOMETRYFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.GEOMETRYFROMTEXT, 0);
	}
	public GEOMETRYFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.GEOMETRYFROMWKB, 0);
	}
	public GEOMETRYN(): TerminalNode {
		return this.getToken(MySqlParser.GEOMETRYN, 0);
	}
	public GEOMETRYTYPE(): TerminalNode {
		return this.getToken(MySqlParser.GEOMETRYTYPE, 0);
	}
	public GEOMFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.GEOMFROMTEXT, 0);
	}
	public GEOMFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.GEOMFROMWKB, 0);
	}
	public GET_FORMAT(): TerminalNode {
		return this.getToken(MySqlParser.GET_FORMAT, 0);
	}
	public GET_LOCK(): TerminalNode {
		return this.getToken(MySqlParser.GET_LOCK, 0);
	}
	public GLENGTH(): TerminalNode {
		return this.getToken(MySqlParser.GLENGTH, 0);
	}
	public GREATEST(): TerminalNode {
		return this.getToken(MySqlParser.GREATEST, 0);
	}
	public GTID_SUBSET(): TerminalNode {
		return this.getToken(MySqlParser.GTID_SUBSET, 0);
	}
	public GTID_SUBTRACT(): TerminalNode {
		return this.getToken(MySqlParser.GTID_SUBTRACT, 0);
	}
	public HEX(): TerminalNode {
		return this.getToken(MySqlParser.HEX, 0);
	}
	public HOUR(): TerminalNode {
		return this.getToken(MySqlParser.HOUR, 0);
	}
	public IFNULL(): TerminalNode {
		return this.getToken(MySqlParser.IFNULL, 0);
	}
	public INET6_ATON(): TerminalNode {
		return this.getToken(MySqlParser.INET6_ATON, 0);
	}
	public INET6_NTOA(): TerminalNode {
		return this.getToken(MySqlParser.INET6_NTOA, 0);
	}
	public INET_ATON(): TerminalNode {
		return this.getToken(MySqlParser.INET_ATON, 0);
	}
	public INET_NTOA(): TerminalNode {
		return this.getToken(MySqlParser.INET_NTOA, 0);
	}
	public INSTR(): TerminalNode {
		return this.getToken(MySqlParser.INSTR, 0);
	}
	public INTERIORRINGN(): TerminalNode {
		return this.getToken(MySqlParser.INTERIORRINGN, 0);
	}
	public INTERSECTS(): TerminalNode {
		return this.getToken(MySqlParser.INTERSECTS, 0);
	}
	public INVISIBLE(): TerminalNode {
		return this.getToken(MySqlParser.INVISIBLE, 0);
	}
	public ISCLOSED(): TerminalNode {
		return this.getToken(MySqlParser.ISCLOSED, 0);
	}
	public ISEMPTY(): TerminalNode {
		return this.getToken(MySqlParser.ISEMPTY, 0);
	}
	public ISNULL(): TerminalNode {
		return this.getToken(MySqlParser.ISNULL, 0);
	}
	public ISSIMPLE(): TerminalNode {
		return this.getToken(MySqlParser.ISSIMPLE, 0);
	}
	public IS_FREE_LOCK(): TerminalNode {
		return this.getToken(MySqlParser.IS_FREE_LOCK, 0);
	}
	public IS_IPV4(): TerminalNode {
		return this.getToken(MySqlParser.IS_IPV4, 0);
	}
	public IS_IPV4_COMPAT(): TerminalNode {
		return this.getToken(MySqlParser.IS_IPV4_COMPAT, 0);
	}
	public IS_IPV4_MAPPED(): TerminalNode {
		return this.getToken(MySqlParser.IS_IPV4_MAPPED, 0);
	}
	public IS_IPV6(): TerminalNode {
		return this.getToken(MySqlParser.IS_IPV6, 0);
	}
	public IS_USED_LOCK(): TerminalNode {
		return this.getToken(MySqlParser.IS_USED_LOCK, 0);
	}
	public LAG(): TerminalNode {
		return this.getToken(MySqlParser.LAG, 0);
	}
	public LAST_INSERT_ID(): TerminalNode {
		return this.getToken(MySqlParser.LAST_INSERT_ID, 0);
	}
	public LAST_VALUE(): TerminalNode {
		return this.getToken(MySqlParser.LAST_VALUE, 0);
	}
	public LCASE(): TerminalNode {
		return this.getToken(MySqlParser.LCASE, 0);
	}
	public LEAD(): TerminalNode {
		return this.getToken(MySqlParser.LEAD, 0);
	}
	public LEAST(): TerminalNode {
		return this.getToken(MySqlParser.LEAST, 0);
	}
	public LEFT(): TerminalNode {
		return this.getToken(MySqlParser.LEFT, 0);
	}
	public LENGTH(): TerminalNode {
		return this.getToken(MySqlParser.LENGTH, 0);
	}
	public LINEFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.LINEFROMTEXT, 0);
	}
	public LINEFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.LINEFROMWKB, 0);
	}
	public LINESTRING(): TerminalNode {
		return this.getToken(MySqlParser.LINESTRING, 0);
	}
	public LINESTRINGFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.LINESTRINGFROMTEXT, 0);
	}
	public LINESTRINGFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.LINESTRINGFROMWKB, 0);
	}
	public LN(): TerminalNode {
		return this.getToken(MySqlParser.LN, 0);
	}
	public LOAD_FILE(): TerminalNode {
		return this.getToken(MySqlParser.LOAD_FILE, 0);
	}
	public LOCATE(): TerminalNode {
		return this.getToken(MySqlParser.LOCATE, 0);
	}
	public LOG(): TerminalNode {
		return this.getToken(MySqlParser.LOG, 0);
	}
	public LOG10(): TerminalNode {
		return this.getToken(MySqlParser.LOG10, 0);
	}
	public LOG2(): TerminalNode {
		return this.getToken(MySqlParser.LOG2, 0);
	}
	public LOWER(): TerminalNode {
		return this.getToken(MySqlParser.LOWER, 0);
	}
	public LPAD(): TerminalNode {
		return this.getToken(MySqlParser.LPAD, 0);
	}
	public LTRIM(): TerminalNode {
		return this.getToken(MySqlParser.LTRIM, 0);
	}
	public MAKEDATE(): TerminalNode {
		return this.getToken(MySqlParser.MAKEDATE, 0);
	}
	public MAKETIME(): TerminalNode {
		return this.getToken(MySqlParser.MAKETIME, 0);
	}
	public MAKE_SET(): TerminalNode {
		return this.getToken(MySqlParser.MAKE_SET, 0);
	}
	public MASTER_POS_WAIT(): TerminalNode {
		return this.getToken(MySqlParser.MASTER_POS_WAIT, 0);
	}
	public MBRCONTAINS(): TerminalNode {
		return this.getToken(MySqlParser.MBRCONTAINS, 0);
	}
	public MBRDISJOINT(): TerminalNode {
		return this.getToken(MySqlParser.MBRDISJOINT, 0);
	}
	public MBREQUAL(): TerminalNode {
		return this.getToken(MySqlParser.MBREQUAL, 0);
	}
	public MBRINTERSECTS(): TerminalNode {
		return this.getToken(MySqlParser.MBRINTERSECTS, 0);
	}
	public MBROVERLAPS(): TerminalNode {
		return this.getToken(MySqlParser.MBROVERLAPS, 0);
	}
	public MBRTOUCHES(): TerminalNode {
		return this.getToken(MySqlParser.MBRTOUCHES, 0);
	}
	public MBRWITHIN(): TerminalNode {
		return this.getToken(MySqlParser.MBRWITHIN, 0);
	}
	public MD5(): TerminalNode {
		return this.getToken(MySqlParser.MD5, 0);
	}
	public MICROSECOND(): TerminalNode {
		return this.getToken(MySqlParser.MICROSECOND, 0);
	}
	public MINUTE(): TerminalNode {
		return this.getToken(MySqlParser.MINUTE, 0);
	}
	public MLINEFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.MLINEFROMTEXT, 0);
	}
	public MLINEFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.MLINEFROMWKB, 0);
	}
	public MOD(): TerminalNode {
		return this.getToken(MySqlParser.MOD, 0);
	}
	public MONTH(): TerminalNode {
		return this.getToken(MySqlParser.MONTH, 0);
	}
	public MONTHNAME(): TerminalNode {
		return this.getToken(MySqlParser.MONTHNAME, 0);
	}
	public MPOINTFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.MPOINTFROMTEXT, 0);
	}
	public MPOINTFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.MPOINTFROMWKB, 0);
	}
	public MPOLYFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.MPOLYFROMTEXT, 0);
	}
	public MPOLYFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.MPOLYFROMWKB, 0);
	}
	public MULTILINESTRING(): TerminalNode {
		return this.getToken(MySqlParser.MULTILINESTRING, 0);
	}
	public MULTILINESTRINGFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0);
	}
	public MULTILINESTRINGFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0);
	}
	public MULTIPOINT(): TerminalNode {
		return this.getToken(MySqlParser.MULTIPOINT, 0);
	}
	public MULTIPOINTFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.MULTIPOINTFROMTEXT, 0);
	}
	public MULTIPOINTFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.MULTIPOINTFROMWKB, 0);
	}
	public MULTIPOLYGON(): TerminalNode {
		return this.getToken(MySqlParser.MULTIPOLYGON, 0);
	}
	public MULTIPOLYGONFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0);
	}
	public MULTIPOLYGONFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0);
	}
	public NAME_CONST(): TerminalNode {
		return this.getToken(MySqlParser.NAME_CONST, 0);
	}
	public NTH_VALUE(): TerminalNode {
		return this.getToken(MySqlParser.NTH_VALUE, 0);
	}
	public NTILE(): TerminalNode {
		return this.getToken(MySqlParser.NTILE, 0);
	}
	public NULLIF(): TerminalNode {
		return this.getToken(MySqlParser.NULLIF, 0);
	}
	public NUMGEOMETRIES(): TerminalNode {
		return this.getToken(MySqlParser.NUMGEOMETRIES, 0);
	}
	public NUMINTERIORRINGS(): TerminalNode {
		return this.getToken(MySqlParser.NUMINTERIORRINGS, 0);
	}
	public NUMPOINTS(): TerminalNode {
		return this.getToken(MySqlParser.NUMPOINTS, 0);
	}
	public OCT(): TerminalNode {
		return this.getToken(MySqlParser.OCT, 0);
	}
	public OCTET_LENGTH(): TerminalNode {
		return this.getToken(MySqlParser.OCTET_LENGTH, 0);
	}
	public ORD(): TerminalNode {
		return this.getToken(MySqlParser.ORD, 0);
	}
	public OVERLAPS(): TerminalNode {
		return this.getToken(MySqlParser.OVERLAPS, 0);
	}
	public PERCENT_RANK(): TerminalNode {
		return this.getToken(MySqlParser.PERCENT_RANK, 0);
	}
	public PERIOD_ADD(): TerminalNode {
		return this.getToken(MySqlParser.PERIOD_ADD, 0);
	}
	public PERIOD_DIFF(): TerminalNode {
		return this.getToken(MySqlParser.PERIOD_DIFF, 0);
	}
	public PI(): TerminalNode {
		return this.getToken(MySqlParser.PI, 0);
	}
	public POINT(): TerminalNode {
		return this.getToken(MySqlParser.POINT, 0);
	}
	public POINTFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.POINTFROMTEXT, 0);
	}
	public POINTFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.POINTFROMWKB, 0);
	}
	public POINTN(): TerminalNode {
		return this.getToken(MySqlParser.POINTN, 0);
	}
	public POLYFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.POLYFROMTEXT, 0);
	}
	public POLYFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.POLYFROMWKB, 0);
	}
	public POLYGON(): TerminalNode {
		return this.getToken(MySqlParser.POLYGON, 0);
	}
	public POLYGONFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.POLYGONFROMTEXT, 0);
	}
	public POLYGONFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.POLYGONFROMWKB, 0);
	}
	public POSITION(): TerminalNode {
		return this.getToken(MySqlParser.POSITION, 0);
	}
	public POW(): TerminalNode {
		return this.getToken(MySqlParser.POW, 0);
	}
	public POWER(): TerminalNode {
		return this.getToken(MySqlParser.POWER, 0);
	}
	public QUARTER(): TerminalNode {
		return this.getToken(MySqlParser.QUARTER, 0);
	}
	public QUOTE(): TerminalNode {
		return this.getToken(MySqlParser.QUOTE, 0);
	}
	public RADIANS(): TerminalNode {
		return this.getToken(MySqlParser.RADIANS, 0);
	}
	public RAND(): TerminalNode {
		return this.getToken(MySqlParser.RAND, 0);
	}
	public RANDOM(): TerminalNode {
		return this.getToken(MySqlParser.RANDOM, 0);
	}
	public RANK(): TerminalNode {
		return this.getToken(MySqlParser.RANK, 0);
	}
	public RANDOM_BYTES(): TerminalNode {
		return this.getToken(MySqlParser.RANDOM_BYTES, 0);
	}
	public RELEASE_LOCK(): TerminalNode {
		return this.getToken(MySqlParser.RELEASE_LOCK, 0);
	}
	public REVERSE(): TerminalNode {
		return this.getToken(MySqlParser.REVERSE, 0);
	}
	public RIGHT(): TerminalNode {
		return this.getToken(MySqlParser.RIGHT, 0);
	}
	public ROUND(): TerminalNode {
		return this.getToken(MySqlParser.ROUND, 0);
	}
	public ROW_COUNT(): TerminalNode {
		return this.getToken(MySqlParser.ROW_COUNT, 0);
	}
	public ROW_NUMBER(): TerminalNode {
		return this.getToken(MySqlParser.ROW_NUMBER, 0);
	}
	public RPAD(): TerminalNode {
		return this.getToken(MySqlParser.RPAD, 0);
	}
	public RTRIM(): TerminalNode {
		return this.getToken(MySqlParser.RTRIM, 0);
	}
	public SCHEMA(): TerminalNode {
		return this.getToken(MySqlParser.SCHEMA, 0);
	}
	public SECOND(): TerminalNode {
		return this.getToken(MySqlParser.SECOND, 0);
	}
	public SEC_TO_TIME(): TerminalNode {
		return this.getToken(MySqlParser.SEC_TO_TIME, 0);
	}
	public SESSION_USER(): TerminalNode {
		return this.getToken(MySqlParser.SESSION_USER, 0);
	}
	public SESSION_VARIABLES_ADMIN(): TerminalNode {
		return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
	}
	public SHA(): TerminalNode {
		return this.getToken(MySqlParser.SHA, 0);
	}
	public SHA1(): TerminalNode {
		return this.getToken(MySqlParser.SHA1, 0);
	}
	public SHA2(): TerminalNode {
		return this.getToken(MySqlParser.SHA2, 0);
	}
	public SIGN(): TerminalNode {
		return this.getToken(MySqlParser.SIGN, 0);
	}
	public SIN(): TerminalNode {
		return this.getToken(MySqlParser.SIN, 0);
	}
	public SLEEP(): TerminalNode {
		return this.getToken(MySqlParser.SLEEP, 0);
	}
	public SOUNDEX(): TerminalNode {
		return this.getToken(MySqlParser.SOUNDEX, 0);
	}
	public SQL_THREAD_WAIT_AFTER_GTIDS(): TerminalNode {
		return this.getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0);
	}
	public SQRT(): TerminalNode {
		return this.getToken(MySqlParser.SQRT, 0);
	}
	public SRID(): TerminalNode {
		return this.getToken(MySqlParser.SRID, 0);
	}
	public STARTPOINT(): TerminalNode {
		return this.getToken(MySqlParser.STARTPOINT, 0);
	}
	public STRCMP(): TerminalNode {
		return this.getToken(MySqlParser.STRCMP, 0);
	}
	public STR_TO_DATE(): TerminalNode {
		return this.getToken(MySqlParser.STR_TO_DATE, 0);
	}
	public ST_AREA(): TerminalNode {
		return this.getToken(MySqlParser.ST_AREA, 0);
	}
	public ST_ASBINARY(): TerminalNode {
		return this.getToken(MySqlParser.ST_ASBINARY, 0);
	}
	public ST_ASTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_ASTEXT, 0);
	}
	public ST_ASWKB(): TerminalNode {
		return this.getToken(MySqlParser.ST_ASWKB, 0);
	}
	public ST_ASWKT(): TerminalNode {
		return this.getToken(MySqlParser.ST_ASWKT, 0);
	}
	public ST_BUFFER(): TerminalNode {
		return this.getToken(MySqlParser.ST_BUFFER, 0);
	}
	public ST_CENTROID(): TerminalNode {
		return this.getToken(MySqlParser.ST_CENTROID, 0);
	}
	public ST_CONTAINS(): TerminalNode {
		return this.getToken(MySqlParser.ST_CONTAINS, 0);
	}
	public ST_CROSSES(): TerminalNode {
		return this.getToken(MySqlParser.ST_CROSSES, 0);
	}
	public ST_DIFFERENCE(): TerminalNode {
		return this.getToken(MySqlParser.ST_DIFFERENCE, 0);
	}
	public ST_DIMENSION(): TerminalNode {
		return this.getToken(MySqlParser.ST_DIMENSION, 0);
	}
	public ST_DISJOINT(): TerminalNode {
		return this.getToken(MySqlParser.ST_DISJOINT, 0);
	}
	public ST_DISTANCE(): TerminalNode {
		return this.getToken(MySqlParser.ST_DISTANCE, 0);
	}
	public ST_ENDPOINT(): TerminalNode {
		return this.getToken(MySqlParser.ST_ENDPOINT, 0);
	}
	public ST_ENVELOPE(): TerminalNode {
		return this.getToken(MySqlParser.ST_ENVELOPE, 0);
	}
	public ST_EQUALS(): TerminalNode {
		return this.getToken(MySqlParser.ST_EQUALS, 0);
	}
	public ST_EXTERIORRING(): TerminalNode {
		return this.getToken(MySqlParser.ST_EXTERIORRING, 0);
	}
	public ST_GEOMCOLLFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0);
	}
	public ST_GEOMCOLLFROMTXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0);
	}
	public ST_GEOMCOLLFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0);
	}
	public ST_GEOMETRYCOLLECTIONFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0);
	}
	public ST_GEOMETRYCOLLECTIONFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0);
	}
	public ST_GEOMETRYFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0);
	}
	public ST_GEOMETRYFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0);
	}
	public ST_GEOMETRYN(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMETRYN, 0);
	}
	public ST_GEOMETRYTYPE(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMETRYTYPE, 0);
	}
	public ST_GEOMFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMFROMTEXT, 0);
	}
	public ST_GEOMFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.ST_GEOMFROMWKB, 0);
	}
	public ST_INTERIORRINGN(): TerminalNode {
		return this.getToken(MySqlParser.ST_INTERIORRINGN, 0);
	}
	public ST_INTERSECTION(): TerminalNode {
		return this.getToken(MySqlParser.ST_INTERSECTION, 0);
	}
	public ST_INTERSECTS(): TerminalNode {
		return this.getToken(MySqlParser.ST_INTERSECTS, 0);
	}
	public ST_ISCLOSED(): TerminalNode {
		return this.getToken(MySqlParser.ST_ISCLOSED, 0);
	}
	public ST_ISEMPTY(): TerminalNode {
		return this.getToken(MySqlParser.ST_ISEMPTY, 0);
	}
	public ST_ISSIMPLE(): TerminalNode {
		return this.getToken(MySqlParser.ST_ISSIMPLE, 0);
	}
	public ST_LINEFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_LINEFROMTEXT, 0);
	}
	public ST_LINEFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.ST_LINEFROMWKB, 0);
	}
	public ST_LINESTRINGFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0);
	}
	public ST_LINESTRINGFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0);
	}
	public ST_NUMGEOMETRIES(): TerminalNode {
		return this.getToken(MySqlParser.ST_NUMGEOMETRIES, 0);
	}
	public ST_NUMINTERIORRING(): TerminalNode {
		return this.getToken(MySqlParser.ST_NUMINTERIORRING, 0);
	}
	public ST_NUMINTERIORRINGS(): TerminalNode {
		return this.getToken(MySqlParser.ST_NUMINTERIORRINGS, 0);
	}
	public ST_NUMPOINTS(): TerminalNode {
		return this.getToken(MySqlParser.ST_NUMPOINTS, 0);
	}
	public ST_OVERLAPS(): TerminalNode {
		return this.getToken(MySqlParser.ST_OVERLAPS, 0);
	}
	public ST_POINTFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_POINTFROMTEXT, 0);
	}
	public ST_POINTFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.ST_POINTFROMWKB, 0);
	}
	public ST_POINTN(): TerminalNode {
		return this.getToken(MySqlParser.ST_POINTN, 0);
	}
	public ST_POLYFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_POLYFROMTEXT, 0);
	}
	public ST_POLYFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.ST_POLYFROMWKB, 0);
	}
	public ST_POLYGONFROMTEXT(): TerminalNode {
		return this.getToken(MySqlParser.ST_POLYGONFROMTEXT, 0);
	}
	public ST_POLYGONFROMWKB(): TerminalNode {
		return this.getToken(MySqlParser.ST_POLYGONFROMWKB, 0);
	}
	public ST_SRID(): TerminalNode {
		return this.getToken(MySqlParser.ST_SRID, 0);
	}
	public ST_STARTPOINT(): TerminalNode {
		return this.getToken(MySqlParser.ST_STARTPOINT, 0);
	}
	public ST_SYMDIFFERENCE(): TerminalNode {
		return this.getToken(MySqlParser.ST_SYMDIFFERENCE, 0);
	}
	public ST_TOUCHES(): TerminalNode {
		return this.getToken(MySqlParser.ST_TOUCHES, 0);
	}
	public ST_UNION(): TerminalNode {
		return this.getToken(MySqlParser.ST_UNION, 0);
	}
	public ST_WITHIN(): TerminalNode {
		return this.getToken(MySqlParser.ST_WITHIN, 0);
	}
	public ST_X(): TerminalNode {
		return this.getToken(MySqlParser.ST_X, 0);
	}
	public ST_Y(): TerminalNode {
		return this.getToken(MySqlParser.ST_Y, 0);
	}
	public SUBDATE(): TerminalNode {
		return this.getToken(MySqlParser.SUBDATE, 0);
	}
	public SUBSTRING_INDEX(): TerminalNode {
		return this.getToken(MySqlParser.SUBSTRING_INDEX, 0);
	}
	public SUBTIME(): TerminalNode {
		return this.getToken(MySqlParser.SUBTIME, 0);
	}
	public SYSTEM_USER(): TerminalNode {
		return this.getToken(MySqlParser.SYSTEM_USER, 0);
	}
	public TAN(): TerminalNode {
		return this.getToken(MySqlParser.TAN, 0);
	}
	public TIME(): TerminalNode {
		return this.getToken(MySqlParser.TIME, 0);
	}
	public TIMEDIFF(): TerminalNode {
		return this.getToken(MySqlParser.TIMEDIFF, 0);
	}
	public TIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.TIMESTAMP, 0);
	}
	public TIMESTAMPADD(): TerminalNode {
		return this.getToken(MySqlParser.TIMESTAMPADD, 0);
	}
	public TIMESTAMPDIFF(): TerminalNode {
		return this.getToken(MySqlParser.TIMESTAMPDIFF, 0);
	}
	public TIME_FORMAT(): TerminalNode {
		return this.getToken(MySqlParser.TIME_FORMAT, 0);
	}
	public TIME_TO_SEC(): TerminalNode {
		return this.getToken(MySqlParser.TIME_TO_SEC, 0);
	}
	public TOUCHES(): TerminalNode {
		return this.getToken(MySqlParser.TOUCHES, 0);
	}
	public TO_BASE64(): TerminalNode {
		return this.getToken(MySqlParser.TO_BASE64, 0);
	}
	public TO_DAYS(): TerminalNode {
		return this.getToken(MySqlParser.TO_DAYS, 0);
	}
	public TO_SECONDS(): TerminalNode {
		return this.getToken(MySqlParser.TO_SECONDS, 0);
	}
	public UCASE(): TerminalNode {
		return this.getToken(MySqlParser.UCASE, 0);
	}
	public UNCOMPRESS(): TerminalNode {
		return this.getToken(MySqlParser.UNCOMPRESS, 0);
	}
	public UNCOMPRESSED_LENGTH(): TerminalNode {
		return this.getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0);
	}
	public UNHEX(): TerminalNode {
		return this.getToken(MySqlParser.UNHEX, 0);
	}
	public UNIX_TIMESTAMP(): TerminalNode {
		return this.getToken(MySqlParser.UNIX_TIMESTAMP, 0);
	}
	public UPDATEXML(): TerminalNode {
		return this.getToken(MySqlParser.UPDATEXML, 0);
	}
	public UPPER(): TerminalNode {
		return this.getToken(MySqlParser.UPPER, 0);
	}
	public UUID(): TerminalNode {
		return this.getToken(MySqlParser.UUID, 0);
	}
	public UUID_SHORT(): TerminalNode {
		return this.getToken(MySqlParser.UUID_SHORT, 0);
	}
	public VALIDATE_PASSWORD_STRENGTH(): TerminalNode {
		return this.getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0);
	}
	public VERSION(): TerminalNode {
		return this.getToken(MySqlParser.VERSION, 0);
	}
	public VISIBLE(): TerminalNode {
		return this.getToken(MySqlParser.VISIBLE, 0);
	}
	public WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(): TerminalNode {
		return this.getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0);
	}
	public WEEK(): TerminalNode {
		return this.getToken(MySqlParser.WEEK, 0);
	}
	public WEEKDAY(): TerminalNode {
		return this.getToken(MySqlParser.WEEKDAY, 0);
	}
	public WEEKOFYEAR(): TerminalNode {
		return this.getToken(MySqlParser.WEEKOFYEAR, 0);
	}
	public WEIGHT_STRING(): TerminalNode {
		return this.getToken(MySqlParser.WEIGHT_STRING, 0);
	}
	public WITHIN(): TerminalNode {
		return this.getToken(MySqlParser.WITHIN, 0);
	}
	public YEAR(): TerminalNode {
		return this.getToken(MySqlParser.YEAR, 0);
	}
	public YEARWEEK(): TerminalNode {
		return this.getToken(MySqlParser.YEARWEEK, 0);
	}
	public Y_FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.Y_FUNCTION, 0);
	}
	public X_FUNCTION(): TerminalNode {
		return this.getToken(MySqlParser.X_FUNCTION, 0);
	}
	public JSON_ARRAY(): TerminalNode {
		return this.getToken(MySqlParser.JSON_ARRAY, 0);
	}
	public JSON_OBJECT(): TerminalNode {
		return this.getToken(MySqlParser.JSON_OBJECT, 0);
	}
	public JSON_QUOTE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_QUOTE, 0);
	}
	public JSON_CONTAINS(): TerminalNode {
		return this.getToken(MySqlParser.JSON_CONTAINS, 0);
	}
	public JSON_CONTAINS_PATH(): TerminalNode {
		return this.getToken(MySqlParser.JSON_CONTAINS_PATH, 0);
	}
	public JSON_EXTRACT(): TerminalNode {
		return this.getToken(MySqlParser.JSON_EXTRACT, 0);
	}
	public JSON_KEYS(): TerminalNode {
		return this.getToken(MySqlParser.JSON_KEYS, 0);
	}
	public JSON_OVERLAPS(): TerminalNode {
		return this.getToken(MySqlParser.JSON_OVERLAPS, 0);
	}
	public JSON_SEARCH(): TerminalNode {
		return this.getToken(MySqlParser.JSON_SEARCH, 0);
	}
	public JSON_VALUE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_VALUE, 0);
	}
	public JSON_ARRAY_APPEND(): TerminalNode {
		return this.getToken(MySqlParser.JSON_ARRAY_APPEND, 0);
	}
	public JSON_ARRAY_INSERT(): TerminalNode {
		return this.getToken(MySqlParser.JSON_ARRAY_INSERT, 0);
	}
	public JSON_INSERT(): TerminalNode {
		return this.getToken(MySqlParser.JSON_INSERT, 0);
	}
	public JSON_MERGE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_MERGE, 0);
	}
	public JSON_MERGE_PATCH(): TerminalNode {
		return this.getToken(MySqlParser.JSON_MERGE_PATCH, 0);
	}
	public JSON_MERGE_PRESERVE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_MERGE_PRESERVE, 0);
	}
	public JSON_REMOVE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_REMOVE, 0);
	}
	public JSON_REPLACE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_REPLACE, 0);
	}
	public JSON_SET(): TerminalNode {
		return this.getToken(MySqlParser.JSON_SET, 0);
	}
	public JSON_UNQUOTE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_UNQUOTE, 0);
	}
	public JSON_DEPTH(): TerminalNode {
		return this.getToken(MySqlParser.JSON_DEPTH, 0);
	}
	public JSON_LENGTH(): TerminalNode {
		return this.getToken(MySqlParser.JSON_LENGTH, 0);
	}
	public JSON_TYPE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_TYPE, 0);
	}
	public JSON_VALID(): TerminalNode {
		return this.getToken(MySqlParser.JSON_VALID, 0);
	}
	public JSON_TABLE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_TABLE, 0);
	}
	public JSON_SCHEMA_VALID(): TerminalNode {
		return this.getToken(MySqlParser.JSON_SCHEMA_VALID, 0);
	}
	public JSON_SCHEMA_VALIDATION_REPORT(): TerminalNode {
		return this.getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0);
	}
	public JSON_PRETTY(): TerminalNode {
		return this.getToken(MySqlParser.JSON_PRETTY, 0);
	}
	public JSON_STORAGE_FREE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_STORAGE_FREE, 0);
	}
	public JSON_STORAGE_SIZE(): TerminalNode {
		return this.getToken(MySqlParser.JSON_STORAGE_SIZE, 0);
	}
	public JSON_ARRAYAGG(): TerminalNode {
		return this.getToken(MySqlParser.JSON_ARRAYAGG, 0);
	}
	public JSON_OBJECTAGG(): TerminalNode {
		return this.getToken(MySqlParser.JSON_OBJECTAGG, 0);
	}
    public get ruleIndex(): number {
    	return MySqlParser.RULE_functionNameBase;
	}
	public enterRule(listener: MySqlParserListener): void {
	    if(listener.enterFunctionNameBase) {
	 		listener.enterFunctionNameBase(this);
		}
	}
	public exitRule(listener: MySqlParserListener): void {
	    if(listener.exitFunctionNameBase) {
	 		listener.exitFunctionNameBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: MySqlParserVisitor<Result>): Result {
		if (visitor.visitFunctionNameBase) {
			return visitor.visitFunctionNameBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
